##2009-11-25 20:46:30##

##notes##

JVS Limit Bot V0.02 comenzada a desarrollar en Marzo de 2009

##dll##


##bankroll##
0.000000

##defcon##
0.000000

##rake##
0.000000

##nit##
1000

##f$alli##
   0                                 // default is: do not alli
   

##f$swag##
   0                                 // default is: no stated wagers

##f$srai##
   0                                 // default is: no stated raises

##f$rais##
//Seccion en la que definimos cuando el bot debe hacer rais

f$Fold== 1 ? 0 :                                  // fold rules
f$norais ? 0 : 
[prwin >= 1.00 && prlos <= 0.00] ? 1 :

[prwin >= 0.98] ? 1 :
[prlos <= 0.02] ? 1 :





 [(br==2 || br==3) && f$evrais > 0 && f$evrais > f$evcall]
|| [f$bet && !f$Fold]


|| [f$cbet && br == 2]


//Subidas con dobles parejas
 //Board has No Pair and you have Top two pairs
|| [ nrankedcommon==1 && istwopair && (pokerval&15)<((pokerval>>4)&15) && !f$Fold && !f$norais] 
//Board has No Pair and you have Top and bottom pair
|| [ nrankedcommon==1 && istwopair && (pokerval&15)<((pokerval>>16)&15) && (pokerval&15)>((pokerval>>4)&15)  && !f$Fold  && !f$norais] 
//Board has No Pair and you have Middle two pairs
|| [ nrankedcommon==1 && istwopair && (pokerval&15)>((pokerval>>8)&15) && (pokerval&15)>((pokerval>>4)&15) && !(rankloplayer==ranklocommon)  && !f$Fold  && !f$norais]
//Rainbow board
|| [ istwopair && f$SAFEBOARD  && !f$Fold  && !f$norais]








// Blind Aggression
//|| [ br == 1 && f$defendblinds>1 && !f$Fold] 
|| [ br==1 && f$stealblinds>1 && !f$Fold]


|| [ prwin >= 1.00 ]                          // dead nuts

|| [ prtie >= 1.00 ]                          // sure push

|| [ prlos <= 0.00 ]                          // can't lose

|| [ nhandshi==0 ]  



//Robo de ciegas
|| [nopponentsseated == 9 && f$robarciegas && !f$raisrondaactual]

//Si la funcion f$callingraising indica que hagamos rais
|| [br==1 && f$callingraising == 2 && !didraisround1 && f$callbets >= 1 && !f$Fold]
||[br==1 && f$callingraising == 2 && !didraisround1 && f$callbets >= 1 && dealposition ==2 && !f$Fold]

//Si la funcion f$callraislimpers indica que hagamos rais
|| [br==1 && f$callraislimpers == 2 && !didraisround1 && f$callbets <= 1 && !f$Fold]

//Pre flop Si somos el primero en entrar en el bote hacemos raise con las siguientes manos
//|| [br == 1 && f$primeroenentrar && !didrais && !f$Fold]

//Pre Flop hacemos una tercera apuesta en los siguientes casos
|| [br==1 && f$terceraapuesta && !didrais && !f$Fold]

|| [br == 1 && f$islistrais && !f$Fold] //Pre-flop y tenemos la mano definida en la funcion f$islistrais y no se cumple ningun caso de la funcion fold


//Del flop en adelante si tenemos un full subimos siempre
|| [ br>=2 && pokerval >= fullhouse && pokervalcommon < fullhouse && f$strength_fullhouse >=2 && !f$Fold]


// En el flop subimos siempre que tengamos una mano monstruo y no se de ninguna de las reglas para abandonar
|| [br==2 && f$monstruo && !f$Fold  && !f$norais]

//En el flop si tenemos toppair o over pair subimos una vez si resuben hacemos call
|| [br==2 && f$toppairoverpair > 3 && !didraisround2 && !f$Fold && !f$norais]
|| [br==3 && f$toppairoverpair > 3 && !didraisround3 && nbetsround2 <= 1 && !f$Fold  && !f$norais]
|| [br==4 && f$toppairoverpair > 3 && !didraisround4 && nbetsround3 <= 2 && !f$Fold  && !f$norais]


//Juego con parejas medias

|| [br==2 && f$midpair && betposition==nopponentsplaying && call == 0 && !didraisround2 && !f$Fold && !f$norais]
|| [br==3 && f$midpair && betposition==nopponentsplaying && call == 0 && !didraisround3 && nbetsround2 <= 0.5 && !f$Fold  && !f$norais]
|| [br==4 && f$midpair && betposition==nopponentsplaying && call == 0 && !didraisround4 && nbetsround3 <= 1 && !f$Fold  && !f$norais]



//sUBIR UNA VEZ CON DOBLES PAREJAS
|| [br==2 && f$strength_twopair >= 4 && istwopair && !f$raisrondaactual && !f$Fold && !f$norais]
|| [br==3 && nbetsround2 <= 1 && f$strength_twopair >= 4 && istwopair && !f$raisrondaactual && !f$Fold && !f$norais]
|| [br==4 && nbetsround3 <= 2 && f$strength_twopair >= 4 && istwopair && !f$raisrondaactual && !f$Fold && !f$norais]

|| [br == 2 && pokerval == threeofakind && ispair]

//Si tenemos un proyecto mostruo subimos siempre
|| [br==2 && f$proyectomonstruo && !f$Fold  && !f$norais] 


//En el turn si no tenemos la iniciativa subimos con dos parejas o algo mejor
|| [br==3 && pokerval >= threeofakind && pokervalcommon <twopair && f$openboard && !f$Fold  && !f$norais]

//Contra 2 o mas subidas en el turn subimos con 2 pares o algo mejor si no hay posibilidad de escalera ni color
|| [br==3 && f$callbets>= 2 && pokerval>= threeofakind && pokervalcommon <twopair && f$openboard && !f$Fold  && !f$norais]

//En el river si tenemos la iniciativa subimos de nuevo si no hay posibilidad de escalera ni color, si la hay igualamos
|| [br==4 && f$iniciativa && (pokerval >= threeofakind || f$toppairoverpair) && pokervalcommon <twopair && f$openboard && call<=0 && !f$Fold && !f$norais]


//En el river si tenemos la iniciativa con una subida previa subimos de nuevo si no hay posibilidad de escalera ni color con dos pares  o mejor, si la hay igualamos
|| [br==4 && f$iniciativa && (pokerval >= threeofakind) && pokervalcommon <twopair && f$openboard && call >0 && !f$Fold && !f$norais]

//En el river sin iniciativa subimos de nuevo si no hay posibilidad de escalera ni color, si la hay igualamos
|| [br==4 && !f$iniciativa && (pokerval >= threeofakind) && pokervalcommon <twopair && f$openboard && !f$Fold && !f$norais]

//En el river si tenemos la iniciativa con una subida previa subimos de nuevo si no hay posibilidad de escalera ni color con dos pares  o mejor, si la hay igualamos
|| [br==4 && !f$iniciativa && (pokerval >= threeofakind) && pokervalcommon <twopair && f$openboard && !f$Fold && !f$norais]



//Subida por valor con proyectos en el flop
|| [f$subidaporvalor]


//Heads up en el flop

|| [f$headsupflop == 2 && !f$raisrondaactual]

//Definimos el juego con escalera, color y full desde el flop en adelante
|| [f$juegoconescaleracolorfull == 3]
|| [f$juegoconescaleracolorfull == 2 && !f$raisrondaactual] 

##f$call##
//Sección en la que definimos cuando el bot debe hacer call

 //Por defecto el bot no hace call

( call<=0 ) ? 1 :
( f$Fold==1 ) ? 0 : 


 [ prwin >= 1.00 ]                                   // dead nuts

|| [ prtie >= 1.00 ]                                   // sure push

|| [ prlos <= 0.00 ]                                   // can't lose

|| [ nhandshi<=1 ]                                     // showdown beats (call near nuts)

|| [ prwin+prtie>=.990 ]                               // call near nuts




//Call con 2 parejas
|| [br>=2 && !ispair && pokerval == twopair && nrankedcommon== 1 && !f$Fold]

//Si tenemos un valor esperado positivo hacemos call
|| [(br==2 || br==3) && f$evcall > 0]

//Pre flop blind plays
     //|| [ br == 1 && f$defendblinds && !f$Fold ]
     || [ br == 1 && f$stealblinds && !f$Fold]



|| [br >= 2 && pokerval >= twopair && pokervalcommon < twopair && prwin >= 0.75]

|| [f$callrais && !f$Fold]

//Small blind call cuando no ha subido nadie
|| [br==1 && f$sblindcall && !f$Fold]


//Si la funcion f$callingraising indica que hagamos call, siempre y cuando haya algun rais
|| [br==1 && f$callingraising == 1 && f$callbets >=	1 && !f$Fold && !f$algunaaccionrondaactual]
|| [br==1 && f$callingraising == 1 && dealposition == 2 && f$callbets >=	 1 && !f$Fold && !f$algunaaccionrondaactual]

//Si la funcion f$callraislimpers indica que hagamos call
|| [br == 1 && f$callraislimpers == 1 && f$callbets <= 1 && !f$Fold && !f$algunaaccionrondaactual]


//Si hemos hecho rais y call es solo una apuesta call
|| [didrais && f$callbets <=1 && !f$Fold]


|| [br ==1 && f$islistcall && !f$Fold] //Pre-flop y tenemos definida la mano en la funcion islist call y no se cumple ningun caso de la funcion fold

|| [ (br == 2 || br==3) && f$potpositivo]


//En el flop si tenemos toppair o over pair subimos una vez si resuben hacemos call
|| [br>=2 && f$toppairoverpair && !f$Fold]


//Si ya hemos subido con dobles igualamos
|| [f$strength_twopair >= 3 && istwopair && f$raisrondaactual  && !f$Fold]

//Si tenemos un proyecto de color o escalera abierta apostamos una vez si suben igualamos
|| [(br==2 || br == 3) && (f$proyectocoloroescaleraabierta && f$potpositivo) && f$callbets <=1 && !f$Fold]

//En el turn igualamos la apuesta con proyecto monstruo, proyecto color, proyecto escalera abierta si no tenemos iniciativa
|| [br==3 && f$potpositivo && !f$iniciativa && ((f$proyectomonstruo || f$proyectocoloroescaleraabierta) && f$potpositivo) && !f$Fold]

//En el turn si tenemos la iniciativa igualamos con par mas alto sobrepareja, proyectos fuertes

|| [br==3 && f$iniciativa && (f$toppairoverpair || (f$proyectocoloroescaleraabierta && f$potpositivo)) && !f$Fold]

//En el turn si no tenemos la iniciativa igualamos con par mas alto sobrepareja, proyectos fuertes

|| [br==3 && !f$iniciativa && (f$toppairoverpair || (f$proyectocoloroescaleraabierta && f$potpositivo)) && !f$Fold]


//En el turn con dos parejas o trio si no esta abierta la mesa hacemos call
|| [br==3 && (pokerval == twopair || pokerval == threeofakind) && !f$Fold]


//En el turn si tenemos escalera pero podemos tener riesgo de color o full hacemos call
|| [br==3 && pokerval == straight && pokervalcommon <straight && (nsuitedcommon >=3 || nrankedcommon >=2) && !f$Fold]


//En el turn si tenemos color y tenemos riesgo de full hacemos call
|| [br==3 && pokerval == flush && pokervalcommon <flush && nrankedcommon >=2 && !f$Fold]


//Contra 2 o mas subidas en el turn igualamos con manos fuertes
|| [br==3 && f$callbets >=2 && ((f$proyectomonstruo || f$proyectocoloroescaleraabierta && f$potpositivo) || (pokerval >=twopair && pokervalcommon < twopair)) && !f$Fold]

//En el river si tenemos la iniciativa subimos de nuevo si no hay posibilidad de escalera ni color, si la hay igualamos
|| [br==4 && f$iniciativa && (pokerval >= twopair || f$toppairoverpair) && pokervalcommon <twopair && !f$openboard && f$callbets<=1 && !f$Fold] 

//En el river si tenemos la iniciativa con una subida previa subimos de nuevo si no hay posibilidad de escalera ni color con dos pares  o mejor, si la hay igualamos
|| [br==4 && f$iniciativa && (pokerval >= twopair) && pokervalcommon <twopair && !f$openboard && call>0 && !f$Fold]

//En el river sin iniciativa subimos de nuevo si no hay posibilidad de escalera ni color, si la hay igualamos
|| [br==4 && !f$iniciativa && (pokerval >= twopair || f$toppairoverpair) && pokervalcommon <twopair && f$openboard && didraisround4 && call >0 && !f$Fold]

//En el river si tenemos la iniciativa con una subida previa subimos de nuevo si no hay posibilidad de escalera ni color con dos pares  o mejor, si la hay igualamos
|| [br==4 && !f$iniciativa && (pokerval >= twopair) && pokervalcommon <twopair && !f$openboard && !f$Fold]

|| [br==4 && pokerval>= twopair && pokervalcommon < twopair && !f$Fold]

|| [br==4 && f$toppairoverpair && f$openboard && !f$Fold]


|| [br==4 && pokerval >=twopair && pokervalcommon <twopair && !f$Fold]

|| [br==4 && pokerval >= fullhouse && !f$Fold]

|| [br ==4 && f$toppairoverpair && f$callbets <=1 && !f$Fold]

//Definimos el juego con escalera, color y full desde el flop en adelante
|| [f$juegoconescaleracolorfull == 1 && f$callbets < 2]

##f$prefold##
   0                                  // default is: do not pre-fold any cards.

##f$rebuy##


##f$delay##
   0                                  // default is: do not delay the action.

##f$chat##
   0                                  // default is: do not chat.

##f$P##
// Number of opponents for the prwin simulation.

(nopponentsplaying<=0) ? 1 :

nopponentsplaying + defcon*nopponentsfolded

##f$play##
//1 ? -1 :
//(elapsed%4)              ? -1 :     // disabled 3 out of 4 seconds 
// (br==2 && balance > 150) ? 0 :
//------------------------------------------------------------------------ 
//************************************************************************** 
                         // leave the table 
//------------------------------------------------------------------------ 
// LEAVE RULE - Game broken up 
1                                   // 0=off 1=on 
&& issittingout                     // sitting out 
&& nopponentsseated<=2               // super short handed
&& (br==2 || br==3)                 // flop or turn  
? -2 :                              // leave the table 
//------------------------------------------------------------------------ 

// LEAVE RULE - Wait around, but get out before you get booted 
1                                   // 0=off 1=on 
&& issittingout                     // sitting out 
&& elapsedauto>=100                 // dynamic rule  
     *nopponentsseated              // 100 seconds times opponents dealt
&& (br==2 || br==3)                 // flop or turn  
? -2 :                              // leave the table 
//------------------------------------------------------------------------ 
// SITIN RULE - Based on players 
1                                   // 0=off 1=on 
&& issittingout                     // sitting out
&& (br==2 || br==3)                 // flop or turn 
&& nchairsdealtright==2             // about to be big blind 
&& nopponentsseated>=6               // 5 or more opponents
 
?  1 :                              // sitin 
//------------------------------------------------------------------------ 

// SITOUT RULE - Based on players 
1                                   // 0=off 1=on 
&& issittingin                      // sitting in
&& br==2 && nopponentsseated<=5      // Getting short          
?  0 :                              // sitout 
//------------------------------------------------------------------------ 
// SITOUT RULE - based on Time 
0                                   // 0=off 1=on 
&& issittingin                      // sitting in 
&& (br==2 || br==3)                 // flop or turn 
&&  elapsed>42600                   // playing 6 hours
?  0 :                              // sitout 
//************************************************************************** 
-1                                  // disabled

##f$test##


##f$debug##
          0.0000 = f$iniciativa
          1.0000 = f$openboard  	
          0.0000 = isstraight 

          0.0000 = [isstraight  && f$strength_straight < 3 && f$raisrondaactual]
          0.0000 = f$strength_flush

        
          2.0455 = f$value_to_raise
          2.2451 = f$value_to_call
          2.0459 = f$cost_to_fold	
         -1.0000 = f$evrais			
         -1.0000 = f$evcall
          0.0000 = f$potpositivo	
       ERR: div0 = f$callbets
       ERR: div0 = f$potodds
          0.0000 = f$cuentaouts
          0.0000 = bblind
          1.0000 = betposition
         -1.0000 = f$evcall
         -1.0000 = f$evrais
          0.0000 = f$iniciativa
       ERR: div0 = f$call
          0.9980 = prwin 
          0.0000 = f$importeapuesta
          0.0000 = prwin >= 1.00 && prlos <= 0.00
          0.0000 = nplayersplaying * f$importeapuesta
          0.2000 = call
          0.0000 = bet
          0.0000 = ( br==4 && ( f$value_to_raise>f$cost_to_fold ) && ( f$value_to_raise>(f$value_to_call*1.3) ) && pokerval-pokervalcommon>=16400000 )
   
          0.0000 = f$Credibilidadrival
          0.0000 = pt_hands0
          0.0000 = pt_hands1
          0.0000 = pt_hands2
          0.0000 = pt_hands3
          0.0000 = pt_hands4
          0.0000 = pt_hands5
          0.0000 = pt_hands6
          0.0000 = pt_hands7
          0.0000 = pt_hands8
          0.0000 = pt_hands9
          0.0000 = pt_icon0
          0.0000 = pt_icon1
          0.0000 = pt_icon2
          0.0000 = pt_icon3
          0.0000 = pt_icon4
          0.0000 = pt_icon5
          0.0000 = pt_icon6
          0.0000 = pt_icon7
          0.0000 = pt_icon8
          0.0000 = pt_icon9

          0.0000 = pt_fsbts0
          0.0000 = pt_fsbts1
          0.0000 = pt_fsbts2
          0.0000 = pt_fsbts3
          0.0000 = pt_fsbts4
          0.0000 = pt_fsbts5
          0.0000 = pt_fsbts6
          0.0000 = pt_fsbts7
          0.0000 = pt_fsbts8
          0.0000 = pt_fsbts9
			
       ERR: div0 = f$rais
       ERR: div0 = f$call
       ERR: div0 = f$Fold

##list1##
AA KK QQ AKS AKO

// EARLY TIGHT VS RAISE. (RAISE).

// 0.90%

##list2##
 JJ TT 99 AQS AQO AJS

// RAISE FROM ANY POSITION, RE-RAISE IF RAISED ONCE, BUT CALL IF ALREADY RE-RAISED.

// 1.36%

##list3##
AJO ATS ATO KQS KQO

// CALL AGAINST A RAISE, RAISE WITHOUT A RAISE AGAINST.

// 1.81%

##list4##
88 77 66 55 44 33 22 KJS KTS QJS QTS JTS T9S

// RAISE AGAINST NO RAISE FROM THE LATE POSITION.

// 0.90%

##list5##
KJO KTO QJO QTO JTO
A9S A8S A7S A6S A5S A3S A2S
K9S 87S 98S

##list6##
ATO A9S A8S 

KJS KTS 

QJS

// RAISE AGAINST 'NOTHING' FROM THE LATE POSITION.

// 2.41%

##list7##
KQS

// CALL AGAINST ONE RAISE.

// 0.30%

##list8##
77 66 55 44 33 22

QJS

JTS

T9S

// CALL FROM THE LATE POSITION AGAINST A RAISE.

// 3.62%

##list9##
99  88  77 

AJO ATS 

KQO KJS KTS 

QJS QTS 

JTS  

// CALL AGAINST NO RAISE FROM ANY POSITION.

// 4.98%

##list10##
66 55 44 33 22 

ATO A9S A8S A7S A6S A5S A4S A3S A2S 

KJO K9S 

Q9S 

J9S T9S 

98S

// CALL AGAINST NO RAISE FROM THE MIDDLE / LATE POSITION.

// 7.99%

##list11##
KTO

QJO QTO

JTO

87S 

76S 

65S 

54S

// CALL AGAINST NO RAISE FROM THE LATE POSITION.

// 4.83%

##list12##
99 88 77 66 55 44 33 22

// CALL AGAINST A RAISE WHEN ONLY ONE OTHER PLAYER HAS CALLED FROM THE SB POSITION.

// 3.62%

##list13##
99  88  77  66  55  44  33  22

AJO ATS A9S A8S A7S A6S A5S A4S A3S A2S

KQO KJS KTS K9S

QJS QTS Q9S

JTS J9S 

T9S 

98S 

87S 

76S 

65S 

54S

// CALL AGAINST A RAISE FROM THE BB POSITION.

// 12.37%

##list14##
AA  KK  QQ  JJ  TT 

AKO AQO AKS AQS AJS ATS 

KQS KJS

// RAISE AGAINST 'NOTHING' FROM THE SB / BB POSITIONS.

// 5.88%

##list15##
99 88 77 66 55 44 33 22

AJO ATO ATS A9S A8S A7S A6S A5S A4S A3S A2S

KQO KJS KJO KTS KTO K9S

QJS QJO QTS QTO Q9S

JTS JTO J9S 

T9S 

98S

87S

76S

65S

54S

// CALL AGAINST 'NOTHING' FROM THE SB POSITION. 'LOOSELIST'.

// 17.80%

##list16##
AA KK QQ JJ TT 

AKS AKO AQS AJO 

KQS

// CALL AGAINST A RAISE AND A RE-RAISE FROM ANY POSITION.

// 4.98%

##list17##
AA KK QQ JJ TT 99 88 77 66 55 44 33 22 

AKS AKO AQS AQO AJS ATS 

KQS KJS KTS 

QJS 

JTS

// CALL AGAINST A RAISE FROM ANY POSITION.

// 10.41%

##list18##
AA KK QQ JJ TT 99 88 77 66 55 44 33 22 

AKS AKO AQS AQO AJS ATS A9S A8S A7S A6S A5S A4S A3S A2S 

KQS KJS KTS 

QJS QTS 

JTS

T9S

98S

87S

76S

// CALL AGAINST A RAISE FROM THE LATE POSITION.

// 14.33%

##list19##
AA KK QQ JJ TT 99 88 77 66 55 44 33 22 

AKS AKO AQS AQO AJS AJO ATS ATO A9S A8S A7S A6S A5S A4S A3S A2S

KQS KQO KJS KJO KTS K9S 

QJS QTS Q9S 

JTS J9S 

T9S 

98S

// CALL FROM ANY POSITION.

// 18.25%

##list20##
AA KK QQ JJ TT 99 88 77 66 55 44 33 22

AKS AKO AQS AQO AJS AJO ATS ATO A9S A8S A7S A6S A5S A4S A3S A2S 

KQS KQO KJS KJO KTS KTO K9S K8S K7S K6S K5S K4S K3S K2S 

QJS QJO QTS QTO Q9S Q8S 

JTS JTO J9S J8S J7S 

T9S T8S

98S 97S 

87S 86S

76S 

65S 64S 

54S 53S 

43S

// CALL FROM THE LATE POSITION.

// 27.90%

##list21##
AA KK QQ JJ TT 99

AKS AKO AQS AJS

KQS

// RAISE AGAINST A RAISE FROM ANY POSITION.

// 4.83%

##list22##
AQO AJO ATS 

KJS KQO

// RAISE FROM ANY POSITION.

// 3.32%

##list23##
88 

AKS AQS AJS ATS A9S A8S 

KQS KJS KTS K9S 

QJS 

JTS

// RAISE FROM THE LATE POSITION.

// 4.07%

##list24##
AA KK QQ JJ TT 99 

AKS AKO AQS AQO AJS 

KQS KJS

// RAISE FROM SB / BB POSITIONS.

// 6.03%

##list25##
JJ TT 99 

AKO AQS AQO AJS ATS 

KQS KJS

// CALL VS RAISE FROM ANY POSITION WITH MORE THAN 30% JOINING IN.

// 4.68%

##list26##
AA KK QQ JJ TT 99 88 77

AK AQ AJ ATS ATO A9S A9O A8S A8O A7S A7O A6S A6O A5S A4S A3S A2S

KQS KQO KJS KJO KTS KTO K9S

QJS QJO QTS QTO Q9S

//SHORTHANDED: CALL AGAINST A RAISE, RAISE WITHOUT A RAISE AGAINST.

// 20.21%

##list32##
//HACEMOS CALL AGUANTANDO UN RAISE EN EL SMALL BLIND - LOS PELAYOS
AQS AJS ATS
KQS KJS KTS
AQO KQO QJS QTS
AJO KJO QJO JTS
ATO KTO QTO JTO T9S
T9O 99 98S
98O 88 87S
87O 77 76S
76O 66 65S
65O 55 54S
54O 44
33
22

##list33##
//HACEMOS CALL CUANDO NO HEMOS TENIDO NINGUNA SUBIDA EN EL SMALL BLIND
J9S T8S 97S 86S 75S 64S
J9O T8O 97O 86O 75O 64O

##list34##
//HACEMOS CALL HASTA CON UN MAXIMO DE UNA SUBIDA PREVIA EN EL BIG BLIND
AQS AJS ATS
KQS KJS KTS AQO KQO QJS QTS
AJO KJO QJO JTS J9S
ATO KTO QTO JTO T9S T8S
J9O T9O 99 98S 97S
T8O 98O 88 87S 86S
97O 87O 77 76S 75S
86O 76O 66 65S 64S
75O 65O 55 54S
64O 54O 44 
33
22 

##list35##
//SUBIMOS DESDE POSICIONES TEMPRANAS SI NADIE LO HA HECHO PREVIAMENTE
AQS AJS KQS 
AQO KQO AJO ATO
99 88 77

##list36##
//SI NADIE HA SUBIDO EN POSICIONES MEDIAS SUBIMOS NOSOTROS, SINO AGUANTAMOS UNA SUBIDA O NOS TIRAMOS
AQS AJS ATS KQS 
AQO KQO AJO
ATO
99 88 77 66 55 

##list37##
//HACEMOS CALL DESDE POSICIONES MEDIAS SIN SUBIDA, SINO NOS RETIRAMOS
A9S A8S A7S A6S A5S A4S A3S A2S
QJS QTS 
KJO QJO
KTO QTO JTO 
A9O J9O 
A8 
33 22

##list38##
//SI NADIE HA SUBIDO PREVIAMENTE ESTANDO EN POSICION TARDIA LO HACEMOS NOSOTROS SINO HACEMOS CALL A UNA SUBIDA
AQS AJS ATS KQS KJS 
AQO KQO QJS
AJO ATO
99 88 77 66 55 44 33 22 

##list39##
//DESDE POSICIONES TARDIAS SUBINOS SI NADIE LO HA HECHO NOS RETIRAMOS EN CASO CONTRARIO
A9S A8S A7S A6S A5S
KTS K9S K8S
QTS Q9S
KJO QJO JTS J9S
KTO QTO JTO
A9O K9O Q9O
A8O

##list40##
//HACEMOS CALL DESDE POSICION TARDIA SI NO HAY SUBIDAS, SINO NOS RETIRAMOS
A4S A3S A2S 
Q8S J8S T9S T8S J9O T9O 98S 97S
J8O T8O 98O 87S
A7O A6O A5O A4O A3O A2O
97O 87O 76S
76O 65S
65O 54S
54O 43S
43O 

##f$evrais##
//Calculo del valor esperado de un Rais
// EV = (ganancias*probabilidad de ganar) - (inversion * probabilidad perder)

f$cuentaouts <= 0 ? -1 :

br == 2 ? [(((f$cuentaouts/47) * (pot+(nplayersplaying * f$importeapuesta)/2)))-(((47-f$cuentaouts)/47) * (call+(f$importeapuesta/2)))] :

br == 3 ? [(((f$cuentaouts/46) * (pot+(nplayersplaying * f$importeapuesta)/2)))-(((46-f$cuentaouts)/46) * (call+(f$importeapuesta/2)))] :

0

##f$evcall##




f$cuentaouts <= 0 ? -1 :

br == 2 ? [(((f$cuentaouts/47) * (pot+callshort/2)))-(((47-f$cuentaouts)/47) * call)] :

br == 3 ? [(((f$cuentaouts/46) * (pot+callshort/2)))-(((46-f$cuentaouts)/46) * call)] :

0

##f$islistcall##
// This file is to be changed by anyone, especially SwordFish :)
0
// fullring pre-flop strategy - tight games

//Manos Fuertes JJ TT 99 AQs AQo AJs igualamos si un rival sube previamente y al menos hay un limper
|| [ br==1 && islist2 && f$callbets <=1  && nopponentscalling >=1 ]


//Manos intermedias AJo ATs ATo KQs KQo Un contrario sube y nadie iguala
|| [ br==1 && islist3 && f$callbets<=1 && dealposition==2 && nopponentscalling == 0]


//Manos intermedias AJo ATs ATo KQs KQo Un contrario sube y al menos uno iguala
|| [ br==1 && islist3 && f$callbets<=1 && dealposition==2 && nopponentscalling >=1]

//Manos intermedias AJo ATs ATo KQs KQo Un contrario sube y al menos uno iguala igualamos con KQs
|| [ br==1 && $KQs && f$callbets<=1  && nopponentscalling >=1]


//Manos especulativas fuertes De 88 hasta 22 / KJs KTs QJs QTs JTs T9s - Igualamos en posiciones finales y ciega pequeña si un contrario iguala
|| [ br == 1 && islist4 && (f$dpl || dealposition == 1 || dealposition == 2) && f$callbets <= 1 && nopponentscalling >=1]



//Manos especulativas fuertes De 88 hasta 22 / KJs KTs QJs QTs JTs T9s - Igualamos en todas las posiciones si dos o mas contrarios igualan
|| [ br == 1 && islist4  && f$callbets <= 1 && nopponentscalling >=2]


//Manos especulativas fuertes De 88 hasta 22 / KJs KTs QJs QTs JTs T9s - Igualamos en el ciego grande si un contrario sube y nadie iguala
|| [ br == 1 && islist4 && dealposition == 2 && f$callbets <= 1 && nopponentscalling == 0]


//Manos especulativas fuertes De 88 hasta 22 / KJs KTs QJs QTs JTs T9s - Igualamos en cualquier posicion si un contrario sube y al menos uno iguala
|| [ br == 1 && islist4  && f$callbets <= 1 && nopponentscalling >= 1]


//Manos mezcladas KJo KTo QJo QTo JTo De A9s hasta A2s K9s 87s 98s - Igualamos en ciega pequeña y ciega grande si un contrario iguala
|| [br == 1 && islist5 && (dealposition ==1 || dealposition == 2) && f$callbets <=1 && nopponentscalling >=1]


//Manos mezcladas KJo KTo QJo QTo JTo De A9s hasta A2s K9s 87s 98s - Igualamos en posiciones finales y ciegas si dos o mas contrarios igualan
|| [br == 1 && islist5 && (dealposition ==1 || dealposition == 2 || f$dpl) && f$callbets <=1 && nopponentscalling >=2]



//Si hubo una subida detras de mi debo igualar la subida 
|| [ br == 1 && (didrais || didcall) && f$callbets == 1]

// Si hubo mas de una subida detras de mi igualo con las manos fuertes, sigo subiendo con las muy fuertes y tiro el resto
|| [ br == 1 && (didcall || didrais) && f$callbets >=2 && islist2]

##f$islistrais##
// This file is to be changed by anyone, especially SwordFish :)
0
// fullring pre-flop strategy - tight games

|| [ br==1 && islist1 ] // raise and re-raise and re-raise in any game from any position

//Manos Fuertes JJ TT 99 AQs AQo AJs Subimos si no hubo subida previa a nuestra posicion siendo indiferente el numero de limpers
|| [br ==1 && islist2 && f$callbets <=1  && !didraisround1]

//Manos Fuertes JJ TT 99 AQs AQo AJs Subimos si un rival sube y no hay ningun limper solo en posiciones medias y tardias
|| [ br==1 && islist2 && f$callbets<=1 && call >0 && (f$dpm || f$dpl || dealposition == 1 || dealposition == 2) && nopponentscalling == 0  && !didraisround1]


//Manos intermedias AJo ATs ATo KQs KQo No sube nadie previamente a nosotros siendo indiferente el numero de limpers
|| [ br==1 && islist3 & f$callbets<=1 && (f$dpm || f$dpl || dealposition == 1 || dealposition == 2) && !didraisround1]


//Manos especulativas fuertes De 88 hasta 22 / KJs KTs QJs QTs JTs T9s - Subimos en posiciones finales y las dos ciegas si todos se retiran
|| [ br == 1 && islist4 && (f$dpl || dealposition == 1 || dealposition == 2) && f$callbets <= 1 && nopponentscalling == 0  && !didraisround1]


//Manos mezcladas KJo KTo QJo QTo JTo De A9s hasta A2s K9s 87s 98s - Subimos si todos se retiran en la ciega pequeña y en la ciega grande
|| [br == 1 && islist5 && (dealposition ==1 || dealposition == 2) && f$callbets <=1 && nopponentscalling == 0  && !didraisround1]

##f$cuentaouts##
//Funcion con la que contamos el numero de cartas que quedan en el mazo las cuales nos darian la mejor mano de la mesa


//Outs Counter V.9b


br==1 ? nouts :
br==4 ? 0 :

// This Formula will take the existing symbold "nouts" and fix it show "the total number of unseen single cards that
// if dealt to the board might put your hand in the lead. to be counted as an out, 
// the card must be able to bump your level and your new level must be higher than the resulting common level"

nouts + 

//****************************************************************************************************
//Overcards
//****************************************************************************************************

// Here we discount the outs that makes a pair but does not put our hand in the lead

       //**Hi card**//

//My high card is lower than the highest board card ? -3 outs
((rankhiplayer<rankhicommon && (ishicard || (isonepair && nrankedcommon==2)) ) ||

//My high card is higher than the highest board card and is an ace ? -3 outs
(rankhiplayer==14 && (ishicard || (isonepair && nrankedcommon==2))) ||
// i have included this we dont want to hit top pair of aces and lose to 2 pair

//My high card is higher than the highest board card and board is three suited ? -3 outs
(rankhiplayer>rankhicommon && nsuitedcommon==3 && (ishicard || (isonepair && nrankedcommon==2))) ||

//My high card is higher than the highest board card and board has a possible straight ? -3 outs
(rankhiplayer>rankhicommon && nstraightfillcommon<=2 && nstraight<4 && (ishicard || (isonepair && nrankedcommon==2))) ||
// i deleted && nsuitedcommon<3 because it has already been covered and is therefore not neccessary

//My high card is higher than the highest board card, and my kicker is less than a J ? -3 outs
(rankhiplayer>rankhicommon && rankloplayer<9 && (ishicard || (isonepair && nrankedcommon==2)))  ? -3 : 0) +
// i have changed ($$pr1<11||$$pr0<11)because it reads more easy

//My high card is higher than the highest board card and board is two suited ? -1 out
// Discounting 1 out on a flushdraw board unless the first card is of the same suite
(rankhiplayer>rankhicommon && rankloplayer>10 && nsuitedcommon==2 && nsuited<4 && (ishicard || (isonepair && nrankedcommon==2))  ? -1 : 0) +
(rankhiplayer>rankhicommon && rankloplayer>10 && nsuitedcommon==2 && nsuited==3 &&
$$ps0==tsuitcommon && (ishicard || (isonepair && nrankedcommon==2)) ? 1 : 0)+
// i have changed ($$pr1>=11&&$$pr0>=11) and ($$ps0==$$cs0||$$ps0==$$cs1||$$ps0==$$cs2||$$ps0==$$cs3) for easy reading

//My high card is higher than the highest board card and board has two flush draws ? -1 out
// Discounting 1 out on the turn when the board is double suited
(rankhiplayer>rankhicommon && nsuitedcommon==2 && nstraightfillcommon>2 && (
$$cs0==$$cs1 && $$cs2==$$cs3 ||
$$cs0==$$cs2 && $$cs1==$$cs3 ||
$$cs0==$$cs3 && $$cs1==$$cs2 ) && (ishicard || (isonepair && nrankedcommon==2))  ? -1 : 0)+

   //**Low Card**//

//My low card is lower than the highest board card ? -3 outs
((rankloplayer<rankhicommon && (ishicard || (isonepair && nrankedcommon==2))) ||

//My low card is higher than the highest board card and board is three suited ? -3 outs
(rankloplayer>rankhicommon && nsuitedcommon==3 && (ishicard || (isonepair && nrankedcommon==2))) ||

//My low card is higher than the highest board card and board has a possible straight ? -3 outs
(rankloplayer>rankhicommon && nstraightfillcommon<=2 && nstraight<4 && (ishicard || (isonepair && nrankedcommon==2)) ) ? -3 : 0) +
//i took out && nsuitedcommon<3 it is not neccessary

//My low card is higher than the highest board card, and my kicker is less than a J ? -3 outs
//($$pr1>rankhicommon && ($$pr1<11||$$pr0<11) && ishicard)  
// this line becomes unneccessary because we look at high / lowcard 

//My low card is higher than the highest board card and board is two suited ? -1 out
//discounting on a suited board unless we have that suited card
(rankloplayer>rankhicommon && rankloplayer>10 && nsuitedcommon==2 && nsuited<4 && (ishicard || (isonepair && nrankedcommon==2))  ? -1 : 0) +
(rankloplayer>rankhicommon && rankloplayer>10 && nsuitedcommon==2 && nsuited==3 &&
$$ps1==tsuitcommon && (ishicard || (isonepair && nrankedcommon==2)) ? 1 : 0)+
// changed ($$pr1>=11&&$$pr0>=11) and ($$ps1==$$cs0||$$ps1==$$cs1||$$ps1==$$cs2||$$ps1==$$cs3)

//My low card is higher than the highest board card and board has two flush draws ? -1 out
(rankloplayer>rankhicommon && nsuitedcommon==2 && nstraightfillcommon>2 && (
$$cs0==$$cs1 && $$cs2==$$cs3 ||
$$cs0==$$cs2 && $$cs1==$$cs3 ||
$$cs0==$$cs3 && $$cs1==$$cs2 ) && (ishicard || (isonepair && nrankedcommon==2))  ? -1 : 0)+


//**************************************************************************************************
//Straight draw
//**************************************************************************************************

(br==2 && nstraightfill==1 ? (
                              nstraightfillcommon>2 && (rankhiplayer-rankloplayer)==1 && pcbits<4 ? -8 :
                              nstraightfillcommon>2 && (rankhiplayer-rankloplayer)== 2 && pcbits<10 ? -6 :
                              nstraightfillcommon>2 && (rankhiplayer-rankloplayer)== 3 && pcbits<=5 ? -6 :
                              nsuited<4 && nsuitedcommon==3 && nstraightflushfill>1 ? -6 :
                              nsuited<4 && nrankedcommon>1 && nsuitedcommon>1 ? -5 : 
                              nsuited<4 && nrankedcommon>1 ? -4 : 
                              (mh_bottomsd || rankhiplayer<ranklocommon && !(rankbits&16386 && rankbits&8196))  ? -4 :
                              nsuited<4 && nsuitedcommon==2 ? (((rankbits & 0b0000000010111010)==0b0000000010111010)   
                                                              ||    ((rankbits & 0b0000000101110100)==0b0000000101110100)
                                                              ||    ((rankbits & 0b0000001011101000)==0b0000001011101000)
                                                              ||    ((rankbits & 0b0000010111010000)==0b0000010111010000)
                                                              ||    ((rankbits & 0b0000101110100000)==0b0000101110100000)
                                                              ||    ((rankbits & 0b0001011101000000)==0b0001011101000000)
                                                              ||    ((rankbits & 0b0010111010000000)==0b0010111010000000)
                                                              ||    ((rankbits & 0b0101110100000000)==0b0101110100000000)
                                                              ||    ((rankbits>>ranklo)==0b10111101) ? -2 : 
                                                              ($$cs0==$$cs1 && $$cs2==$$cs3 || $$cs0==$$cs2 && $$cs1==$$cs3  || $$cs0==$$cs3 && $$cs1==$$cs2  ) ? -2 : 
                                                              -1) :  
                              0 ): 0)+ 

//******************************************************************************************************************
//Flush draw
//******************************************************************************************************************

// Here we discount outs for making a flush which does not put our hand in the lead


//I have discounted when we have a low flush draw inaccordance with the orignal code:
(nsuited==4 && nsuitedcommon==2 && mh_nsuitedbetter>4 ? -1 : 0)+
(nsuited==4 && nsuitedcommon==2 && mh_nsuitedbetter>5 ? -1 : 0)+
(nsuited==4 && nsuitedcommon==2 && mh_nsuitedbetter>6 ? -1 : 0)+

//we will discount 2 outs for every suited card better than ours when we drawing to a flush using 1 hole card
// i have changed `((~srankbits&0x7ffe)>>srankhiplayer) for easy reading 
(nsuited==4 && nsuitedcommon==3 && mh_nsuitedbetter>1 ? -2 : 0)+
(nsuited==4 && nsuitedcommon==3 && mh_nsuitedbetter>2 ? -2 : 0)+
(nsuited==4 && nsuitedcommon==3 && mh_nsuitedbetter>3 ? -2 : 0)+
(nsuited==4 && nsuitedcommon==3 && mh_nsuitedbetter>4 ? -2 : 0)+
(nsuited==4 && nsuitedcommon==3 && mh_nsuitedbetter>5 ? -1 : 0)+

// we discount outs when drawing to a flush on a paired board
// question: why are we using -4.5? dont we think maybe this is to conservative
// surely there are max 3 outs that make ur flush and villans full 
(nsuited==4 && nrankedcommon==2 ? -3 : 0)+

// we will discount 9 outs on a board which is double paired or presenting trips 
(nsuited==4 && (nrankedcommon>=3||pokervalcommon&twopair) ? -9 : 0)+

// This addision is only good if used with the above discount for low flush draws
// nett result would be that low flush draw gets discounted unless used with a straight draw
(nsuited==4 && nstraight==4 ? 1 : 0)+


//******************************************************************************************************************
//Onepair 
//*******************************************************************************************************************

// Here we will discount outs for hitting 2 pair or trips which does not put our hand in the lead

  //**One Pair**//

//Discounting the outs that pair the board but does not pair our hole card
(br==2  && !ispair && isonepair && nrankedcommon==1 ? -6 : 0) +
(br==3  && !ispair && isonepair && nrankedcommon==1 ? -9 : 0) +
// i added nrankedcommon==1 and i have added the nrankedcommon==2 with the overcards code

//Discounting on suited board where we dont have the suit
(isonepair && !ispair && nrankedcommon==1 && nsuitedcommon==2 && nsuited==2 ? -1 : 0)+

//Discounting outs to two pair or trips on suited or straighting board
(isonepair && !ispair && nrankedcommon==1 && nsuitedcommon>=3 && nsuited==nsuitedcommon ? -5 : 0)+
(isonepair && !ispair && nrankedcommon==1 && nstraightfillcommon<=2 ? -4 : 0)+
// changed pokervalcommon<onepair for easy reading



// how can we have 1 pair on a paired board AND one of our hole cards have paired the board????
//(isonepair && nsuitedcommon==2 &&(($$pr0==$$cr0 ||$$pr0==$$cr1 ||$$pr0==$$cr2 ||$$pr0==$$cr3
//)&& $$ps0==tsuitcommon)||(($$pr1==$$cr0 ||$$pr1==$$cr1 ||$$pr1==$$cr2 ||$$pr1==$$cr3)
//&& $$ps1==tsuitcommon)? -1 : 0)+

// Adding one out for straight draw i truelly cant see why
//(isonepair && !ispair && nstraight==4 && nstraight>nstraightcommon && nsuitedcommon<=2 ? 1 : 0)+

//Question when/ how is pokervalcommon<onepair && nrankedcommon==2 possible?
//What are we trying 2 code here??
//(isonepair && !ispair && pokervalcommon<onepair && nsuitedcommon>=2 && nrankedcommon==2 ? -6 : 0)+


//Discounting outs to 2 pair or trips on a double suited board
// Question why is this -1 ? (we have 5 outs to 2 pair or trips but: of the 2 pair that makes our trips 1 card 
// completes a flush and of the 3 cards that makes our 2 pair 2 cards completes a flush)
(isonepair && nsuited<4 && nsuitedcommon==2 && nstraightfill>1 &&
($$cs0==$$cs1 && $$cs2==$$cs3 ||
$$cs0==$$cs2 && $$cs1==$$cs3 ||
$$cs0==$$cs3 && $$cs1==$$cs2 ||
$$cs1==$$cs2 && $$cs2==$$cs3 ||
$$cs1==$$cs3 && $$cs2==$$cs0    )  ? -3 : 0)+
// I changed this from -1

//**Pocket pair**//

//Discounting our outs to two pair  with a pocket pair
(br==2 && ispair && isonepair ? -9: 0)+
(br==3 && ispair && isonepair ? -12 : 0)+

//Discounting our outs to trips (pocket pair) on paired or straighting board.
(ispair && isonepair && nstraightfillcommon<=2 && nstraightfill>1 ? -2 : 0)+
(ispair && isonepair && nsuitedcommon==2  && nsuited==2 ? -1 : 0)+
(ispair && isonepair && nsuitedcommon==3 ? -2 : 0)+


//****************************************************************************************************************
//Twopair
//****************************************************************************************************************
// Here we will deal with our outs to make a fullhouse and discount the outs that will make the small boat

//the board is paired and we have two pair
// we discount the 2 outs that makes the board trips only if we have paired the card below the common pair 
(istwopair && nrankedcommon==2 && trankcommon>rankhiplayer ? -2:0)+

// This code is only relavent to the turn when we have a board that is paired and 
// our holecards have paired the remaining 2 unpaired cards (effectively giving us 3 pairs)
// we discount 2 outs which will give us a fullhouse but will give villan bigger fullhouse
(istwopair && nrankedcommon==2 && trankcommon>rankhiplayer &&
(($$pr0==$$cr0||$$pr0==$$cr1||$$pr0==$$cr2||$$pr0==$$cr3) &&
($$pr1==$$cr0||$$pr1==$$cr1||$$pr1==$$cr2||$$pr1==$$cr3)) ? -2 : 0)+
// i have included trankcommon>rankhiplayer because we make the bigger full if boards make trips lower than our pair
// i have change the discount to 2

//**************************************************************************************************************************
//Str Flush
//**************************************************************************************************************************
// Here we want to re apply the outs we have discounted above for our flush or straight draw because we have a straightflush draw
(pokervalcommon>=onepair && nstraightflush==4 && nstraightflushcommon<4 && nstraightflushfill==1 && ((rankbits&16398) != 16398 && (rankbits&28674) != 28674)  ? 2  : 0)+
(pokervalcommon>=onepair && nstraightflush==4 && nstraightflushcommon<4 && nstraightflushfill==1 && mh_nsuitedbetter>5 && ((rankbits&16398) != 16398 && (rankbits&28674) != 28674)  ? 1  : 0)+
(pokervalcommon>=onepair && nstraightflush==4 && nstraightflushcommon<4 && nstraightflushfill==1 && mh_nsuitedbetter>6 && ((rankbits&16398) != 16398 && (rankbits&28674) != 28674)  ? 1  : 0)+
(isflush && nstraightflush==4 && nstraightflushcommon<4 && nstraightflushfill==1 && ((rankbits&16398) != 16398 && (rankbits&28674) != 28674  ? 4 :0)+
isflush && nstraightflushfill==1 && nstraightflushfillcommon>1 ? 3 : 0)+
// i adusted this to re apply for the weaker flush

//******************************************************************************************************************************
//BACKDOOR OUTS 
//******************************************************************************************************************************

// Here we will add our chance of makking runner runner straight or runner runner flush
(br==2 && `((~srankbits&0x7ffe)>>srankhiplayer)==0 && nsuited==3 && nsuitedcommon<3 && nrankedcommon==1 ? 1.5: 
br==2 && `((~srankbits&0x7ffe)>>srankhiplayer)<=2 && nsuited==3 && nsuitedcommon<3 && nrankedcommon==1 ? 1 : 0)+ 
(br==2 && nstraightfill==2 && nstraightfillcommon>2 && (nsuitedcommon==1||(nsuitedcommon==2 && nsuited==4)) && (nrankedcommon==1||(nrankedcommon==2 && isthreeofakind))  ? 1.5: 0)+ 
// i have gone more conservative with the back door flush draw based on the stats shown .
0

##f$dpm##
// dynamic middle position
//[ betposition/nplayersplaying > (1/2) &&
//  betposition/nplayersplaying <=(3/4) &&
 // betposition!=nplayersplaying             
//]

0

|| [f$DP == 4]

##f$dpl##
// dynamic late position
//[ betposition/nplayersplaying >(3/4) ]

0

|| [f$DP == 5]

##f$potodds##
//Funcion en la que definimos el numero de small bets en el bote

(br ==1 || br ==2) && pot ? (pot / (bblind/2)) : 

pot ? (pot / (bblind)) : 0

##f$potpositivo##
//Funcion en la que definimos la probabilidad de sacar la mejor mano
(f$cuentaouts > 1 && f$callbets > 0) ? [((ncardsunknown / f$cuentaouts) < (f$potodds/f$callbets))] : 0


 

##f$openboard##
// impossible to have a boat ,flush, or straight; top set is nuts 
0

|| [ br== 3 && nrankedcommon<=2 && nsuitedcommon<=3 && nstraightfillcommon>=2 ]

|| [ br==2 && nrankedcommon<=2 && nsuitedcommon<=2 && nstraightfillcommon>=2  ]


|| [ br==4 && nrankedcommon<=2 && nsuitedcommon<=3 && nstraightfillcommon>=2 ]

##f$Fold##
//Funcion en la que definimos momentos en los que abandonar la mano
0 //Por defecto la funcion fold no es verdadera

//Si nos suben varias veces por detras solo igualamos con las manos fuertes y subimos con las muy fuertes
|| [br==1 && f$callbets>=2 && !islist2 && !islist1]



//Si estamos en el river con menos de una pareja maxima y el call cuesta dinero hacemos fold

|| [ br == 4 && pokerval <= onepair && !f$toppairoverpair && pokervalcommon < onepair && call >0]

|| [br == 4 && pokerval <= onepair && pokervalcommon == onepair && call > 0] 

//|| [br >= 2 && f$callbets >= 2 && pokerval < twopair && pokervalcommon <= twopair && !f$potpositivo]

|| [br >= 2 && nrankedcommon == 2  && ispair && !isfullhouse && (f$callbets >= 2 || [f$raisrondaactual && call > 0] )]


|| [nrankedcommon == 3 && !ispair && !isfullhouse] 

|| [f$callbets >=2 && br == 1 && !($KK || $AA || $QQ || $JJ || $TT || $AK)]

|| [nsuitedcommon == 4 && nsuited < 5 && call >= 0]
|| [nstraightcommon  == 4 && nstraight < 5 && call >= 0]

//Si tenemos un straight muy debil hacemos fold si el numero de apuestas es 2 o mas, call si es una unica apuesta
|| [isstraight && f$callbets >1 && f$strength_straight < 3]

//Si tenemos un color muy malo hacemos fold
|| [isflush && f$strength_flush < 2]


//|| [br >= 2 && nrankedcommon == 2 && pokerval <= twopair && call > 0]

|| [f$algunaaccionrondaactual && br > 1 && call >0 && (pokerval <=onepair && !f$toppairoverpair)]

##f$iniciativa##
//Funcion para definir si tenemos la iniciativa (La iniciativa la tiene el ultimo jugador que subió en la ronda anterior)

0



||br == 2 && prevaction == 2 && !(didcallround2 || didchecround2 || didraisround2)  



|| br == 3 && prevaction == 2 && !(didcallround3 || didchecround3 || didraisround3) 



|| br == 4 && prevaction == 2 && !(didcallround4 || didchecround4 || didraisround4) 

##f$monstruo##
//Funcion para definir cuando tenemos una mano monstruo (Mano monstruo es una mano de dos parejas o superior)

0

|| [pokerval>=twopair && nrankedcommon < 2]

|| [pokerval>=threeofakind && nrankedcommon == 2]

##f$toppairoverpair##
isonepair ? 

((0
//Board has No Pair and you have Overpair 10's or better
|| [ nrankedcommon==1 && ispair && pokerval<twopair && trank>trankcommon && rankloplayer>9] 
//Board has No Pair and you have Top pair Ace w/ good kicker (K-T) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==14 && {(trank==$$pr0 && $$pr1>=10)||(trank==$$pr1 && $$pr0>=10)} ] 
//Board has No Pair and you have Top pair King w/ good kicker (A-T) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==13 && {(trank==$$pr0 && $$pr1>=10)||(trank==$$pr1 && $$pr0>=10)} ] 
) ? 5 :

(0
//Board has No Pair and you have Overpair 
|| [ nrankedcommon==1 && ispair && pokerval<twopair && trank>trankcommon ] 
//Board has No Pair and you have Top pair Queen or lower w/ good kicker (A-T) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank<=12 && {(trank==$$pr0 && $$pr1>=10)||(trank==$$pr1 && $$pr0>=10)} ] 

) ? 4 :

(0

//Board has No Pair and you have Top pair Ace w/ poor kicker (9-2) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==14 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ] 

//Board has No Pair and you have Top pair Queen or lower w/ poor kicker (9-2) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank<=12 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ] 

//Board has No Pair and you have Top pair King w/ poor kicker (9-2) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==13 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ] 
//Board has No Pair and you have Midpair 1 overcard 
//|| [ nrankedcommon==1 && ispair && pokerval<twopair && ((pokerval>>8)&15)>trank && ((pokerval>>4)&15)<trank ] 

//Board has No Pair and you have Middle pair w/ overcard kicker 
//|| [ nrankedcommon==1 && ismidpair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1>trankcommon)||(trank==$$pr1 && $$pr0>trankcommon)} ] 
) ? 3 :

(0
//Board has No Pair and you have Top pair Queen or lower w/ poor kicker (9-2) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank<=12 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ] 
//Board has No Pair and you have Midpair 2 overcard 
|| [ nrankedcommon==1 && ispair && pokerval<twopair && ((pokerval>>8)&15)>trank && ((pokerval>>4)&15)>trank ] 
//Board has No Pair and you have Bottom pair w/ overcard kicker 
|| [ nrankedcommon==1 && islopair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1>trankcommon)||(trank==$$pr1 && $$pr0>trankcommon)} ] 
//Board has Pair and you have "Two overcards w/Ace" 
|| [ nrankedcommon==2 && rankloplayer>rankhicommon  && rankhiplayer==14 && rankloplayer>=10 && !ispair ] 
//Board has Pair and you have "Two overcards w/ King" 
|| [ nrankedcommon==2 && rankloplayer>rankhicommon  && rankhiplayer==13 && rankloplayer>=10 && !ispair ] 
) ? 0 :

(0
//Board has No Pair and you have Underpair 
|| [ nrankedcommon==1 && ispair && pokerval<twopair && trank<(pokerval&15) ] 
//Board has No Pair and you have Middle pair w/ poor kicker 
|| [ nrankedcommon==1 && ismidpair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1<trankcommon)||(trank==$$pr1 && $$pr0<trankcommon)} ] 
//Board has No Pair and you have Bottom pair w/ poor kicker 
|| [ nrankedcommon==1 && islopair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1<trankcommon)||(trank==$$pr1 && $$pr0<trankcommon)} ] 
//Board has Pair and you have Two overcards
|| [ nrankedcommon==2 && rankloplayer>rankhicommon ] 
//Board has Pair and you have "One overcard w/Ace (A9-A2)" 
|| [ nrankedcommon==2 && rankhiplayer==14 && pokerval<twopair && rankloplayer<=9 && rankloplayer<rankhicommon ] 
//Board has Pair and you have "One overcard w/ King (K9-K2)" 
|| [ nrankedcommon==2 && rankhiplayer==13 && pokerval<twopair && rankloplayer<=9 && rankloplayer<rankhicommon ] 
//Board has Pair and you have Two small cards 
|| [ nrankedcommon==2 && !ispair && pokerval<twopair && rankhiplayer<=9 ] 
) ? 0 : 0)



: 0

##f$cbet##
//Funcion para definir los cbets

0

|| [f$iniciativa && nopponentsplaying <=2 && call == 0 && !f$raisrondaactual]
|| [br == 2 && nopponentsplaying == 2 && call == 0 && betposition == 3]
|| [br == 2 && nopponentsplaying == 1 && call == 0 && betposition == 2]
|| [br == 3 && nopponentsplaying == 1 && call == 0 && betposition == 2]

##f$proyectomonstruo##
//Funcion para identificar cuando tenemos un proyecto monstruo
0

|| 

[nsuited==4 
   && nsuited>nsuitedcommon && nstraight==4 
   && nstraight>nstraightcommon 
   && (((1.2/prwin)-1) < ((pot + (callshort *.3))/call))]

##f$proyectocoloroescaleraabierta##
0
//Second Nut Flush Draw
|| [(br==2||br==3) && nsuited==4 
   && `((~srankbits&0x7fff)>>srankhiplayer)==1 
   && (((1.2/prwin)-1) < ((pot + (callshort *.3))/call))]

//Third Nut Flush Draw
|| [(br==2||br==3) && nsuited==4 
   && `((~srankbits&0x7fff)>>srankhiplayer)==2 
   && (((1.2/prwin)-1) < ((pot + (callshort *.3))/call))]

//Good Flush Draw
|| [(br==2||br==3) && nsuited==4 
   && nsuitedcommon==2 
   && (((1.2/prwin)-1) < ((pot + (callshort *.3))/call))]//call good flush draws

//Good Straight Draw
|| [(br==2||br==3) && nstraight==4 && nstraightcommon <= 2
   && ((1.2/(prwin + prtie/2)-1) < ((pot + (callshort *.3))/call))]

//Pair and Flush Draw
|| [(br==2||br==3) && prwinnow >.40 
   && nsuited==4 && nsuited>nsuitedcommon 
   && isonepair && (pokervalcommon < onepair)
   && (((1.5/prwin)-1) < ((pot + (callshort *.3))/call))]

//Pair and Straight Draw
|| [(br==2||br==3) && prwinnow >.40 
   && nstraight==4 && nstraight>nstraightcommon 
   && isonepair && (pokervalcommon < onepair)
   && (((1.5/prwin)-1) < ((pot + (callshort *.3))/call))]

##f$dealposition##
[
//SB=1 BB=2 Early=3 Middle=4 Late=5

dealposition==1 ? 1:
dealposition==2 ? 2:

f$dpe?3:
f$dpm?4:
f$dpl?5:0

]

##f$strength_onepair##
isonepair ? 

((0
//Board has No Pair and you have Overpair 10's or better
|| [ nrankedcommon==1 && ispair && pokerval<twopair && trank>trankcommon && rankloplayer>9] 
//Board has No Pair and you have Top pair Ace w/ good kicker (K-T) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==14 && {(trank==$$pr0 && $$pr1>=10)||(trank==$$pr1 && $$pr0>=10)} ] 
//Board has No Pair and you have Top pair King w/ good kicker (A-T) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==13 && {(trank==$$pr0 && $$pr1>=10)||(trank==$$pr1 && $$pr0>=10)} ] 
) ? 5 :

(0
//Board has No Pair and you have Overpair 
|| [ nrankedcommon==1 && ispair && pokerval<twopair && trank>trankcommon ] 
//Board has No Pair and you have Top pair Queen or lower w/ good kicker (A-T) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank<=12 && {(trank==$$pr0 && $$pr1>=10)||(trank==$$pr1 && $$pr0>=10)} ] 
//Board has No Pair and you have Top pair Ace w/ poor kicker (9-2) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==14 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ] 
) ? 4 :

(0
//Board has No Pair and you have Midpair 1 overcard 
|| [ nrankedcommon==1 && ispair && pokerval<twopair && ((pokerval>>8)&15)>trank && ((pokerval>>4)&15)<trank ] 
//Board has No Pair and you have Top pair King w/ poor kicker (9-2) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==13 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ] 
//Board has No Pair and you have Middle pair w/ overcard kicker 
|| [ nrankedcommon==1 && ismidpair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1>trankcommon)||(trank==$$pr1 && $$pr0>trankcommon)} ] 
) ? 3 :

(0
//Board has No Pair and you have Top pair Queen or lower w/ poor kicker (9-2) 
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank<=12 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ] 
//Board has No Pair and you have Midpair 2 overcard 
|| [ nrankedcommon==1 && ispair && pokerval<twopair && ((pokerval>>8)&15)>trank && ((pokerval>>4)&15)>trank ] 
//Board has No Pair and you have Bottom pair w/ overcard kicker 
|| [ nrankedcommon==1 && islopair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1>trankcommon)||(trank==$$pr1 && $$pr0>trankcommon)} ] 
//Board has Pair and you have "Two overcards w/Ace" 
|| [ nrankedcommon==2 && rankloplayer>rankhicommon  && rankhiplayer==14 && rankloplayer>=10 && !ispair ] 
//Board has Pair and you have "Two overcards w/ King" 
|| [ nrankedcommon==2 && rankloplayer>rankhicommon  && rankhiplayer==13 && rankloplayer>=10 && !ispair ] 
) ? 2 :

(0
//Board has No Pair and you have Underpair 
|| [ nrankedcommon==1 && ispair && pokerval<twopair && trank<(pokerval&15) ] 
//Board has No Pair and you have Middle pair w/ poor kicker 
|| [ nrankedcommon==1 && ismidpair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1<trankcommon)||(trank==$$pr1 && $$pr0<trankcommon)} ] 
//Board has No Pair and you have Bottom pair w/ poor kicker 
|| [ nrankedcommon==1 && islopair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1<trankcommon)||(trank==$$pr1 && $$pr0<trankcommon)} ] 
//Board has Pair and you have Two overcards
|| [ nrankedcommon==2 && rankloplayer>rankhicommon ] 
//Board has Pair and you have "One overcard w/Ace (A9-A2)" 
|| [ nrankedcommon==2 && rankhiplayer==14 && pokerval<twopair && rankloplayer<=9 && rankloplayer<rankhicommon ] 
//Board has Pair and you have "One overcard w/ King (K9-K2)" 
|| [ nrankedcommon==2 && rankhiplayer==13 && pokerval<twopair && rankloplayer<=9 && rankloplayer<rankhicommon ] 
//Board has Pair and you have Two small cards 
|| [ nrankedcommon==2 && !ispair && pokerval<twopair && rankhiplayer<=9 ] 
) ? 1 : 0)

// OnePairDiscount
- (
0
+(nsuitedcommon>=3)*2
+(nsuitedcommon>=4)
+(!f$NESTR)*2
+(nstraightfillcommon<=1 || nstraightcommon>=4)
+(nopponentsplaying>2)
+didswag
)

: 0

##f$dpe##
 // dynamic position early
//[ betposition==1 || betposition/nplayersplaying <=(1/2) 

0

|| [f$DP == 3]

##f$NESTR##
//NO EASY STRAIGHT DRAW
(nstraightcommon<=2 && nstraightfillcommon>=3) 
|| (nbetsround1>=2 
    && (     (nstraightfillcommon==1 && nstraightcommon==4 && (`(rankbitscommon&0x007f))==4)   // 6543 
          || (nstraightfillcommon==1 && nstraightcommon==3 && (`(rankbitscommon&0x007c))==4)   // 6542, 6432
       ) 
   )

##f$primeroenentrar##
//En esta funcion vamos a definir lasmanos con las que hacer rais si somos los primeros en entrar en el bote

0  // Por defecto no se cumple la funcion


//En el small bet si todo el mundo foldea hacemos raise con las siguientes manos
|| [dealposition == 1 && f$callbets <= 1 && nopponentscalling == 0 && ($22 || $33 || $44 || $55 || $66 || $77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $Axs || $Kxs || $Q4s || $Q5s || $Q6s || $Q7s || $Q8s || $Q9s || $QTs || $QJs || $J5s || $J6s || $J7s || $J8s || $J9s || $JTs || $T6s || $T7s || $T8s || $T9s || $96s || $97s || $98s || $86s || $87s || $76s || $Axo ||$K6o || $K7o || $K8o || $K9o || $KTo || $KJo || $KQo || $Q8o || $Q9o || $QTo || $QJo || $J8o || $J9o || $JTo || $T8o || $T9o || $98o)]

// En el UTG (siguiente en hablar despues del blind) hacemos rais con las siguientes manos  
|| [dealposition == 3 && f$callbets <= 1 && nopponentscalling == 0 && ($99 || $TT || $JJ || $QQ || $KK || $AA || $AJs || $AQs || $AKs || $KQs || $AQo || $AKo)]

// En el UTG+1  hacemos rais con las siguientes manos 
|| [dealposition == 4 && f$callbets <= 1 && nopponentscalling == 0 && ($99 || $TT || $JJ || $QQ || $KK || $AA || $ATs || $AJs || $AQs || $AKs || $KQs || $AQo || $AKo)]

// En el UTG+2  hacemos rais con las siguientes manos 
|| [dealposition == 5 && f$callbets <= 1 && nopponentscalling == 0 && ($88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $ATs || $AJs || $AQs || $AKs || $KJs || $KQs || $AJo || $AQo || $AKo || $KQo)]

// En la MP1  hacemos rais con las siguientes manos
|| [dealposition == 6 && f$callbets <= 1 && nopponentscalling == 0 && ($77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $A9s || $ATs || $AJs || $AQs || $AKs || $KJs || $KQs || $QJs || $AJo || $AQo || $AKo || $KQo)]

// En la MP2  hacemos rais con las siguientes manos
|| [dealposition == 7 && f$callbets <= 1 && nopponentscalling == 0 && ($66 || $77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $A8s || $A9s || $ATs || $AJs || $AQs || $AKs || $KTs || $KJs || $KQs || $QTs ||$JTs || $ATo || $AJo || $AQo || $AKo || $KJo || $KQo)]

// En la MP3  hacemos rais con las siguientes manos
|| [dealposition == 8 && f$callbets <= 1 && nopponentscalling == 0 && ($55 || $66 || $77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $A5s|| $A6s || $A7s || $A8s || $A9s || $ATs || $AJs || $AQs || $AKs || $K9s || $KTs || $KJs || $KQs || $Q9s || $QTs || $QJs || $J9s || $JTs || $T9s || $A9o || $ATo || $AJo || $AQo || $AKo || $KJo || $Kqo || $QJo)]

// En el Cutoff  hacemos rais con las siguientes manos
|| [dealposition == 9 && f$callbets <= 1 && nopponentscalling == 0 && ($44 || $55 || $66 || $77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $Axs || $K8s || $K9s || $KTs || $KJs || $KQs || $Q9s || $QTs || $QJs || $J9s || $JTs || $T9s || $98s || $A7o || $A8o || $A9o || $ATo || $AJo || $AQo || $AKo  || $KTo || $KJo || $KQo || $QTo || $JTo)]

// En el Button (dealer)  hacemos rais con las siguientes manos
|| [dealposition == 10 && f$callbets <= 1 && nopponentscalling == 0 && ($33 || $44 || $55 || $66 || $77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $Axs || $K5s || $K6s || $K7s || $K8s || $K9s || $KTs || $KJs || $KQs || $Q7s || $Q8s || $Q9s || $QTs || $QJs || $J8s || $J9s || $JTs || $T8s || $T9s || $98s || $87s || $Axo || $K9o || $KTo || $KJo || $KQo || $QTo || $QJo || $JTo)]

##f$terceraapuesta##
//Funcion en la que vamos a definir cuando hacemos una tercera apuesta contra un rais previo

0 // Por defecto la funcion no se cumple

//Hacemos rais contra un rais previo con las siguientes manos en la posicion UTG
|| [dealposition == 3 && f$callbets == 2 && ($JJ || $QQ || $KK || $AA || $AKs || $AKo)]

//Hacemos rais contra un rais previo con las siguientes manos en la posicion UTG+1
|| [dealposition == 4 && f$callbets == 2 && ($JJ || $QQ || $KK || $AA || $AKs || $AKo)]

//Hacemos rais contra un rais previo con las siguientes manos en la posicion UTG+2
|| [dealposition == 5 && f$callbets == 2 && ($TT || $JJ || $QQ || $KK || $AA || $AQs || $AKs || $AKo)]

//Hacemos rais contra un rais previo con las siguientes manos en la posicion MP1
| [dealposition == 6 && f$callbets == 2 && ($99 || $TT || $JJ || $QQ || $KK || $AA || $AQs || $AKs || $AQo || $AKo)]


//Hacemos rais contra un rais previo con las siguientes manos en la posicion MP2
|| [dealposition == 7 && f$callbets == 2 && ($88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $AJs || $AQs || $AKs || $KQs || $AQo || $AKo)]
 
//Hacemos rais contra un rais previo con las siguientes manos en la posicion MP3
|| [dealposition == 8 && f$callbets == 2 && ($77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $ATs || $AJs || $AQs || $AKs || $KQs || $AJo || $AQo || $AKo)]

//Hacemos rais contra un rais previo con las siguientes manos en la posicion Cutoff
|| [dealposition == 9 && f$callbets == 2 && ($66 || $77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $A5s || $A6s || $A7s || $A8s || $A9s || $ATs || $AJs || $AQs || $AKs || $KJs || $KQs || $A9o || $ATo || $AJo || $AQo || $KQo)]

//Hacemos rais contra un rais previo con las siguientes manos en la posicion Button (dealer)
|| [dealposition == 10 && f$callbets == 2 && ($55 || $66 || $77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA || $Axs || $K9s || $KTs || $KJs || $KQs || $QJs || $A7o || $A8o || $A9o || $ATo || $AJo || $AQo || $AKo || $KJo || $KQo)]

##f$callingraising##
//Funcion en la que se define si hacemos call o rais segun el numero de limpers habiendo el la mano al menos un rais


 //Si el numero de limpers es 1 entonces

//Parejas 
nopponentscalling == 1 && ($55 || $66 || $77 || $88 || $99) ? 1 :  //Hacemos call con estas parejas
nopponentscalling == 1 && ($TT || $JJ || $QQ || $KK || $AA) ? 2 :  //Hacemos rais con estas parejas

//Conectores suitados
 nopponentscalling == 1 && $T9s ? 1 : //Hacemos call con estos conectores


//Suited
nopponentscalling == 1 &&  ($AJs || $AQs || $AKs) ? 2 : //HAcemos raise con estas cartas del mismo palo
nopponentscalling == 1 &&  ($KQs || $QJs) ? 1: //Hacemos call con estas cartas del mismo palo 

//OffSuited
nopponentscalling == 1 &&  ($AQo || $AKo) ? 2 : //Hacemos raise con estas cartas de distinto palo 

 
 // Si el numero de limpers es 2 entonces

nopponentscalling == 2 && ($22 || $33 || $44 || $55 || $66 || $77 || $88 || $99 || $TT) ? 1 : //Con estas parejas hacemos call
nopponentscalling == 2 && ($JJ || $QQ || $KK || $AA) ? 2 : //Con estas parejas hacemos raise

nopponentscalling == 2 && ($87s || $98s || $T9s || $JTs || $QJs || $KQs || $AQs)   ? 1 : //Hacemos call con estos conectores suitados
nopponentscalling == 2 && ($ATs || $AJs) ? 1 : //hacemos call con estas cartas suitadas
nopponentscalling == 2 && ($AQs || $AKs) ? 2 : //Hacemos raise con estas cartas suitadas
nopponentscalling == 2 && ($KTs || $KJs || $QTs || $J9s) ? 1 : //hacemos call con estas suitadas

nopponentscalling == 2 && ($AQo || $AKo) ? 2 : //HAcemos raise con estas cartas de distinto palo




 //Si el numero de limpers es mayor o igual a 3

nopponentscalling >= 3 && ($22 || $33 || $44 || $55 || $66 || $77 || $88 || $99 || $TT || $JJ) ? 1 : //Hacemos call con estas parejas
($QQ || $KK || $AA) ? 2 : //Hacemos rais con estas parejas

nopponentscalling >= 3 && ($65s || $76s || $87s || $98s || $T9s || $JTs || $QJs || $KQs || $AKs) ? 1 : //HAcemos call con estos conectores suitados

nopponentscalling >= 3 && ($ATs || $AJs || $KTs || $KJs || $QTs || $J8s || $J9s) ? 1 : //Hacemos call con estas cartas del mismo palo
nopponentscalling >= 3 && ($AQs) ? 2 : //Hacemos raise con estas cartas del mismo palo

nopponentscalling >= 3 && ($AQo || $AKo) ? 2 : //Hacemos raise con estas cartas de distinto palo


0 //Si no se cumple ninguna de las situaciones no se cumple la funcion

##f$strength_fullhouse##
isfullhouse ? 

((0
// Board paired, I have pocket pair and top side full house, pocket pair is higher than non-participating board cards  
// e.g. QQ/QTT53
|| [ isfullhouse && ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)>(pokerval&15) && (pcbits&0b11100) && trank==((pokervalcommon>>8)&0xf) ]
// Board paired, I have pocket pair and top side full house, pocket pair is lower than non-participating board cards  
// e.g. QQ/QTTA3
|| [ isfullhouse && ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)>(pokerval&15) && (pcbits&0b11100) && trank<((pokervalcommon>>8)&0xf) ]
// Board paired, I have pocket pair and bottom side full house, pocket pair is higher than non-participating board cards
// e.g. QQ/QKKT6
|| [ isfullhouse && ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)<(pokerval&15) && (pcbits&0b11100) && trank==((pokervalcommon>>8)&0xf) ]
// Board paired, I have pocket pair and bottom side full house, pocket pair is lower than non-participating board cards
// e.g. QQ/QKKA6
|| [ isfullhouse && ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)<(pokerval&15) && (pcbits&0b11100) && trank<((pokervalcommon>>8)&0xf) ]
) ? 5 :

(0
// Board paired, I don't have pocket pair, I have top side full house, pair is higher than non-participating board cards
// e.g. QJ/QQJ53
|| [ isfullhouse && !ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)>(pokerval&15) && (pokerval&0xf)==((pokervalcommon>>8)&0xf) ]
// Board paired, I don't have pocket pair, I have top side full house, pair is lower than non-participating board cards  
// e.g. QJ/QQJA3
|| [ isfullhouse && !ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)>(pokerval&15) && (pokerval&0xf)<((pokervalcommon>>8)&0xf) ]
// Board paired, I don't have pocket pair, I have bottom side full house, pair is higher than non-participating board cards
// e.g. QJ/QJJ53
|| [ isfullhouse && !ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)<(pokerval&15) && (pokerval&0xf)==((pokervalcommon>>8)&0xf) ]
// Board paired, I don't have pocket pair, I have bottom side full house, pair is lower than non-participating board cards
// e.g. QJ/QJJ53
|| [ isfullhouse && !ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)<(pokerval&15) && (pokerval&0xf)<((pokervalcommon>>8)&0xf) ] 
// Board has two pair, I have top trips 
// e.g. QT/QQJJ8 
|| [ isfullhouse && (pokervalcommon&twopair) && 
  ( ((pokervalcommon>>16)&0x0f)==$$pr0 || ((pokervalcommon>>16)&0x0f)==$$pr1 ) ]
) ? 4 :

(0
) ? 3 :

(0
// Board trips, I have pocket pair higher than non-participating board cards
// e.g. QQ/JJJ92
|| [ isfullhouse && ispair && nrankedcommon==3 && (pcbits&0b00011) && $$pr0>((pokervalcommon>>4)&0xf) ]
// Board trips, only one of my hole cards participates, the pair rank is higher than non-participating board cards
// e.g. QT/999T8
|| [ isfullhouse && nrankedcommon==3 && (`(pcbits&0b00011))==1 && (pokerval&0xf)==((pokervalcommon>>4)&0xf) ]
) ? 2 :

(0
// Board trips, I have pocket pair lower than non-participating board cards
// e.g. QQ/JJJK2
|| [ isfullhouse && ispair && nrankedcommon==3 && (pcbits&0b00011) && $$pr0<((pokervalcommon>>4)&0xf) ]
// Board trips, only one of my hole cards participates, the pair rank is lower than non-participating board cards
// e.g. QT/999TK
|| [ isfullhouse && nrankedcommon==3 && (`(pcbits&0b00011))==1 && (pokerval&0xf)<((pokervalcommon>>4)&0xf) ]
// Board has full house
|| [ isfullhouse && (pokervalcommon&fullhouse) ]
) ? 1 : 0 )

: 0

##f$callraislimpers##
//Funcion en la que vamos a definir cuando haremos call y cuando haremos rais en funcion del numero de limpers sin que haya habido ninguna subida.

// 1 rival haciendo call

nopponentscalling ==1 && ($66 || $77 || $88 || $99 || $TT || $JJ || $QQ || $KK || $AA) ? 2 : //Hacemos rais con estas parejas
nopponentscalling ==1 && ($JTs || $QJs || $KQs ||$QTs) ? 1 : //Hacemos call con estos conectores suitados y QTs
nopponentscalling ==1 && ($A5s || $A6s || $A7s || $A8s || $A9s || $ATs || $AJs || $AQs || $AKs || $KTs || $KJs) ? 2 : //HAcemos rais con estas cartas del mismo palo

nopponentscalling ==1 && ($A8o || $A9o || $ATo || $AJo || $AQo || $AKo || $KJo || $KQo) ? 2 : //Hacemos rais con estas cartas de distinto palo 

//2 Rivales haciendo call


nopponentscalling ==2 && ($55 || $66 || $77 || $88) ? 1 : //Hacemos call con estas parejas
nopponentscalling ==2 && ($99 || $TT || $JJ || $QQ || $KK || $AA) ? 2 : //Hacemos rais con estas parejas

nopponentscalling ==2 && ($98s || $T9s || $JTs || $QJs || $KQs) ? 1 : // Hacemos call con estos conectores suitados
nopponentscalling ==2 && ($A5s || $A6s || $A7s || $A8s || $A9s || $KTs || $QTs) ? 1 : //Con las siguientes cartas del mismo palo hacemos call
nopponentscalling ==2 && ($ATs || $AJs || $AQs || $AKs || $KJs) ? 2 : //Con las siguientes cartas del mismo palo hacemos rais
nopponentscalling ==2 && ($JTo || $QJo || $KQo) ? 1 : //Hacemos call con estos conectores de distinto palo
nopponentscalling ==2 && ($ATo || $AJo || $AQo || $AKo || $KQo) ? 2 : //Hacemos rais con estas cartas de distinto palo
nopponentscalling ==2 && ($KTo || $KJo || $QTo) ? 1 : //Hacemos call con estas cartas de distinto palo

//3 rivales o mas
nopponentscalling >= 3 && ($22 || $33 || $44 || $55 || $66 || $77 || $88 || $99 || $TT) ? 1 : //Con estas parejas hacemos call
nopponentscalling >= 3 && ($JJ || $QQ || $KK || $AA) ? 2 : //Con estas parejas hacemos rais

nopponentscalling >= 3 && ($98s || $T9s || $JTs || $QJs || $KQs) ? 1 : //Con estos conectores suitados hacemos call

nopponentscalling >= 3 && ($A2s || $A3s || $A4s || $A5s || $A6s || $A7s || $A8s || $A9s || $KTs || $Q8s || $Q9s || $QTs) ? 1 : //Hacemos call con estas cartas del mismo palo
nopponentscalling >= 3 && ($ATs || $AJs || $AQs || $AKs || $KJs)? 2 : //Hacemos rais con estas cartas del mismo palo

nopponentscalling >= 3 && ($T9o || $JTo || $QJo || $KQo) ? 1 : //Hacemos call con los siguientes conectores de distinto palo

nopponentscalling >= 3 && ($ATo || $AJo || $AQo || $AKo || $KQo) ? 2 : //Hacemos rais con las siguientes cartas de distinto palo
nopponentscalling >= 3 && ($KTo || $KJo || $QTo) ? 1 : //Hacemos call con las siguientes cartas de distinto palo

0 //Si no se cumple ninguna de las premisas la funcion no se cumple

##f$sblindcall##
//Funcion en la que vamos a definir cuando haremos call en el small blind cuando no haya subido nadie a partir del numero de limpers

0 // Por defecto la funcion no se cumple


//Hacemos call con todas las parejas con uno o mas limpers
|| nopponentscalling >= 1 && f$callbets <= 1 && ispair 

/*
//Hacemos call con 2 o mas limpers con todas las cartas suitadas
|| nopponentscalling >= 2 && f$callbets <= 1 && dealposition == 1 && ($XXs)

|| nopponentscalling == 1 && f$callbets <= 1 && dealposition == 1 && ($54s || $65s || $76s || $87s || $98s || $T9s || $JTs || $QJs || $KQs || $AXs || $K6s || $K7s || $K8s || $K9s || $KTs || $KJs || $KQs || $Q7s || $Q8s || $Q9s || $QTs || $QJs || $J8s || $J9s || $JTs || $T8s || $T9s || $T9o || $JTo || $QJo || $KQo || $A6o || $A7o || $A8o || $A9o || $ATo || $AJo || $AQo || $AKo || $K8o || $K9o || $KTo || $KJo || $KQo || $Q9o || $QTo || $QJo || $J8o || $J9o || $JTo) 

|| nopponentscalling == 2 && f$callbets <= 1 && dealposition == 1 && ($65o || $76o || $87o || $98o || $T9o || $JTo || $QJo || $KQo || $Axo || $K6o || $K7o || $K8o || $K9o || $KTo || $KJo || $KQo || $Q7o || $Q8o || $Q9o || $QTo || $QJo || $J7o || $J8o || $J9o || $JTo || $T8o || $T9o)

|| nopponentscalling == 3 && f$callbets <= 1 && dealposition == 1 && ($32o || $43o || $54o || $65o || $76o || $87o || $98o || $T9o || $JTo || $QJo || $KQo || $Axo || $Kxo || $Qxo || $Jxo || $T7o || $T8o || $T9o)

|| nopponentscalling >= 4 && f$callbets <= 1 && dealposition == 1*/

##f$defendblinds##
// last change 8/22/2006 cout v0008a
// Defend Blinds 
   [br==1 && dealposition<=2 && 
   (dealpositionrais==1||dealpositionrais>nplayersdealt-2) &&
   nraisbets<=2 &&  (
        ispair
     || $Axs
     || rankloplayer>=10
     || (issuited && isconnector && rankloplayer>4)
     || $Kxs && rankloplayer>8
     )
   ] 
|| [br==2 && dealposition<=2 && 
   (dealpositionrais==1||dealpositionrais>nplayersdealt-2) &&
    didraisround1 && !didcallround1 && 
    pt_iconlastr1<11 && (
        ispair
     || $Axs
     || rankloplayer>=10
     || {(issuited && isconnector && rankloplayer>=5) && (nstraightfill<2||nsuited>3||(nstraightfill==2 && nsuited==3))}
     || $Kxs && rankloplayer>8
     )
   ] 
|| [br==3 && dealposition<=2 && 
   (dealpositionrais==1||dealpositionrais>nplayersdealt-2) &&
    nbetsround<2 && (
        ispair
     || nsuited==4
     || nstraightfill==1
     )
   ] 
// nobody hit their draws, so bluff/opponent often CAN'T call, even if they doubt we have it. 
|| [br==4 && dealposition<=2 && nbetsround<1 &&
   (dealpositionrais==1||dealpositionrais>nplayersdealt-2) &&
    f$openboard && (    
        ispair
     || nsuited==4
     || nstraightfill==1
     )
   ]  
? 2 :
   [br==1 && dealposition<=2 && 
   (dealpositionrais==1||dealpositionrais>nplayersdealt-2) &&
   nraisbets<=2 &&  (
        ispair
     || $Axs
     || rankloplayer>=10
     || (issuited && isconnector && rankloplayer>4)
     || $Kxs && rankloplayer>8
     )
   ] 

|| [br==2 && dealposition<=2 && 
   (dealpositionrais==1||dealpositionrais>nplayersdealt-2) &&
    didraisround1 && !didcallround1 && 
    pt_iconlastr1>10 && (
        ispair
     || $Axs
     || rankloplayer>=10
     || {(issuited && isconnector && rankloplayer>=5) && (nstraightfill<2||nsuited>3||(nstraightfill==2 && nsuited==3))}
     || $Kxs && rankloplayer>8
     )
   ] 
|| [br==3 && dealposition<=2 && 
   (dealpositionrais==1||dealpositionrais>nplayersdealt-2) &&
    nbetsround<2 && (
        ispair
     || nsuited==4
     || nstraightfill==1
     )
   ] 
// nobody hit their draws, so bluff/opponent often CAN'T call, even if they doubt we have it. 
|| [br==4 && dealposition<=2 && nbetsround<1 &&
   (dealpositionrais==1||dealpositionrais>nplayersdealt-2) &&
    f$openboard && (    
        ispair
     || nsuited==4
     || nstraightfill==1
     )
   ]  
? 1 :
0

/*
// last change 8/18/2006 Winngy v0003
   [br==1 && dealposition==1 && nplayersplaying<=3 && dealpositionrais==nplayersdealt     && !didcall && handrank169<30 && nraisbets==3] //Defend our small blind - button raise 
|| [br==1 && dealposition==1 && nplayersplaying<=3 && dealpositionrais==(nplayersdealt-1) && !didcall && handrank169<25 && nraisbets==3] //Defend our small blind - cutoff raise 
|| [br==1 && dealposition==2 && nplayersplaying==2 && dealpositionrais==1		  && !didcall && handrank169<35 && nraisbets==3] //Defend our big blind - sblind raise 
|| [br==1 && dealposition==2 && nplayersplaying<=3 && dealpositionrais==nplayersdealt     && !didcall && handrank169<30 && nraisbets==3] //Defend our big blind - button raise 
|| [br==1 && dealposition==2 && nplayersplaying<=3 && dealpositionrais==(nplayersdealt-1) && !didcall && handrank169<25 && nraisbets==3] //Defend our big blind - cutoff raise
*/

##f$stealblinds##
// last change 8/22/2006 cout v0008a
// Steal Blinds 
   [br==1 && (f$spl||dealposition==1) && nraisbets<=2 && nopponentscalling==0 && (
        ispair
     || $Axs
     || rankloplayer>=10 && issuited
     || rankloplayer>=10 && f$spd  
     || (issuited && isconnector && rankloplayer>4 && f$spd)
     || $Kxs && rankloplayer>8 && f$spd
     )
   ] 
|| [br==2 && (f$spl||dealposition==1) && 
    (dealpositionrais<=2||dealpositionrais>=nplayersdealt-1) && 
    nbetsround1<=2 && nopponentsplaying<=1 && 
    didraisround1 && !didcallround1 && (
        pokerval>onepair
     ||(nstraightfill<2||nsuited>3||(nstraightfill==2 && nsuited==3))
     || $Axs && nsuited>2 
     || rankloplayer>=10 && (nstraight>2||nstraightfill<2)
     || {(issuited && isconnector && rankloplayer>=5) && (nstraightfill<2||nsuited>3||(nstraightfill==2 && nsuited==3))}
     || $Kxs && nsuited>3 
     )
   ] 
|| [br==3 && (f$spl||dealposition==1) && 
    (dealpositionrais<=2||(dealpositionrais>=(nplayersdealt-1))) && 
    nbetsround<1 && (
        ispair
     || nsuited==4
     || nstraight==4
     || nstraightfill==1 && f$spd
     )
   ] 
// nobody hit their draws so semi-bluffers often CAN'T call, even if they doubt we have it. 
|| [br==4 && (f$spd||dealposition==1) && call<=0 &&
    (dealpositionrais<=2||(dealpositionrais>=(nplayersdealt-1))) &&  
    f$SAFEBOARD && pokerval>onepair
   ]
? 2 :
   [br==1 && didrais && (f$spl||dealposition==1) && ncallbets<2 && nopponentscalling==0 && (
        ispair
     || $Axs
     || rankloplayer>=10 
     || $Kxs && rankloplayer>8
     )
   ] 
|| [br==2 && didrais && (f$spl||dealposition==1) && 
    (dealpositionrais<=2||dealpositionrais>=nplayersdealt-1) && 
    nbetsround1<=2 && nopponentsplaying<=1 && 
    didraisround1 && !didcallround1 && (
        ispair
     || $Axs
     || rankloplayer>=10
     || {(issuited && isconnector && rankloplayer>=5) && (nstraightfill<2||nsuited>3||(nstraightfill==2 && nsuited==3))}
     || $Kxs && rankloplayer>8
     )
   ] 
|| [br==3 && didrais && (f$spl||dealposition==1) && 
    (dealpositionrais<=2||(dealpositionrais>=(nplayersdealt-1))) && 
    nbetsround<1 && (
        ispair
     || nsuited==4
     || nstraight==4
     )
   ] 
|| [br==4 && (f$spl||dealposition==1) && 
    (dealpositionrais<=2||(dealpositionrais>=(nplayersdealt-1))) &&  
    f$SAFEBOARD && pokerval>onepair
   ]
? 1 :
0

##f$SAFEBOARD##
[nrankedcommon<2 && 
 nsuitedcommon<3 && 
 nstraightcommon<3 && 
 nstraightfillcommon>1 ]
&& !(br>2 && rankhicommon==14 && rankhicommon>rankhiplayer)

##f$spd##
 // static position dealer
[ dealposition==nplayersdealt ]

##f$spl##
 // static position late
[ dealposition>=nplayersdealt-1 ]

##f$callrais##
0

|| [br==1 && didraisround1]

|| [br==2 && didraisround2]

|| [br==3 && didraisround3]

|| [br==4 && didraisround4]

##f$callbets##
br == 1 || br == 2 ? call / (bblind/2) :
br == 3 || br == 4 ? call/bblind : 0

##f$raisrondaactual##
0

|| br ==  1 && didraisround1
|| br ==  2 && didraisround2
|| br ==  3 && didraisround3
|| br ==  4 && didraisround4

##f$bet##
0

|| br == 4 && isflush && nsuitedcommon <= 4 && nrankedcommon < 2
|| br == 4 && isstraight && nstraightcommon  <= 4 && nsuitedcommon < 3 && nrankedcommon < 2
|| br == 4 && isthreeofakind && nrankedcommon < 2 && nsuitedcommon < 3 && nstraightcommon < 3

##f$strength_twopair##
istwopair ?

({0
 //Board has No Pair and you have Top two pairs
|| [ nrankedcommon==1 && istwopair && (pokerval&15)<((pokerval>>4)&15) ] 
} ? 5 :

{0
//Board has No Pair and you have Top and bottom pair
|| [ nrankedcommon==1 && istwopair && (pokerval&15)<((pokerval>>16)&15) && (pokerval&15)>((pokerval>>4)&15) ] 
//Board has No Pair and you have Middle two pairs
|| [ nrankedcommon==1 && istwopair && (pokerval&15)>((pokerval>>8)&15) && (pokerval&15)>((pokerval>>4)&15) && !(rankloplayer==ranklocommon) ]
//Rainbow board
|| [ istwopair && f$SAFEBOARD ]
} ? 4 :

{0
//Board has Pair and you have Overpair
|| [ nrankedcommon==2 && istwopair && ($$pr0==((pokerval>>16)&0xf) || $$pr1==((pokerval>>16)&0xf)) ] 

|| [ nrankedcommon==2 && istwopair && ispair && $$pr0>trankcommon ] 
//Board has No Pair and you have Bottom two pairs
|| [ nrankedcommon==1 && istwopair && (pokerval&15)>((pokerval>>16)&15) ] 
} ? 3 :

{0
//Board has Pair and you have Underpair
|| [ nrankedcommon==2 && istwopair && ispair && (pokervalcommon < twopair) && $$pr0<trankcommon ] 
//Board has Pair and you have Two pairs w/ good kicker (A-T)
|| [ nrankedcommon==2 && (pokervalcommon < twopair) && istwopair && !ispair && (pokerval&15)>=10 ] 
} ? 2 :

{0
//Board has two pair and you have only two pair
|| [ nrankedcommon==2 && istwopair && (pokervalcommon & twopair) ]
//Board has Pair and you have Two pairs w/ poor kicker (9-2)
|| [ nrankedcommon==2 && (pokervalcommon < twopair) && istwopair && !ispair && (pokerval&15)<=9 ] 
//Catch all
|| [ istwopair ]
} ? 1 : 0) 

// TwoPairDiscount
- (
0
//+(nsuitedcommon>=3)*2
//+(nsuitedcommon>=4)
//+(!f$NESTR)*2
//+(nstraightfillcommon<=1 || nstraightcommon>=4)
)

: 0

##f$norais##
//Funcion en la que definimos cuando no hacemos rais
0

|| [br>= 2 && pokerval <= straight && (nsuitedcommon >=4 || nrankedcommon >=3) && ((br==2 && didraisround2) || (br==3 &&didraisround3) || (br==4 &&didraisround4))]

|| [br >= 2 && pokerval <= flush && nrankedcommon >=3 && ((br==2 && didraisround2) || (br==3 &&didraisround3) || (br==4 &&didraisround4))]

//|| [f$checkrais == 1]

|| f$headsupflop == 1

// Si tenemos una escalera muy debil no subimos, solo hacemos call si hay que igualar una unica apuesta
|| [isstraight  && f$strength_straight < 3 && f$raisrondaactual]

|| [isflush && f$strength_flush < 3 && f$raisrondaactual]


//No hacemos rais cuando hay mas de un jugador y solo falta una carta para completar una escalera

|| [br>=2 && nstraightfillcommon==1 && nopponentsplaying > 1 && pokerval <= threeofakind]


//Si el rival que hace rais tiene credibilidad no subimos
|| [f$Credibilidadrival && br >= 2 && pokerval <=twopair]

##f$checkrais##
//Funcion en la que definimos cuando vamos a hacer chech-rais
[br == 2 && pokerval >= threeofakind && pokervalcommon <= twopair && nrankedcommon < 2 && randomround <= 0.8 && call == 0 && (!didraisround2 || !didcallround2 || !didchecround2) && !f$Fold] ? 1 : //Si se cumplen las condiciones y no hemos hecho nada en la ronda actual hacemos check el 80% de las veces

[br == 3 && pokerval >= threeofakind && pokervalcommon <= twopair && nrankedcommon < 2 && randomround <= 0.8 && call == 0 && (!didraisround3 || !didcallround3 || !didchecround3) && !f$Fold] ? 1 : //Si se cumplen las condiciones y no hemos hecho nada en la ronda actual hacemos check el 80% de las veces

[br == 4 && pokerval >= threeofakind && pokervalcommon <= twopair && nrankedcommon < 2 && randomround <= 0.8 && call == 0 && (!didraisround4 || !didcallround4 || !didchecround4) && !f$Fold] ? 1 : //Si se cumplen las condiciones y no hemos hecho nada en la ronda actual hacemos check el 80% de las veces



[br == 2 && pokerval >= threeofakind && pokervalcommon <= twopair && nrankedcommon < 2  && call == 0 && didchecround2 && !f$Fold] ? 2 :

[br == 3 && pokerval >= threeofakind && pokervalcommon <= twopair && nrankedcommon < 2  && call == 0 && didchecround3 && !f$Fold] ? 2 :

[br == 4 && pokerval >= threeofakind && pokervalcommon <= twopair && nrankedcommon < 2  && call == 0 && didchecround4 && !f$Fold] ? 2 : 0

##f$subidaporvalor##
//Funcion en la que vamos a definir cuando subimos por valor en proyectos en el flop
0  //Por defecto no subimos por valor en el flop

|| [br == 2 && f$cuentaouts == 8 && nopponentsbetting >= 3]

|| [br == 2 && (f$cuentaouts >= 9 && f$cuentaouts <=13) && nopponentsbetting >= 2]

|| [br == 2 && f$cuentaouts >= 14 && nopponentsbetting >= 1]

##f$headsupflop##
//Funcion en la que definimos el juego heads up en el flop

// Valor 2 Rais 1 check

//No hubo ningun rais y estas fuera de posicion
br == 2 && nopponentsplaying == 1 && betposition == 1 && currentbet <= bblind ? 2 :

//No hubo ningun rais y estas en posicion
br == 2 && nopponentsplaying == 1 && betposition == 2 && currentbet <= bblind ?

call == 0 ? 2: 0

:

//El oponente hizo un rais y estas fuera de posicion
br == 2 && nopponentsplaying == 1 && betposition == 1 && !didraisround1 && currentbet > bblind ? 

f$rais == 1 ? 1 : 0

:

//El oponente hizo un rais y estas en posicion
br == 2 && nopponentsplaying == 1 && betposition == 2 && !didraisround1 && currentbet > bblind ? 0 :

//Hiciste un rais y estas fuera de posicion
br == 2 && nopponentsplaying == 1 && betposition == 1 && didraisround1 ? 2 :

//Hiciste un rais y estas en posicion
br == 2 && nopponentsplaying == 1 && betposition == 2 && didraisround1 ? 

call == 0 ? 2 : 0

: 0

##f$DP##
// SB=1 BB=2 Early=3 Middle=4 Late=5

dealposition==1 ? 1:
dealposition==2 ? 2:

nplayersdealt==10 ? (dealposition==3 ? 3 :
                     dealposition==4 ? 3 :
                     dealposition==5 ? 3 :
                     dealposition==6 ? 4 :
                     dealposition==7 ? 4 :
                     dealposition==8 ? 4 :
                     dealposition==9 ? 5 :
                     dealposition==10? 5 : 0): 

nplayersdealt==9 ?  (dealposition==3 ? 3 :
                     dealposition==4 ? 3 :
                     dealposition==5 ? 3 :
                     dealposition==6 ? 4 :
                     dealposition==7 ? 4 :
                     dealposition==8 ? 5 :
                     dealposition==9 ? 5 : 0):

nplayersdealt==8 ?  (dealposition==3 ? 3 :
                     dealposition==4 ? 3 :
                     dealposition==5 ? 4 :
                     dealposition==6 ? 4 :
                     dealposition==7 ? 5 :
                     dealposition==8 ? 5 : 0):

nplayersdealt==7 ?  (dealposition==3 ? 3 :
                     dealposition==4 ? 3 :
                     dealposition==5 ? 4 :
                     dealposition==6 ? 4 :
                     dealposition==7 ? 5 : 0):
 
nplayersdealt==6 ?  (dealposition==3 ? 3 :
                     dealposition==4 ? 4 :
                     dealposition==5 ? 4 :
                     dealposition==6 ? 5 : 0):
                     
nplayersdealt==5 ?  (dealposition==3 ? 3 :
                     dealposition==4 ? 4 :
                     dealposition==5 ? 5 : 0):
                     
nplayersdealt==4 ?  (dealposition==3 ? 4 :
                     dealposition==4 ? 5 : 0):
                   
nplayersdealt==3 ?  (dealposition==3 ? 5 : 0):0

##f$strength_straight##
isstraight ?

({0
//Board 3 to a straight, cards in rank 1 and rank 2 (high end)
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr1==((pokerval>>12)&0xf))) || (($$pr1==((pokerval>>16)&0xf))&&($$pr0==((pokerval>>12)&0xf))))]
//Board 3 to a straight, cards in rank 1 and rank 3
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr1==((pokerval>>8)&0xf))) || (($$pr1==((pokerval>>16)&0xf))&&($$pr0==((pokerval>>8)&0xf))))]
//Board 3 to a straight, cards in rank 1 and rank 4
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr1==((pokerval>>4)&0xf))) || (($$pr1==((pokerval>>16)&0xf))&&($$pr0==((pokerval>>4)&0xf))))]
//Board 4 to a straight, card used in rank 1, nut straight with an ace
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr0==14)) || (($$pr1==((pokerval>>16)&0xf))&&($$pr1==14))) ]
//Board 4 to a straight, card used in rank 2, nut straight with a king
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>12)&0xf))&&($$pr0==13)) || (($$pr1==((pokerval>>12)&0xf))&&($$pr1==13))) ]
//Board 4 to a straight, card used in rank 3, nut straight with a queen
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>8)&0xf))&&($$pr0==12)) || (($$pr1==((pokerval>>8)&0xf))&&($$pr1==12))) ]
//Board 4 to a straight, card used in rank 4, nut straight with a jack
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>4)&0xf))&&($$pr0==11)) || (($$pr1==((pokerval>>4)&0xf))&&($$pr1==11))) ]
//Board 4 to a straight, card used in rank 5, nut straight with a ten
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>0)&0xf))&&($$pr0==10)) || (($$pr1==((pokerval>>0)&0xf))&&($$pr1==10))) ]
//Board 3 to a straight, nut straights
|| [ isstraight && nstraightfillcommon==2 && rankloplayer>=10 ]
} ? 5 :

{0
//Board 3 to a straight, cards in rank 1 and rank 5
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr1==((pokerval>>0)&0xf))) || (($$pr1==((pokerval>>16)&0xf))&&($$pr0==((pokerval>>0)&0xf))))]
//Board 3 to a straight, cards in rank 2 and rank 3
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>12)&0xf))&&($$pr1==((pokerval>>8)&0xf))) || (($$pr1==((pokerval>>12)&0xf))&&($$pr0==((pokerval>>4)&0xf))))]
//Board 3 to a straight, cards in rank 2 and rank 4
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>12)&0xf))&&($$pr1==((pokerval>>4)&0xf))) || (($$pr1==((pokerval>>12)&0xf))&&($$pr0==((pokerval>>4)&0xf))))]
} ? 4 :

{0
//Board 3 to a straight, cards in rank 2 and rank 5
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>12)&0xf))&&($$pr1==((pokerval>>0)&0xf))) || (($$pr1==((pokerval>>12)&0xf))&&($$pr0==((pokerval>>0)&0xf))))]
//Board 3 to a straight, cards in rank 3 and rank 4
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>8)&0xf))&&($$pr1==((pokerval>>4)&0xf))) || (($$pr1==((pokerval>>8)&0xf))&&($$pr0==((pokerval>>4)&0xf))))]
//Board 3 to a straight, cards in rank 3 and rank 5
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>8)&0xf))&&($$pr1==((pokerval>>0)&0xf))) || (($$pr1==((pokerval>>8)&0xf))&&($$pr0==((pokerval>>0)&0xf))))]
//Board 3 to a straight, cards in rank 4 and rank 5 (idiot end)
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>4)&0xf))&&($$pr1==((pokerval>>0)&0xf))) || (($$pr1==((pokerval>>4)&0xf))&&($$pr0==((pokerval>>0)&0xf))))]

// Hole cards A5, board 234;
|| [ isstraight && nstraightfillcommon==2 &&(($$pr0==14)&&($$pr1==5))&&(((pokerval>>16)&0xf)<6)]
} ? 3 :

{0
//Board 4 to a straight, card used in rank 3
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>8)&0xf)) || ($$pr1==((pokerval>>8)&0xf))) ]
//Board 4 to a straight, card used in rank 4
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>4)&0xf)) || ($$pr1==((pokerval>>4)&0xf))) ]
// Hole cards A(2,3or4), board xx5; look at value of this
|| [isstraight && nstraightfillcommon==2 &&(($$pr0==14)&&($$pr1<=4))&&(((pokerval>>16)&0xf)<6)]

//Board 4 to a straight, card used in rank 1
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>16)&0xf)) || ($$pr1==((pokerval>>16)&0xf))) ]
//Board 4 to a straight, card used in rank 2
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>12)&0xf)) || ($$pr1==((pokerval>>12)&0xf))) ]
// Hole cards A(>5), board 2345; look at value of this
|| [isstraight && nstraightfillcommon==1 &&(($$pr0==14)&&($$pr1>=6))&&(((pokerval>>16)&0xf)<6)]
} ? 2 :

{0
//Board 4 to a straight, card used in rank 5
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>0)&0xf)) || ($$pr1==((pokerval>>0)&0xf))) ]
//Board has straight
|| [ isstraight && nstraightfillcommon==0 ]
} ? 1 : 0)

// StraightDiscount
- ( 
0
+(nsuitedcommon>=3)*2 
+(nsuitedcommon>=4) 
+(nrankedcommon>=2) 
+(nrankedcommon>=3) 
+(pokervalcommon&twopair?2:0)
// Negate flush discount if we have a good flush draw 
- ( nsuitedcommon==3 && nsuited==4 && `((~srankbits&0x7fff)>>srankhiplayer)<=2 )
)

: 0

##f$strength_flush##
isflush ?

// Big raise
((
0
|| [ ishiflush && (!(pokervalcommon&flush) || pokerval>pokervalcommon) && nrankedcommon==1 
     && nstraightflushfillcommon>=3 ]  // nuts
) ? 5 :

// Medium raise
(
0
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)<=1 && nrankedcommon==1 && nsuitedcommon<=4 ] // one card can beat my flush
|| [ ishiflush && (!(pokervalcommon&flush) || pokerval>pokervalcommon) && nrankedcommon<=2 
     && nstraightflushfillcommon>=2 ]
) ? 4 :

// Small raise
(
0
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)<=2 && nrankedcommon==1 && nsuitedcommon<=4 ] // two cards can beat my flush
) ? 3 :

// Call
(
0
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)>=3 && nrankedcommon==1 && nsuitedcommon<=4 ] // three or more cards can beat my flush
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)<=2 && nrankedcommon==2 && nsuitedcommon<=4 ] // two or less cards can beat my flush, board paired
) ? 2 :

// Don't call these
(
0
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)>=4 && nsuitedcommon<=4 ] // four or more cards can beat my flush
|| [ isflush && nrankedcommon>=3 ] // board has trips or more
|| [ isflush && pokerval<pokervalcommon && (pokervalcommon&flush) ] // board has flush, my cards don't help
) ? 1 :
0)

// FlushDiscount
- ( 
0
+ (pokervalcommon&twopair?2:0)
)

: 0

##f$midpair##
0

//Board has No Pair and you have Midpair 1 overcard 
|| [ nrankedcommon==1 && ispair && pokerval<twopair && ((pokerval>>8)&15)>trank && ((pokerval>>4)&15)<trank ]

//Board has No Pair and you have Middle pair w/ overcard kicker 
|| [ nrankedcommon==1 && ismidpair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1>trankcommon)||(trank==$$pr1 && $$pr0>trankcommon)} ] 

//Board has No Pair and you have Midpair 2 overcard 
|| [ nrankedcommon==1 && ispair && pokerval<twopair && ((pokerval>>8)&15)>trank && ((pokerval>>4)&15)>trank ] 

//Board has Pair and you have "Two overcards w/Ace" 
|| [ nrankedcommon==2 && rankloplayer>rankhicommon  && rankhiplayer==14 && rankloplayer>=10 && !ispair ] 

//Board has No Pair and you have Middle pair w/ poor kicker 
|| [ nrankedcommon==1 && ismidpair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1<trankcommon)||(trank==$$pr1 && $$pr0<trankcommon)} ] 

##f$algunaaccionrondaactual##
//Funcion en la que definimos si hemos hecho alguna accion en la ronda actual

0

|| [br== 1 && (didraisround1 || didchecround1 || didcallround1)]
|| [br== 2 && (didraisround2 || didchecround2 || didcallround2)]
|| [br== 3 && (didraisround3 || didchecround3 || didcallround3)]
|| [br== 4 && (didraisround4 || didchecround4 || didcallround4)]

##f$Credibilidadrival##
//Funcion en la que vamos a definir la credibilidad del rival que nos esta agrediendo

0

|| [pt_rhands > 100 && pt_rvpip < 0.2 && pt_rvpip > 0]

##f$robarciegas##
//Función en la que definimos cuando intentaremos robar ciegas

0

//Si estamos en el small blind todo el mundo se retira y el bblind abandona la ciega grande mas del 70% de las veces
|| [dealposition == 1 && nopponentscalling == 0 && f$callbets <=1 && !f$raisrondaactual && f$bbfbbts >= 0.7]

//Si somos el dealer todo el mundo se retira el small blind abandona la ciega pequeña mas del 70% y el bbblind abandona la ciega grande mas del 70%
|| [dealposition == nplayersseated-1 && nopponentscalling == 0 && f$callbets <=1 && !f$raisrondaactual &&  f$sbfsbts >= 0.7 && f$bbfbbts >= 0.7]

##f$sbchair##
//Funcion en la que vamos a definir la silla del small blind
[chair == 0] ?


[f$diferenciaconsb == 1] ? 9 :
[f$diferenciaconsb == 2] ? 8 :
[f$diferenciaconsb == 3] ? 7 :
[f$diferenciaconsb == 4] ? 6 :
[f$diferenciaconsb == 5] ? 5 :
[f$diferenciaconsb == 6] ? 4 :
[f$diferenciaconsb == 7] ? 3 :
[f$diferenciaconsb == 8] ? 2 :
[f$diferenciaconsb == 9] ? 1 : 99

:



[chair == 1] ?


[f$diferenciaconsb == 1] ? 0 :
[f$diferenciaconsb == 2] ? 9 :
[f$diferenciaconsb == 3] ? 8 :
[f$diferenciaconsb == 4] ? 7 :
[f$diferenciaconsb == 5] ? 6 :
[f$diferenciaconsb == 6] ? 5 :
[f$diferenciaconsb == 7] ? 4 :
[f$diferenciaconsb == 8] ? 3 :
[f$diferenciaconsb == 9] ? 2 : 99


:


[chair == 2] ?


[f$diferenciaconsb == 1] ? 1 :
[f$diferenciaconsb == 2] ? 0 :
[f$diferenciaconsb == 3] ? 9 :
[f$diferenciaconsb == 4] ? 8 :
[f$diferenciaconsb == 5] ? 7 :
[f$diferenciaconsb == 6] ? 6 :
[f$diferenciaconsb == 7] ? 5 :
[f$diferenciaconsb == 8] ? 4 :
[f$diferenciaconsb == 9] ? 3 : 99


:


[chair == 3] ?


[f$diferenciaconsb == 1] ? 2 :
[f$diferenciaconsb == 2] ? 1 :
[f$diferenciaconsb == 3] ? 0 :
[f$diferenciaconsb == 4] ? 9 :
[f$diferenciaconsb == 5] ? 8 :
[f$diferenciaconsb == 6] ? 7 :
[f$diferenciaconsb == 7] ? 6 :
[f$diferenciaconsb == 8] ? 5 :
[f$diferenciaconsb == 9] ? 4 : 99


:


[chair == 4] ?


[f$diferenciaconsb == 1] ? 3 :
[f$diferenciaconsb == 2] ? 2 :
[f$diferenciaconsb == 3] ? 1 :
[f$diferenciaconsb == 4] ? 0 :
[f$diferenciaconsb == 5] ? 9 :
[f$diferenciaconsb == 6] ? 8 :
[f$diferenciaconsb == 7] ? 7 :
[f$diferenciaconsb == 8] ? 6 :
[f$diferenciaconsb == 9] ? 5 : 99

:



[chair == 5] ?


[f$diferenciaconsb == 1] ? 4 :
[f$diferenciaconsb == 2] ? 3 :
[f$diferenciaconsb == 3] ? 2 :
[f$diferenciaconsb == 4] ? 1 :
[f$diferenciaconsb == 5] ? 0 :
[f$diferenciaconsb == 6] ? 9 :
[f$diferenciaconsb == 7] ? 8 :
[f$diferenciaconsb == 8] ? 7 :
[f$diferenciaconsb == 9] ? 6 : 99


:


[chair == 6] ?


[f$diferenciaconsb == 1] ? 5 :
[f$diferenciaconsb == 2] ? 4 :
[f$diferenciaconsb == 3] ? 3 :
[f$diferenciaconsb == 4] ? 2 :
[f$diferenciaconsb == 5] ? 1 :
[f$diferenciaconsb == 6] ? 0 :
[f$diferenciaconsb == 7] ? 9 :
[f$diferenciaconsb == 8] ? 8 :
[f$diferenciaconsb == 9] ? 7 : 99


:


[chair == 7] ?


[f$diferenciaconsb == 1] ? 6 :
[f$diferenciaconsb == 2] ? 5 :
[f$diferenciaconsb == 3] ? 4 :
[f$diferenciaconsb == 4] ? 3 :
[f$diferenciaconsb == 5] ? 2 :
[f$diferenciaconsb == 6] ? 1 :
[f$diferenciaconsb == 7] ? 0 :
[f$diferenciaconsb == 8] ? 9 :
[f$diferenciaconsb == 9] ? 8 : 99


:


[chair == 8] ?


[f$diferenciaconsb == 1] ? 7 :
[f$diferenciaconsb == 2] ? 6 :
[f$diferenciaconsb == 3] ? 5 :
[f$diferenciaconsb == 4] ? 4 :
[f$diferenciaconsb == 5] ? 3 :
[f$diferenciaconsb == 6] ? 2 :
[f$diferenciaconsb == 7] ? 1 :
[f$diferenciaconsb == 8] ? 0 :
[f$diferenciaconsb == 9] ? 9 : 99

:



[chair == 9] ?


[f$diferenciaconsb == 1] ? 8 :
[f$diferenciaconsb == 2] ? 7 :
[f$diferenciaconsb == 3] ? 6 :
[f$diferenciaconsb == 4] ? 5 :
[f$diferenciaconsb == 5] ? 4 :
[f$diferenciaconsb == 6] ? 3 :
[f$diferenciaconsb == 7] ? 2 :
[f$diferenciaconsb == 8] ? 1 :
[f$diferenciaconsb == 9] ? 0 : 99


 : 99

##f$diferenciaconsb##
//Funcion en la que definimos la diferencia de asientos con small blind


[dealposition != 1] ? seatposition - 1 : 0

##f$sbfsbts##
//Funcion en la que definimos el % de abandono del small blind


[f$sbchair == 0 && pt_hands0 > 100] ? pt_fsbts0 :
[f$sbchair == 1 && pt_hands1 > 100] ? pt_fsbts1 :
[f$sbchair == 2 && pt_hands2 > 100] ? pt_fsbts2 :
[f$sbchair == 3 && pt_hands3 > 100] ? pt_fsbts3 :
[f$sbchair == 4 && pt_hands4 > 100] ? pt_fsbts4 :
[f$sbchair == 5 && pt_hands5 > 100] ? pt_fsbts5 :
[f$sbchair == 6 && pt_hands6 > 100] ? pt_fsbts6 :
[f$sbchair == 7 && pt_hands7 > 100] ? pt_fsbts7 :
[f$sbchair == 8 && pt_hands8 > 100] ? pt_fsbts8 :
[f$sbchair == 9 && pt_hands9 > 100] ? pt_fsbts9 : 0

##f$bbfbbts##
//Funcion en la que definimos el % de abandono del BB

[f$sbchair == 0 && pt_hands1 > 100] ? pt_fbbts1 :
[f$sbchair == 1 && pt_hands2 > 100] ? pt_fbbts2 :
[f$sbchair == 2 && pt_hands3 > 100] ? pt_fbbts3 :
[f$sbchair == 3 && pt_hands4 > 100] ? pt_fbbts4 :
[f$sbchair == 4 && pt_hands5 > 100] ? pt_fbbts5 :
[f$sbchair == 5 && pt_hands6 > 100] ? pt_fbbts6 :
[f$sbchair == 6 && pt_hands7 > 100] ? pt_fbbts7 :
[f$sbchair == 7 && pt_hands8 > 100] ? pt_fbbts8 :
[f$sbchair == 8 && pt_hands9 > 100] ? pt_fbbts9 :
[f$sbchair == 9 && pt_hands0 > 100] ? pt_fbbts0 : 0

##f$importeapuesta##
//Funcion en la que definimos el importe exacto de la apuesta actual
[br <= 2 ? (bblind/2) : bblind]

##f$value_to_raise##
[(((prwin * (pot+(nplayersplaying * f$importeapuesta)))+(prtie * (pot+(nplayersplaying * f$importeapuesta)/2)))-(prlos * (call+f$importeapuesta)))]

##f$value_to_call##
[(((prwin * (pot+callshort))+(prtie * (pot+callshort/2)))-(prlos * call))]

##f$cost_to_fold##
[((prwin*pot) + (prtie*(pot/2)))]

##f$juegoconescaleracolorfull##
//Funcion en la que vamos a definir el juego cuando hemos conseguido una escalera color o full
//3 rais hasta cap, 2 ras-call, 1 check-call 0 fold

//Definimos el juego con Full

[br >=2 && isfullhouse && f$strength_fullhouse > 2] ? 3 :

[br >=2 && isfullhouse && f$strength_fullhouse >= 2] ? 1 :


//Definimos el juego con color

//Si tenemos un color fuerte vamos hasta cap
[br >= 2 && isflush && pokervalcommon < flush && f$strength_flush >= 3] ? 3 :

[br >= 2 && isflush && pokervalcommon < flush && f$strength_flush == 2] ? 2 :


//Definimos el juego con escalera

//Tenemos un straight bueno sin posibilidad de color ni full !a tope con él! Bet hasta cap
[br >=2 && isstraight && nstraightfillcommon == 2 && nsuitedcommon <=2  && nrankedcommon < 2 ] ? 3 :


//Tenemos un straight, pero puede haber 3 cartas suitadas 0 faltar solo dos en el board para el straight
[br >=2 && isstraight && (nstraightfillcommon == 1 || nsuitedcommon >=3  || nrankedcommon >= 2) && pokervalcommon < straight] ? 2 : 0

