//************************************************************************
//                                                                        
// Converted with OpenPPL 4.4.0                                           
//                                                                        
// OpenPPL is part of the OpenHoldem project                              
//   Download page:         http://code.google.com/p/openholdembot/       
//   Forums:                http://www.maxinmontreal.com/forums/index.php 
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html          
//                                                                        
// The original PPL (Poker Programming Language) got invented by          
//   Shanky Bonusbots:      http://www.bonusbots.com/supportforum/YaBB.pl 
//                                                                        
// Required OpenHoldem version: 4.4.0 or later                            
//                                                                        
// Contributors:                                                          
//   Bob3456                                                              
//   CoolBotMe123                                                         
//   CrumbleSunday                                                        
//   Dr.Kaktuz                                                            
//   Efu                                                                  
//   Fn101                                                                
//   Gecko                                                                
//   JConner                                                              
//   Jokedoke                                                             
//   KaeKruse                                                             
//   Kyo                                                                  
//   Lavezzi                                                              
//   MerzkiyTipon                                                         
//   Morello                                                              
//   MrRuder                                                              
//   Nik0                                                                 
//   NPNG                                                                 
//   Poker_Dog                                                            
//   Postenjak                                                            
//   Rambam                                                               
//   Relhby                                                               
//   Satanikut                                                            
//   Stangelnator                                                         
//   SteveG1963                                                           
//   Strikles                                                             
//   Superblak                                                            
//   TheHighFish                                                          
//   ThemAndMe                                                            
//   Want2Learn                                                           
//   Zolp                                                                 
//                                                                        
//************************************************************************


//***********************************************************
//                                                           
//  Option settings                                          
//  ===============                                          
//                                                           
//  To be ignored,                                           
//  as nearly all of them are for the built-in default bot,  
//  which is not supported.                                  
//                                                           
//***********************************************************


//***********************************************************
//                                                           
//  Hand lists                                               
//  ==========                                               
//                                                           
//  Translated code for user-defined hand-lists.             
//  Note: hand-lists are not part of standard PPL.           
//  Please refer to the manual for details.                  
//                                                           
//  OpenPPL lists look like that                             
//                                                           
//  CUSTOM                                                   
//                                                           
//  LISTS                                                    
//                                                           
//  NEW LIST 007                                             
//      // Standard open-raising range for CutOff            
//      AA KK QQ                                             
//      AKs AQs                                              
//      AKo 72o                                              
//  END LIST                                                 
//                                                           
//***********************************************************


##list01##
AA KK QQ JJ TT AKs AQs AKo 

##list10##
99 88 77 66 AJs ATs A9s A8s KQs KJs KTs QJs QTs JTs AQo KQo AJo KJo ATo 

##list11##
99 88 77 66 55 AJs ATs A9s A8s A7s A6s KQs KJs KTs K9s QJs QTs Q9s JTs J9s T9s AQo KQo AJo KJo QJo ATo A9o 

##list12##
99 88 77 66 55 44 AJs ATs A9s A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s K8s QJs QTs Q9s Q8s JTs J9s J8s T9s 98s AQo KQo AJo KJo QJo ATo KTo QTo JTo A9o A8o A7o 

##list13##
99 88 77 66 55 44 AJs ATs A9s A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s K8s K7s K6s K5s K4s K3s K2s QJs QTs Q9s Q8s Q7s Q6s JTs J9s J8s J7s T9s T8s 98s 87s 76s AQo KQo AJo KJo QJo ATo KTo QTo JTo A9o K9o Q9o J9o A8o K8o A7o K7o A6o A5o A4o A3o A2o 

##list14##
99 88 77 66 55 44 33 22 AJs ATs A9s A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s K8s K7s K6s K5s K4s K3s K2s QJs QTs Q9s Q8s Q7s Q6s Q5s Q4s Q3s Q2s JTs J9s J8s J7s J6s J5s J4s J3s J2s T9s T8s T7s T6s T5s T4s T3s 98s 97s 96s 95s 94s 87s 86s 85s 76s AQo KQo AJo KJo QJo ATo KTo QTo JTo A9o K9o Q9o J9o T9o A8o K8o Q8o J8o T8o 98o A7o K7o Q7o J7o T7o 97o 87o A6o K6o Q6o J6o T6o A5o K5o Q5o J5o A4o K4o Q4o A3o K3o A2o 

##list20##
99 88 77 66 55 AJs ATs A9s A8s A7s A6s KQs KJs KTs K9s QJs QTs Q9s JTs J9s T9s AQo KQo AJo KJo QJo ATo A9o 

##list21##
99 88 AJs ATs A9s A8s KQs KJs KTs K9s QJs QTs Q9s JTs J9s T9s AQo KQo AJo KJo ATo A9o 

##list22##
99 AJs ATs KQs AQo KQo AJo ATo 

##list23##
77 66 55 44 A7s A6s K9s Q9s J9s T9s QJo A9o 

##list24##
88 77 66 55 44 33 22 A9s A8s A7s A6s A5s A4s A3s A2s KJs KTs K9s K8s K7s K6s QJs QTs Q9s Q8s Q7s JTs J9s T9s 98s 87s 76s 65s 54s 43s 32s QJo A9o 

##list30##
99 AJs ATs KQs AQo AJo 

##list31##
99 AJs ATs 

##list32##
99 AJs ATs A9s KQs AQo KQo AJo ATo 

##list33##
99 AJs ATs A9s KQs AQo AJo ATo 

##list34##
99 AJs ATs A9s A8s A7s A6s KQs KJs KTs QJs QTs AQo KQo AJo ATo A9o A8o 

##list35##
99 AJs ATs A9s A8s A7s KQs KJs KTs AQo KQo AJo ATo A9o A8o 

##list36##
99 88 77 66 55 44 33 22 AJs ATs A9s A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s QJs QTs AQo KQo AJo KJo ATo KTo A9o A8o A7o A6o A5o A4o A3o 

##list40##
88 77 66 55 44 33 22 

##list41##
KJs QTs JTs 

##list42##
KJs 

##list50##
99 88 77 66 55 44 33 22 ATs A9s A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s QJs QTs Q9s JTs J9s J8s T9s T8s 98s 87s 76s 65s 54s KQo AJo KJo QJo ATo A9o A8o A7o 

##list51##
A9s A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s K8s K7s K6s K5s K4s K3s K2s QJs QTs Q9s Q8s JTs J9s J8s T9s T8s T7s 98s 97s 87s 76s 65s 54s KQo KJo QJo ATo KTo QTo JTo A9o A8o A7o A6o A5o A4o A3o A2o 

##list52##
A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s K8s K7s K6s K5s K4s K3s K2s QJs QTs Q9s Q8s Q7s Q6s Q5s Q4s Q3s JTs J9s J8s J7s J6s T9s T8s T7s T6s 98s 97s 96s 87s 86s 85s 76s 75s 65s 64s 54s 53s KQo KJo QJo KTo QTo JTo A9o K9o Q9o J9o T9o A8o K8o 98o A7o A6o A5o A4o A3o A2o 

##list53##
33 22 A3s A2s KTs K9s K8s K7s K6s K5s K4s K3s K2s QJs QTs Q9s Q8s Q7s Q6s Q5s Q4s Q3s Q2s JTs J9s J8s J7s J6s J5s J4s J3s T9s T8s T7s T6s T5s T4s 98s 97s 96s 95s 87s 86s 85s 84s 76s 75s 74s 65s 64s 63s 54s 53s 43s QJo KTo QTo JTo K9o Q9o J9o T9o A8o K8o Q8o J8o T8o 98o A7o K7o 97o 87o A6o K6o 76o A5o K5o A4o K4o A3o A2o 

##list54##
22 K5s K4s K3s K2s QTs Q9s Q8s Q7s Q6s Q5s Q4s Q3s Q2s JTs J9s J8s J7s J6s J5s J4s J3s J2s T9s T8s T7s T6s T5s T4s T3s T2s 98s 97s 96s 95s 94s 93s 92s 87s 86s 85s 84s 76s 75s 74s 65s 64s 63s 54s 53s 52s 43s QTo JTo Q9o J9o T9o Q8o J8o T8o 98o K7o Q7o J7o T7o 97o 87o K6o Q6o J6o T6o 96o 86o 76o K5o Q5o J5o 65o K4o Q4o K3o Q3o K2o Q2o 

##list55##
AA KK QQ JJ TT AKs AQs AJs AKo AQo 

##list56##
AA KK QQ JJ TT 99 AKs AQs AJs ATs AKo AQo AJo 

##list57##
AA KK QQ JJ TT 99 88 77 AKs AQs AJs ATs A9s AKo AQo AJo ATo 

##list58##
99 88 77 66 55 44 AJs ATs A9s A8s A7s A6s A5s KQs KJs AQo KQo AJo KJo ATo A9o A8o 

##list59##
99 88 77 66 55 44 33 AJs ATs A9s A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s K8s K7s K6s QJs AQo KQo AJo KJo QJo ATo KTo A9o K9o A8o K8o A7o A6o A5o A4o A3o A2o 

##list80##
AA KK QQ JJ TT 99 88 77 66 55 44 33 22 AKs AQs AJs ATs A9s A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s K8s K7s K6s K5s K4s K3s K2s QJs QTs Q9s Q8s JTs J9s T9s T8s 98s 97s 87s 86s 76s 75s 65s 64s 54s 53s 43s AKo AQo KQo AJo KJo QJo ATo KTo QTo JTo A9o K9o Q9o J9o T9o A8o 98o A7o 87o A6o 76o A5o A4o A3o A2o 

##list100##
AA KK QQ JJ TT 99 88 77 66 55 44 33 22 AKs AQs AJs ATs A9s A8s A7s A6s A5s A4s A3s A2s KQs KJs KTs K9s K8s K7s K6s K5s K4s K3s K2s QJs QTs Q9s Q8s Q7s Q6s Q5s Q4s Q3s Q2s JTs J9s J8s J7s J6s J5s J4s J3s J2s T9s T8s T7s T6s T5s T4s T3s T2s 98s 97s 96s 95s 94s 93s 92s 87s 86s 85s 84s 83s 82s 76s 75s 74s 73s 72s 65s 64s 63s 62s 54s 53s 52s 43s 42s 32s AKo AQo KQo AJo KJo QJo ATo KTo QTo JTo A9o K9o Q9o J9o T9o A8o K8o Q8o J8o T8o 98o A7o K7o Q7o J7o T7o 97o 87o A6o K6o Q6o J6o T6o 96o 86o 76o A5o K5o Q5o J5o T5o 95o 85o 75o 65o A4o K4o Q4o J4o T4o 94o 84o 74o 64o 54o A3o K3o Q3o J3o T3o 93o 83o 73o 63o 53o 43o A2o K2o Q2o J2o T2o 92o 82o 72o 62o 52o 42o 32o 

//***********************************************************
//                                                           
//  User defined functions                                   
//  ======================                                   
//                                                           
//  Translated code for user-defined functions.              
//  Note: UDFs are not part of standard PPL.                 
//  Please refer to the manual for details.                  
//                                                           
//  CUSTOM                                                   
//                                                           
//  SYMBOLS                                                  
//                                                           
//  NEW SYMBOL ThisIsAnExample                               
//      WHEN (OpponentsLeft > 3) RETURN 5 FORCE              
//      WHEN (Potsize >= 20) RETURN (Pi * R * R) FORCE       
//      WHEN Others RETURN 42 FORCE                          
//  END SYMBOL                                               
//                                                           
//***********************************************************


##f$OpenPPL_Round_First_Action##
[ ( ![didrais] &&  ![didcall] &&  ![didchec]) ] ? 1 :
[ (f$OpenPPL_Others) ] ? 0 :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


##f$OpenPPL_PostFlop_Senario##
[ (f$OpenPPL_Round_First_Action == 1 && betposition == 1) ] ? 1 :
[ (f$OpenPPL_Round_First_Action == 1 && nbetstocall == 0 && [betposition == nplayersround]) ] ? 2 :
[ (f$OpenPPL_Round_First_Action == 1 && nbetstocall == 0 && betposition != 1 && [betposition != nplayersround]) ] ? 3 :
[ (didrais && nbetstocall > 0) ] ? 5 :
[ (nbetstocall > 0) ] ? 4 :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


//***********************************************************
//                                                           
//  Main Code Sections                                       
//  ==================                                       
//                                                           
//  Preflop, Flop, Turn and River                            
//  are mandatory for every OpenPPL-profile.                 
//                                                           
//***********************************************************


##f$preflop##
[ ([islist01] && log$OpenR_list01) ] ? f$OpenPPL_Raise :
[ (islist01) ] ? f$OpenPPL_Call :
[ ([didrais && ncallbets <= 3] && log$Call_RR) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_Raises == 2 && didrais && ncallbets <= 4 && f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 1] && log$Call_CAP) ] ? f$OpenPPL_Call :
[ ([didcall && ncallbets <= 2] && log$I_Call_C_Raise) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((( Raises = 0 AND Calls = 0 AND ncallbets <= 1)))
//
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && ncallbets <= 1)]) ]  &&  [ ([f$OpenPPL_InSmallBlind && islist14] && log$OpenR_SB_list14) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && ncallbets <= 1)]) ]  &&  [ ([f$OpenPPL_InButton && islist13] && log$OpenR_BTN_list13) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && ncallbets <= 1)]) ]  &&  [ ([f$OpenPPL_InCutOff && islist12] && log$OpenR_CO_list12) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && ncallbets <= 1)]) ]  &&  [ ([f$OpenPPL_InMiddlePosition && islist11] && log$OpenR_MP_list11) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && ncallbets <= 1)]) ]  &&  [ ([f$OpenPPL_InUTG && islist10] && log$OpenR_UTG_list10) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && ncallbets <= 1)]) ]  &&  [ (f1 && islist100) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && ncallbets <= 1)]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((( Raises = 0 AND Calls = 1)))
//
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1)]) ]  &&  [ ([islist20] && log$Raise_1_LIMP) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1)]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((( Raises = 0 AND Calls = 2)))
//
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2)]) ]  &&  [ ([islist21] && log$Raise_2_LIMP) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2)]) ]  &&  [ ([islist23] && log$Call_2_LIMP) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2)]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((( Raises = 0 AND Calls = 3)))
//
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3)]) ]  &&  [ ([islist22] && log$Raise_3_LIMP) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3)]) ]  &&  [ ([islist24] && log$CALL_3_LIMP) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3)]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((( Raises = 1 AND Calls <= 1 AND Round_First_Action = 1)))
//
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_Round_First_Action == 1)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 5 && islist30] && log$Raise_1_R_UTG) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_Round_First_Action == 1)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 4 && islist32] && log$Raise_1_R_MP) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_Round_First_Action == 1)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 3 && islist34] && log$Raise_1_R_CO) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_Round_First_Action == 1)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 2 && islist36] && log$Raise_1_R_BTN) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_Round_First_Action == 1)]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((( Raises = 1 AND Calls <= 1 AND InSmallBlind)))
//
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_InSmallBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 5 && islist31] && log$Raise_1_R_UTG_SB) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_InSmallBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 4 && islist33] && log$Raise_1_R_MP_SB) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_InSmallBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 3 && islist35] && log$Raise_1_R_CO_SB) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_InSmallBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 2 && islist37] && log$Raise_1_R_BTN_SB) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1 && f$OpenPPL_InSmallBlind)]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((( Raises = 1 AND Calls <= 1)))
//
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition >= 4 && (islist40 || islist41)] && log$CALL_1_R_UTGMP) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 3 && (islist40 || islist42)] && log$CALL_1_R_CO) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 2 && islist40] && log$CALL_1_R_BTN) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1)]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((( Raises = 1 AND Calls = 0 AND InBigBlind)))
//
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 5 && islist55] && log$RAISE_1_R_UTG_BB) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 4 && islist56] && log$RAISE_1_R_MP_BB) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 3 && islist57] && log$RAISE_1_R_CO_BB) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 2 && islist58] && log$RAISE_1_R_BTN_BB) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 1 && islist59] && log$RAISE_1_R_SB_BB) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 1 && islist54] && log$CALL_1_R_SB_BB) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 2 && islist53] && log$CALL_1_R_BTN_BB) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 3 && islist52] && log$CALL_1_R_CO_BB) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 4 && islist51] && log$CALL_1_R_MP_BB) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ ([f$OpenPPL_FirstRaiserPosition == 5 && islist50] && log$CALL_1_R_UTG_BB) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind)]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


##f$flop##
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 1) AND log$FLOP_Senario_1))
//
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .50)] && log$R_Pair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_Overcards == 2 && (1 - vs$80$prlos) >= .45] && log$R_2_OverCards) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_Overcards == 1 && (1 - vs$80$prlos) >= .48] && log$R_1_OverCards) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveStraightDraw && (1 - vs$80$prlos) >= .50] && log$R_Str8Draw) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveInsideStraightDraw && (1 - vs$80$prlos) >= .50] && log$R_Str8Draw) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$R_FlushDraw) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$FLOP_Senario_1]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 2) AND log$FLOP_Senario_2))
//
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .50)] && log$R_Pair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_Overcards == 2 && (1 - vs$80$prlos) >= .45] && log$R_2_OverCards) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_Overcards == 1 && (1 - vs$80$prlos) >= .48] && log$R_1_OverCards) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveStraightDraw && (1 - vs$80$prlos) >= .50] && log$R_Str8Draw) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveInsideStraightDraw && (1 - vs$80$prlos) >= .50] && log$R_InStr8Draw) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$R_FlushDraw) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$FLOP_Senario_2]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 3) AND log$FLOP_Senario_3))
//
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .50)] && log$R_Pair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_Overcards == 2 && (1 - vs$80$prlos) >= .45] && log$R_2_OverCards) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_Overcards == 1 && (1 - vs$80$prlos) >= .48] && log$R_1_OverCards) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveStraightDraw && (1 - vs$80$prlos) >= .50] && log$R_Str8Draw) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveInsideStraightDraw && (1 - vs$80$prlos) >= .50] && log$R_InStr8Draw) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$R_FlushDraw) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$FLOP_Senario_3]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 4) AND log$FLOP_Senario_4))
//
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .50)] && log$C_Pair) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_Overcards == 2 && (1 - vs$80$prlos) >= .45] && log$C_2_OverCards) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_Overcards == 1 && (1 - vs$80$prlos) >= .48] && log$C_1_OverCards) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_Str8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveInsideStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_InStr8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$C_FlushDraw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$FLOP_Senario_4]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 5) AND log$FLOP_Senario_5))
//
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$CALL_FullHouse) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .851)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveSet && ([1 - vs$80$prlos >= .65] && [1 - vs$80$prlos <= .85])] && log$C_Set) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$C_Trips) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$C_Flush) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$C_Str8) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && ([1 - vs$80$prlos >= .50] && [1 - vs$80$prlos <= .75])] && log$C_TwoPair) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .751)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .50)] && log$C_Pair) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_Str8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveInsideStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_InStr8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$C_FlushDraw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$FLOP_Senario_5]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Others)
//
[ (f$OpenPPL_Others) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


##f$turn##
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 1) AND log$TURN_Senario_1))
//
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .60)] && log$R_Pair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_Str8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveInsideStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_InStr8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$C_FlushDraw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$TURN_Senario_1]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 2) AND log$TURN_Senario_2))
//
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .60)] && log$R_Pair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_Str8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveInsideStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_InStr8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$C_FlushDraw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$TURN_Senario_2]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 3) AND log$TURN_Senario_3))
//
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .60)] && log$R_Pair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_Str8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveInsideStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_InStr8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$C_FlushDraw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$TURN_Senario_3]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 4) AND log$TURN_Senario_4))
//
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .60)] && log$C_Pair) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_Str8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveInsideStraightDraw && (1 - vs$80$prlos) >= .50] && log$C_InStr8Draw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$C_FlushDraw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$TURN_Senario_4]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 5) AND log$TURN_Senario_5))
//
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([1 - vs$80$prlos >= .94] && log$Raise_NUTS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .851)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveSet && ([1 - vs$80$prlos >= .65] && [1 - vs$80$prlos <= .85])] && log$C_Set) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$C_Trips) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$C_Flush) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$C_Str8) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$C_TwoPair) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .60)] && log$C_Pair) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveFlushDraw && (1 - vs$80$prlos) >= .45] && log$C_FlushDraw) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$TURN_Senario_5]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Others)
//
[ (f$OpenPPL_Others) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


##f$river##
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 1) AND log$RIVER_Senario_1))
//
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$RIVER_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$RIVER_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$RIVER_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$RIVER_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$RIVER_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$RIVER_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$RIVER_Senario_1]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$RIVER_Senario_1]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .70)] && log$R_Pair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 1) && log$RIVER_Senario_1]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 2) AND log$RIVER_Senario_2))
//
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$RIVER_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$RIVER_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$RIVER_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$RIVER_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$RIVER_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$RIVER_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$RIVER_Senario_2]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$RIVER_Senario_2]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .70)] && log$R_Pair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 2) && log$RIVER_Senario_2]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 3) AND log$RIVER_Senario_3))
//
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$RIVER_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$RIVER_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$RIVER_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$RIVER_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$RIVER_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$RIVER_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$RIVER_Senario_3]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$RIVER_Senario_3]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .70)] && log$R_Pair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 3) && log$RIVER_Senario_3]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 4) AND log$RIVER_Senario_4))
//
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .65)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$R_Trips) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveFlush && ([1 - vs$80$prlos >= .76] && [1 - vs$80$prlos <= .86])] && log$C_Flush) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .861)] && log$R_Flush) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$R_Str8) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$R_TwoPair) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .75)] && log$C_Pair) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 4) && log$RIVER_Senario_4]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((PostFlop_Senario = 5) AND log$RIVER_Senario_5))
//
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([1 - vs$80$prlos >= .94 && nhandshi < 4] && log$Raise_NUTS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads] && log$R_STR8Flush_QUADS) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveFullHouse && (1 - vs$80$prlos >= .61)] && log$Raise_FullHouse) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveSet && (1 - vs$80$prlos >= .851)] && log$R_Set) ] ? f$OpenPPL_Raise :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveSet && ([1 - vs$80$prlos >= .65] && [1 - vs$80$prlos <= .85])] && log$C_Set) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveTrips && (1 - vs$80$prlos >= .69)] && log$C_Trips) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveFlush && (1 - vs$80$prlos >= .86)] && log$C_Flush) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveStraight && (1 - vs$80$prlos >= .88)] && log$C_Str8) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([f$OpenPPL_HaveTwoPair && (1 - vs$80$prlos >= .50)] && log$C_TwoPair) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ ([f$OpenPPL_HavePair &&  !(f$OpenPPL_HaveTrips) && (1 - vs$80$prlos >= .80)] && log$C_Pair) ] ? f$OpenPPL_Call :
[ ([(f$OpenPPL_PostFlop_Senario == 5) && log$RIVER_Senario_5]) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Others)
//
[ (f$OpenPPL_Others) ]  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


//************************************************************************
//
// Resetting all User-Defined Variables.
//
// To be called at the very beginning of a hand.
//
//************************************************************************


##f$OpenPPL_ResetUserVariables##
0


//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 4.5.0 or later
//   * because we make use of the new symbol nopponentstruelyraising
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Fqfq	
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   Lavezzi
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Relhby
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
//  Predefined action constants
//  ===========================
//
//  Positive values mean:  betsizes (in big-blinds)
//  Small negative values: percentaged potsized bets
//  Large negative values: action constants
//
//  Note: Beep is not supported.
//
//*****************************************************************************

##f$OpenPPL_Fold##
-1000000

##f$OpenPPL_Check##
-1000001

##f$OpenPPL_Undefined_BetSize_Probably_Due_To_Misscraped_Pot_Defaulting_To_Minraise##
-1000002

##f$OpenPPL_RaiseMin##
f$OpenPPL_Raise

##f$OpenPPL_RaiseHalfPot##
-1000003

##f$OpenPPL_RaisePot##
-1000004

##f$OpenPPL_RaiseMax##
-1000005

##f$OpenPPL_Call##
-1000006

##f$OpenPPL_Play##
f$OpenPPL_Call

##f$OpenPPL_Bet##
f$OpenPPL_Raise

##f$OpenPPL_BetMin##
f$OpenPPL_Bet

##f$OpenPPL_BetHalfPot##
f$OpenPPL_RaiseHalfPot

##f$OpenPPL_BetPot##
f$OpenPPL_RaisePot

##f$OpenPPL_BetMax##
f$OpenPPL_RaiseMax

##f$OpenPPL_Allin##
f$OpenPPL_RaiseMax

##f$OpenPPL_None##
-1000007

##f$OpenPPL_Raise##
-1000008

##f$OpenPPL_SitOut##
-1000009

##f$OpenPPL_Close##
-1000010

##f$OpenPPL_Beep##
-1000011

##f$OpenPPL_Do_Not_PreFold##
// Automatically added to the end of the prefold-section
// for syntactical completeness.
-1000012

##f$OpenPPL_UndefinedReturnValue##
// Every user-defined function ends with this return-value
// mainly to ensure syntactical correctness
// and to avoid undefined return values.
// OpenHoldem would return 0, when a return-value was not specified,
// but this might be meaningful in most contexts.
//
// To always be on the save site we use...
// f$OpenPPL_UndefinedReturnValue = f$OpenPPL_Fold = -1
f$OpenPPL_Fold

//*****************************************************************************
//
//  OpenPPL - Card Constants
//  ===========================
//  
//  Both ranks and suits according to the OpenHoldem docu
//
//*****************************************************************************

##f$OpenPPL_ConstCardAce##
14

##f$OpenPPL_ConstCardKing##
13

##f$OpenPPL_ConstCardQueen##
12

##f$OpenPPL_ConstCardJack##
11

##f$OpenPPL_ConstCardTen##
10

##f$OpenPPL_ConstCardNine##
9

##f$OpenPPL_ConstCardEight##
8

##f$OpenPPL_ConstCardSeven##
7

##f$OpenPPL_ConstCardSix##
6

##f$OpenPPL_ConstCardFive##
5

##f$OpenPPL_ConstCardFour##
4

##f$OpenPPL_ConstCardThree##
3

##f$OpenPPL_ConstCardTwo##
2

##f$OpenPPL_ConstSuitClubs##
1

##f$OpenPPL_ConstSuitDiamonds##
2

##f$OpenPPL_ConstSuitHearts##
3

##f$OpenPPL_ConstSuitSpades##
4

//*****************************************************************************
//
// OpenPPL - Betting Round Constants
//
//*****************************************************************************

##f$OpenPPL_ConstBetRoundPreflop##
1

##f$OpenPPL_ConstBetRoundFlop##
2

##f$OpenPPL_ConstBetRoundTurn##
3

##f$OpenPPL_ConstBetRoundRiver##
4

//*****************************************************************************
//
// OpenPPL - Other Constants
//
//*****************************************************************************

##f$OpenPPL_True##
1

##f$OpenPPL_False##
0

//*****************************************************************************
//
// OpenPPL - verbose errors and warning
//
// Instead of returning just -1 we define constants like
// "f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist"
// This way we get a verbose explanation in the log-file.
//
//*****************************************************************************

##f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY##
-1

##f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way##
0

##f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap##
-1
 
##f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_Betround_Out_Of_Range##
-1

##f$OpenPPL_ERROR_BotsActionsOnThisRound_Out_Of_Range##
-1

##f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_CutOffChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition3Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition2Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition3Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition2Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_DealPosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__No_Not_Call_This_Function##
-1

##f$OpenPPL_ERROR_Dealposition_Out_Of_Range__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__Do_Not_Call_This_Function##
-1

##f$OpenPPL_ERROR_No_Opponents_Detected__Check_Your_TableMap##
// Returning -bblind, because we divide by bblind to -1.
(0 - bblind)

##f$OpenPPL_ERROR_Game_Is_Not_HeadsUp##
-1

##f$OpenPPL_ERROR_You_Dont_Have_Any_Kicker##
0

##f$OpenPPL_HINT_We_Dont_Have_A_FullHouse_At_All##
// Docu says: this case is 0; and this special case needs extra care.
// However returning a high number instead of 0 seems better to us,
// as it indicates the weakness and avoids any pitfalls.
999

##f$OpenPPL_HINT_There_Are_No_True_Raisers##
-1

##f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist##
-1

##f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated##
-1

##f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist##
-1

##f$OpenPPL_HINT_EarlyPosition2_Does_Not_Exist##
-1

##f$OpenPPL_HINT_EarlyPosition3_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition1_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition2_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition3_Does_Not_Exist##
-1

##f$OpenPPL_HINT_CutOff_Does_Not_Exist##
-1

##f$OpenPPL_HINT_There_Is_No_SmallNlind_In_This_Game##
-1 

##f$OpenPPL_HINT_There_Is_No_Raiser_Therefore_No_CurrentBet##
0

##f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board##
-1

##f$OpenPPL_HINT_Nothing_To_Do_But_All_OK##
0

##f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round##
0

##f$OpenPPL_HINT_StillToAct_Is_Only_Valid_On_First_Orbit##
0

##f$OpenPPL_HINT_There_Are_No_Common_Cards_Preflop##
-1

##f$OpenPPL_HINT_All_Opponents_Allin##
// Returning the stacksize of our last opponent
0

##f$OpenPPL_HINT_No_Oppponent_Or_Not_Headsup##
-1

##f$OpenPPL_HINT_No_FirstCaller##
-1

##f$OpenPPL_HINT_No_LastCaller##
-1

##f$OpenPPL_HINT_No_FirstRaiser##
-1

##f$OpenPPL_HINT_No_Last_Raiser##
-1

##f$OpenPPL_HINT_No_Last_Raiser_Or_Not_Enough_Hands##
-1

##f$OpenPPL_HINT_We_Wont_Close_The_Table_While_Not_Sitting_Out##
f$OpenPPL_False

//*****************************************************************************
//
// OpenPPL - Verbosity
//
// Some OpenHoldem-symbols are awfully illnamed,
// thanks to Ray E. Bornert who invented WinHoldem.
// rais, swag, $$pr0, etc.
// We provide meaningful names here to make this library more readable.
//
//*****************************************************************************

##f$OpenPPL_RankOfFirstHoleCard##
$$pr0

##f$OpenPPL_RankOfSecondHoleCard##
$$pr1

##f$OpenPPL_FirstFlopCard##
$$cr0

##f$OpenPPL_SecondFlopCard##
$$cr1

##f$OpenPPL_ThirdFlopCard##
$$cr2

##f$OpenPPL_TurnCard##
$$cr3

##f$OpenPPL_RiverCard##
$$cr4

//***********************************************************
//                                                           
//  Technical functions                                      
//  ===================                                      
//                                                           
//  Functions needed for integration into OpenHoldem.        
//  They translate the f$Decision-function to standard       
//  autoplayer-functions like f$alli, f$rais and f$call.     
//
//  The OpenPPL-logic must be able to handle several
//  different kinds of actions, that must be distinguishable.
//  Therefore we use 3 different ranges for these actions: 
//  * positive values: betsize in big-blinds,
//    using Shankys RaiseBy-semantics.
//    "RAISE 3 FORCE" will be translated to
//    "3 * f$RaiseByBigBlinds"
//    where f$RaiseByBigBlinds simply is 1.
//  * small negative values: percentaged potsized bets
//    "RAISE 70% FORCE" will be translated to 
//    "70 * f$RaiseByPercentagedPotsize"
//    where f$RaiseByPercentagedPotsize is -1.
//    f$betsize will then translate this to the correct bet-amount.
//  * large negative values (< 1.000.000): 
//    fixed action constants for check, call, raise, etc. 
//                                                           
//***********************************************************

##f$OpenPPL_Decision##
// f$preflop, f$flop, f$turn and f$river will be added by the translator.
[betround == f$OpenPPL_ConstBetRoundPreflop] ? f$preflop :
[betround == f$OpenPPL_ConstBetRoundFlop]    ? f$flop :
[betround == f$OpenPPL_ConstBetRoundTurn]    ? f$turn :
[betround == f$OpenPPL_ConstBetRoundRiver]   ? f$river :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$RaiseByBigBlinds##
// Positive amounts are betsizes in big-blinds
1

##f$RaiseByPercentagedPotsize##
// Small negative values are used for percentaged potsized bets.
// We also do the multiplication with 0.01 here.
// Don't use " / 100 *" because that can lead to an integer-division,
// and 70/100 will unexpectedly get evaluated as 0.
-0.01

##f$OpenPPL_DecisionIsPercentagedPotsizedBet##
   (f$OpenPPL_Decision <= 0) 
&& (f$OpenPPL_Decision >= -1000)

##f$OpenPPL_DecisionIsFixedBetInBigBlinds##
(f$OpenPPL_Decision > 0) 

##f$OpenPPL_DecisionIsBetPotOrBetHalfPotOrBetMax##
// Used for sanity checks in f$swag
   (f$OpenPPL_Decision == f$OpenPPL_BetHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMax)

##f$OpenPPL_DecisionIsFixedAction##
(f$OpenPPL_Decision < -1000000) 

##f$OpenPPL_RememberToSitoutIfNecessary##
// OpenHoldem handles autoplayer actions when it is heros turn,
// but f$sitin, f$sitout and f$leave once every N heartbeats,
// contrary to OpenPPL were both can happen only at heros turn.
// Therefore we have to remember a decision to SitOut somehow
// and recall it later.
[f$OpenPPL_Decision == f$OpenPPL_SitOut] ? me_st_GoBuddySitOut_1 : 
[f$OpenPPL_Decision == f$OpenPPL_Close]  ? (me_st_GoBuddySitOut_1 + me_st_GoBuddyClose_1 ) : 0

##f$beep##
// f$beep is the very first function to be called on each turn,
// so we abuse it to initialize memory-symbhols as a side-effect
// and only then we do the real evaluation.
//
// We can't use addition here to call the functions in correct sequential order,
// because OH doesn't add the operands in order:
// http://www.maxinmontreal.com/forums/viewtopic.php?f=111&t=14525&start=0
   [f$OpenPPL_InitMemorySymbols * 0]
|| [f$OpenPPL_RememberToSitoutIfNecessary * 0]
|| [f$OpenPPL_Decision == f$OpenPPL_Beep]

##f$alli##
   [f$OpenPPL_Decision == f$OpenPPL_RaiseMax]
|| [(f$OpenPPL_Decision > f$OpenPPL_StackSize) && (f$OpenPPL_StackSize > 0)]
|| [f$OpenPPL_DecisionIsPercentagedPotsizedBet 
    && f$OpenPPL_BetSizeForPercentagedPotsizeBet >= f$OpenPPL_MaximumBetsizeInDollars]


// Betpot functions
// OpenPPL knows only the following action-command:
//   * BetPot
//   * BetHalfPot
// However we support all betpot-functions as backup-actions.

##f$betpot_2_1##
f$alli
	
##f$betpot_1_1##
[f$alli  || (f$OpenPPL_Decision == f$OpenPPL_BetPot)]

##f$betpot_3_4##
f$betpot_1_1

##f$betpot_2_3##
f$betpot_1_1

##f$betpot_1_2##
[f$betpot_1_1 || (f$OpenPPL_Decision == f$OpenPPL_BetHalfPot)]

##f$betpot_1_3##
f$betpot_1_2

##f$betpot_1_4##
f$betpot_1_2
	
##f$OpenPPL_MaximumBetsizeInDollars##
f$OpenPPL_MaximumPossibleBetsizeIndollars

##f$OpenPPL_BetSizeForBetHalfPot##
// Calculated in dollars and with raise-to-semantics
// First we call, then we add half of the pot (after we called)
// pot already includes currentbet, so we must not consider this twice.
[currentbet + call + 0.5 * (pot + call)]

##f$OpenPPL_BetSizeForBetPot##
// Calculated in dollars and with raise-to-semantics
// pot includes currentbet, call is the amount we need to call.
[currentbet + call + (pot + call)]

##f$OpenPPL_BetSizeForPercentagedPotsizeBet##
// f$Decision is negative, -0.70 means: 70% potsize
[currentbet + call + (-1 * f$OpenPPL_Decision) * (pot + call)]

##f$OpenPPL_BetSizeForFixedBetInBigBlinds##
// Calculated in dollars and with raise-to-semantics
[(f$OpenPPL_Decision + ncallbets) * bblind]

##f$OpenPPL_BetSizeForAllin##
// Calculated in dollars and with raise-to-semantics
[balance + currentbet]

##f$betsize##
// f$betsize gets counted in Dollars.
// OpenHoldems semantics is "raise-to".
f$alli ? f$OpenPPL_BetSizeForAllin :
[f$OpenPPL_Decision == f$OpenPPL_BetPot] ? f$OpenPPL_BetSizeForBetPot : 
[f$OpenPPL_Decision == f$OpenPPL_BetHalfPot] ? f$OpenPPL_BetSizeForBetHalfPot :
// Finally caring about about absolute betsizes.
// Shankys semantics is "raise-by" and in big blinds,
// so we have to translate it.
f$OpenPPL_DecisionIsFixedBetInBigBlinds ?  f$OpenPPL_BetSizeForFixedBetInBigBlinds :
f$OpenPPL_DecisionIsPercentagedPotsizedBet ? f$OpenPPL_BetSizeForPercentagedPotsizeBet :
0

##f$rais##
   [f$OpenPPL_Decision == f$OpenPPL_Raise]
|| f$OpenPPL_DecisionIsBetPotOrBetHalfPotOrBetMax
|| f$OpenPPL_DecisionIsPercentagedPotsizedBet
|| f$OpenPPL_DecisionIsFixedBetInBigBlinds
//
// Below is 2 times the same expression,
// but we want to log the very verbose explanation
// only in the case of a true error
// and not for normal evaluations.
//
|| [f$OpenPPL_Decision == 0 && f$betsize == f$OpenPPL_Undefined_BetSize_Probably_Due_To_Misscraped_Pot_Defaulting_To_Minraise]

##f$call##
   [f$OpenPPL_Decision == f$OpenPPL_Check]
|| [f$OpenPPL_Decision == f$OpenPPL_Call]
|| [f$OpenPPL_AmountToCall == 0]
|| f$rais

##f$check##
// Always check/fold as long as the action is not "Beep".
(f$OpenPPL_Decision != f$OpenPPL_Beep)

##f$fold##
// Always check/fold as long as the action is not "Beep".
(f$OpenPPL_Decision != f$OpenPPL_Beep)

##f$sitout##
// Sitout if GoBuddyTakeABreakAndABeer is 1
// then reset this variable to allow f$sitin later.
// http://www.maxinmontreal.com/forums/viewtopic.php?f=259&t=15515
me_re_GoBuddySitOut
+ [0 * me_st_GoBuddySitOut_0]

##f$close##
me_re_GoBuddyClose ?
  (issittingin ? f$OpenPPL_HINT_We_Wont_Close_The_Table_While_Not_Sitting_Out : f$OpenPPL_True) :
  f$OpenPPL_False

//*****************************************************************************
//
// OpenPPL - BettingAction Symbols
//
//*****************************************************************************

##f$OpenPPL_InitBets##
// No bet in front of us to call
((currentbet == 0) && (f$OpenPPL_AmountToCall == 0)) ? me_st_MemBets_0 :
// A bet to call and we din't act before or we checked
((currentbet == 0) && (f$OpenPPL_AmountToCall > 0)) ? me_st_MemBets_1 :
// Otherwise: we did already bet ourself or call a bet.
// So don't change anything
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_Bets##
me_re_MemBets

##f$OpenPPL_BigBlindSittingOut##
-1 + msgbox$BigBlindStittingOut_Bnot_Byet_Bimplemented_D_NYour_Bhelp_Bis_Brequired_D

##f$OpenPPL_SmallBlindSittingOut##
-1 + msgbox$SmallBlindSittingOut_Bnot_Byet_Bimplemented_D_NYour_Bhelp_Bis_Brequired_D

##f$OpenPPL_BotCalledBeforeFlop##
didcallround1

##f$OpenPPL_AggressorChair##
// raischair (formerly ac_aggressor) alone is somewhat unreliable, as it gets scraped (by bets).
// But if we raise and there are super-fast calls behind us (e.g. at PokerAcademy),
// then we don't have stable frames and soon we will switch to the next betting round.
// (There are however no problems, if somebody else raises,
// because we always get stable frames at out turn.)
// So we also check for our last action and the amount to call.
// (-1 = fold 0 = check 1 = call 2 = raise e3 = swag 4 = allin)
(((prevaction ==  2) || (prevaction == 3)) && (f$OpenPPL_AmountToCall == 0)) ? userchair :
raischair

##f$OpenPPL_BotIsLastRaiser##
(f$OpenPPL_AggressorChair==userchair)

##f$OpenPPL_BotRaisedBeforeFlop##
(didraisround1 || didswaground1)

##f$OpenPPL_BotRaisedOnFlop##
(didraisround2 || didswaground2)

##f$OpenPPL_BotRaisedOnTurn##
(didraisround3 || didswaground3)

##f$OpenPPL_BotsActionsOnFlop##
// Checks are not counted
(didcallround2 + didraisround2 + didswaground2)

##f$OpenPPL_BotsActionsOnThisRound##
// Checks are not counted
(didcall + didrais + didswag)

##f$OpenPPL_BotsActionsOnThisRoundIncludingChecks##
// Folds and allins are not relevant, as then the hand is over for us.
(didchec + didcall + didswag + didrais)

##f$OpenPPL_BotsActionsPreflop##
// Checks are not counted per definition
// and we can't check preflop without posting a blind out of order (first hand only).
(didcallround1 + didraisround1 + didswaground1)

##f$OpenPPL_InitBotsLastAction##
// Initialization on first action preflop
// This has to be done *before* we call the Decision-function,
// InitBotsLastAction has to be the last init-function to be called
// (inside f$OpenPPL_InitMemorySymbols)
// because it will call the final f$Decision routine.
//
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? me_st_MemBotsLastAction_f$OpenPPL_None :
//
// "Initialize" first action on other rounds to last value of last round,
// i.e. do nothing and keep the old value.
//
[[(betround != f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 0 : 0]
//
// Then we call f$OpenPPL_Decision and store BotsLastAction for the next time...
//
// Freeplay (Check) in case we want to Check/Call/Fold
|| [   (f$OpenPPL_AmountToCall == 0) 
    && [   (f$OpenPPL_Decision == f$OpenPPL_Call)  || (f$OpenPPL_Decision == f$OpenPPL_Play)
	    || (f$OpenPPL_Decision == f$OpenPPL_Check) || (f$OpenPPL_Decision == f$OpenPPL_Fold)]] ? me_st_MemBotsLastAction_f$OpenPPL_Check :
// Call = Play
[  (f$OpenPPL_Decision == f$OpenPPL_Call)
|| (f$OpenPPL_Decision == f$OpenPPL_Play)] ? me_st_MemBotsLastAction_f$OpenPPL_Call :
// Fold
(f$OpenPPL_Decision == f$OpenPPL_Fold) ? me_st_MemBotsLastAction_f$OpenPPL_Fold :
// Bet, Raise, BetHalfPot, BetPot, etc.
// Also handling fixed betsizes and peercentaged potsized bets.
[  (f$OpenPPL_Decision == f$OpenPPL_Raise)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseMin)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseMax)
|| (f$OpenPPL_Decision == f$OpenPPL_Bet)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMin)
|| (f$OpenPPL_Decision == f$OpenPPL_BetHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMax)
|| (f$OpenPPL_DecisionIsPercentagedPotsizedBet || f$OpenPPL_DecisionIsFixedBetInBigBlinds)] ?
[(ncallbets == 0) ? me_st_MemBotsLastAction_f$OpenPPL_Bet : me_st_MemBotsLastAction_f$OpenPPL_Raise] :
// Other cases: this should not happen
// Handling them as "None"
me_st_MemBotsLastAction_f$OpenPPL_None

##f$OpenPPL_BotsLastAction##
// Just to be extra safe...
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? f$OpenPPL_None :
// Caring about a possible check, when a fold could not have happened
[me_re_MemBotsLastAction == f$OpenPPL_Fold] ? f$OpenPPL_Check :
// The last action we executed (tried to execute, to be precise)
me_re_MemBotsLastAction

##f$OpenPPL_InitBotsLastPreflopAction##
// Don't use BotsLastAction on the first orbit,
// because that variable has to be the last one to be initialized
// and is therefore undefined.
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 
    me_st_MemBotsLastPreflopAction_f$OpenPPL_None :
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0)] ? 
    me_st_MemBotsLastPreflopAction_f$OpenPPL_BotsLastAction : 
[(betround == f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ?
    me_st_MemBotsLastPreflopAction_f$OpenPPL_BotsLastAction : 0  

##f$OpenPPL_BotsLastPreflopAction##
me_re_MemBotsLastPreflopAction

##f$OpenPPL_CalledOnFlop##
didcallround2

##f$OpenPPL_CalledOnTurn##
didcallround3

##f$OpenPPL_BotCheckedPreflop##
didchecround1

##f$OpenPPL_BotCheckedOnFlop##
didchecround2

##f$OpenPPL_BotCheckedOnTurn##
didchecround3

##f$OpenPPL_BotCheckedOnRiver##
didchecround4

##f$OpenPPL_AddNopponentscalling##
f$OpenPPL_Calls + nopponentscalling

##f$OpenPPL_InitCalls##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ?
  me_st_MemCalls_nopponentscalling :
  me_st_MemCalls_f$OpenPPL_AddNopponentscalling

##f$OpenPPL_Calls##
me_re_MemCalls

##f$OpenPPL_PT_LastCaller_Chair##
// Can't be big blind (0), as it is for the first orbit preflop only
f$OpenPPL_LastCallerPosition == 1 ? f$OpenPPL_SmallBlindChair :
f$OpenPPL_LastCallerPosition == 2 ? f$OpenPPL_ButtonChair :
f$OpenPPL_LastCallerPosition == 3 ? f$OpenPPL_CutOffChair :
f$OpenPPL_LastCallerPosition == 4 ? f$OpenPPL_MiddlePosition3Chair :
f$OpenPPL_LastCallerPosition == 5 ? f$OpenPPL_MiddlePosition2Chair :
f$OpenPPL_LastCallerPosition == 6 ? f$OpenPPL_MiddlePosition1Chair :
f$OpenPPL_LastCallerPosition == 7 ? f$OpenPPL_EarlyPosition3Chair :
f$OpenPPL_LastCallerPosition == 8 ? f$OpenPPL_EarlyPosition2Chair :
f$OpenPPL_LastCallerPosition == 9 ? f$OpenPPL_EarlyPosition1Chair :
f$OpenPPL_HINT_No_LastCaller

##f$OpenPPL_LastRaiserCurrentBet##
raischair == 0 ? currentbet0 :
raischair == 1 ? currentbet1 :
raischair == 2 ? currentbet2 :
raischair == 3 ? currentbet3 :
raischair == 4 ? currentbet4 :
raischair == 5 ? currentbet5 :
raischair == 6 ? currentbet6 :
raischair == 7 ? currentbet7 :
raischair == 8 ? currentbet8 :
raischair == 9 ? currentbet9 :
f$OpenPPL_HINT_There_Is_No_Raiser_Therefore_No_CurrentBet

##f$OpenPPL_PlayersRaisingOrColdCallingTheLastRaise##
  (currentbet0 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet1 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet2 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet3 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet4 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet5 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet6 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet7 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet8 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet9 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)

##f$OpenPPL_CallsSinceLastRaise##
(f$OpenPPL_PlayersRaisingOrColdCallingTheLastRaise - 1)

##f$OpenPPL_Folds##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? (nplayersdealt  - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundFlop)    ? (nplayersround2 - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundTurn)    ? (nplayersround3 - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundRiver)   ? (nplayersround4 - nopponentsplaying - 1) :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_ChecksAfterHero##
// Valid second orbit only
// All active players with a zero bet
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? 0 :
nopponentschecking

##f$OpenPPL_ChecksInFrontOfHero##
// No checks preflop. Not even big blind can check (game over).
// We ignore additional blind-posters however.
(betround == f$OpenPPL_ConstBetRoundPreflop) ? 0 :
// I did already act, so no longer any posters in front of me
(currentbet > 0) ? 0 :
// A bet to call, subtract all players with a non-zero bet in front of us
(f$OpenPPL_AmountToCall > 0) ? (betposition - nopponentsbetting - 1):
// All players before us checked, not even open-folds can throw this logic off.
[betposition - 1]

##f$OpenPPL_CalculateChecks##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? f$OpenPPL_ChecksInFrontOfHero :
// Stored value of checks on previous orbit plus players behind
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 1) ? (f$OpenPPL_Checks + f$OpenPPL_ChecksAfterHero) :
// There can no longer be any checking players, so don't change anything
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitChecks##
(f$OpenPPL_BotsActionsOnThisRound <= 1) ? me_st_MemChecks_f$OpenPPL_CalculateChecks : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_Checks##
me_re_MemChecks

##f$OpenPPL_DealPosition1Chair##
ac_dealpos0 == 1 ? 0 :
ac_dealpos1 == 1 ? 1 :
ac_dealpos2 == 1 ? 2 :
ac_dealpos3 == 1 ? 3 :
ac_dealpos4 == 1 ? 4 :
ac_dealpos5 == 1 ? 5 :
ac_dealpos6 == 1 ? 6 :
ac_dealpos7 == 1 ? 7 :
ac_dealpos8 == 1 ? 8 :
ac_dealpos9 == 1 ? 9 :
f$OpenPPL_ERROR_DealPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CurrentbetOfDealPosition1Chair##
(f$OpenPPL_DealPosition1Chair == 0) ? currentbet0 :
(f$OpenPPL_DealPosition1Chair == 1) ? currentbet1 :
(f$OpenPPL_DealPosition1Chair == 2) ? currentbet2 :
(f$OpenPPL_DealPosition1Chair == 3) ? currentbet3 :
(f$OpenPPL_DealPosition1Chair == 4) ? currentbet4 :
(f$OpenPPL_DealPosition1Chair == 5) ? currentbet5 :
(f$OpenPPL_DealPosition1Chair == 6) ? currentbet6 :
(f$OpenPPL_DealPosition1Chair == 7) ? currentbet7 :
(f$OpenPPL_DealPosition1Chair == 8) ? currentbet8 :
(f$OpenPPL_DealPosition1Chair == 9) ? currentbet9 :
f$OpenPPL_ERROR_DealPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_PlayersBehindDealPosition2ChairDidAct##
// Needed for dectection of missing small blind.
// First checking for folded players,
// because lots ofnewbies won't scrape-players correctly and mix everything up.
// This affects calculation of small blind, big blind,
// all positions and finally lots of other things...
(nopponentsfolded > 0) ? f$OpenPPL_True :
// Then check for active players with a zero bet
[(playersplayingbits & 0b0000000001) && (currentbet0 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000000010) && (currentbet1 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000000100) && (currentbet2 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000001000) && (currentbet3 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000010000) && (currentbet4 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000100000) && (currentbet5 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0001000000) && (currentbet6 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0010000000) && (currentbet7 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0100000000) && (currentbet8 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b1000000000) && (currentbet9 == 0)] ? f$OpenPPL_False :
f$OpenPPL_True

##f$OpenPPL_CalculateMissingSmallBlind##
// True, if SB is missing, false otherwise
// Should be called at our first action preflop only.
(f$OpenPPL_CurrentbetOfDealPosition1Chair == sblind) ? f$OpenPPL_False :
// If we are NOT the 2nd player to be dealt and see a bet 
// of 1 big blind left to the dealer, then it is the big blind (SB missing)
[(dealposition != 2) && (f$OpenPPL_CurrentbetOfDealPosition1Chair == bblind)] ? f$OpenPPL_True :
// Problematic is only the case when I am in "big blind" (2nd player to be dealt)
// * if bet of DealPosition1Chair > 1 bblind then SB raised and is present
// * if bet = 1 big blind and players "behind me" did act, then SB is present and limped
// * if bet = 1 big blind and players behind me still to act, then SB is missing
[(dealposition == 2) && (f$OpenPPL_CurrentbetOfDealPosition1Chair > bblind)] ? f$OpenPPL_False :
// Case 2 and 3: precondition: bet = 1 big blind
[(dealposition == 2) && f$OpenPPL_PlayersBehindDealPosition2ChairDidAct] ? f$OpenPPL_False :
[(dealposition == 2) && !f$OpenPPL_PlayersBehindDealPosition2ChairDidAct] ? f$OpenPPL_True :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_InitMissingSmallBlind##
[(betround == f$OpenPPL_ConstBetRoundPreflop) &&  (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 
me_st_MemMissingSmallBlind_f$OpenPPL_CalculateMissingSmallBlind :
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_MissingSmallBlind##
me_re_MemMissingSmallBlind

##f$OpenPPL_NoBettingOnFlop##
(nbetsround2 == 0)

##f$OpenPPL_NoBettingOnTurn##
(nbetsround3 == 0)

##f$OpenPPL_NoVillainBetOrRaisedOnFlop##
((raisbits2 & ~(1<<userchair)) == 0)

##f$OpenPPL_NoVillainBetOrRaisedOnTurn##
((raisbits3 & ~(1<<userchair)) == 0)

##f$OpenPPL_OpponentCalledOnFlop##
   (betround > f$OpenPPL_ConstBetRoundFlop)
&& ((didraisround2 + didswaground2) == 1)
&& !didchecround2
&& !didcallround2
&& f$OpenPPL_NoVillainBetOrRaisedOnFlop

##f$OpenPPL_OpponentCalledOnTurn##
   (betround > f$OpenPPL_ConstBetRoundTurn)
&& ((didraisround3 + didswaground3) == 1)
&& !didchecround3
&& !didcallround3
&& f$OpenPPL_NoVillainBetOrRaisedOnTurn

##f$OpenPPL_OpponentStacksizeHeadsUp##
[bblind==0] ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap:
[nopponentsplaying == f$OpenPPL_NumberOfOpponentsAllin] ? f$OpenPPL_HINT_All_Opponents_Allin :
[nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin > 1] ? f$OpenPPL_ERROR_Game_Is_Not_HeadsUp :
[(playersplayingbits & 0b0000000001) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=0 && balance0>0] ? balance0/bblind:
[(playersplayingbits & 0b0000000010) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=1 && balance1>0] ? balance1/bblind:
[(playersplayingbits & 0b0000000100) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=2 && balance2>0] ? balance2/bblind:
[(playersplayingbits & 0b0000001000) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=3 && balance3>0] ? balance3/bblind:
[(playersplayingbits & 0b0000010000) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=4 && balance4>0] ? balance4/bblind:
[(playersplayingbits & 0b0000100000) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=5 && balance5>0] ? balance5/bblind:
[(playersplayingbits & 0b0001000000) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=6 && balance6>0] ? balance6/bblind:
[(playersplayingbits & 0b0010000000) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=7 && balance7>0] ? balance7/bblind:
[(playersplayingbits & 0b0100000000) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=8 && balance8>0] ? balance8/bblind:
[(playersplayingbits & 0b1000000000) && (nopponentsplaying-f$OpenPPL_NumberOfOpponentsAllin==1) 
  && userchair!=9 && balance9>0] ? balance9/bblind:
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY


##f$OpenPPL_InitRaisesBeforeFlop##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MemRaisesBeforeFlop_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitRaisesOnFlop##
(betround == f$OpenPPL_ConstBetRoundFlop) ? me_st_MemRaisesOnFlop_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitRaisesOnTurn##
(betround == f$OpenPPL_ConstBetRoundTurn) ? me_st_MemRaisesOnTurn_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_NumberOfRaisesBeforeFlop##
(betround > f$OpenPPL_ConstBetRoundPreflop) ? me_re_MemRaisesBeforeFlop : 0

##f$OpenPPL_NumberOfRaisesOnFlop##
(betround > f$OpenPPL_ConstBetRoundFlop) ? me_re_MemRaisesOnFlop : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_NumberOfRaisesOnTurn##
(betround > f$OpenPPL_ConstBetRoundTurn) ? me_re_MemRaisesOnTurn : 0

##f$OpenPPL_Calculate_Raises##
(me_re_MemRaises + f$OpenPPL_RaisesSinceLastPlay)

##f$OpenPPL_InitRaises##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? me_st_MemRaises_f$OpenPPL_RaisesSinceLastPlay :
me_st_MemRaises_f$OpenPPL_Calculate_Raises

##f$OpenPPL_Raises##
// Raises may be -1 if there are additional blind-posters,
// because nopponentsraising is wrong in that case.
// But this has to be handled in OH 2.2.0.
// For the moment we add some sanity-checks.
[(me_re_MemRaises < 0) && (betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets == 1)] ? 
  (f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way + 0) :
[(me_re_MemRaises < 0) && (betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets > 1)]  ? 
  (f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way + 1) :
// Should not happen postflop, but a sanity-check can't harm.
[(me_re_MemRaises < 0) && (betround >= f$OpenPPL_ConstBetRoundFlop)] ? 
  (f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way + 0) :
// Otherwise: probably everything ok
me_re_MemRaises

##f$OpenPPL_RaisesBeforeFlop##
(f$OpenPPL_NumberOfRaisesBeforeFlop > 0)

##f$OpenPPL_RaisesOnFlop##
(f$OpenPPL_NumberOfRaisesOnFlop > 0)

##f$OpenPPL_RaisesOnTurn##
(f$OpenPPL_NumberOfRaisesOnTurn > 0)

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPostflop##
(nopponentsraising > 0) ? (nopponentsraising - 1) : 0

##f$OpenPPL_AntesPresent##
// First orbit preflop only,
// as this function tries to guess the antes from the bets.
   [(currentbet0 > 0) && (currentbet0 < sblind) && (balance0 > 0)]
|| [(currentbet1 > 0) && (currentbet1 < sblind) && (balance1 > 0)]
|| [(currentbet2 > 0) && (currentbet2 < sblind) && (balance2 > 0)]
|| [(currentbet3 > 0) && (currentbet3 < sblind) && (balance3 > 0)]
|| [(currentbet4 > 0) && (currentbet4 < sblind) && (balance4 > 0)]
|| [(currentbet5 > 0) && (currentbet5 < sblind) && (balance5 > 0)]
|| [(currentbet6 > 0) && (currentbet6 < sblind) && (balance6 > 0)]
|| [(currentbet7 > 0) && (currentbet7 < sblind) && (balance7 > 0)]
|| [(currentbet8 > 0) && (currentbet8 < sblind) && (balance8 > 0)]
|| [(currentbet9 > 0) && (currentbet9 < sblind) && (balance9 > 0)]

##f$OpenPPL_NumberOfBlindRaisersInThisGame##
[f$OpenPPL_AntesPresent ? 1 : 0] + [f$OpenPPL_MissingSmallBlind ? 1 : 2]

##f$OpenPPL_NumberOfOpponentsLimpingPreflop##
// First orbit preflop only
// Does not count the user
// Does not count the big-blind, who can't limp
  [(currentbet0 == bblind) && (userchair != 0) && (f$OpenPPL_BigBlindChair != 0) ? 1 : 0]
+ [(currentbet1 == bblind) && (userchair != 1) && (f$OpenPPL_BigBlindChair != 1) ? 1 : 0]
+ [(currentbet2 == bblind) && (userchair != 2) && (f$OpenPPL_BigBlindChair != 2) ? 1 : 0]
+ [(currentbet3 == bblind) && (userchair != 3) && (f$OpenPPL_BigBlindChair != 3) ? 1 : 0]
+ [(currentbet4 == bblind) && (userchair != 4) && (f$OpenPPL_BigBlindChair != 4) ? 1 : 0]
+ [(currentbet5 == bblind) && (userchair != 5) && (f$OpenPPL_BigBlindChair != 5) ? 1 : 0]
+ [(currentbet6 == bblind) && (userchair != 6) && (f$OpenPPL_BigBlindChair != 6) ? 1 : 0]
+ [(currentbet7 == bblind) && (userchair != 7) && (f$OpenPPL_BigBlindChair != 7) ? 1 : 0]
+ [(currentbet8 == bblind) && (userchair != 8) && (f$OpenPPL_BigBlindChair != 8) ? 1 : 0]
+ [(currentbet9 == bblind) && (userchair != 9) && (f$OpenPPL_BigBlindChair != 9) ? 1 : 0]

##f$OpenPPL_RaisesBeforeOurFirstAction##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0) ? 0 :
(betround > f$OpenPPL_ConstBetRoundPreflop) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPostflop :
nopponentstruelyraising

##f$OpenPPL_RaisesSinceLastPlayOnOurSecondAction##
// If we checked the first time the bettor sits behind us.
[didchec && (nopponentsraising > 0) ] ? (nopponentsraising - 1) :
[didchec && (nopponentsraising == 0)] ? 0 :
// Otherwise: either we were the first bettor
// or there was a bet and maybe raises in front of us,
// so all technical "raises" behind us are true raises
nopponentsraising

##f$OpenPPL_RaisesSinceLastPlayAfterOurSecondAction##
// Now all technical raises are true raises, no bettors possible
nopponentsraising

##f$OpenPPL_RaisesSinceLastPlay##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? f$OpenPPL_RaisesBeforeOurFirstAction :
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 1) ? f$OpenPPL_RaisesSinceLastPlayOnOurSecondAction :
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks >= 2) ? f$OpenPPL_RaisesSinceLastPlayAfterOurSecondAction :
f$OpenPPL_ERROR_BotsActionsOnThisRound_Out_Of_Range

//*****************************************************************************
//
// OpenPPL - Betsizes and StackSizes - supporting technical functions
//
//*****************************************************************************

##f$OpenPPL_Chair0StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance0 + currentbet0) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair1StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance1 + currentbet1) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair2StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance2 + currentbet2) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair3StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance3 + currentbet3) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair4StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance4 + currentbet4) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair5StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance5 + currentbet5) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair6StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance6 + currentbet6) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair7StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance7 + currentbet7) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair8StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance8 + currentbet8) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair9StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance9 + currentbet9) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_ButtonStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_ButtonChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_ButtonChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_ButtonChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_ButtonChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_ButtonChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_ButtonChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_ButtonChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_ButtonChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_ButtonChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_ButtonChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CutOffStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_CutOffChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_CutOffChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_CutOffChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_CutOffChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_CutOffChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_CutOffChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_CutOffChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_CutOffChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_CutOffChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_CutOffChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_CutOffChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition3StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition3Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition3Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition2StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition2Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition2Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition1StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition1Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition3StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition3Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition3Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition2StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition2Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition2Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition1StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition1Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_BigBlindStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_BigBlindChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_BigBlindChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_BigBlindChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_BigBlindChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_BigBlindChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_BigBlindChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_BigBlindChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_BigBlindChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_BigBlindChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_BigBlindChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_SmallBlindStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_SmallBlindChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_SmallBlindChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_SmallBlindChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_SmallBlindChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_SmallBlindChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_SmallBlindChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_SmallBlindChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_SmallBlindChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_SmallBlindChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_SmallBlindChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_BigBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(f$OpenPPL_BigBlindChair == 0) ? (currentbet0 / bet) :
(f$OpenPPL_BigBlindChair == 1) ? (currentbet1 / bet) :
(f$OpenPPL_BigBlindChair == 2) ? (currentbet2 / bet) :
(f$OpenPPL_BigBlindChair == 3) ? (currentbet3 / bet) :
(f$OpenPPL_BigBlindChair == 4) ? (currentbet4 / bet) :
(f$OpenPPL_BigBlindChair == 5) ? (currentbet5 / bet) :
(f$OpenPPL_BigBlindChair == 6) ? (currentbet6 / bet) :
(f$OpenPPL_BigBlindChair == 7) ? (currentbet7 / bet) :
(f$OpenPPL_BigBlindChair == 8) ? (currentbet8 / bet) :
(f$OpenPPL_BigBlindChair == 9) ? (currentbet9 / bet) :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_SmallBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(f$OpenPPL_SmallBlindChair == 0) ? (currentbet0 / bet) :
(f$OpenPPL_SmallBlindChair == 1) ? (currentbet1 / bet) :
(f$OpenPPL_SmallBlindChair == 2) ? (currentbet2 / bet) :
(f$OpenPPL_SmallBlindChair == 3) ? (currentbet3 / bet) :
(f$OpenPPL_SmallBlindChair == 4) ? (currentbet4 / bet) :
(f$OpenPPL_SmallBlindChair == 5) ? (currentbet5 / bet) :
(f$OpenPPL_SmallBlindChair == 6) ? (currentbet6 / bet) :
(f$OpenPPL_SmallBlindChair == 7) ? (currentbet7 / bet) :
(f$OpenPPL_SmallBlindChair == 8) ? (currentbet8 / bet) :
(f$OpenPPL_SmallBlindChair == 9) ? (currentbet9 / bet) :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MaximumPossibleBetsizeIndollars##
(balance + currentbet)

##f$OpenPPL_SidePotInDollars##
// Money in the side-pot, i.e. the money we don't compete for.
  [(currentbet0 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet0 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet1 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet1 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet2 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet2 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet3 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet3 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet4 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet4 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet5 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet5 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet6 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet6 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet7 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet7 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet8 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet8 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet9 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet9 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]

##f$OpenPPL_SidePot##
// Money in the side-pot, i.e. the money we don't compete for (measured in big blinds)
(bblind > 0) ? (f$OpenPPL_SidePotInDollars / bblind) : 0

##f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStackSize

##f$OpenPPL_MaxStillToActStackSizeAfterButton##
f$OpenPPL_SmallBlindStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind

##f$OpenPPL_MaxStillToActStackSizeAfterCutOff##
f$OpenPPL_ButtonStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterButton ?
  f$OpenPPL_ButtonStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterButton

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterCutOff?
  f$OpenPPL_CutOffStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterCutOff

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2

##f$OpenPPL_MinStillToActStackSizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStackSize

##f$OpenPPL_MinStillToActStackSizeAfterButton##
f$OpenPPL_SmallBlindStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterSmallBlind

##f$OpenPPL_MinStillToActStackSizeAfterCutOff##
f$OpenPPL_ButtonStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterButton ?
  f$OpenPPL_ButtonStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterButton

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterCutOff ?
  f$OpenPPL_CutOffStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterCutOff

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2

##f$OpenPPL_InitMaxOpponentStackSize##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MaxOpponentStackSize_f$OpenPPL_MaxOpponentStackSizeCalculation : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitMinOpponentStackSize##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MinOpponentStackSize_f$OpenPPL_MinOpponentStackSizeCalculation :
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_MaxOpponentStackSizeCalculation##
(bblind <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(balance_rank0 == (balance + currentbet)) ? (balance_rank1 / bblind) : (balance_rank0 / bblind)

##f$OpenPPL_MinOpponentStackSizeCalculation##
(bblind <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
[ 1 / bblind *
[ nplayersdealt == 10 ?
    (balance_rank9 == (balance + currentbet) ? balance_rank8 : balance_rank9) :
  nplayersdealt == 9 ?
    (balance_rank8 == (balance + currentbet) ? balance_rank7 : balance_rank8) :
  nplayersdealt == 8 ?
    (balance_rank7 == (balance + currentbet) ? balance_rank6 : balance_rank7) :
  nplayersdealt == 7 ?
    (balance_rank6 == (balance + currentbet) ? balance_rank5 : balance_rank6) :
  nplayersdealt == 6 ?
    (balance_rank5 == (balance + currentbet) ? balance_rank4 : balance_rank5) :
  nplayersdealt == 5 ?
    (balance_rank4 == (balance + currentbet) ? balance_rank3 : balance_rank4) :
  nplayersdealt == 4 ?
    (balance_rank3 == (balance + currentbet) ? balance_rank2 : balance_rank3) :
  nplayersdealt == 3 ?
    (balance_rank2 == (balance + currentbet) ? balance_rank1 : balance_rank2) :
  nplayersdealt == 2 ?
    (balance_rank1 == (balance + currentbet) ? balance_rank0 : balance_rank1) :
f$OpenPPL_ERROR_No_Opponents_Detected__Check_Your_TableMap]]

##f$OpenPPL_OpponentsWithHigherStack##
// No need to tinker with memory symbols here,
// this logic is valid for all betting rounds.
  (((balance0 + currentbet0) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance1 + currentbet1) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance2 + currentbet2) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance3 + currentbet3) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance4 + currentbet4) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance5 + currentbet5) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance6 + currentbet6) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance7 + currentbet7) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance8 + currentbet8) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance9 + currentbet9) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)

##f$OpenPPL_CalculateStartingStackSize##
// Precondition: first hand, preflop
(bblind > 0) ? ((currentbet + balance) / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_InitStartingStackSize##
((handsplayed == 0 || f$OpenPPL_StartingStackSize == 0) && (betround == f$OpenPPL_ConstBetRoundPreflop)) ?
  me_st_MemStartingStackSize_f$OpenPPL_CalculateStartingStackSize : f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_StartingStackSize##
me_re_MemStartingStackSize

//*****************************************************************************
//
// OpenPPL - Betsizes and StackSizes
//
//*****************************************************************************

##f$OpenPPL_DollarsToCall##
(call <= balance) ? call : balance

##f$OpenPPL_AmountToCall##
(bblind > 0) ? (f$OpenPPL_DollarsToCall / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_BetSize##
ncallbets

##f$OpenPPL_BigBlindSize##
bet1

##f$OpenPPL_MaxOpponentStackSize##
me_re_MaxOpponentStackSize

##f$OpenPPL_MaxStillToActStackSize##
userchair == f$OpenPPL_BigBlindChair        ? 0 :
userchair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind      :
userchair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MaxStillToActStackSizeAfterButton          :
userchair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MaxStillToActStackSizeAfterCutOff          :
userchair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3 :
userchair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2 :
userchair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1 :
userchair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3  :
userchair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2  :
userchair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition1  :
f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated

##f$OpenPPL_MinOpponentStackSize##
me_re_MinOpponentStackSize

##f$OpenPPL_MinStillToActStackSize##
userchair == f$OpenPPL_BigBlindChair        ? 0:
userchair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MinStillToActStackSizeAfterSmallBlind      :
userchair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MinStillToActStackSizeAfterButton          :
userchair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MinStillToActStackSizeAfterCutOff          :
userchair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3 :
userchair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2 :
userchair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1 :
userchair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3  :
userchair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2  :
userchair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition1  :
f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated

##f$OpenPPL_PotSize##
(bblind > 0) ? (pot / bblind) - f$OpenPPL_SidePot: f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_StackSize##
(bblind > 0) ? (balance / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_StackSizeAtBeginningOfCurrentRound##
f$OpenPPL_StackSize + f$OpenPPL_TotalInvestedThisRound

##f$OpenPPL_TotalInvested##
(betround == f$OpenPPL_ConstBetRoundPreflop && nbetsround  > 0) ? ncurrentbets :
(betround == f$OpenPPL_ConstBetRoundFlop    && nbetsround1 > 0) ? (nbetsround1 + ncurrentbets) :
(betround == f$OpenPPL_ConstBetRoundTurn    && nbetsround1 > 0) ? (nbetsround1 + nbetsround2 + ncurrentbets) :
(betround == f$OpenPPL_ConstBetRoundRiver   && nbetsround1 > 0) ? (nbetsround1 + nbetsround2 + nbetsround3 + ncurrentbets) :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_TotalInvestedThisRound##
ncurrentbets

//*****************************************************************************
//
// OpenPPL - Board Symbols
//
//*****************************************************************************

##f$OpenPPL_2ndBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo   :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_AcePresentOnFlop##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardAce) || (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardAce) || (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardAce)

##f$OpenPPL_AcePresentOnTurn##
f$OpenPPL_AcePresentOnFlop || (f$OpenPPL_TurnCard == f$OpenPPL_ConstCardAce)

##f$OpenPPL_BestBoardCard##
rankhicommon

##f$OpenPPL_DoubleGutShotOnBoard##
((rankbitscommon >> 8) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 7) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 6) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 5) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 4) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 3) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 2) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 1) &0x7f) == 0x5d ? 1 : 0

##f$OpenPPL_ExactlyOneStraightPossibleOnFlop##
   [f$OpenPPL_StraightPossibleOnFlop && f$OpenPPL_AcePresentOnFlop && ((f$OpenPPL_LowestFlopCard >= 10) || (f$OpenPPL_TopFlopCard <= 5))]
|| [f$OpenPPL_StraightPossibleOnFlop && (f$OpenPPL_TopFlopCard - f$OpenPPL_LowestFlopCard == 4)]

##f$OpenPPL_FlopCardPairedonTurn##
   f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard
|| f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard
|| f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard

##f$OpenPPL_FlushPossible##
(nsuitedcommon >= 3)

##f$OpenPPL_FlushOnBoard##
($$cs0 == $$cs1 && $$cs0 == $$cs2 && $$cs0 == $$cs3 && $$cs0 == $$cs4)

##f$OpenPPL_FlushPossibleOnFlop##
($$cs0 == $$cs1 && $$cs0 == $$cs2)

##f$OpenPPL_FlushPossibleOnTurn##
[  ($$cs0 == $$cs1 && $$cs0 == $$cs2)
|| ($$cs0 == $$cs1 && $$cs0 == $$cs3)
|| ($$cs0 == $$cs2 && $$cs0 == $$cs3)
|| ($$cs1 == $$cs2 && $$cs1 == $$cs3) ]

##f$OpenPPL_FourCardsToWheelOnBoard##
`(rankbitscommon & 0b0000000000111110) >= 4

##f$OpenPPL_FourOf1SuiteOnTurn##
(($$cs0 == $$cs1) && ($$cs2 == $$cs3) && ($$cs0 == $$cs3))

##f$OpenPPL_FullHouseOnBoard##
(pokervalcommon & fullhouse)

##f$OpenPPL_HighestRankOnFlop##
[(f$OpenPPL_FirstFlopCard >= f$OpenPPL_SecondFlopCard) && (f$OpenPPL_FirstFlopCard >= f$OpenPPL_ThirdFlopCard)] ? f$OpenPPL_FirstFlopCard :
[(f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard) && (f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard)] ? f$OpenPPL_SecondFlopCard :
[(f$OpenPPL_ThirdFlopCard >= f$OpenPPL_FirstFlopCard) && (f$OpenPPL_ThirdFlopCard >= f$OpenPPL_SecondFlopCard)] ? f$OpenPPL_ThirdFlopCard :
-1

##f$OpenPPL_KingPresentOnFlop##
   (f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardKing)
|| (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardKing)
|| (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardKing)

##f$OpenPPL_LowCardsOnBoard##
`f$OpenPPL_RankBitsCommonLowCardsOnly

##f$OpenPPL_MoreThanOneStraightPossibleOnFlop##
f$OpenPPL_StraightPossibleOnFlop && !f$OpenPPL_ExactlyOneStraightPossibleOnFlop

##f$OpenPPL_MoreThanOneStraightPossibleOnRiver##
(betround == f$OpenPPL_ConstBetRoundRiver && (f$OpenPPL_NumberOfStraightsPossibleOnRiver == 1))

##f$OpenPPL_RankBitsCommonRiver##
// As this can only be called at the river it is identical to rankbiscommon
rankbitscommon

##f$OpenPPL_NumberOfStraightsPossibleOnTurn##
  (`((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_NumberOfStraightsPossibleOnRiver##
  (`((f$OpenPPL_RankBitsCommonRiver >> 10) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  9) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  8) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  7) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  6) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  5) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  4) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  3) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  2) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_MoreThanOneOneCardStraightPossible##
f$OpenPPL_DoubleGutShotOnBoard || f$OpenPPL_OpenEndedStraightDrawOnBoard

##f$OpenPPL_MoreThanOneStraightPossibleOnTurn##
(f$OpenPPL_NumberOfStraightsPossibleOnTurn > 1)

##f$OpenPPL_NumberOfOneCardStraightsPossibleOnTurn##
  (f$OpenPPL_OneCardStraightPossibleOnTurn_AceHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_KingHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_QueenHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_JackHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_TenHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_NineHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_EightHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_SevenHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_SixHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_FiveHigh  ? 1 : 0)

##f$OpenPPL_OneCardFlushPossible##
(nsuitedcommon >= 4)

##f$OpenPPL_OneCardStraightFlushPossible##
(nstraightflushfillcommon <= 1)

##f$OpenPPL_StraightFlushOnBoard##
(nstraightflushfillcommon ==0)

##f$OpenPPL_OneCardStraightPossible##
(nstraightfillcommon <= 1)

##f$OpenPPL_OneCardStraightPossibleOnTurn_AceHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b111110000000000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_KingHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b011111000000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_QueenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b001111100000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_JackHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000111110000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_TenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000011111000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_NineHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000001111100000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_EightHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000111110000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_SevenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000011111000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_SixHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000001111100) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_FiveHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000000111110) >= 4)

##f$OpenPPL_OneCardStraightPossibleOnTurn##
(f$OpenPPL_NumberOfOneCardStraightsPossibleOnTurn >= 1)

##f$OpenPPL_Only1OneCardStraightPossible##
f$OpenPPL_OneCardStraightPossible && !f$OpenPPL_MoreThanOneOneCardStraightPossible

##f$OpenPPL_OpenEndedStraightDrawOnBoard##
(nstraightcommon == 4 && (`((rankbitscommon >> 10) & 0x1f) < 4) && (`((rankbitscommon >> 1) & 0x1f) < 4)) ? 1 : 0

##f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop##
[(f$OpenPPL_TopFlopCard - f$OpenPPL_2ndTopFlopCard <= 3) && (f$OpenPPL_TopFlopCard - f$OpenPPL_2ndTopFlopCard > 0) && (f$OpenPPL_TopFlopCard != f$OpenPPL_ConstCardAce)]
|| [(f$OpenPPL_2ndTopFlopCard - f$OpenPPL_LowestFlopCard <= 3) && (f$OpenPPL_2ndTopFlopCard - f$OpenPPL_LowestFlopCard >0) && (f$OpenPPL_LowestFlopCard >= f$OpenPPL_ConstCardTwo)]

##f$OpenPPL_IndividualOverCardsOnBoard##
// Works like OvercardsOnBoard, except that it counts cards only once
`[rankbitscommon >> (rankhiplayer + 1)]

##f$OpenPPL_OvercardsOnBoard##
  ((f$OpenPPL_FirstFlopCard  > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_SecondFlopCard > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_ThirdFlopCard  > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_TurnCard       > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_RiverCard      > rankhiplayer) ? 1 : 0)

##f$OpenPPL_PairOnBoard##
(nrankedcommon >= 2)

##f$OpenPPL_PairOnFlop##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard)

##f$OpenPPL_LowestFlopCard##
f$OpenPPL_FirstFlopCard  <= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  <=  f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_SecondFlopCard <= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard <=  f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_ThirdFlopCard  <= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  <=  f$OpenPPL_SecondFlopCard ? f$OpenPPL_ThirdFlopCard : 
-1

##f$OpenPPL_LowestFlopCardPairedOnTurn##
(f$OpenPPL_LowestFlopCard == f$OpenPPL_TurnCard) 

##f$OpenPPL_OnlyOneStraightPossible##
f$OpenPPL_StraightPossible
&& ![f$OpenPPL_MoreThanOneStraightPossibleOnFlop
  || f$OpenPPL_MoreThanOneStraightPossibleOnTurn
  || f$OpenPPL_MoreThanOneStraightPossibleOnRiver]

##f$OpenPPL_PairOnTurn##
   f$OpenPPL_PairOnFlop
|| f$OpenPPL_TopFlopCardPairedonTurn
|| f$OpenPPL_2ndTopFlopCardPairedOnTurn
|| f$OpenPPL_LowestFlopCardPairedOnTurn

##f$OpenPPL_QuadsOnBoard##
(nrankedcommon == 4)

##f$OpenPPL_QueenPresentOnFlop##
   (f$OpenPPL_FirstFlopCard==f$OpenPPL_ConstCardQueen)
|| (f$OpenPPL_SecondFlopCard==f$OpenPPL_ConstCardQueen)
|| (f$OpenPPL_ThirdFlopCard==f$OpenPPL_ConstCardQueen)

##f$OpenPPL_RankBitsCommonLowCardsOnly##
// Bits 8..ace(low), last bit is unused
(rankbitscommon & 0b111111110)

##f$OpenPPL_RiverCardisOvercardToBoard##
[  f$OpenPPL_RiverCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_ThirdFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_TurnCard ]

##f$OpenPPL_2ndTopFlopCard##
f$OpenPPL_PairOnFlop ? f$OpenPPL_2ndTopFlopCard_PairOnFlop :
!f$OpenPPL_PairOnFlop ? f$OpenPPL_2ndTopFlopCard_UnpairedFlop :
-1

##f$OpenPPL_2ndTopFlopCard_UnpairedFlop##
!f$OpenPPL_PairOnFlop && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_SecondFlopCard :
!f$OpenPPL_PairOnFlop && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_SecondFlopCard <= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_ThirdFlopCard  :
!f$OpenPPL_PairOnFlop && f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_FirstFlopCard  :
!f$OpenPPL_PairOnFlop && f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_FirstFlopCard  <= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_ThirdFlopCard  :
!f$OpenPPL_PairOnFlop && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard ? f$OpenPPL_FirstFlopCard  :
!f$OpenPPL_PairOnFlop && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  <= f$OpenPPL_SecondFlopCard ? f$OpenPPL_SecondFlopCard :
-1

##f$OpenPPL_2ndTopFlopCard_PairOnFlop##
f$OpenPPL_PairOnFlop && f$OpenPPL_FirstFlopCard  == f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  > f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_ThirdFlopCard :
f$OpenPPL_PairOnFlop && f$OpenPPL_FirstFlopCard  == f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  < f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_PairOnFlop && f$OpenPPL_FirstFlopCard  == f$OpenPPL_ThirdFlopCard && f$OpenPPL_FirstFlopCard  > f$OpenPPL_SecondFlopCard  ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_PairOnFlop && f$OpenPPL_FirstFlopCard  == f$OpenPPL_ThirdFlopCard && f$OpenPPL_FirstFlopCard  < f$OpenPPL_SecondFlopCard  ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_PairOnFlop && f$OpenPPL_SecondFlopCard  == f$OpenPPL_ThirdFlopCard && f$OpenPPL_SecondFlopCard  > f$OpenPPL_FirstFlopCard  ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_PairOnFlop && f$OpenPPL_SecondFlopCard  == f$OpenPPL_ThirdFlopCard && f$OpenPPL_SecondFlopCard  < f$OpenPPL_FirstFlopCard  ? f$OpenPPL_SecondFlopCard :
-1

// Shanky is a bit inconsistent with the naming
// So we provide both 2ndTopFlopCardPairedOnRiver and SecondTopFlopCardPairedOnRiver,
// same for turn. "SecondTopFlopCardPairedOnRiver" is the "standard" here.

##f$OpenPPL_SecondTopFlopCardPairedOnRiver##
f$OpenPPL_2ndTopFlopCardPairedOnRiver

##f$OpenPPL_SecondTopFlopCardPairedOnTurn##
f$OpenPPL_2ndTopFlopCardPairedOnTurn

##f$OpenPPL_2ndTopFlopCardPairedOnRiver##
(f$OpenPPL_2ndTopFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_2ndTopFlopCardPairedOnTurn##
(f$OpenPPL_2ndTopFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_srankbitshero##
 (($$ps0==tsuit ? (f$OpenPPL_RankOfFirstHoleCard!=f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_RankOfFirstHoleCard : 0b100000000000010) : 0)
| ($$ps1==tsuit ? (f$OpenPPL_RankOfSecondHoleCard!=f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_RankOfSecondHoleCard : 0b100000000000010) : 0))

##f$OpenPPL_srankavailable##
// Available suited cards for other players,
// possibly contributing to a flush or straight flush
~(srankbitscommon | f$OpenPPL_srankbitshero)

##f$OpenPPL_StraightFlushPossibleByOthers##
(nstraightflushfillcommon <= 2)

##f$OpenPPL_SuitsOnBoard##
(betround == f$OpenPPL_ConstBetRoundFlop)  ? f$OpenPPL_SuitsOnFlop :
(betround == f$OpenPPL_ConstBetRoundTurn)  ? f$OpenPPL_SuitsOnTurn :
(betround == f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_SuitsOnRiver :
f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round

##f$OpenPPL_SuitsOnFlop##
(betround < f$OpenPPL_ConstBetRoundFlop) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ ($$cs0 == $$cs1 && $$cs1 == $$cs2) ? 1 :
 (($$cs0 == $$cs1 && $$cs1 != $$cs2) || ($$cs0 == $$cs2 && $$cs0 != $$cs1) || ($$cs0 != $$cs1 && $$cs1 == $$cs2)) ? 2 :
  ($$cs0 != $$cs1 && $$cs1 != $$cs2 && $$cs0 != $$cs2) ? 3 : f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY]

##f$OpenPPL_SuitsOnRiver##
(betround < f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ f$OpenPPL_SuitsOnTurn
  + ((($$cs4 != $$cs0) && ($$cs4 != $$cs1) && ($$cs4 != $$cs2) && ($$cs4 != $$cs3)) ? 1 : 0)]
  
##f$OpenPPL_SuitsOnTurn##
(betround < f$OpenPPL_ConstBetRoundTurn) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ f$OpenPPL_SuitsOnFlop 
  + ((($$cs3 != $$cs0) && ($$cs3 != $$cs1) && ($$cs3 != $$cs2)) ? 1 : 0)]
  
##f$OpenPPL_StraightFlushPossible##
`((srankbitscommon >> 10) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 9) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 8) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 7) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 6) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 5) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 4) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 3) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 2) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 1) & 0x1f) >= 3 ? 1 : 0

##f$OpenPPL_StraightOnBoard##
(nstraightcommon >= 5)

##f$OpenPPL_StraightPossible##
(nstraightfillcommon <= 2)

##f$OpenPPL_RankBitsCommOnFlop##
  (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_FirstFlopCard : 0b100000000000010)
| (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_SecondFlopCard : 0b100000000000010)
| (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_ThirdFlopCard : 0b100000000000010)

##f$OpenPPL_RankBitsCommonTurn##
  (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_FirstFlopCard : 0b100000000000010)
| (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_SecondFlopCard : 0b100000000000010)
| (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_ThirdFlopCard : 0b100000000000010)
| (f$OpenPPL_TurnCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_TurnCard : 0b100000000000010)

##f$OpenPPL_StraightPossibleOnFlop##
(`((f$OpenPPL_RankBitsCommOnFlop >> 10) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  9) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  8) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  7) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  6) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  5) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  4) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  3) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  2) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_StraightPossibleOnTurn##
(`((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_ThreeCardStraightOnBoard##
nstraightcommon >= 3

##f$OpenPPL_TopFlopCard##
f$OpenPPL_FirstFlopCard >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard >= f$OpenPPL_ThirdFlopCard ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_ThirdFlopCard >= f$OpenPPL_FirstFlopCard && f$OpenPPL_ThirdFlopCard >= f$OpenPPL_SecondFlopCard ? f$OpenPPL_ThirdFlopCard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_TopFlopCardPairedonRiver##
(f$OpenPPL_TopFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_TopFlopCardPairedonTurn##
(f$OpenPPL_TopFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_TripsOnBoard##
(nrankedcommon >= 3)

##f$OpenPPL_TripsOnBoardOnTurn##
   (f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard && f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard)
|| (f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard && f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard)
|| (f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard && f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard)
|| (f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard && f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_TurnCardisOvercardToBoard##
[  f$OpenPPL_TurnCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_TurnCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_TurnCard > f$OpenPPL_ThirdFlopCard ]

##f$OpenPPL_TurnCardPaired##
(f$OpenPPL_TurnCard == f$OpenPPL_RiverCard)

##f$OpenPPL_TwoOfOneSuitPresentOnFlop##
(($$cs0 == $$cs1) || ($$cs0 == $$cs2) || ($$cs1 == $$cs2))

##f$OpenPPL_TwoPairOnBoard##
(pokervalcommon & twopair) || (pokervalcommon & fullhouse)

##f$OpenPPL_TwoPairOnBoardOnTurn##
   (betround>f$OpenPPL_ConstBetRoundFlop && $$cr0==$$cr1 && $$cr2==$$cr3 && $$cr0!=$$cr2)
|| (betround>f$OpenPPL_ConstBetRoundFlop && $$cr0==$$cr2 && $$cr1==$$cr3 && $$cr0!=$$cr1)
|| (betround>f$OpenPPL_ConstBetRoundFlop && $$cr0==$$cr3 && $$cr1==$$cr2 && $$cr0!=$$cr1)

##f$OpenPPL_UncoordinatedFlop##
!f$OpenPPL_PairOnFlop
// No possible flush: guaranteed by the next condition...
// three different suits
&& (f$OpenPPL_SuitsOnFlop == 3)
&& !f$OpenPPL_StraightPossibleOnFlop
&& !f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop

##f$OpenPPL_WheelPossible##
(`(rankbitscommon & 0b111110) >= 3)

//*****************************************************************************
//
// OpenPPL - Hand(Strength) Symbols
//
//*****************************************************************************

##f$OpenPPL_HadOverPairOnFlop##
[  ispair
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_ThirdFlopCard ]

##f$OpenPPL_HadOverPairOnTurn##
[  ispair
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_ThirdFlopCard 
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_TurnCard 
]

##f$OpenPPL_Had2ndOverPairOnFlop##
   ispair
&& rankhiplayer < f$OpenPPL_TopFlopCard
&& rankhiplayer > f$OpenPPL_2ndTopFlopCard

##f$OpenPPL_Had2ndOverPairOnTurn##
f$OpenPPL_Had2ndOverPairOnFlop && (($$cr3==f$OpenPPL_TopFlopCard)|| ($$cr3<f$OpenPPL_TopFlopCard))

##f$OpenPPL_HadPairOnFlop##
   ispair 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_ThirdFlopCard  
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard  
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_ThirdFlopCard

##f$OpenPPL_HadPairOnTurn##
   f$OpenPPL_HadPairOnFlop 
|| f$OpenPPL_FlopCardPairedonTurn 
|| f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_TurnCard

##f$OpenPPL_HadSetOnFlop##
f$OpenPPL_PairInHand && (f$OpenPPL_RankOfFirstHoleCard==$$cr0 || f$OpenPPL_RankOfFirstHoleCard==$$cr1 || f$OpenPPL_RankOfFirstHoleCard==$$cr2) 

##f$OpenPPL_HadSetOnTurn##
f$OpenPPL_HadSetOnFlop || (f$OpenPPL_PairInHand && f$OpenPPL_RankOfFirstHoleCard==$$cr3) 

##f$OpenPPL_HadTopPairOnFlop##
[(f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_HighestRankOnFlop) || (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_HighestRankOnFlop)]

##f$OpenPPL_Had2ndTopPairOnFlop##
[(f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndTopFlopCard) || (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndTopFlopCard)]


##f$OpenPPL_HighestRankOnTurn##
((f$OpenPPL_TurnCard > f$OpenPPL_HighestRankOnFlop) ? f$OpenPPL_TurnCard : f$OpenPPL_HighestRankOnFlop)

##f$OpenPPL_HadTopPairOnTurn##
[ f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_HighestRankOnTurn || f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_HighestRankOnTurn ]

##f$OpenPPL_HadTwoPairOnFlop##
   (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_ThirdFlopCard)
&& (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_ThirdFlopCard)
&& !ispair

##f$OpenPPL_Have2ndBestKicker##
(f$OpenPPL_NumberOfBetterKickers == 1)

##f$OpenPPL_Have2ndBestKickerOrBetter##
f$OpenPPL_Have2ndBestKicker || f$OpenPPL_HaveBestKickerOrBetter

##f$OpenPPL_Have2ndBestOverPair##
   ($KK
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardKing)

##f$OpenPPL_Have2ndBestOverPairOrBetter##
(f$OpenPPL_Have2ndBestOverPair || f$OpenPPL_HaveBestOverPairOrBetter)

##f$OpenPPL_Have2ndNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)]

##f$OpenPPL_Have2ndNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsAceHigh##
`(rankbitscommon & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing  :
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsKingHigh##
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsQueenHigh##
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsJackHigh##
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsTenHigh##
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsNineHigh##
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsEightHigh##
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSevenHigh##
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix  :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSixHigh##
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOfBestPossibleStraight##
`(rankbitscommon & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce   :
`(rankbitscommon & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing  :
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
-1

##f$OpenPPL_HighCardOf2ndBestPossibleStraight##
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardAce)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsAceHigh   :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardKing)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsKingHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardQueen) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsQueenHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardJack)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsJackHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardTen)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsTenHigh   :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardNine)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsNineHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardEight) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsEightHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardSeven) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSevenHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardSix)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSixHigh   :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOfOurStraight##
// Precondition: we have a straight
`(rankbits & 0b111110000000000) == 5 ? f$OpenPPL_ConstCardAce   :
`(rankbits & 0b011111000000000) == 5 ? f$OpenPPL_ConstCardKing  :
`(rankbits & 0b001111100000000) == 5 ? f$OpenPPL_ConstCardQueen :
`(rankbits & 0b000111110000000) == 5 ? f$OpenPPL_ConstCardJack  :
`(rankbits & 0b000011111000000) == 5 ? f$OpenPPL_ConstCardTen   :
`(rankbits & 0b000001111100000) == 5 ? f$OpenPPL_ConstCardNine  :
`(rankbits & 0b000000111110000) == 5 ? f$OpenPPL_ConstCardEight :
`(rankbits & 0b000000011111000) == 5 ? f$OpenPPL_ConstCardSeven :
`(rankbits & 0b000000001111100) == 5 ? f$OpenPPL_ConstCardSix   :
`(rankbits & 0b000000000111110) == 5 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__Do_Not_Call_This_Function

##f$OpenPPL_Have2ndNutStraight##
f$OpenPPL_HaveStraight
&& (f$OpenPPL_HighCardOf2ndBestPossibleStraight == f$OpenPPL_HighCardOfOurStraight)

##f$OpenPPL_Have2ndOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_BestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_Have2ndTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_Have2ndTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_TopBitOfRankBitsCommon##
(1 << rankhicommon)

##f$OpenPPL_2ndTopBitOfRankBitsCommon##
(1 << f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_3rdTopBitOfRankBitsCommon##
(1 << f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_4thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_5thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_RankBitsCommonWithoutTopBit##
rankbitscommon & ~f$OpenPPL_TopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopTwoBits##
f$OpenPPL_RankBitsCommonWithoutTopBit & ~f$OpenPPL_2ndTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopThreeBits##
f$OpenPPL_RankBitsCommonWithoutTopTwoBits & ~f$OpenPPL_3rdTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopFourBits##
f$OpenPPL_RankBitsCommonWithoutTopThreeBits & ~f$OpenPPL_4thTopBitOfRankBitsCommon

##f$OpenPPL_Have3rdBestKicker##
(f$OpenPPL_NumberOfBetterKickers == 2)

##f$OpenPPL_Have3rdBestKickerOrBetter##
f$OpenPPL_Have3rdBestKicker || f$OpenPPL_Have2ndBestKickerOrBetter

##f$OpenPPL_Have3rdBestOverPair##
   $QQ
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardQueen

##f$OpenPPL_3rdBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have3rdBestOverPairOrBetter##
(f$OpenPPL_Have3rdBestOverPair ||  f$OpenPPL_Have2ndBestOverPairOrBetter)

##f$OpenPPL_Have3rdNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)]

##f$OpenPPL_Have3rdNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_Have3rdOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_2ndBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_Have3rdTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_3rdBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_ThirdTopPairRank##
(f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_3rdBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_3rdBestBoardCard) ? f$OpenPPL_3rdBestBoardCard :0

##f$OpenPPL_Have5thTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_5thBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_5thBestBoardCard 

##f$OpenPPL_FifthTopPairRank##
(f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_5thBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_5thBestBoardCard) ? f$OpenPPL_5thBestBoardCard: 0

##f$OpenPPL_Have3rdTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_Have4thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)]

##f$OpenPPL_Have4thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)

##f$OpenPPL_4thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have4thOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_3rdBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_Have4thTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_4thBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_ForthTopPairRank##
(f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_4thBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_4thBestBoardCard) ? f$OpenPPL_4thBestBoardCard : 0

##f$OpenPPL_Have4thTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_Have5thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)]

##f$OpenPPL_Have5thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)

##f$OpenPPL_5thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have5thOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_4thBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_HaveAnyKindOfInsideStraightDraw##
// Note: This does also count straightdraws at the board,
// where we don't contribute any card. Special care should be taken
// in f$OpenPPL_HaveInsideStraightDraw
(nstraightfill <= 1)

##f$OpenPPL_HaveBackdoorFlushDrawContributingTwoCards##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& ($$ps0 == tsuit)
&& ($$ps1 == tsuit)

##f$OpenPPL_HaveBackdoorNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveBackDoor2ndNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HaveBackDoor3rdNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_HaveBackdoorFlushDraw##
   f$OpenPPL_HaveBackdoorFlushDrawContributingTwoCards
|| f$OpenPPL_HaveBackdoorNutFlushDraw
|| f$OpenPPL_HaveBackDoor2ndNutFlushDraw

##f$OpenPPL_HaveBestKicker##
(f$OpenPPL_NumberOfBetterKickers == 0)

##f$OpenPPL_HaveBestKickerOrBetter##
(f$OpenPPL_HaveBestKicker || f$OpenPPL_HavePair  || f$OpenPPL_HaveOverPairOrBetter)

##f$OpenPPL_HaveBestOverPair##
   ($AA
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardAce)

##f$OpenPPL_HaveBestOverPairOrBetter##
  (f$OpenPPL_HaveBestOverPair
|| f$OpenPPL_HaveTwoPair
|| f$OpenPPL_HaveSet
|| f$OpenPPL_HaveTrips
|| f$OpenPPL_HaveStraight
|| f$OpenPPL_HaveFlush
|| f$OpenPPL_HaveFullHouse
|| f$OpenPPL_HaveQuads
|| f$OpenPPL_HaveStraightFlush)

##f$OpenPPL_LowestBitOfRankBitsCommon##
(1<<ranklocommon)

##f$OpenPPL_RankBitsCommonWithoutLowestBit##
// we negate lowest-bit and then do an and-operation
rankbitscommon & ~f$OpenPPL_LowestBitOfRankBitsCommon

##f$OpenPPL_LowestBoardCard##
ranklocommon

##f$OpenPPL_2ndLowestBoardCard##
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000000100) != 1 ? f$OpenPPL_ConstCardTwo   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000001000) != 1 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000010000) != 1 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000100000) != 1 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000001000000) != 1 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000010000000) != 1 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000100000000) != 1 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000001000000000) != 1 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000010000000000) != 1 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000100000000000) != 1 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b001000000000000) != 1 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b010000000000000) != 1 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b100000000000000) != 1 ? f$OpenPPL_ConstCardAce   :
-1

##f$OpenPPL_HaveBottomPair##
[ isonepair && (rankhiplayer == ranklocommon || rankloplayer == ranklocommon) ]

##f$OpenPPL_HaveBottomSet##
((nrankedcommon == 1) && ispair && isthreeofakind && (rankhiplayer == ranklocommon))

##f$OpenPPL_HaveBottomTrips##
($$pr0 == f$OpenPPL_RankOfBottomPairOnBoard || $$pr1 == f$OpenPPL_RankOfBottomPairOnBoard)

##f$OpenPPL_HaveBottomTwoPair##
   (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_LowestBoardCard && f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndLowestBoardCard)
|| (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndLowestBoardCard && f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_LowestBoardCard)

##f$OpenPPL_HaveDoubleGutshotDraw##
   `((rankbits >> 1) & 0b1011101) == 5  // A_345_7
|| `((rankbits >> 2) & 0b1011101) == 5  // 2_456_8
|| `((rankbits >> 3) & 0b1011101) == 5  // 3_567_9
|| `((rankbits >> 4) & 0b1011101) == 5  // 4_678_T
|| `((rankbits >> 5) & 0b1011101) == 5  // 5_789_J
|| `((rankbits >> 6) & 0b1011101) == 5  // 6_89T_Q
|| `((rankbits >> 7) & 0b1011101) == 5  // 8_9TJ_K
|| `((rankbits >> 8) & 0b1011101) == 5  // 9_TJQ_A
|| `((rankbits >> 1) & 0b11011011) == 6 // A2_45_78
|| `((rankbits >> 2) & 0b11011011) == 6 // 23_56_89
|| `((rankbits >> 3) & 0b11011011) == 6 // 34_67_9T
|| `((rankbits >> 4) & 0b11011011) == 6 // 45_78_TJ
|| `((rankbits >> 5) & 0b11011011) == 6 // 56_89_JQ
|| `((rankbits >> 6) & 0b11011011) == 6 // 67_9T_QK
|| `((rankbits >> 7) & 0b11011011) == 6 // 78_TJ_KA

##f$OpenPPL_HaveFlush##
(nsuited >= 5)

##f$OpenPPL_HaveFlushDraw##
// Modified, because Shanky BonusBots definition is not very practical
// http://www.maxinmontreal.com/forums/viewtopic.php?f=259&t=17463
// 
// Good one, contributing 2 cards
  (((nsuited == 4) && (nsuitedcommon == 2))
// Best one
|| f$OpenPPL_HaveNutFlushDraw
// Contributing only single card:
//  * Headsup: at least 3rd-best
//  * 3-handed: at least 2nd-best
//  * 4-handed: only nut-flush
|| ((nsuited >= 4) && (nsuitedcommon >2) && (f$OpenPPL_NumberOfUnknownSuitedOvercards < (3 - nopponentsplaying))))

##f$OpenPPL_HaveFullHouse##
isfullhouse || f$OpenPPL_HaveQuads

##f$OpenPPL_HaveNothing##
!f$OpenPPL_HavePair && !(f$OpenPPL_Overcards == 2) && !f$OpenPPL_HaveBestOverPairOrBetter && !f$OpenPPL_HaveBackdoorFlushDraw && !f$OpenPPL_HaveStraightDraw && !f$OpenPPL_HaveInsideStraightDraw && !f$OpenPPL_HaveFlushDraw
// && !f$OpenPPL_HaveBackdoorStraightDraw


##f$OpenPPL_HaveNutFlush##
    f$OpenPPL_HaveNutStraightFlush
|| [f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]

##f$OpenPPL_HaveNutFlushCard##
(f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveNutFlushDraw##
    f$OpenPPL_HaveNutStraightFlush
|| [(nsuited >= 4) && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]


##f$OpenPPL_HaveNutStraight##
[ishistraight || f$OpenPPL_HaveNutStraightFlush]

##f$OpenPPL_MyKicker##
(isfourofakind || istwopair) ? pokerval & 0x0F :
isthreeofakind ? (pokerval >> 4) & 0x0F :
isonepair ? (pokerval >> 8) & 0x0F :
f$OpenPPL_ERROR_You_Dont_Have_Any_Kicker

##f$OpenPPL_NumberOfBetterKickers##
// Cards better than my kicker...
[(f$OpenPPL_ConstCardAce - f$OpenPPL_MyKicker)
// ...minus the cards in my 5-card-hand which are better than my kicker
- (`(rankbitspoker >> f$OpenPPL_MyKicker))]

##f$OpenPPL_RankBitsCommonWithAdditionalAce##
rankbitscommon | 0b100000000000010

##f$OpenPPL_RankBitsCommonWithAdditionalKing##
rankbitscommon | 0b010000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalQueen##
rankbitscommon | 0b001000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalJack##
rankbitscommon | 0b000100000000000

##f$OpenPPL_RankBitsCommonWithAdditionalTen##
rankbitscommon | 0b000010000000000

##f$OpenPPL_RankBitsCommonWithAdditionalNine##
rankbitscommon | 0b000001000000000

##f$OpenPPL_RankBitsCommonWithAdditionalEight##
rankbitscommon | 0b000000100000000

##f$OpenPPL_RankBitsCommonWithAdditionalSeven##
rankbitscommon | 0b000000010000000

##f$OpenPPL_RankBitsCommonWithAdditionalSix##
rankbitscommon | 0b000000001000000

##f$OpenPPL_RankBitsCommonWithAdditionalFive##
rankbitscommon | 0b000000000100000

##f$OpenPPL_RankBitsCommonWithAdditionalFour##
rankbitscommon | 0b000000000010000

##f$OpenPPL_RankBitsCommonWithAdditionalThree##
rankbitscommon | 0b000000000001000

##f$OpenPPL_RankBitsCommonWithAdditionalTwo##
rankbitscommon | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
`(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_RankBitsWithAdditionalAce##
rankbits | 0b100000000000010

##f$OpenPPL_RankBitsWithAdditionalKing##
rankbits | 0b010000000000000

##f$OpenPPL_RankBitsWithAdditionalQueen##
rankbits | 0b001000000000000

##f$OpenPPL_RankBitsWithAdditionalJack##
rankbits | 0b000100000000000

##f$OpenPPL_RankBitsWithAdditionalTen##
rankbits | 0b000010000000000

##f$OpenPPL_RankBitsWithAdditionalNine##
rankbits | 0b000001000000000

##f$OpenPPL_RankBitsWithAdditionalEight##
rankbits | 0b000000100000000

##f$OpenPPL_RankBitsWithAdditionalSeven##
rankbits | 0b000000010000000

##f$OpenPPL_RankBitsWithAdditionalSix##
rankbits | 0b000000001000000

##f$OpenPPL_RankBitsWithAdditionalFive##
rankbits | 0b000000000100000

##f$OpenPPL_RankBitsWithAdditionalFour##
rankbits | 0b000000000010000

##f$OpenPPL_RankBitsWithAdditionalThree##
rankbits | 0b000000000001000

##f$OpenPPL_RankBitsWithAdditionalTwo##
rankbits | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalAce & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
`(f$OpenPPL_RankBitsWithAdditionalAce & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalKing & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalKing & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalTwo & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalTwo & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard)

##f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight##
  f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard

##f$OpenPPL_HaveNutStraightDraw##
(nsuitedcommon < 2) && (f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight >= 2)

##f$OpenPPL_HaveInsideNutStraightDraw##
(f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight >= 1)

##f$OpenPPL_HaveInsideStraightDraw##
f$OpenPPL_HaveAnyKindOfInsideStraightDraw

##f$OpenPPL_HaveNuts##
(nhandshi == 0)

##f$OpenPPL_HaveNutStraightFlush##
isstraightflush && (nhandshi == 0)

##f$OpenPPL_HaveOpenEndedStraightDraw##
f$OpenPPL_HaveStraight
|| ((rankbits >> 0) & 0b111100) == 0b111100 // 5432
|| ((rankbits >> 1) & 0b111100) == 0b111100 // 6543
|| ((rankbits >> 2) & 0b111100) == 0b111100 // 7654
|| ((rankbits >> 3) & 0b111100) == 0b111100 // 8765
|| ((rankbits >> 4) & 0b111100) == 0b111100 // 9876
|| ((rankbits >> 5) & 0b111100) == 0b111100 // T987
|| ((rankbits >> 6) & 0b111100) == 0b111100 // JT98
|| ((rankbits >> 7) & 0b111100) == 0b111100 // QJT9
|| ((rankbits >> 8) & 0b111100) == 0b111100 // KQJT

##f$OpenPPL_HaveQuads##
[ isfourofakind && (nrankedcommon < 4) ]

##f$OpenPPL_HaveOverPair##
ispair && (rankhiplayer > rankhicommon)

##f$OpenPPL_HaveOverPairOrBetter##
f$OpenPPL_HaveOverPair || f$OpenPPL_HaveBestOverPairOrBetter

##f$OpenPPL_HavePair##
[  f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_RankOfSecondHoleCard
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_ThirdFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_RiverCard
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_ThirdFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_RiverCard ]

##f$OpenPPL_HavePocketPair##
ispair

##f$OpenPPL_HaveRunnerRunnerFlushAtRiver##
(betround == f$OpenPPL_ConstBetRoundRiver && f$OpenPPL_HaveFlush && nsuitedcommon==3 && f$OpenPPL_SuitsOnFlop!=3 && $$cs3==$$cs4) ? 1:0

##f$OpenPPL_HaveSet##
[  ispair
&& (  (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_FirstFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_SecondFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_ThirdFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_TurnCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_RiverCard)) ]

##f$OpenPPL_HaveTopTrips##
(!ispair && ($$pr0 == f$OpenPPL_RankOfTopPairOnBoard || $$pr1 == f$OpenPPL_RankOfTopPairOnBoard))

##f$OpenPPL_HaveTrips##
!ispair
&&   [(pokerval & threeofakind) && !(pokervalcommon & threeofakind)
  || ((pokerval & fullhouse)    && `(pcbits & 0b11100) == 1)
  ||  (pokerval & fourofakind)  && !(pokervalcommon & fourofakind)]

##f$OpenPPL_TripsRank##
f$OpenPPL_HaveTrips && f$OpenPPL_HaveTopPair    ? f$OpenPPL_TopPairRank:
f$OpenPPL_HaveTrips && f$OpenPPL_Have2ndTopPair ? f$OpenPPL_SecondTopPairRank:
f$OpenPPL_HaveTrips && f$OpenPPL_Have3rdTopPair ? f$OpenPPL_ThirdTopPairRank:
f$OpenPPL_HaveTrips && f$OpenPPL_Have4thTopPair ? f$OpenPPL_ForthTopPairRank:
f$OpenPPL_HaveTrips && f$OpenPPL_Have5thTopPair ? f$OpenPPL_FifthTopPairRank: 0

##f$OpenPPL_TripsKickerRank##
f$OpenPPL_HaveTrips && f$OpenPPL_TripsRank==f$OpenPPL_RankOfFirstHoleCard ? f$OpenPPL_RankOfSecondHoleCard:
f$OpenPPL_HaveTrips && f$OpenPPL_TripsRank==f$OpenPPL_RankOfSecondHoleCard ? f$OpenPPL_RankOfFirstHoleCard: 0

##f$OpenPPL_HaveStraight##
(nstraightfill == 0)

##f$OpenPPL_HaveStraightDraw##
   f$OpenPPL_HaveOpenEndedStraightDraw 
|| f$OpenPPL_HaveDoubleGutshotDraw

##f$OpenPPL_HaveStraightFlush##
(isstraightflush || isroyalflush)

##f$OpenPPL_CommonCard0Paired##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard1Paired##
(f$OpenPPL_SecondFlopCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard2Paired##
(f$OpenPPL_ThirdFlopCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard3Paired##
(f$OpenPPL_TurnCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard4Paired##
(f$OpenPPL_RiverCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_RiverCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RiverCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_RankBitsCommonWithoutCommonRank0Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank1Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank2Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank3Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_TurnCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_TurnCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank4Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_RiverCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_RiverCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutPairs##
  f$OpenPPL_RankBitsCommonWithoutCommonRank0Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank1Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank2Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank3Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank4Pair

##f$OpenPPL_HighestUnpairedBoardCard##
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardAce)   & 1 ? f$OpenPPL_ConstCardAce   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardKing)  & 1 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardQueen) & 1 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardJack)  & 1 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardTen)   & 1 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardNine)  & 1 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardEight) & 1 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardSeven) & 1 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardSix)   & 1 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardFive)  & 1 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardFour)  & 1 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardThree) & 1 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardTwo)   & 1 ? f$OpenPPL_ConstCardTwo   : 0

##f$OpenPPL_HaveTopNonBoardPairedPair##
   [(betround >= f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_HighestUnpairedBoardCard)]
|| [(betround >= f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_HighestUnpairedBoardCard)]

##f$OpenPPL_HaveTopPair##
[ f$OpenPPL_RankOfFirstHoleCard==rankhicommon || f$OpenPPL_RankOfSecondHoleCard==rankhicommon ]

##f$OpenPPL_TopPairRank##
f$OpenPPL_HaveTopPair && $$pr0==rankhicommon ? $$pr0:
f$OpenPPL_HaveTopPair && $$pr1==rankhicommon ? $$pr1:
0

##f$OpenPPL_TopPairKickerRank##
f$OpenPPL_HaveTopPair && $$pr0==rankhicommon ? $$pr1:
f$OpenPPL_HaveTopPair && $$pr1==rankhicommon ? $$pr0:
0

##f$OpenPPL_SecondTopPairRank##
f$OpenPPL_Have2ndTopPair && f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_2ndBestBoardCard ? f$OpenPPL_RankOfFirstHoleCard :
f$OpenPPL_Have2ndTopPair && f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndBestBoardCard ? f$OpenPPL_RankOfSecondHoleCard :
0

##f$OpenPPL_HaveTopSet##
(ispair && (rankhiplayer == rankhicommon))

##f$OpenPPL_HaveTopTwoPair##
(f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndTopPair)

##f$OpenPPL_RankbitsCommonWithoutAceLow##
// Don't count ace twice in HaveTwoPair
// bit0 is unused
// bit 2 is ace low
//                 AKQJT98765432-- 
rankbitscommon & 0b111111111111100

##f$OpenPPL_HaveTwoPair##
`(rankbitsplayer & f$OpenPPL_RankbitsCommonWithoutAceLow) == 2

##f$OpenPPL_HaveUnderPair##
[ ispair && rankhiplayer<ranklocommon ]

##f$OpenPPL_HaveUnderStraight##
f$OpenPPL_HaveStraight
&& (pcbits == 0b00011 || pcbits == 0b00001)

##f$OpenPPL_NumberOfUnknownSuitedOvercards##
// Suited unknown overcards to holecards,
// e.g. on Board Ah Th, in Hand Jh 9h => 2 suited overcards: Kh Qh.
`((~srankbits & 0x7fff) >> srankhiplayer)

##f$OpenPPL_BoardKicker_FourOfAKindOnBoard##
(betround == f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_HighestUnpairedBoardCard : 2

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WeHaveOverPairToPair##
// 3 is the best strength possible, because two quads are always possible
3
// 1 OverPair for each overcard = 1 higher full house
+ (f$OpenPPL_ConstCardAce - rankhiplayer)
// Higher set possible with pair onboard?
+ [(f$OpenPPL_RankOfTopPairOnBoard > rankhiplayer) ? 1 : 0 ]
// If the cards on board are higher than our pair,
// we have to subtract them again, as otherwise we count them twice,
// as set/quads and OverPair.
+ [(f$OpenPPL_RankOfTopPairOnBoard > rankhiplayer) ? -1 : 0 ]
+ [(f$OpenPPL_RankOfSetOnBoard  > rankhiplayer) ? -1 : 0 ]

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePlayTheBoard##
// 3 is the best strength possible, because two quads are always possible
3
// 1 OverPair for each overcard = 1 higher full house
+ (f$OpenPPL_ConstCardAce - rankhiplayer)
// +1 if the pair is higher as the set (higher set possible)
// -1 if the pair is higher as the set (counted twice as OverPair / set)
// but these cases neutralize each other

##f$OpenPPL_RankOfPairOfFullHouse##
// The last 20 bits of pokerval look like XXXX XXXX XXXX YYYY YYYY (see docu)
// XXXX are the rank of the set
// YYYY are the rank of the pair
(pokerval & 0b1111)

##f$OpenPPL_RankOfSetOfFullHouse##
// The last 20 bits of pokerval look like XXXX XXXX XXXX YYYY YYYY (see docu)
// XXXX are the rank of the set
// YYYY are the rank of the pair
((pokerval >> 12) & 0b1111)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitThePairAndAnotherCard##
// 1 for each overcard on baord to RankOfTopPairOnBoard, which make better 3oaks possible = better FH
  [[(rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardAce  )] ? 1 : 0]
+ [[(rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardKing )] ? 1 : 0]
+ [[(rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardQueen)] ? 1 : 0]
+ [[(rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardJack )] ? 1 : 0]
+ [[(rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTen  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardNine )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardEight)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSeven)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSix  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFive )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFour )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardThree)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTwo  )] ? 1 : 0]
// 1 for each board-card that is not the pair on board and higher than the other pair (board-user),
// as there ar higher FHs possible (same set, higher pair)
+ [[(rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardAce  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardAce  )] ? 1 : 0]
+ [[(rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardKing ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardKing )] ? 1 : 0]
+ [[(rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardQueen) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardQueen)] ? 1 : 0]
+ [[(rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardJack ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardJack )] ? 1 : 0]
+ [[(rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardTen  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardTen  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardNine ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardNine )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardEight) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardEight)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardSeven) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardSeven)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardSix  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardSix  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardFive ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardFive )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardFour ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardFour )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardThree) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardThree)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardTwo  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardTwo  )] ? 1 : 0]
// + 1 for our hand
+ 1

##f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse##
  (rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardAce  )
+ (rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardKing )
+ (rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardQueen)
+ (rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardJack )
+ (rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTen  )
+ (rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardNine )
+ (rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardEight)
+ (rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSeven)
+ (rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSix  )
+ (rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFive )
+ (rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFour )
+ (rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardThree)
+ (rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTwo  )

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomSet##
// 3 is the lowest nut rank possible, becuase theres still a quad and a FH with the higher pair possible.
// Theres always a higher pair on board, so if there are two higher ranked cards in common cards,
// theres also a higher set possible with a pocket pair and the remaining single card on board.
3 + [(f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse >= 2) ? 1 : 0]

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopSet##
// 2 is the lowest nut rank possible, becuase theres still a quad possible.
// Theres might be a higher card on board, so if there is a higher ranked card in common cards then our set rank,
// theres also a higher set possible with a pocket pair and the remaining single card on board.
2 + [(f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse >= 1) ? 1 : 0]

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomQuads##
2

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopQuads##
1

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WePairBothPairs##
// Theres might be a higher card on board,
// so if there is a higher ranked card in common cards then our pair ranks,
// there are also a higher pair and a higher set possible.
1
+ [((pokervalcommon & 0b1111) > f$OpenPPL_RankOfPairOfFullHouse) ? 1 : 0]
+ [((pokervalcommon & 0b1111) > f$OpenPPL_RankOfSetOfFullHouse ) ? 1 : 0]

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairBothBoardCards##
1

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighSetOnBoard##
1

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowSetOnBoard##
2

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighPairOnBoard##
2

##f$OpenPPL_RankOfTopPairOnBoard##
board$AA ? f$OpenPPL_ConstCardAce :
board$KK ? f$OpenPPL_ConstCardKing :
board$QQ ? f$OpenPPL_ConstCardQueen :
board$JJ ? f$OpenPPL_ConstCardJack :
board$TT ? f$OpenPPL_ConstCardTen :
board$99 ? f$OpenPPL_ConstCardNine :
board$88 ? f$OpenPPL_ConstCardEight :
board$77 ? f$OpenPPL_ConstCardSeven :
board$66 ? f$OpenPPL_ConstCardSix :
board$55 ? f$OpenPPL_ConstCardFive :
board$44 ? f$OpenPPL_ConstCardFour :
board$33 ? f$OpenPPL_ConstCardThree :
board$22 ? f$OpenPPL_ConstCardTwo :
f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board

##f$OpenPPL_RankOfBottomPairOnBoard##
board$22 ? f$OpenPPL_ConstCardTwo :
board$33 ? f$OpenPPL_ConstCardThree :
board$44 ? f$OpenPPL_ConstCardFour :
board$55 ? f$OpenPPL_ConstCardFive :
board$66 ? f$OpenPPL_ConstCardSix :
board$77 ? f$OpenPPL_ConstCardSeven :
board$88 ? f$OpenPPL_ConstCardEight :
board$99 ? f$OpenPPL_ConstCardNine :
board$TT ? f$OpenPPL_ConstCardTen :
board$JJ ? f$OpenPPL_ConstCardJack :
board$QQ ? f$OpenPPL_ConstCardQueen :
board$KK ? f$OpenPPL_ConstCardKing :
board$AA ? f$OpenPPL_ConstCardAce :
f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowPairOnBoard##
// One quads possible, so the bestcase is second nuts
2
// Bbecause the set does have a higher rank then our pair,
// with the rank of the set theres no OverPair possible,
// and therefore are only 11 OverPairs possible instead of 12 if we do have 22 pair,
// 10 if we have 33 pair, etc.
+ (13 - f$OpenPPL_RankOfBottomPairOnBoard)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitASetWithPocketPair##
// 2 is the lowest rank possible, because quads are still possible
2
// For each rank in the common cards above the rank in the pocket cards, theres a higher FH possible.
+  (rankbitscommon & 0b000000000001000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000000010000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000000100000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000001000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000010000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000100000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000001000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000010000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000100000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b001000000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b010000000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b100000000000000 > rankbitsplayer ? 1 : 0)
// If the Pair on board is higher than our pocket-pair it got already counted
- ((trankcommon > rankhiplayer) ? 1 : 0)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitQuads##
// With a single pair on board and quads for us we have the current nuts
1

##f$OpenPPL_NutFullHouseOrFourOfAKind_FourOfAKindOnBoard##
// PreCondition: FourOfAKindOnBoard
//
// case 1: we play the board. e.g. 8888Q, we have J5
[rankhiplayer < f$OpenPPL_BoardKicker_FourOfAKindOnBoard] ?
[
	// case 1A: common kicker is higher then quads, e.g. 8888Q.
   (f$OpenPPL_BoardKicker_FourOfAKindOnBoard > trankcommon ) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
   // case 1B: common kicker is lower than quads
   (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
] :
// Otherwise: case 2: One of our cards is better then the nonpaired board card, e.g. 88885, we have J2
[
   // case 2A: Our kicker is better than quads, too (better than all board cards)
   (rankhiplayer > trankcommon) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
   // case 2B: Our kicker is worse than quads, e.g. 88885, we have 72
   (f$OpenPPL_ConstCardAce - rankhiplayer)
]

##f$OpenPPL_NutFullHouseOrFourOfAKind_FullHouseOnBoard##
// Precondition: FH on board
// There are 7 cases:
//
// 1) we pair both board-cards, so we have quads and nobody can have better quads
[(rankhiplayer == f$OpenPPL_BestBoardCard) && (rankloplayer == f$OpenPPL_2ndBestBoardCard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairBothBoardCards :
//
// 2) we pair the set on board, which is higher than the pair, so we get the best quads
[((rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer == f$OpenPPL_RankOfSetOnBoard)) && (f$OpenPPL_RankOfSetOnBoard > f$OpenPPL_2ndBestBoardCard)] ? 1: 1/*f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighSetOnBoard :
//
// 3) we pair the set on board, which is lower than the pair, so somebody could have better quads
[((rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer == f$OpenPPL_RankOfSetOnBoard)) && (f$OpenPPL_RankOfSetOnBoard < 2ndBestBoardCard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowSetOnBoard :
//
// 4) we pair the pair on board, which is higher than the set, so we get a better FH, but there are still quads possible
[(   (rankhiplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard) || (rankloplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)) && (f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard > f$OpenPPL_RankOfSetOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighPairOnBoard :
//
// 5) we pair the pair on board, which is lower than the set, so we play the board, but one kind of quads is no longer possible
[((rankhiplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard) || (rankloplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)) && (f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard < f$OpenPPL_RankOfSetOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowPairOnBoard :
//
// 6) we don't pair anything, but have an OverPair to the pair on board (we probably have to distinguish, if it is higher than the set or lower)
[ispair && (rankhiplayer != f$OpenPPL_BestBoardCard) && (rankhiplayer != f$OpenPPL_2ndBestBoardCard) && (rankhiplayer > f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WeHaveOverPairToPair :
//
// 7) we don't have an OverPair to the pair and therefore play the board (probably again 2 cases)
f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePlayTheBoard
*/

##f$OpenPPL_RankOfSetOnBoard##
// Precondition: set on board
trankcommon


##f$OpenPPL_RankOfSpareCardWhenTwoPairOnBoard##
f$OpenPPL_TwoPairOnBoard && !f$OpenPPL_FullHouseOnBoard ?
[    
			 ($$cr0!=f$OpenPPL_RankOfTopPairOnBoard && $$cr0!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr0:0)
			|($$cr1!=f$OpenPPL_RankOfTopPairOnBoard && $$cr1!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr1:0)
			|($$cr2!=f$OpenPPL_RankOfTopPairOnBoard && $$cr2!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr2:0)
			|($$cr3!=f$OpenPPL_RankOfTopPairOnBoard && $$cr3!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr3:0)
			|($$cr4!=f$OpenPPL_RankOfTopPairOnBoard && $$cr4!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr4:0)
]:
0

##f$OpenPPL_NutFullHouseOrFourOfAKind_ThreeOfAKindOnBoard##
// Case 1: we have the quads: the nuts
(rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer ==f$OpenPPL_RankOfSetOnBoard) ? 1 :
// Otherwise: we have a fullhouse with either a pocket-pair or pair a board-card.
// Case 2: Pocket-pair
ispair ?
[
    // Everybody who has a higher pocket pair or hits a higher board-card
    // or hits the set will get a better hand
    (f$OpenPPL_RankOfSetOnBoard > rankhiplayer) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
    // Otherwise: set is lower, so there is 1 additional card, that loses for us
    (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
] :
// Case 3: We pair the board
[
    // Same logic applies as above:
    // Case 3A: Our higher card hits the board
    (rankhiplayer == f$OpenPPL_BestBoardCard) || (rankhiplayer == f$OpenPPL_2ndBestBoardCard) || (rankhiplayer == f$OpenPPL_3rdBestBoardCard) ?
    [
        (f$OpenPPL_RankOfSetOnBoard > rankhiplayer) ? (f$OpenPPL_ConstCardAce - rankhiplayer) :
        // Otherwise: set is lower, so there is 1 additional card, that loses for us
        (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
    ] :
    [
        // Otherwise rankloplayer paired:
        (f$OpenPPL_RankOfSetOnBoard > rankloplayer) ? (f$OpenPPL_ConstCardAce - rankloplayer) :
        // Otherwise: set is lower, so there is 1 additional card, that loses for us
        (f$OpenPPL_ConstCardAce - rankloplayer + 1)
    ]
]

##f$OpenPPL_NutFullHouseOrFourOfAKind_TwoPairsOnBoard##
// 5 basic cases
//
// 1) we complete the higher pair to quads
[ispair && rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopQuads :
//
// 2) we complete the lower pair to quads
[ispair && rankhiplayer == f$OpenPPL_RankOfBottomPairOnBoard] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomQuads :
//
// 3) we pair both pairs: no quads possible, but:
//   * maybe 1 higher FH, if anybody pairs the higher pair and the last board-card, if it is higher than the low pair
//   * maybe 2 higher FHs, as above, if anybody pairs the completes the left board-card to higher trips
[(rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard) && (rankloplayer == f$OpenPPL_RankOfBottomPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WePairBothPairs :
//
// 4) we pair the higher board-card; probably several cases
[(rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard) || (rankloplayer == f$OpenPPL_RankOfTopPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopSet :
//
// 5) we pair the lower board card; probably several cases
[(rankhiplayer == f$OpenPPL_RankOfBottomPairOnBoard) || (rankloplayer == f$OpenPPL_RankOfBottomPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomSet :
//
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_NutFullHouseOrFourOfAKind_PairOnBoard##
// Precondition: we have FH or quads, there is a pair on board.
[ispair && (rankhiplayer == trankcommon)] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitQuads :
[ispair && (pokerval & fullhouse)] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitASetWithPocketPair :
[pokerval & fullhouse] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitThePairAndAnotherCard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_NutFullHouseOrFourOfAKind##
[(pokerval & (fullhouse | fourofakind)) == 0] ? f$OpenPPL_HINT_We_Dont_Have_A_FullHouse_At_All : 
f$OpenPPL_QuadsOnBoard     ? f$OpenPPL_NutFullHouseOrFourOfAKind_FourOfAKindOnBoard :
f$OpenPPL_FullHouseOnBoard ? f$OpenPPL_NutFullHouseOrFourOfAKind_FullHouseOnBoard :
f$OpenPPL_TripsOnBoard     ? f$OpenPPL_NutFullHouseOrFourOfAKind_ThreeOfAKindOnBoard :
f$OpenPPL_TwoPairOnBoard   ? f$OpenPPL_NutFullHouseOrFourOfAKind_TwoPairsOnBoard :
f$OpenPPL_PairOnBoard      ? f$OpenPPL_NutFullHouseOrFourOfAKind_PairOnBoard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_Overcards##
((f$OpenPPL_RankOfFirstHoleCard > rankhicommon)  && (f$OpenPPL_RankOfSecondHoleCard > rankhicommon))  ? 2 :
((f$OpenPPL_RankOfFirstHoleCard > rankhicommon)  || (f$OpenPPL_RankOfSecondHoleCard > rankhicommon))  ? 1 :
((f$OpenPPL_RankOfFirstHoleCard <= rankhicommon) && (f$OpenPPL_RankOfSecondHoleCard <= rankhicommon)) ? 0 : 0

##f$OpenPPL_PairInHand##
ispair

##f$OpenPPL_RunnerRunnerFlushPossibleAtRiver##
(betround == f$OpenPPL_ConstBetRoundRiver && nsuitedcommon==3 && f$OpenPPL_SuitsOnFlop!=3 && $$cs3==$$cs4) ? 1:0

##f$OpenPPL_SuitsInHand##
($$ps0 == $$ps1) ? 1 :
($$ps0 != $$ps1) ? 2 :
0

//*****************************************************************************
//
// OpenPPL - Other Symbols
//
//*****************************************************************************

##f$OpenPPL_IsFinalTable##
isfinaltable

##f$OpenPPL_Others##
// Always true
1

##f$OpenPPL_FloatingPointRandom_0_100##
// OpenHoldem uses floating point numbers
// and random is in the range [0..1]
// But for OpenPPL we need a range of [0..100]
[ random * 100 ]

##f$OpenPPL_IntegerRandom_0_100##
// Cutting of the fractional part of the random number is tricky.
// We do a bitwise XOR with 0, which doesn't change anything,
// but to evaluate the expression OpenHoldem internally truncates the number 
// to integer (bit-vector).
(f$OpenPPL_FloatingPointRandom_0_100 ^ 0)

##f$OpenPPL_Random##
f$OpenPPL_IntegerRandom_0_100

//*****************************************************************************
//
// OpenPPL - Players and Opponents
//
//*****************************************************************************

##f$OpenPPL_PlayersAtStartOfThisRound##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? nplayersround1 :
(betround == f$OpenPPL_ConstBetRoundFlop)    ? nplayersround2 :
(betround == f$OpenPPL_ConstBetRoundTurn)    ? nplayersround3 :
(betround == f$OpenPPL_ConstBetRoundRiver)   ? nplayersround4 :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_Opponents##
f$OpenPPL_OpponentsLeft

##f$OpenPPL_OpponentsAtTable##
nopponentsdealt

##f$OpenPPL_NumberOfOpponentsAllin##
(f$OpenPPL_Opponents>1 || (f$OpenPPL_Opponents==1 && f$OpenPPL_AmountToCall<f$OpenPPL_StackSize))? f$OpenPPL_Opponents_AllinBits:
(f$OpenPPL_Opponents==1 && f$OpenPPL_AmountToCall==f$OpenPPL_StackSize)? 1:
0
  
  
##f$OpenPPL_Casino_Moves_Allinbets_Immediatelly_To_The_Mainpot##
// Some casinos don't display the bets of players who are allin,
// but move them immediatelly to the main-pot (and/or sitepots)
// so we can no longer assume that they have a positive bet.
// http://www.maxinmontreal.com/forums/viewtopic.php?f=156&t=15493
sitename$ongame

##f$OpenPPL_OpponentIsAllin##
f$OpenPPL_NumberOfOpponentsAllin > 0

##f$OpenPPL_Opponents_AllinBits##
[(betround == f$OpenPPL_ConstBetRoundPreflop) && !f$OpenPPL_Casino_Moves_Allinbets_Immediatelly_To_The_Mainpot] ?
// Player must be playing, his balance must be 0 and he must have a positive bet.
[0
|(((opponentsplayingbits & (1 << 0)) && (currentbet0 > 0) && (balance0 == 0)) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && (currentbet1 > 0) && (balance1 == 0)) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && (currentbet2 > 0) && (balance2 == 0)) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && (currentbet3 > 0) && (balance3 == 0)) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && (currentbet4 > 0) && (balance4 == 0)) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && (currentbet5 > 0) && (balance5 == 0)) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && (currentbet6 > 0) && (balance6 == 0)) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && (currentbet7 > 0) && (balance7 == 0)) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && (currentbet8 > 0) && (balance8 == 0)) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && (currentbet9 > 0) && (balance9 == 0)) ? 1 << 9 : 0)
]
:
// Player must be playing, his balance must be 0
// His bet might or might not be > 0 (so it does not get checked),
// because the player could be gone allin in a previous betting round
// or he plays at a casino where his chips get immediatelly moved to the main pot. 
[0
|(((opponentsplayingbits & (1 << 0)) && balance0 == 0) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && balance1 == 0) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && balance2 == 0) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && balance3 == 0) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && balance4 == 0) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && balance5 == 0) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && balance6 == 0) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && balance7 == 0) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && balance8 == 0) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && balance9 == 0) ? 1 << 9 : 0)
]

##f$OpenPPL_OpponentsLeft##
// Does also consider players who are allin 
// (contrary to Shankys, who consider players allin in this round, but not from previous rounds).
nopponentsplaying

##f$OpenPPL_OpponentsOnFlop##
(nplayersround2 - 1)

##f$OpenPPL_OpponentsOnTurn##
(nplayersround3 - 1)

##f$OpenPPL_OpponentsOnRiver##
(nplayersround4 - 1)

##f$OpenPPL_OpponentsWithLowerStack##
  (((balance0 + currentbet0) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0001) ? 1:0)
+ (((balance1 + currentbet1) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0002) ? 1:0)
+ (((balance2 + currentbet2) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0004) ? 1:0)
+ (((balance3 + currentbet3) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0008) ? 1:0)
+ (((balance4 + currentbet4) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0010) ? 1:0)
+ (((balance5 + currentbet5) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0020) ? 1:0)
+ (((balance6 + currentbet6) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0040) ? 1:0)
+ (((balance7 + currentbet7) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0080) ? 1:0)
+ (((balance8 + currentbet8) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0100) ? 1:0)
+ (((balance9 + currentbet9) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0200) ? 1:0)

##f$OpenPPL_StillToActPreflop##
// Precondition: first action, but this gets checked in StillToAct
f$OpenPPL_InBigBlind ? 0 :
f$OpenPPL_InSmallBlind ? 1 :
// Not in the blinds
(f$OpenPPL_MissingSmallBlind > 0) ? (nchairsdealtleft + 1) :
(nchairsdealtleft + 2)

##f$OpenPPL_StillToActPostflop##
// Precondition: first action, but this gets checked in StillToAct
((f$OpenPPL_OpponentsLeft + 1) - betposition)

##f$OpenPPL_StillToAct##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0) ? f$OpenPPL_HINT_StillToAct_Is_Only_Valid_On_First_Orbit :
((betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)) ? f$OpenPPL_StillToActPreflop:
((betround != f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)) ? f$OpenPPL_StillToActPostflop:
0

//*****************************************************************************
//
// OpenPPL - Position Symbols
//
//*****************************************************************************

// Standard PPL accepts two spellings for the position symbols
// "In BigBlind" and "InBigBlind", "In Button" and "InButton", ...
// Our parser is able to ignore the fillerword "In ",
// but to be more user-friendly and to simplify the converter (less error-handling)
// we decided to provide both forms of naming in the library.

##f$OpenPPL_SmallBlind##
(dealposition == 1)

##f$OpenPPL_BigBlind##
(dealposition == 2)

##f$OpenPPL_Button##
// If the game in not 10-handed, some positions would be both "normal" and in the blinds.
// E.g. for a 9-handed game big-blind would also be counted as EarlyPosition1.
// Therefore we check for "Not InTheBlinds", except for button,
// because "InButton" makes sense even if the game is headsup.
(dealposition == nplayersdealt)

##f$OpenPPL_CutOff##
[(dealposition == nplayersdealt - 1) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition3##
[(dealposition == nplayersdealt - 2) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition2##
[(dealposition == nplayersdealt - 3) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition1##
[(dealposition == nplayersdealt - 4) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition3##
[(dealposition == nplayersdealt - 5) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition2##
[(dealposition == nplayersdealt - 6) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition1##
[(dealposition == nplayersdealt - 7) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_UTG##
// Under the gun - first to act preflop, 
// independent of the players at the table (at least 3).
// This symbols is especially useful to sitout 
// after the last hand of a session (before the next blind).
f$OpenPPL_MissingSmallBlind ? (dealposition == 2) :
(dealposition == 3)

##f$OpenPPL_InSmallBlind##
f$OpenPPL_SmallBlind

##f$OpenPPL_InBigBlind##
f$OpenPPL_BigBlind

##f$OpenPPL_TheBlinds##
// To be used: In TheBlinds
f$OpenPPL_InTheBlinds

##f$OpenPPL_InTheBlinds##
(f$OpenPPL_InSmallBlind || f$OpenPPL_InBigBlind)

##f$OpenPPL_EarlyPosition##
f$OpenPPL_InEarlyPosition

##f$OpenPPL_InEarlyPosition##
(f$OpenPPL_InEarlyPosition1 || f$OpenPPL_InEarlyPosition2 || f$OpenPPL_InEarlyPosition3)

##f$OpenPPL_MiddlePosition##
f$OpenPPL_InMiddlePosition

##f$OpenPPL_InMiddlePosition##
(f$OpenPPL_InMiddlePosition1 || f$OpenPPL_InMiddlePosition2 || f$OpenPPL_InMiddlePosition3)

##f$OpenPPL_LatePosition##
f$OpenPPL_InLatePosition

##f$OpenPPL_InLatePosition##
(f$OpenPPL_InCutOff || f$OpenPPL_InButton)

##f$OpenPPL_InButton##
f$OpenPPL_Button

##f$OpenPPL_InCutOff##
f$OpenPPL_CutOff

##f$OpenPPL_InMiddlePosition3##
f$OpenPPL_MiddlePosition3

##f$OpenPPL_InMiddlePosition2##
f$OpenPPL_MiddlePosition2

##f$OpenPPL_InMiddlePosition1##
f$OpenPPL_MiddlePosition1

##f$OpenPPL_InEarlyPosition3##
f$OpenPPL_EarlyPosition3

##f$OpenPPL_InEarlyPosition2##
f$OpenPPL_EarlyPosition2

##f$OpenPPL_InEarlyPosition1##
f$OpenPPL_EarlyPosition1

##f$OpenPPL_InUTG##
f$OpenPPL_UTG

##f$OpenPPL_TrueDealPositionOfBigBlind##
f$OpenPPL_MissingSmallBlind ? 1 : 2

##f$OpenPPL_BigBlindChair##
ac_dealpos0 == f$OpenPPL_TrueDealPositionOfBigBlind ? 0 :
ac_dealpos1 == f$OpenPPL_TrueDealPositionOfBigBlind ? 1 :
ac_dealpos2 == f$OpenPPL_TrueDealPositionOfBigBlind ? 2 :
ac_dealpos3 == f$OpenPPL_TrueDealPositionOfBigBlind ? 3 :
ac_dealpos4 == f$OpenPPL_TrueDealPositionOfBigBlind ? 4 :
ac_dealpos5 == f$OpenPPL_TrueDealPositionOfBigBlind ? 5 :
ac_dealpos6 == f$OpenPPL_TrueDealPositionOfBigBlind ? 6 :
ac_dealpos7 == f$OpenPPL_TrueDealPositionOfBigBlind ? 7 :
ac_dealpos8 == f$OpenPPL_TrueDealPositionOfBigBlind ? 8 :
ac_dealpos9 == f$OpenPPL_TrueDealPositionOfBigBlind ? 9 :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap
  
##f$OpenPPL_SmallBlindChair##
f$OpenPPL_MissingSmallBlind ? f$OpenPPL_HINT_There_Is_No_SmallNlind_In_This_Game :
ac_dealpos0 == 1 ? 0 :
ac_dealpos1 == 1 ? 1 :
ac_dealpos2 == 1 ? 2 :
ac_dealpos3 == 1 ? 3 :
ac_dealpos4 == 1 ? 4 :
ac_dealpos5 == 1 ? 5 :
ac_dealpos6 == 1 ? 6 :
ac_dealpos7 == 1 ? 7 :
ac_dealpos8 == 1 ? 8 :
ac_dealpos9 == 1 ? 9 :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_ButtonChair##
// We ignore the case of headsup,
// where button = small blind or button = big blind,
// as this seems to be different for each casino.
// For us: button = bigblind, if the game is headsup.
ac_dealpos0 == nplayersdealt ? 0 :
ac_dealpos1 == nplayersdealt ? 1 :
ac_dealpos2 == nplayersdealt ? 2 :
ac_dealpos3 == nplayersdealt ? 3 :
ac_dealpos4 == nplayersdealt ? 4 :
ac_dealpos5 == nplayersdealt ? 5 :
ac_dealpos6 == nplayersdealt ? 6 :
ac_dealpos7 == nplayersdealt ? 7 :
ac_dealpos8 == nplayersdealt ? 8 :
ac_dealpos9 == nplayersdealt ? 9 :
f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CutOffChair##
// We have to make sure, that the userchair in question is not a blind,
// which would be the case for CutOff, if the game was 3-handed.
// For 3-handed games "CutOff" = BigBlind, but blinds take priority.
// We could test for dealposition > 2, but counting players is more simple.
(nplayersdealt <= 3) ? f$OpenPPL_HINT_CutOff_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 1) ? 0 :
ac_dealpos1 == (nplayersdealt - 1) ? 1 :
ac_dealpos2 == (nplayersdealt - 1) ? 2 :
ac_dealpos3 == (nplayersdealt - 1) ? 3 :
ac_dealpos4 == (nplayersdealt - 1) ? 4 :
ac_dealpos5 == (nplayersdealt - 1) ? 5 :
ac_dealpos6 == (nplayersdealt - 1) ? 6 :
ac_dealpos7 == (nplayersdealt - 1) ? 7 :
ac_dealpos8 == (nplayersdealt - 1) ? 8 :
ac_dealpos9 == (nplayersdealt - 1) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition3Chair##
(nplayersdealt <= 4) ? f$OpenPPL_HINT_MiddlePosition3_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 2) ? 0 :
ac_dealpos1 == (nplayersdealt - 2) ? 1 :
ac_dealpos2 == (nplayersdealt - 2) ? 2 :
ac_dealpos3 == (nplayersdealt - 2) ? 3 :
ac_dealpos4 == (nplayersdealt - 2) ? 4 :
ac_dealpos5 == (nplayersdealt - 2) ? 5 :
ac_dealpos6 == (nplayersdealt - 2) ? 6 :
ac_dealpos7 == (nplayersdealt - 2) ? 7 :
ac_dealpos8 == (nplayersdealt - 2) ? 8 :
ac_dealpos9 == (nplayersdealt - 2) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition2Chair##
(nplayersdealt <= 5) ? f$OpenPPL_HINT_MiddlePosition2_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 3) ? 0 :
ac_dealpos1 == (nplayersdealt - 3) ? 1 :
ac_dealpos2 == (nplayersdealt - 3) ? 2 :
ac_dealpos3 == (nplayersdealt - 3) ? 3 :
ac_dealpos4 == (nplayersdealt - 3) ? 4 :
ac_dealpos5 == (nplayersdealt - 3) ? 5 :
ac_dealpos6 == (nplayersdealt - 3) ? 6 :
ac_dealpos7 == (nplayersdealt - 3) ? 7 :
ac_dealpos8 == (nplayersdealt - 3) ? 8 :
ac_dealpos9 == (nplayersdealt - 3) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition1Chair##
(nplayersdealt <= 6) ? f$OpenPPL_HINT_MiddlePosition1_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 4) ? 0 :
ac_dealpos1 == (nplayersdealt - 4) ? 1 :
ac_dealpos2 == (nplayersdealt - 4) ? 2 :
ac_dealpos3 == (nplayersdealt - 4) ? 3 :
ac_dealpos4 == (nplayersdealt - 4) ? 4 :
ac_dealpos5 == (nplayersdealt - 4) ? 5 :
ac_dealpos6 == (nplayersdealt - 4) ? 6 :
ac_dealpos7 == (nplayersdealt - 4) ? 7 :
ac_dealpos8 == (nplayersdealt - 4) ? 8 :
ac_dealpos9 == (nplayersdealt - 4) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition3Chair##
(nplayersdealt <= 7) ? f$OpenPPL_HINT_EarlyPosition3_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 5) ? 0 :
ac_dealpos1 == (nplayersdealt - 5) ? 1 :
ac_dealpos2 == (nplayersdealt - 5) ? 2 :
ac_dealpos3 == (nplayersdealt - 5) ? 3 :
ac_dealpos4 == (nplayersdealt - 5) ? 4 :
ac_dealpos5 == (nplayersdealt - 5) ? 5 :
ac_dealpos6 == (nplayersdealt - 5) ? 6 :
ac_dealpos7 == (nplayersdealt - 5) ? 7 :
ac_dealpos8 == (nplayersdealt - 5) ? 8 :
ac_dealpos9 == (nplayersdealt - 5) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition2Chair##
(nplayersdealt <= 8) ? f$OpenPPL_HINT_EarlyPosition2_Does_Not_Exist :
(ac_dealpos0 == (nplayersdealt - 6)) ? 0 :
(ac_dealpos1 == (nplayersdealt - 6)) ? 1 :
(ac_dealpos2 == (nplayersdealt - 6)) ? 2 :
(ac_dealpos3 == (nplayersdealt - 6)) ? 3 :
(ac_dealpos4 == (nplayersdealt - 6)) ? 4 :
(ac_dealpos5 == (nplayersdealt - 6)) ? 5 :
(ac_dealpos6 == (nplayersdealt - 6)) ? 6 :
(ac_dealpos7 == (nplayersdealt - 6)) ? 7 :
(ac_dealpos8 == (nplayersdealt - 6)) ? 8 :
(ac_dealpos9 == (nplayersdealt - 6)) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition1Chair##
(nplayersdealt <= 9) ? f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 7) ? 0 :
ac_dealpos1 == (nplayersdealt - 7) ? 1 :
ac_dealpos2 == (nplayersdealt - 7) ? 2 :
ac_dealpos3 == (nplayersdealt - 7) ? 3 :
ac_dealpos4 == (nplayersdealt - 7) ? 4 :
ac_dealpos5 == (nplayersdealt - 7) ? 5 :
ac_dealpos6 == (nplayersdealt - 7) ? 6 :
ac_dealpos7 == (nplayersdealt - 7) ? 7 :
ac_dealpos8 == (nplayersdealt - 7) ? 8 :
ac_dealpos9 == (nplayersdealt - 7) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_DealPositionLastRaiser##
// This function does also count blind-raisers.
(f$OpenPPL_AggressorChair == 0) ? ac_dealpos0 :
(f$OpenPPL_AggressorChair == 1) ? ac_dealpos1 :
(f$OpenPPL_AggressorChair == 2) ? ac_dealpos2 :
(f$OpenPPL_AggressorChair == 3) ? ac_dealpos3 :
(f$OpenPPL_AggressorChair == 4) ? ac_dealpos4 :
(f$OpenPPL_AggressorChair == 5) ? ac_dealpos5 :
(f$OpenPPL_AggressorChair == 6) ? ac_dealpos6 :
(f$OpenPPL_AggressorChair == 7) ? ac_dealpos7 :
(f$OpenPPL_AggressorChair == 8) ? ac_dealpos8 :
(f$OpenPPL_AggressorChair == 9) ? ac_dealpos9 :
f$OpenPPL_HINT_There_Are_No_True_Raisers

##f$OpenPPL_EarlyPosition1Calling##
(callbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1

##f$OpenPPL_EarlyPosition2Calling##
(callbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1

##f$OpenPPL_EarlyPosition3Calling##
(callbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1

##f$OpenPPL_MiddlePosition1Calling##
(callbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1

##f$OpenPPL_MiddlePosition2Calling##
(callbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1

##f$OpenPPL_MiddlePosition3Calling##
(callbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1

##f$OpenPPL_CutOffCalling##
(callbits1 >> f$OpenPPL_CutOffChair) & 1 == 1

##f$OpenPPL_ButtonCalling##
(callbits1 >> f$OpenPPL_ButtonChair) & 1 == 1

##f$OpenPPL_SmallBlindCalling##
(callbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1

##f$OpenPPL_BigBlindCalling##
(callbits1 >> f$OpenPPL_BigBlindChair) & 11 == 1

##f$OpenPPL_EarlyPosition1Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition2Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition3Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition1Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition2Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition3Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1]

##f$OpenPPL_CutOffRaising##
[(raisbits1 >> f$OpenPPL_CutOffChair) & 1 == 1]

##f$OpenPPL_ButtonRaising##
[(raisbits1 >> f$OpenPPL_ButtonChair) & 1 == 1]

##f$OpenPPL_SmallBlindRaising##
   [(raisbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1]
&& [f$OpenPPL_SmallBlindCurrentBet >= 1.01]

##f$OpenPPL_BigBlindRaising##
   [(raisbits1 >> f$OpenPPL_BigBlindChair) & 1 == 1]
&& [f$OpenPPL_BigBlindCurrentBet >= 1.01]

##f$OpenPPL_FirstCallerPosition##
// We have to search starting from early positions,
// as we want to detect the first one.
f$OpenPPL_EarlyPosition1Calling  ? 9 :
f$OpenPPL_EarlyPosition2Calling  ? 8 :
f$OpenPPL_EarlyPosition3Calling  ? 7 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_CutOffCalling          ? 3 :
f$OpenPPL_ButtonCalling          ? 2 :
f$OpenPPL_SmallBlindCalling      ? 1 :
// Can't be big blind (0), as it is for the first orbit preflop only
f$OpenPPL_HINT_No_FirstCaller

##f$OpenPPL_FirstRaiserPosition##
// We have to search starting from early positions,
// as we want to detect the first one.
f$OpenPPL_EarlyPosition1Raising  ? 9 :
f$OpenPPL_EarlyPosition2Raising  ? 8 :
f$OpenPPL_EarlyPosition3Raising  ? 7 :
f$OpenPPL_MiddlePosition1Raising ? 6 :
f$OpenPPL_MiddlePosition2Raising ? 5 :
f$OpenPPL_MiddlePosition3Raising ? 4 :
f$OpenPPL_CutOffRaising          ? 3 :
f$OpenPPL_ButtonRaising          ? 2 :
f$OpenPPL_SmallBlindRaising ? 1 :
// Can't be big blind (0), as it is for the first orbit preflop only
f$OpenPPL_HINT_No_FirstRaiser

##f$OpenPPL_LastCallerPosition##
// Can't be big blind (0), as it is for the first orbit preflop only
f$OpenPPL_SmallBlindCalling      ? 1 :
f$OpenPPL_ButtonCalling          ? 2 :
f$OpenPPL_CutOffCalling          ? 3 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_EarlyPosition3Calling  ? 7 :
f$OpenPPL_EarlyPosition2Calling  ? 8 :
f$OpenPPL_EarlyPosition1Calling  ? 9 :
f$OpenPPL_HINT_No_LastCaller

##f$OpenPPL_LastRaiserPosition##
// Handling the case of blind-raisers only first
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets <= 1)] ? f$OpenPPL_HINT_There_Are_No_True_Raisers :
// Big blind = 0
f$OpenPPL_BigBlindRaising ? 0 :
// Small blind = 1
f$OpenPPL_SmallBlindRaising ? 1 :
// Normal players:
// Button = 2, CutOff = 3, ...
(nplayersdealt - f$OpenPPL_DealPositionLastRaiser + 2)

##f$OpenPPL_First##
0

##f$OpenPPL_Middle##
1

##f$OpenPPL_Last##
2

##f$OpenPPL_Position##
(betposition == 1) ? f$OpenPPL_First :
(betposition == nplayersplaying) ? f$OpenPPL_Last :
f$OpenPPL_Middle


//*******************************************
//  OpenPPL - Poker Tracker Symbols COSTANTS
//*******************************************
##f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR##
80

##f$OpenPPL_ConstMinHandsFor_PT_AttemptToStealBlinds##
80

##f$OpenPPL_ConstMinHandsFor_PT_BigBlind_FoldBBToSteal##
80

##f$OpenPPL_ConstMinHandsFor_PT_SmallBlind_FoldSBToSteal##
80

//*******************************************
// OpenPPL - Poker Tracker Technical Symbols
//*******************************************
##f$OpenPPL_RaiserExists##
(raischair != -1)

//*****************************************************************************
//
// OpenPPL - Poker Tracker Symbols
//
//*****************************************************************************

##f$OpenPPL_PT_LastRaiser_Hands##
(raischair != -1) ? pt_r_hands : f$OpenPPL_HINT_No_Last_Raiser

##f$OpenPPL_PT_LastRaiser_PFR##
f$OpenPPL_RaiserExists && (f$OpenPPL_PT_LastRaiser_Hands >= f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR) ? pt_r_pfr : f$OpenPPL_HINT_No_Last_Raiser_Or_Not_Enough_Hands

##f$OpenPPL_PT_LastRaiser_VPIP##
f$OpenPPL_RaiserExists && (f$OpenPPL_PT_LastRaiser_Hands >= f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR) ? pt_r_vpip : f$OpenPPL_HINT_No_Last_Raiser_Or_Not_Enough_Hands

##f$OpenPPL_PT_LastRaiser_AttemptToStealBlinds##
f$OpenPPL_RaiserExists && (f$OpenPPL_PT_LastRaiser_Hands >= f$OpenPPL_ConstMinHandsFor_PT_AttemptToStealBlinds) ? pt_r_pfats : f$OpenPPL_HINT_No_Last_Raiser_Or_Not_Enough_Hands

##f$OpenPPL_PT_BigBlind_FoldBBToSteal##
f$OpenPPL_BigBlindChair == 0 ? pt_fbbts0 :
f$OpenPPL_BigBlindChair == 1 ? pt_fbbts1 :
f$OpenPPL_BigBlindChair == 2 ? pt_fbbts2 :
f$OpenPPL_BigBlindChair == 3 ? pt_fbbts3 :
f$OpenPPL_BigBlindChair == 4 ? pt_fbbts4 :
f$OpenPPL_BigBlindChair == 5 ? pt_fbbts5 :
f$OpenPPL_BigBlindChair == 6 ? pt_fbbts6 :
f$OpenPPL_BigBlindChair == 7 ? pt_fbbts7 :
f$OpenPPL_BigBlindChair == 8 ? pt_fbbts8 :
f$OpenPPL_BigBlindChair == 9 ? pt_fbbts9 :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_PT_SmallBlind_FoldSBToSteal##
f$OpenPPL_SmallBlindChair == 0 ? pt_fsbts0 :
f$OpenPPL_SmallBlindChair == 1 ? pt_fsbts1 :
f$OpenPPL_SmallBlindChair == 2 ? pt_fsbts2 :
f$OpenPPL_SmallBlindChair == 3 ? pt_fsbts3 :
f$OpenPPL_SmallBlindChair == 4 ? pt_fsbts4 :
f$OpenPPL_SmallBlindChair == 5 ? pt_fsbts5 :
f$OpenPPL_SmallBlindChair == 6 ? pt_fsbts6 :
f$OpenPPL_SmallBlindChair == 7 ? pt_fsbts7 :
f$OpenPPL_SmallBlindChair == 8 ? pt_fsbts8 :
f$OpenPPL_SmallBlindChair == 9 ? pt_fsbts9 :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_PT_ButtonVPIP##
f$OpenPPL_ButtonChair==0 ? pt_vpip0:
f$OpenPPL_ButtonChair==1 ? pt_vpip1:
f$OpenPPL_ButtonChair==2 ? pt_vpip2:
f$OpenPPL_ButtonChair==3 ? pt_vpip3:
f$OpenPPL_ButtonChair==4 ? pt_vpip4:
f$OpenPPL_ButtonChair==5 ? pt_vpip5:
f$OpenPPL_ButtonChair==6 ? pt_vpip6:
f$OpenPPL_ButtonChair==7 ? pt_vpip7:
f$OpenPPL_ButtonChair==8 ? pt_vpip8:
f$OpenPPL_ButtonChair==9 ? pt_vpip9:
f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_PT_BigBlind_Hands##
[ (f$OpenPPL_BigBlindChair == 0) ] ? pt_hands0 :
[ (f$OpenPPL_BigBlindChair == 1) ] ? pt_hands1 :
[ (f$OpenPPL_BigBlindChair == 2) ] ? pt_hands2 :
[ (f$OpenPPL_BigBlindChair == 3) ] ? pt_hands3 :
[ (f$OpenPPL_BigBlindChair == 4) ] ? pt_hands4 :
[ (f$OpenPPL_BigBlindChair == 5) ] ? pt_hands5 :
[ (f$OpenPPL_BigBlindChair == 6) ] ? pt_hands6 :
[ (f$OpenPPL_BigBlindChair == 7) ] ? pt_hands7 :
[ (f$OpenPPL_BigBlindChair == 8) ] ? pt_hands8 :
[ (f$OpenPPL_BigBlindChair == 9) ] ? pt_hands9 :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_PT_SmallBlind_VPIP##
f$OpenPPL_SmallBlindChair == 0 ? pt_vpip0 :
f$OpenPPL_SmallBlindChair == 1 ? pt_vpip1 :
f$OpenPPL_SmallBlindChair == 2 ? pt_vpip2 :
f$OpenPPL_SmallBlindChair == 3 ? pt_vpip3 :
f$OpenPPL_SmallBlindChair == 4 ? pt_vpip4 :
f$OpenPPL_SmallBlindChair == 5 ? pt_vpip5 :
f$OpenPPL_SmallBlindChair == 6 ? pt_vpip6 :
f$OpenPPL_SmallBlindChair == 7 ? pt_vpip7 :
f$OpenPPL_SmallBlindChair == 8 ? pt_vpip8 :
f$OpenPPL_SmallBlindChair == 9 ? pt_vpip9 :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_PT_SmallBlind_Hands##
[ (f$OpenPPL_SmallBlindChair == 0) ] ? pt_hands0 :
[ (f$OpenPPL_SmallBlindChair == 1) ] ? pt_hands1 :
[ (f$OpenPPL_SmallBlindChair == 2) ] ? pt_hands2 :
[ (f$OpenPPL_SmallBlindChair == 3) ] ? pt_hands3 :
[ (f$OpenPPL_SmallBlindChair == 4) ] ? pt_hands4 :
[ (f$OpenPPL_SmallBlindChair == 5) ] ? pt_hands5 :
[ (f$OpenPPL_SmallBlindChair == 6) ] ? pt_hands6 :
[ (f$OpenPPL_SmallBlindChair == 7) ] ? pt_hands7 :
[ (f$OpenPPL_SmallBlindChair == 8) ] ? pt_hands8 :
[ (f$OpenPPL_SmallBlindChair == 9) ] ? pt_hands9 :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_PT_LastCaller_VPIP##
f$OpenPPL_PT_LastCaller_Chair==0 && pt_hands0>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip0 :
f$OpenPPL_PT_LastCaller_Chair==1 && pt_hands1>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip1 :
f$OpenPPL_PT_LastCaller_Chair==2 && pt_hands2>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip2 :
f$OpenPPL_PT_LastCaller_Chair==3 && pt_hands3>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip3 :
f$OpenPPL_PT_LastCaller_Chair==4 && pt_hands4>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip4 :
f$OpenPPL_PT_LastCaller_Chair==5 && pt_hands5>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip5 :
f$OpenPPL_PT_LastCaller_Chair==6 && pt_hands6>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip6 :
f$OpenPPL_PT_LastCaller_Chair==7 && pt_hands7>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip7 :
f$OpenPPL_PT_LastCaller_Chair==8 && pt_hands8>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip8 :
f$OpenPPL_PT_LastCaller_Chair==9 && pt_hands9>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_vpip9 :
f$OpenPPL_HINT_No_LastCaller

##f$OpenPPL_PT_LastCaller_PFR##
f$OpenPPL_PT_LastCaller_Chair==0 && pt_hands0>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr0 :
f$OpenPPL_PT_LastCaller_Chair==1 && pt_hands1>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr1 :
f$OpenPPL_PT_LastCaller_Chair==2 && pt_hands2>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr2 :
f$OpenPPL_PT_LastCaller_Chair==3 && pt_hands3>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr3 :
f$OpenPPL_PT_LastCaller_Chair==4 && pt_hands4>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr4 :
f$OpenPPL_PT_LastCaller_Chair==5 && pt_hands5>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr5 :
f$OpenPPL_PT_LastCaller_Chair==6 && pt_hands6>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr6 :
f$OpenPPL_PT_LastCaller_Chair==7 && pt_hands7>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr7 :
f$OpenPPL_PT_LastCaller_Chair==8 && pt_hands8>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr8 :
f$OpenPPL_PT_LastCaller_Chair==9 && pt_hands9>=f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR ? pt_pfr9 :
f$OpenPPL_HINT_No_LastCaller

##f$OpenPPL_PT_OpponentVPIPHeadsUp##
[(playersplayingbits & 0b0000000001) && (nopponentsplaying==1) && userchair!=0] ? pt_vpip0:
[(playersplayingbits & 0b0000000010) && (nopponentsplaying==1) && userchair!=1] ? pt_vpip1:
[(playersplayingbits & 0b0000000100) && (nopponentsplaying==1) && userchair!=2] ? pt_vpip2:
[(playersplayingbits & 0b0000001000) && (nopponentsplaying==1) && userchair!=3] ? pt_vpip3:
[(playersplayingbits & 0b0000010000) && (nopponentsplaying==1) && userchair!=4] ? pt_vpip4:
[(playersplayingbits & 0b0000100000) && (nopponentsplaying==1) && userchair!=5] ? pt_vpip5:
[(playersplayingbits & 0b0001000000) && (nopponentsplaying==1) && userchair!=6] ? pt_vpip6:
[(playersplayingbits & 0b0010000000) && (nopponentsplaying==1) && userchair!=7] ? pt_vpip7:
[(playersplayingbits & 0b0100000000) && (nopponentsplaying==1) && userchair!=8] ? pt_vpip8:
[(playersplayingbits & 0b1000000000) && (nopponentsplaying==1) && userchair!=9] ? pt_vpip9:
f$OpenPPL_HINT_No_Oppponent_Or_Not_Headsup

//*****************************************************************************
//
// OpenPPL - Initialization of memory symbols
//
// For history symbols and other information,
// that can't be retrieved from OH-symbols
// and from the current gamestate only.
//
//*****************************************************************************

##f$OpenPPL_TimeToInitMemorySymbols##
// Some advanced symbols depend on memory symbols.
// They are designed to update once per orbit on our turn.
// However: depending on user-settings OpenHoldem might evaluate
// the necessary function even when it is not our turn.
// And incorrect delay-settings might also lead to multiple actions
// on identical frames (OH acts faster as casino/bring can update)
// So we check for isfinalanswer and a changed gamestate.
[isfinalanswer && f$OpenPPL_GameStateChanged]

##f$OpenPPL_HandResetHappened##
[   (betround == f$OpenPPL_ConstBetRoundPreflop) 
 && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)]

##f$OpenPPL_ResetUserVariablesOnHandReset##
// f$OpenPPL_ResetUserVariables
// will be auto-generated by the translator.
f$OpenPPL_HandResetHappened ? f$OpenPPL_ResetUserVariables : f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_GameStateChanged##
// Change in dealerchair => new hand
   (dealerchair != me_re_MemOldGameStateDealerChair)
// Change in currentbet => we did act 
// and the autoplayer executed sucessfully   
|| (currentbet  != me_re_MemOldGameStateCurrentBet)
// Change in potsize: somebody else behind us acted, 
// so we checked or folded sucessfully
|| (pot			!= me_re_MemOldGameStatePotSize)
// Change in betround, if everybody checked 
// and potsize is the same
|| (betround    != me_re_MemOldGameStateBetround)

##f$OpenPPL_RememberCurrentGameState##
   (me_st_MemOldGameStateDealerChair_dealerchair * 0)
|| (me_st_MemOldGameStateCurrentBet_currentbet   * 0)
|| (me_st_MemOldGameStatePotSize_pot             * 0)
|| (me_st_MemOldGameStateBetround_betround       * 0)

##f$OpenPPL_InitMemorySymbols##
(f$OpenPPL_TimeToInitMemorySymbols == f$OpenPPL_False) ? 0 :
// We can't use addition here to call the functions in correct sequential order,
// because OH doesn't add the operands in order:
// http://www.maxinmontreal.com/forums/viewtopic.php?f=111&t=14525&start=0
   [f$OpenPPL_InitMissingSmallBlind * 0]
|| [f$OpenPPL_InitBets * 0]
|| [f$OpenPPL_InitChecks * 0]
|| [f$OpenPPL_InitCalls * 0]
|| [f$OpenPPL_InitRaises * 0]
|| [f$OpenPPL_InitBotsLastPreflopAction * 0]
|| [f$OpenPPL_InitRaisesBeforeFlop * 0]
|| [f$OpenPPL_InitRaisesOnFlop * 0]
|| [f$OpenPPL_InitRaisesOnTurn * 0]
|| [f$OpenPPL_InitMaxOpponentStackSize * 0]
|| [f$OpenPPL_InitMinOpponentStackSize * 0]
|| [f$OpenPPL_InitStartingStackSize * 0]
|| [f$OpenPPL_RememberCurrentGameState * 0]
|| [f$OpenPPL_ResetUserVariablesOnHandReset * 0]
//
// InitBotsLastAction has to be the last init-function to be called
// because it will call the final f$Decision routine.
//
|| [f$OpenPPL_InitBotsLastAction * 0]


//*****************************************************************************
//
// OpenPPL - Various functions of minor importance or to do
//
//*****************************************************************************

##f$OpenPPL_HaveBackdoorStraightDraw##
-1 + msgbox$HaveBackdoorstraightDraw_Bnot_Byet_Bimplemented_D_NYour_Bhelp_Bis_Brequired_D

//*****************************************************************************
//
// OpenPPL - the glory end
//
//*****************************************************************************
