//************************************************************************
//                                                                        
// Converted with OpenPPL 1.0                                             
//                                                                        
// OpenPPL is part of the OpenHoldem project                              
//   Download page:         http://code.google.com/p/openholdembot/       
//   Forums:                http://www.maxinmontreal.com/forums/index.php 
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html          
//                                                                        
// The original PPL (Poker Programming Language) got invented by          
//   Shanky Bonusbots:      http://www.bonusbots.com/supportforum/YaBB.pl 
//                                                                        
// Required OpenHoldem version: 2.2.0 or later                            
//   Symbols not working with 2.1.x:                                      
//     * isfinaltable                                                     
//                                                                        
// Contributors:                                                          
//   Bob3456                                                              
//   CoolBotMe123                                                         
//   CrumbleSunday                                                        
//   Dr.Kaktuz                                                            
//   Efu                                                                  
//   Fn101                                                                
//   Gecko                                                                
//   JConner                                                              
//   Jokedoke                                                             
//   KaeKruse                                                             
//   Kyo                                                                  
//   MerzkiyTipon                                                         
//   Morello                                                              
//   MrRuder                                                              
//   Nik0                                                                 
//   NPNG                                                                 
//   Poker_Dog                                                            
//   Postenjak                                                            
//   Rambam                                                               
//   Satanikut                                                            
//   Stangelnator                                                         
//   SteveG1963                                                           
//   Strikles                                                             
//   Superblak                                                            
//   TheHighFish                                                          
//   ThemAndMe                                                            
//   Want2Learn                                                           
//   Zolp                                                                 
//                                                                        
//************************************************************************


//***********************************************************
//                                                           
//  Option settings                                          
//  ===============                                          
//                                                           
//  To be ignored,                                           
//  as nearly all of them are for the built-in default bot,  
//  which is not supported.                                  
//                                                           
//***********************************************************


//***********************************************************
//                                                           
//  Hand lists                                               
//  ==========                                               
//                                                           
//  Translated code for user-defined hand-lists.             
//  Note: hand-lists are not part of standard PPL.           
//  Please refer to the manual for details.                  
//                                                           
//  OpenPPL lists look like that                             
//                                                           
//  CUSTOM                                                   
//                                                           
//  LISTS                                                    
//                                                           
//  NEW LIST 007                                             
//      // Standard open-raising range for CutOff            
//      AA KK QQ                                             
//      AKs AQs                                              
//      AKo 72o                                              
//  END LIST                                                 
//                                                           
//***********************************************************


//***********************************************************
//                                                           
//  User defined functions                                   
//  ======================                                   
//                                                           
//  Translated code for user-defined functions.              
//  Note: UDFs are not part of standard PPL.                 
//  Please refer to the manual for details.                  
//                                                           
//  CUSTOM                                                   
//                                                           
//  SYMBOLS                                                  
//                                                           
//  NEW SYMBOL ThisIsAnExample                               
//      WHEN (OpponentsLeft > 3) RETURN 5 FORCE              
//      WHEN (Potsize >= 20) RETURN (Pi * R * R) FORCE       
//      WHEN Others RETURN 42 FORCE                          
//  END SYMBOL                                               
//                                                           
//***********************************************************


##f$OpenPPL_DryBoard##
//
// Starting open-ended when-condition
// (betround=2)
//
f$myfunc1  &&  [ ( ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_2 * f$PrimeCode_A) == 0)] || [f$OpenPPL_SuitsOnBoard == betround - 1] || [f$OpenPPL_SuitsOnBoard == betround && ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_A) == 0)])])]) ] ? f$OpenPPL_True :
//
// Starting open-ended when-condition
// (betround>2)
//
f$myfunc2  &&  [ ( ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_True :
//
// Starting open-ended when-condition
// Others
//
f$myfunc3  &&  [ f$OpenPPL_Others ] ? f$OpenPPL_False :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


##f$OpenPPL_HaveMonsterDraw##
[ ([f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw] || [f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_HaveFlushDraw] || [f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_True :
[ f$OpenPPL_Others ] ? f$OpenPPL_False :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


##f$OpenPPL_HaveTrueFlush##
[ ( ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_FlushOnBoard)]) ] ? f$OpenPPL_True :
[ (f$OpenPPL_OneCardFlushPossible && [f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush || f$OpenPPL_Have3rdNutFlush || f$OpenPPL_Have4thNutFlush]) ] ? f$OpenPPL_True :
[ f$OpenPPL_Others ] ? f$OpenPPL_False :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


##f$OpenPPL_EvCall##
[ f$OpenPPL_Others ] ? ([f$OpenPPL_PotSize + f$OpenPPL_AmountToCall] * [prwin + prtie / 2] - f$OpenPPL_AmountToCall - f$OpenPPL_TotalInvested) :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


##f$OpenPPL_PlayAgainstLAG##
[ f$OpenPPL_Others ] ? f$OpenPPL_True :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


##f$OpenPPL_constNoShortStackSize##
[ f$OpenPPL_Others ] ? 40 :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


##f$OpenPPL_GoodForBluffBoard##
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0))] && [f$OpenPPL_MaxStillToActStackSize >= f$OpenPPL_constNoShortStackSize]) ] ? f$OpenPPL_True :
[ f$OpenPPL_Others ] ? f$OpenPPL_False :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


##f$OpenPPL_ImpliedPot##
[ f$OpenPPL_Others ] ? (f$OpenPPL_PotSize * 1.5) :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


//***********************************************************
//                                                           
//  Main Code Sections                                       
//  ==================                                       
//                                                           
//  Preflop, Flop, Turn and River                            
//  are mandatory for every OpenPPL-profile.                 
//                                                           
//***********************************************************


##f$preflop##

[(f$OpenPPL_StackSize <= 0) && !([$AA] || [$KK])] ? f$OpenPPL_Fold :

[ (f$OpenPPL_BigBlindSize >= 1000 && [f$OpenPPL_Raises == 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_StackSize < 30 && [($QQ) || ($JJ)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize > 100 && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 12 &&  ![([$AA] || [$KK] || [$QQ] || [$AK] || f$OpenPPL_OpponentIsAllin || f$OpenPPL_OpponentsAtTable <= 3)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_OpponentsAtTable <= 4 && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [($A) || f$OpenPPL_PairInHand] && f$OpenPPL_BetSize < 34/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_OpponentsAtTable == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [($AXs) || f$OpenPPL_PairInHand || ($AK) || ($AQ) || ($AJ) || ($KQ) || ($QJs) || ($JTs) || ($T9s) || ($98s) || ($87s)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_OpponentsAtTable == 1 && [($AXs) || f$OpenPPL_PairInHand || ($AK) || ($AQ) || ($AJ) || ($KQ) || ($QJs) || ($JTs)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BigBlind && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 10/100 * f$OpenPPL_StackSize && [f$OpenPPL_PairInHand || ($A) || ($K) || ($Q) || ($J)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StackSize <= 9 && [($AXs) || ($AK) || ($AQ) || ($KQ) || ($QJs) || ($JTs) || f$OpenPPL_PairInHand]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 7 && [($A) || ($KXs) || ($QTs) || ($T9s) || ($98s) || ($87s) || ($76s)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 5 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_RaiseMax :
[ ([($AA) || ($KK)] && [f$OpenPPL_Raises >= 1 || f$OpenPPL_Calls >= 4]) ] ? f$OpenPPL_RaiseMax :
[ ([$AKs] && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 20/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 20/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 50 &&  ![([$AA] || [$KK] || [$QQ] || [$JJ] || [$AK] || [$AQs])]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 17/100 * f$OpenPPL_StackSize && [f$OpenPPL_PairInHand || ($A) || ($KQs)]) ] ? f$OpenPPL_Call :
[ ([$AK] && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 20/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_BetSize < 18/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 12/100 * f$OpenPPL_StackSize && [f$OpenPPL_PairInHand || ($A) || ($K) || ($QXs) || ($JT) || ($J9) || ($J8) || ($J7) || ($T9) || ($T8) || ($T7) || ($98) || ($97) || ($96s) || ($87) || ($86s) || ($85s) || ($76) || ($65s)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 20/100 * f$OpenPPL_StackSize && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StackSize < 20 &&  ![([$AK] || [$AQ] || [$AJ] || [$AT] || [$A9] || [$AXs] || f$OpenPPL_PairInHand || [$KQ] || [$KJs] || [$QJs] || [$JTs] || [$T9s])] &&  ![(f$OpenPPL_SmallBlind && f$OpenPPL_Calls >= 1 && f$OpenPPL_Raises == 0)]) ] ? f$OpenPPL_Fold :
[ ([($22) || ($33) || ($44) || ($55)] && f$OpenPPL_StackSize > 12 && f$OpenPPL_StackSize < 20 && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_TotalInvested > 75/100 * f$OpenPPL_StackSize)] && f$OpenPPL_AmountToCall > 2) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_SmallBlind && f$OpenPPL_StackSize < 40 &&  ![(f$OpenPPL_PairInHand || [$AK] || [$AQ] || [$AJ] || [$AT] || [$A9] || [$A8] || [$A7] || [$AXs] || [$KQ] || [$KJ] || [$KT] || [$K9] || [$K8] || [$K7] || [$QJ] || [$QT] || [$Q9] || [$Q8] || [$Q7] || [$JT] || [$J9] || [$J8] || [$J7] || [$T9] || [$T8] || [$T7] || [$98] || [$97] || [$87] || [$86] || [$76] || [$75] || [$65] || [$54])]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((Hand = A A) OR (hand = K K)))
//
f$myfunc4  &&  [ (f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 1) ] ? f$OpenPPL_Call :
f$myfunc4  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (((Hand = Q Q) OR (hand = J J) OR (hand = T T) OR (hand = 9 9) OR (hand = A K) OR (hand = A Q) OR (hand = A J) OR (hand = K Q)))
//
f$myfunc5  &&  [ (f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 6) ] ? f$OpenPPL_Call :
f$myfunc5  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((Hand = A T) OR (hand = A 9) OR (hand = K J) OR (hand = K T) OR (hand = K 9) OR (hand = Q J) OR (hand = Q T) OR (hand = Q 9) OR (hand = J T) OR (hand = T 9 suited)))
//
f$myfunc6  &&  [ (f$OpenPPL_StillToAct >= 6) ] ? f$OpenPPL_Fold :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 6) ] ? f$OpenPPL_Call :
f$myfunc6  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Others)
//
f$myfunc7  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 &&  ![([$26] || [$27] || [$28] || [$29] || [$2T] || [$36] || [$37] || [$38] || [$39] || [$3T] || [$47] || [$48] || [$49] || [$58] || [$59])]) ] ? f$OpenPPL_Call :
f$myfunc7  &&  [ ([f$OpenPPL_StillToAct > 3 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 4 && [($56) || ($67) || ($78) || ($89) || ($9T) || ($22) || ($33) || ($44) || ($55) || ($66) || ($77) || ($88) || ($AXs) || ($KTs) || ($K9s) || ($K8s) || ($QTs) || ($Q9s) || ($Q8s) || ($J9s) || ($J8s) || ($T8s) || ($97s) || ($45s)]) ] ? f$OpenPPL_Call :
f$myfunc7  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && [($56) || ($67) || ($78) || ($89) || ($9T) || ($22) || ($33) || ($44) || ($55) || ($66) || ($77) || ($88) || ($AXs) || ($KTs) || ($K9s) || ($K8s) || ($QTs) || ($Q9s) || ($Q8s) || ($J9s) || ($J8s) || ($T8s) || ($97s) || ($45s)]) ] ? 2 /*** big blinds ***/ :
f$myfunc7  &&  [ (f$OpenPPL_Calls >= 1 && f$OpenPPL_Raises == 0 && [($56) || ($67) || ($78) || ($89) || ($9T) || ($22) || ($33) || ($44) || ($55) || ($66) || ($77) || ($88) || ($AXs) || ($KTs) || ($K9s) || ($K8s) || ($QTs) || ($Q9s) || ($Q8s) || ($J9s) || ($J8s) || ($T8s) || ($97s) || ($45s)]) ] ? f$OpenPPL_Call :
f$myfunc7  &&  [[ (f$OpenPPL_StillToAct >= 8) ] ? me_st_userutg_1 : 0] && 0 ? 0 :
f$myfunc7  &&  [[ (f$OpenPPL_StillToAct == 7) ] ? me_st_userutg1_1 : 0] && 0 ? 0 :
f$myfunc7  &&  [[ (f$OpenPPL_StillToAct == 6) ] ? me_st_usermid1_1 : 0] && 0 ? 0 :
f$myfunc7  &&  [[ (f$OpenPPL_StillToAct == 5) ] ? me_st_usermid2_1 : 0] && 0 ? 0 :
f$myfunc7  &&  [[ (f$OpenPPL_StillToAct == 4) ] ? me_st_usermid3_1 : 0] && 0 ? 0 :
f$myfunc7  &&  [[ (f$OpenPPL_StillToAct == 3) ] ? me_st_usercutoff_1 : 0] && 0 ? 0 :
f$myfunc7  &&  [[ (f$OpenPPL_Raises == 1 && f$OpenPPL_LastRaiserPosition >= 7) ] ? me_st_userearlyraiser_1 : 0] && 0 ? 0 :
f$myfunc7  &&  [[ (f$OpenPPL_Raises == 1 && [f$OpenPPL_LastRaiserPosition == 4 || f$OpenPPL_LastRaiserPosition == 5 || f$OpenPPL_LastRaiserPosition == 6]) ] ? me_st_usermiddleraiser_1 : 0] && 0 ? 0 :
f$myfunc7  &&  [[ (f$OpenPPL_Raises == 1 && [f$OpenPPL_LastRaiserPosition == 2 || f$OpenPPL_LastRaiserPosition == 3]) ] ? me_st_userlateraiser_1 : 0] && 0 ? 0 :
f$myfunc7  &&  [[ (f$OpenPPL_Raises == 1 && f$OpenPPL_LastRaiserPosition == 1) ] ? me_st_usersmalblindraiser_1 : 0] && 0 ? 0 :
//
// Starting open-ended when-condition
// ((Hand = AA))
//
f$myfunc8  &&  [ (f$OpenPPL_TotalInvested > 75/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_RaiseMax :
f$myfunc8  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0 && f$OpenPPL_BetSize == 1) ] ? 2 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc8  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize == 1) ] ? 2 /*** big blinds ***/ :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc8  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// ((Hand = KK))
//
f$myfunc9  &&  [ (f$OpenPPL_TotalInvested > 75/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc9  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_RaiseMax :
f$myfunc9  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc9  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc9  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// ((Hand = QQ))
//
f$myfunc10  &&  [ (f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_RaiseMax :
f$myfunc10  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc10  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc10  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = JJ))
//
f$myfunc11  &&  [ (f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc11  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [me_re_userutg || me_re_userutg || me_re_usermid1 || me_re_usermid2 || me_re_usermid3]) ] ? f$OpenPPL_Fold :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [me_re_usercutoff || f$OpenPPL_Button || f$OpenPPL_SmallBlind || f$OpenPPL_BigBlind]) ] ? f$OpenPPL_RaiseMax :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [me_re_userlateraiser || me_re_usersmallblind]) ] ? f$OpenPPL_RaiseMax :
f$myfunc11  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc11  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc11  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 7) ] ? f$OpenPPL_Fold :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc11  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = TT))
//
f$myfunc12  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [me_re_userlateraiser || me_re_usersmallblind]) ] ? f$OpenPPL_RaiseMax :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc12  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc12  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc12  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 7) ] ? f$OpenPPL_Fold :
f$myfunc12  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc12  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = AK))
//
f$myfunc13  &&  [ (f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc13  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [me_re_userutg || me_re_userutg1]) ] ? f$OpenPPL_Fold :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_RaiseMax :
f$myfunc13  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0 && f$OpenPPL_BetSize <= 1) ] ? 2 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc13  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc13  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 7) ] ? f$OpenPPL_Fold :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc13  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = AQ))
//
f$myfunc14  &&  [ (f$OpenPPL_TotalInvested > 150/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc14  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc14  &&  [ (f$OpenPPL_StillToAct >= 7) ] ? f$OpenPPL_Fold :
f$myfunc14  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc14  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc14  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 7) ] ? f$OpenPPL_Fold :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc14  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = AJ suited))
//
f$myfunc15  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc15  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc15  &&  [ (f$OpenPPL_StillToAct >= 7) ] ? f$OpenPPL_Fold :
f$myfunc15  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc15  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc15  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 7) ] ? f$OpenPPL_Fold :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc15  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = AJ))
//
f$myfunc16  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc16  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc16  &&  [ (f$OpenPPL_StillToAct >= 7) ] ? f$OpenPPL_Fold :
f$myfunc16  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc16  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc16  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 7) ] ? f$OpenPPL_Fold :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc16  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = AT suited))
//
f$myfunc17  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc17  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc17  &&  [ (f$OpenPPL_StillToAct >= 7) ] ? f$OpenPPL_Fold :
f$myfunc17  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc17  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 7) ] ? f$OpenPPL_Fold :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc17  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = AT))
//
f$myfunc18  &&  [ (f$OpenPPL_TotalInvested > 330/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc18  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc18  &&  [ (f$OpenPPL_StillToAct >= 4) ] ? f$OpenPPL_Fold :
f$myfunc18  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc18  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 4) ] ? f$OpenPPL_Fold :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc18  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = A9 suited))
//
f$myfunc19  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc19  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc19  &&  [ (f$OpenPPL_StillToAct >= 4) ] ? f$OpenPPL_Fold :
f$myfunc19  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc19  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 4) ] ? f$OpenPPL_Fold :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc19  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = A9))
//
f$myfunc20  &&  [ (f$OpenPPL_TotalInvested > 330/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc20  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc20  &&  [ (f$OpenPPL_StillToAct >= 3) ] ? f$OpenPPL_Fold :
f$myfunc20  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc20  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((Hand = A8 suited) OR (hand = A7 suited) OR (hand = A6 suited) OR (hand = A5 suited) OR (hand = A4 suited) OR (hand = A3 suited) OR (hand = A2 suited)))
//
f$myfunc21  &&  [ (f$OpenPPL_TotalInvested > 330/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc21  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc21  &&  [ (f$OpenPPL_StillToAct >= 3) ] ? f$OpenPPL_Fold :
f$myfunc21  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc21  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = 99))
//
f$myfunc22  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc22  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc22  &&  [ (f$OpenPPL_StillToAct >= 7) ] ? f$OpenPPL_Fold :
f$myfunc22  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc22  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc22  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 7) ] ? f$OpenPPL_Fold :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc22  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = 88))
//
f$myfunc23  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc23  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc23  &&  [ (f$OpenPPL_StillToAct >= 7) ] ? f$OpenPPL_Fold :
f$myfunc23  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_CallsSinceLastRaise == 0) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc23  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc23  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_FirstRaiserPosition >= 4) ] ? f$OpenPPL_Fold :
f$myfunc23  &&  [ (f$OpenPPL_Raises == 1) ] ? (f$OpenPPL_BetSize * 2) :
f$myfunc23  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = 77))
//
f$myfunc24  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc24  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc24  &&  [ (f$OpenPPL_StillToAct >= 4) ] ? f$OpenPPL_Fold :
f$myfunc24  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc24  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = 66))
//
f$myfunc25  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc25  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc25  &&  [ (f$OpenPPL_StillToAct >= 4) ] ? f$OpenPPL_Fold :
f$myfunc25  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc25  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = 55))
//
f$myfunc26  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc26  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc26  &&  [ (f$OpenPPL_StillToAct >= 4) ] ? f$OpenPPL_Fold :
f$myfunc26  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc26  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = 44))
//
f$myfunc27  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc27  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc27  &&  [ (f$OpenPPL_StillToAct >= 3) ] ? f$OpenPPL_Fold :
f$myfunc27  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc27  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = 33))
//
f$myfunc28  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc28  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc28  &&  [ (f$OpenPPL_StillToAct >= 3) ] ? f$OpenPPL_Fold :
f$myfunc28  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc28  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = 22))
//
f$myfunc29  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc29  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc29  &&  [ (f$OpenPPL_StillToAct >= 3) ] ? f$OpenPPL_Fold :
f$myfunc29  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc29  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = KQ))
//
f$myfunc30  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc30  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc30  &&  [ (f$OpenPPL_StillToAct >= 4) ] ? f$OpenPPL_Fold :
f$myfunc30  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 4 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ] ? 5 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 4) ] ? 6 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 5) ] ? 7 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 6) ] ? 8 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 7) ] ? 9 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 8) ] ? 10 /*** big blinds ***/ :
f$myfunc30  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = KJ suited))
//
f$myfunc31  &&  [ (f$OpenPPL_TotalInvested > 330/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc31  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc31  &&  [ (f$OpenPPL_StillToAct >= 4) ] ? f$OpenPPL_Fold :
f$myfunc31  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc31  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((Hand = KJ) OR (hand = KT)))
//
f$myfunc32  &&  [ (f$OpenPPL_TotalInvested > 330/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc32  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc32  &&  [ (f$OpenPPL_StillToAct >= 3) ] ? f$OpenPPL_Fold :
f$myfunc32  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc32  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = QJ suited))
//
f$myfunc33  &&  [ (f$OpenPPL_TotalInvested > 201/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc33  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc33  &&  [ (f$OpenPPL_StillToAct >= 4) ] ? f$OpenPPL_Fold :
f$myfunc33  &&  [ (f$OpenPPL_StillToAct <= 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc33  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((Hand = QJ) OR (hand = QT) OR (hand = JT)))
//
f$myfunc34  &&  [ (f$OpenPPL_TotalInvested > 330/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc34  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Fold :
f$myfunc34  &&  [ (f$OpenPPL_StillToAct >= 3) ] ? f$OpenPPL_Fold :
f$myfunc34  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 /*** big blinds ***/ :
f$myfunc34  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Others)
//
f$myfunc35  &&  [ (f$OpenPPL_PairInHand && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct <= 4) ] ? f$OpenPPL_Call :
f$myfunc35  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc35  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


##f$flop##
[ (f$OpenPPL_TotalInvested > 70/100 * f$OpenPPL_StackSize && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Raises == 1 && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_TotalInvested > 70/100 * f$OpenPPL_StackSize && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Raises == 1 && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_TotalInvested > 70/100 * f$OpenPPL_StackSize && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Raises == 1 && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_TotalInvested > 145/100 * f$OpenPPL_StackSize && [($AK) || ($AQ)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_TotalInvested > 145/100 * f$OpenPPL_StackSize && [$A] && f$OpenPPL_Overcards == 2) ] ? f$OpenPPL_RaiseMax :
[ ([f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw || f$OpenPPL_StackSize < 6)] &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_StackSize > 30 && f$OpenPPL_AmountToCall < 6)] && f$OpenPPL_BigBlindSize >= 150) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize < 21/100 * f$OpenPPL_StackSize && f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveStraight]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize < 17/100 * f$OpenPPL_StackSize && [f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize < 9/100 * f$OpenPPL_StackSize && [f$OpenPPL_HaveInsideStraightDraw || ($AK) || f$OpenPPL_Overcards == 2]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StackSize < 6 && [f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || ($AK)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 11 && f$OpenPPL_RaisesBeforeFlop && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 8 && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 15 &&  ![(f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || [$AK] || f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize || f$OpenPPL_AmountToCall <= 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PotSize > 5 && f$OpenPPL_StackSize < 22 &&  ![(f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || [$AK] || f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize < 8 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 17/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTrips || [$AA])]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 17/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveNutFlushDraw)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 23/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_PairOnBoard)] && [ !(f$OpenPPL_FlushPossible)] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 23/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_PairOnBoard)] && [ !(f$OpenPPL_FlushPossible)] && [ !(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveNutFlushDraw)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard && [f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)])] && [f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || ($AA) || ($KK)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible && [f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTopTwoPair]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible && [ !(f$OpenPPL_StraightPossible)] && [f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTwoPair]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ)]) ] ? f$OpenPPL_RaiseMax :
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 10 &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw)] &&  ![(f$OpenPPL_Overcards == 2 && f$OpenPPL_HaveNutStraightDraw && f$OpenPPL_SuitsOnBoard >= 2)] &&  ![(f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize)] &&  ![(f$OpenPPL_HavePair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_SuitsOnBoard == 2)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents <= 2 && f$OpenPPL_StackSize <= 20 && f$OpenPPL_PotSize >= 3 && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_StackSize && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKickerOrBetter] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)])]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents <= 2 && [ !(f$OpenPPL_PairOnBoard)] && f$OpenPPL_StackSize < 25) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)])] && f$OpenPPL_StackSize < 25) ] ? f$OpenPPL_RaiseMax :
[ ([f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BotIsLastRaiser || f$OpenPPL_OpponentIsAllin || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)] && f$OpenPPL_StackSize > 15 && [f$OpenPPL_Raises >= 1 || f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)] && f$OpenPPL_StackSize > 15 && [f$OpenPPL_Raises >= 1 || f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize || f$OpenPPL_Opponents >= 2]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize < 22 && f$OpenPPL_PotSize > 3 &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [ !(f$OpenPPL_HaveFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [ !(f$OpenPPL_HaveStraight)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 300/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 17/100 * f$OpenPPL_StackSize && f$OpenPPL_HaveOverPair && [($JJ) || ($QQ) || ($KK) || ($AA)] &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 67/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 12 && f$OpenPPL_StackSize > 40 &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNuts)] &&  ![([$AA] && f$OpenPPL_HaveNutFlushDraw)] &&  ![([$AA] && f$OpenPPL_HaveBackdoorNutFlushDraw)]) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_Opponents >= 4 || f$OpenPPL_Folds >= 3] &&  ![(f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 25/100 * f$OpenPPL_PotSize)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_HaveQuads)] && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_BigBlind && f$OpenPPL_HaveNothing &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop || [$A])]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveSet && [ !(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 && [ !(f$OpenPPL_StraightPossible)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_HaveSet && [ !(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 && [ !([f$OpenPPL_Position == f$OpenPPL_First])] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Raises == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall < 50/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)])]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)])]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Opponents >= 3 || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_BetSize > 38/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 51/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 33/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
[ ([($AA) || ($KK)] && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize > 20/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_RaiseMax :
[ ([($AA) || ($KK)] && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 20/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 20 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveBackdoorFlushDraw || ($AK)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Raises >= 2 &&  ![([$AA] || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_OpponentIsAllin)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_CalledOnFlop && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize && f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotIsLastRaiser && f$OpenPPL_StackSize > 20 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_Opponents > 2)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] && f$OpenPPL_StraightPossible)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] && f$OpenPPL_StraightPossible)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)])]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_BotIsLastRaiser && f$OpenPPL_StackSize > 20 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_Opponents > 1)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)])]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_Overcards >= 1 &&  ![(f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 27/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveOverPair &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [$AA] || [$KK] || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_OpponentIsAllin || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 64/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![([$AA] || [$KK] || f$OpenPPL_OpponentIsAllin)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 64/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 41/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Bets == 1 && f$OpenPPL_HaveBackdoorFlushDraw && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_FlushPossible)] && f$OpenPPL_BetSize < 7 && f$OpenPPL_BetSize <= 20/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_Overcards == 2)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 3 && f$OpenPPL_AmountToCall > 35/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 5/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Have3rdOverPair &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_BotIsLastRaiser)] &&  ![(f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotIsLastRaiser)] &&  ![(f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Random <= 60) ] ? f$OpenPPL_Fold :
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))] && f$OpenPPL_Checks >= 1 && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlushDraw || [$AA] || [$KK] || [$QQ] || [$JJ] || [$TT] || [$99] || f$OpenPPL_HaveTopNonBoardPairedPair)]) ] ? f$OpenPPL_Fold :
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))] && f$OpenPPL_Checks >= 1 && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlushDraw)] && [($2) || ($3) || ($4) || ($5) || ($6) || ($7)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveTopPair && [($AK) || ($AQ)] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)])] && f$OpenPPL_AmountToCall < 53/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || [$KK] || [$AA] || f$OpenPPL_OpponentIsAllin || f$OpenPPL_AmountToCall < 36/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Overcards == 1 && f$OpenPPL_HaveInsideStraightDraw &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 8/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_Opponents > 1 || f$OpenPPL_Folds >= 1 || f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Fold :
[ ( ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop)] && [f$OpenPPL_Position == f$OpenPPL_Last || f$OpenPPL_Position == f$OpenPPL_Middle] &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize > 10/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveFullHouse && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Bets >= 1) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_Bets == 1 && f$OpenPPL_PairOnBoard && f$OpenPPL_HaveUnderPair &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents >= 2 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents >= 2 && [f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair] &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0 || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_Overcards == 0 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0 || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_OnlyOneStraightPossible || f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 20 && f$OpenPPL_BetSize > 90/100 * f$OpenPPL_PotSize &&  ![([$AA] || [$KK] || [$QQ] || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTrips) ] ? f$OpenPPL_RaisePot :
[ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises <= 1] && f$OpenPPL_HaveOverPair && [($AA) || ($KK)] && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaisePot :
[ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises <= 1] && f$OpenPPL_HaveOverPair && [($AA) || ($KK)]) ] ? f$OpenPPL_Call :
[ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_HaveInsideNutStraightDraw && [f$OpenPPL_Bets == 1 || f$OpenPPL_Bets == 0] && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
[ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_HaveInsideNutStraightDraw && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
[ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] && f$OpenPPL_Opponents > 2 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveBottomPair && f$OpenPPL_Position == f$OpenPPL_First &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || [$9] || [$8] || [$7] || [$2] || [[ /* 3c */ $3X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_3c * 1] != 0]]] || [[ /* 3s */ $3X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_3s * 1] != 0]]] || [[ /* 4c */ $4X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_4c * 1] != 0]]] || [[ /* 4s */ $4X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_4s * 1] != 0]]] || [[ /* 5c */ $5X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_5c * 1] != 0]]] || [[ /* 5s */ $5X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_5s * 1] != 0]]] || [[ /* 6c */ $6X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_6c * 1] != 0]]] || [[ /* 6s */ $6X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_6s * 1] != 0]]])]) ] ? f$OpenPPL_RaiseMin :
[ (f$OpenPPL_Opponents > 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveBackdoorFlushDraw || f$OpenPPL_Folds >= 2)] && f$OpenPPL_BetSize > 8 && f$OpenPPL_BetSize < 20) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 47/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] && f$OpenPPL_Bets == 1 && [f$OpenPPL_Opponents > 1 || f$OpenPPL_Folds >= 1] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))] && f$OpenPPL_Bets == 1 && [f$OpenPPL_Opponents > 2 || f$OpenPPL_Folds >= 2] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveOverPair || f$OpenPPL_AmountToCall < 33/100 * f$OpenPPL_PotSize)] && [ !([f$OpenPPL_TotalInvested > 100])/100 * f$OpenPPL_StackSize] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 18/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveNutFlush] && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTwoPair || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND Opponents >= 3)
//
f$myfunc36  &&  [ ([f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveNutFlush]) ] ? f$OpenPPL_Call :
f$myfunc36  &&  [ ([f$OpenPPL_HaveTrips || f$OpenPPL_HaveNutStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair] && f$OpenPPL_SuitsOnBoard == 3 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? f$OpenPPL_Call :
f$myfunc36  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_SuitsOnBoard == 3 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)]) ] ? 50/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (HaveOverPair)
//
f$myfunc37  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_Bets >= 1 && f$OpenPPL_BetSize < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTopPair)
//
f$myfunc38  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 3 &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlushDraw || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BetSize > 47/100 * f$OpenPPL_PotSize || f$OpenPPL_StackSize < 25)]) ] ? f$OpenPPL_Call :
f$myfunc38  &&  [ ( ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize <= 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc38  &&  [ ( ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin)] &&  ![(f$OpenPPL_HaveNutStraightDraw &&  ![f$OpenPPL_FlushPossible])] &&  ![(f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize || f$OpenPPL_BetSize < 40/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 41/100 * f$OpenPPL_PotSize && f$OpenPPL_StackSize > 20) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (PairOnBoard AND NOT ((board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8)) AND Opponents < 3)
//
f$myfunc39  &&  [ ([$AA] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc39  &&  [ ([$AA] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc39  &&  [ ([$AA] && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc39  &&  [ ([($KK) || ($QQ) || ($JJ) || ($TT)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc39  &&  [ ([$KK] && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 20) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND OpponentIsAllin AND (Bets = 1 OR Raises = 1))
//
f$myfunc40  &&  [ (f$OpenPPL_AmountToCall < 28/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || ($A) || f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc40  &&  [ (f$OpenPPL_AmountToCall < 41/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || ($AK) || ($AQ)] &&  ![(f$OpenPPL_HaveBottomPair || f$OpenPPL_HaveUnderPair)]) ] ? f$OpenPPL_Call :
f$myfunc40  &&  [ (f$OpenPPL_AmountToCall < 33/100 * f$OpenPPL_PotSize && [$A] && f$OpenPPL_Overcards == 2) ] ? f$OpenPPL_Call :
f$myfunc40  &&  [ (f$OpenPPL_PotSize > 10 && f$OpenPPL_BetSize < 6 && [f$OpenPPL_HavePair || ($A) || f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND (hand = A K) AND PairOnBoard AND ((board = 2 2) OR (board = 3 3) OR (board = 4 4) OR (board = 5 5) OR (board = 6 6)) AND (NOT (Folds >= 1)))
//
f$myfunc41  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && f$OpenPPL_Raises <= 1) ] ? f$OpenPPL_RaisePot :
f$myfunc41  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && f$OpenPPL_Raises == 2 &&  ![(f$OpenPPL_OpponentIsAllin || f$OpenPPL_StackSize < 60)] && f$OpenPPL_BetSize < 50/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents > 2 AND NOT ((board = A) OR (board = K) OR (board = Q) OR (board = J) OR (board = T) OR (board = 9)) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker OR HaveTwoPair OR HaveSet OR HaveFullHouse OR HaveQuads OR HaveInsideStraightDraw OR HaveFlushDraw OR PairOnBoard OR FlushPossible))
//
f$myfunc42  &&  [ (f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (NOT (PairOnBoard OR StraightPossible) AND HaveNutFlushDraw AND HaveTopPair AND HaveBestKicker)
//
f$myfunc43  &&  [ (f$OpenPPL_Raises <= 1) ] ? f$OpenPPL_RaisePot :
f$myfunc43  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (NOT (PairOnBoard OR MoreThanOneStraightPossibleOnFlop OR (hand = A A) OR FlushPossible OR HaveSet OR HaveTwoPair OR HaveStraight OR HaveStraightDraw) AND HaveNutFlushDraw AND (HavePair OR Overcards = 2))
//
f$myfunc44  &&  [ (f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc44  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize <= 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc44  &&  [ (f$OpenPPL_TotalInvested > 75/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc44  &&  [ (f$OpenPPL_BetSize > 35/100 * f$OpenPPL_StackSize && [ !([f$OpenPPL_StackSize < 50])]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Opponents >= 3 AND HaveTopPair AND NOT (HaveBestKicker OR HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveFlushDraw OR HaveInsideStraightDraw))
//
f$myfunc45  &&  [ ([ !([f$OpenPPL_Position == f$OpenPPL_Last])] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc45  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
f$myfunc45  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 8) ] ? f$OpenPPL_Call :
f$myfunc45  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize >= 8) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Opponents <= 2 AND HaveTopPair AND HaveBestKicker AND RaisesBeforeFlop AND NOT (PairOnBoard OR StraightPossible OR FlushPossible OR BotRaisedBeforeFlop))
//
f$myfunc46  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 12) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND OpponentIsAllin AND (Bets = 1 OR Raises = 1))
//
f$myfunc47  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush] && f$OpenPPL_AmountToCall < 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc47  &&  [ ([f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] && [ !([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND (Bets = 1 OR Raises >= 1) AND NOT (HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveInsideStraightDraw OR HaveFlush OR HaveFlushDraw OR TotalInvested > 90% StackSize))
//
f$myfunc48  &&  [ (f$OpenPPL_HaveBestKicker && f$OpenPPL_BetSize > 35 && f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 50/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || f$OpenPPL_NoBettingOnFlop)]) ] ? f$OpenPPL_Fold :
f$myfunc48  &&  [ (f$OpenPPL_BetSize > 20 && f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 45/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_PotSize && [ !(f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (FlushPossible AND (hand = A A) AND HaveNutFlushDraw)
//
f$myfunc49  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaisePot :
f$myfunc49  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize >= 15/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc49  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc49  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 35/100 * f$OpenPPL_StackSize && [ !([f$OpenPPL_TotalInvested > 75])/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Fold :
f$myfunc49  &&  [ (f$OpenPPL_Raises >= 2 && [ !([f$OpenPPL_TotalInvested > 75])/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Fold :
f$myfunc49  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (FlushPossible)
//
f$myfunc50  &&  [ ([ !(f$OpenPPL_HaveFlush)] && f$OpenPPL_HaveNutFlushDraw && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_BetSize < 10/100 * f$OpenPPL_StackSize || f$OpenPPL_AmountToCall < 43/100 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
f$myfunc50  &&  [ (f$OpenPPL_Bets == 1 && [ !(f$OpenPPL_StraightPossible)] && [f$OpenPPL_Opponents > 1 || f$OpenPPL_Folds >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_BetSize == 1 || f$OpenPPL_BetSize < 28/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc50  &&  [ ([f$OpenPPL_Raises >= 1 || f$OpenPPL_BetSize > 25/100 * f$OpenPPL_StackSize] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet)]) ] ? f$OpenPPL_Fold :
f$myfunc50  &&  [ (f$OpenPPL_StraightPossible && [f$OpenPPL_Opponents > 1 || f$OpenPPL_Folds >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Bets = 1 AND BetSize > 2 AND NOT (HavePair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveStraight OR HaveFlush OR HaveInsideStraightDraw OR HaveFlushDraw))
//
f$myfunc51  &&  [ (f$OpenPPL_BetSize > 33/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc51  &&  [ (f$OpenPPL_Overcards == 2 && [$A] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)])]) ] ? f$OpenPPL_Call :
f$myfunc51  &&  [ (f$OpenPPL_Overcards == 2 && [$KQ] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)])]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND HaveBestKicker AND NOT ((board = A) OR (board = K) OR (board = Q) OR (board = J) OR (board = T) OR PairOnBoard OR HaveNutFlushDraw))
//
f$myfunc52  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc52  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 20/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc52  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize >= 20/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc52  &&  [ (f$OpenPPL_Raises >= 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Board = A) AND (Have2ndOverPair OR Have2ndTopPair) AND NOT (HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveStraight OR HaveFlush OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc53  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
f$myfunc53  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = A A) AND Opponents = 1 AND Raises = 1 AND NOT ((board = K) OR (board = Q) OR (board = J) OR (board = T) OR PairOnBoard OR FlushPossible))
//
f$myfunc54  &&  [ (f$OpenPPL_BetSize < 35/100 * f$OpenPPL_StackSize && [[ /* Ac */ $AX && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ac * 1] != 0]]]) ] ? f$OpenPPL_RaisePot :
f$myfunc54  &&  [ ([ !(f$OpenPPL_StraightPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc54  &&  [ (f$OpenPPL_BetSize < 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc54  &&  [ (f$OpenPPL_BetSize > 35/100 * f$OpenPPL_StackSize && [([ /* Ac */ $AX && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ac * 1] != 0]]) || ([ /* Ah */ $AX && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ah * 1] != 0]])]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTopPair AND HaveBestKicker AND ((board = A) OR (board = K) OR (board = Q)) AND NOT (PairOnBoard OR HaveSet OR HaveStraight OR HaveFlush OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc55  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_BetSize <= 40/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize || f$OpenPPL_StackSize < 50)]) ] ? f$OpenPPL_Call :
f$myfunc55  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_OpponentIsAllin || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize || f$OpenPPL_StackSize < 50)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Opponents = 1 AND HaveStraightDraw AND Bets = 1 AND Raises = 0 AND NOT (HavePair OR HaveTrips OR HaveFlushDraw OR StraightPossible))
//
f$myfunc56  &&  [ (f$OpenPPL_SuitsOnBoard == 3 && f$OpenPPL_BetSize < 9/100 * f$OpenPPL_StackSize && f$OpenPPL_BetSize <= 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc56  &&  [ (f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_BetSize < 6/100 * f$OpenPPL_StackSize && f$OpenPPL_BetSize <= 38/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT ((hand = A A) OR (hand = K K) OR (hand = Q Q)) AND RaisesBeforeFlop AND Bets = 1 AND Raises = 0)
//
f$myfunc57  &&  [ (f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 25/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_HaveNutFlushDraw)] &&  ![(f$OpenPPL_HaveNutStraightDraw &&  ![f$OpenPPL_FlushPossible])] &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_StackSize)] && f$OpenPPL_BetSize > 43/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 55/100 * f$OpenPPL_PotSize && f$OpenPPL_Random <= 50) ] ? f$OpenPPL_Call :
f$myfunc57  &&  [ (f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 25/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_HaveNutFlushDraw)] &&  ![(f$OpenPPL_HaveNutStraightDraw &&  ![f$OpenPPL_FlushPossible])] &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_StackSize)] && f$OpenPPL_BetSize > 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT ((hand = A A) OR (hand = K K) OR (hand = Q Q)) AND RaisesBeforeFlop AND Raises >= 1)
//
f$myfunc58  &&  [ (f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 30/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] &&  ![(f$OpenPPL_HaveNutStraightDraw &&  ![f$OpenPPL_FlushPossible])] &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((board = 5 5) OR (board = 4 4) OR (board = 3 3) OR (board = 2 2)) AND NOT (TripsOnBoard OR Opponents >= 3) AND HaveOverPair)
//
f$myfunc59  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc59  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && [($TT) || ($JJ) || ($QQ) || ($KK) || ($AA)] &&  ![(f$OpenPPL_Folds >= 2 || f$OpenPPL_Calls >= 2)] && f$OpenPPL_BetSize < 61/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && [($TT) || ($JJ) || ($QQ) || ($KK) || ($AA)] &&  ![(f$OpenPPL_Folds >= 2 || f$OpenPPL_Calls >= 2)] && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_OpponentIsAllin && [($TT) || ($JJ) || ($QQ) || ($KK) || ($AA)] && [f$OpenPPL_AmountToCall <= 15 || f$OpenPPL_AmountToCall < 47/100 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTwoPair AND HaveTopPair AND NOT (PairOnBoard OR FlushPossible))
//
f$myfunc60  &&  [ (f$OpenPPL_HaveTopTwoPair && [ !(f$OpenPPL_MoreThanOneStraightPossibleOnFlop)] && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc60  &&  [ (f$OpenPPL_Raises == 1) ] ? f$OpenPPL_Call :
f$myfunc60  &&  [ (f$OpenPPL_Raises == 2 && [ !(f$OpenPPL_MoreThanOneStraightPossibleOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc60  &&  [ (f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((hand = 9 9) OR (hand = T T) OR (hand = J J)) AND NOT (HaveStraight OR HaveFlush OR HaveStraightDraw OR HaveFlushDraw) AND Raises >= 1 AND StackSize > 45)
//
f$myfunc61  &&  [ (f$OpenPPL_AmountToCall > 38/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc61  &&  [ (f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc61  &&  [ (f$OpenPPL_BetSize > 62/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Bets = 1 AND (HavePair OR Overcards = 2 OR (hand = A) OR HaveBackdoorNutFlushDraw) AND Raises = 0 AND NOT (HaveNuts OR HaveFullHouse OR HaveFlush OR HaveStraight OR HaveTrips OR HaveTwoPair OR HaveSet OR HaveTopPair OR HaveOverPair) AND BetSize < 7)
//
f$myfunc62  &&  [ (f$OpenPPL_BetSize <= 20/100 * f$OpenPPL_PotSize && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_Call :
f$myfunc62  &&  [ (f$OpenPPL_BetSize <= 25/100 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1 && f$OpenPPL_Random <= 20) ] ? f$OpenPPL_RaisePot :
f$myfunc62  &&  [ (f$OpenPPL_BetSize <= 25/100 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1 && f$OpenPPL_Random <= 20) ] ? f$OpenPPL_RaiseMin :
f$myfunc62  &&  [ (f$OpenPPL_BetSize <= 25/100 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((hand = A A) OR (hand = K K) OR (hand = Q Q)) AND NOT (PairOnBoard OR FlushPossible OR HaveNutFlushDraw OR (board = K) OR (board = Q) OR (board = J) OR (board = T) OR (board = 9) OR (board = 8) OR (board = 5 6 7) OR (board = 4 5 6) OR (board = 3 4 5) OR (board = 2 3 4)))
//
f$myfunc63  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc63  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc63  &&  [ (f$OpenPPL_Raises >= 1 && [f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize < 45/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (MoreThanOneStraightPossibleOnFlop AND ((board = A K) OR (board = A Q) OR (board = A J) OR (board = K Q) OR (board = K J) OR (board = Q J) OR (board = Q T)) AND NOT (HaveOverPair OR HaveTopPair OR HaveTwoPair OR HaveSet OR HaveFlush OR HaveStraight OR HaveNutStraightDraw OR HaveFlushDraw))
//
f$myfunc64  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Opponents >= 2 || f$OpenPPL_Folds >= 1] && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Bets = 1 OR Raises = 1) AND NOT (HaveNuts OR HaveQuads OR HaveStraightFlush OR HaveFullHouse OR HaveFlush OR HaveStraight) AND AmountToCall < 20)
//
f$myfunc65  &&  [ (f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc65  &&  [ (f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc65  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveNutFlushDraw] &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc65  &&  [ (f$OpenPPL_AmountToCall < 39/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips)]) ] ? f$OpenPPL_Call :
f$myfunc65  &&  [ (f$OpenPPL_AmountToCall < 39/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// Others
//
f$myfunc66  &&  [ ([$AK] && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ ([$AK] && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_ThreeCardStraightOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_9 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_RaiseMax :
f$myfunc66  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_ThreeCardStraightOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_9 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_RaiseMax :
f$myfunc66  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_ThreeCardStraightOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || f$OpenPPL_Raises > 1 || f$OpenPPL_AmountToCall > 15)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc66  &&  [ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ)] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_ThreeCardStraightOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || f$OpenPPL_Raises > 1 || f$OpenPPL_AmountToCall > 15)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc66  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1)] && f$OpenPPL_HaveFullHouse) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveStraight)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_TotalInvested > 300/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc66  &&  [ (me_re_userearlyraiser && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall > 35/100 * f$OpenPPL_PotSize &&  ![([$AA] || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_PairOnBoard || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [[ (nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize == 1) ] ? me_st_userminbettor_1 : 0] && 0 ? 0 :
f$myfunc66  &&  [[ (f$OpenPPL_OpponentIsAllin &&  ![(me_re_userdead)]) ] ? me_st_userdead2_1 : 0] && 0 ? 0 :
f$myfunc66  &&  [[ ( ![(f$OpenPPL_HaveTopPair)]) ] ? me_st_user2set_1 : 0] && 0 ? 0 :
f$myfunc66  &&  [ (nopponentsplaying == 2 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Checks == 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotRaisedBeforeFlop)]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc66  &&  [ (f$OpenPPL_SuitsOnBoard == 2 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || f$OpenPPL_HaveStraight || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Overcards == 2 && f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 30/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc66  &&  [ (f$OpenPPL_HaveTopPair && [($AK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 10 && f$OpenPPL_BotsActionsOnThisRound == 0 && f$OpenPPL_BetSize < 48/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || nopponentsplaying > 2 || f$OpenPPL_Folds > 1)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc66  &&  [ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT)] && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 26/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT)] && nopponentsplaying == 3 && f$OpenPPL_Checks == 2 && f$OpenPPL_BotsActionsPreflop == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 26/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 4 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop || f$OpenPPL_FlushPossible || f$OpenPPL_ThreeCardStraightOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc66  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 4 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop || f$OpenPPL_FlushPossible || f$OpenPPL_ThreeCardStraightOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && nopponentsplaying == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 39/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 33/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveOverPair) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BotsActionsOnThisRound == 0 && nopponentsplaying == 1 && f$OpenPPL_Folds == 0 && f$OpenPPL_BetSize > 47/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize <= 12 && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_HaveUnderPair && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 19/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveSet)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall > 3 && f$OpenPPL_AmountToCall > 60/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_StackSize < 28 &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_BotIsLastRaiser || f$OpenPPL_BetSize == 1 || f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize)] &&  ![(f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw)] &&  ![(f$OpenPPL_Overcards == 2 && f$OpenPPL_HaveFlushDraw)] &&  ![(f$OpenPPL_Overcards == 2 && f$OpenPPL_HaveNutStraightDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_UncoordinatedFlop && nopponentsplaying == 2 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet] && f$OpenPPL_Random <= 50) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_UncoordinatedFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises <= 1 && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet]) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_HaveStraightDraw && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_BetSize > 13 || f$OpenPPL_AmountToCall > 35/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_StackSize > 22 && f$OpenPPL_AmountToCall > 56/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 8 &&  ![([$AA] || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (nopponentsplaying >= 3 && f$OpenPPL_Raises >= 1 && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 60/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 30 && f$OpenPPL_AmountToCall > 28/100 * f$OpenPPL_StackSize &&  ![([$AA] || [$KK] || [$QQ] || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveNutFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall < 28/100 * f$OpenPPL_PotSize && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(me_re_userdead)] && f$OpenPPL_AmountToCall < 22/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && nopponentsplaying == 1 &&  ![(f$OpenPPL_OpponentIsAllin)] && f$OpenPPL_BetSize < 9 && f$OpenPPL_Random <= 15 && f$OpenPPL_StackSize > 50) ] ? 80/100 * f$OpenPPL_PotSize :
f$myfunc66  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveOverPair &&  ![([$QQ] || [$KK] || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_ThreeCardStraightOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveOverPair &&  ![([$QQ] || [$KK] || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_ThreeCardStraightOnBoard || f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveOverPair &&  ![([$QQ] || [$KK] || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_ThreeCardStraightOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_Raises >= 1 && f$OpenPPL_HaveOverPair &&  ![([$QQ] || [$KK] || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_ThreeCardStraightOnBoard || f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_UncoordinatedFlop && nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair] && f$OpenPPL_BetSize > 3 && f$OpenPPL_Random <= 66) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_UncoordinatedFlop && nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_RaisesBeforeFlop &&  ![(f$OpenPPL_Folds >= 2 || f$OpenPPL_BetSize > 8 || f$OpenPPL_StackSize < 35 || f$OpenPPL_BotRaisedBeforeFlop)] && f$OpenPPL_Random <= 33) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc66  &&  [ ([($AA) || ($KK)] && [f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call || f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Check] && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveSet] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ ([($AA) || ($KK)] && [f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call || f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Check] && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveSet] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_BetSize > 8)]) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 17/100 * f$OpenPPL_StackSize && f$OpenPPL_HaveOverPair && [($JJ) || ($QQ) || ($KK) || ($AA)] &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 2 || me_re_userdead)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 67/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 12 && f$OpenPPL_StackSize > 40 &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNuts)] &&  ![([$AA] && f$OpenPPL_HaveNutFlushDraw)] &&  ![([$AA] && f$OpenPPL_HaveBackdoorNutFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ([nopponentsplaying >= 4 || f$OpenPPL_Folds >= 3] &&  ![(f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 25/100 * f$OpenPPL_PotSize)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7 * f$PrimeCode_7) == 0))] && nopponentsplaying == 1 && [$KK] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 46/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_HaveQuads)] && f$OpenPPL_AmountToCall > 25/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ([f$OpenPPL_InBigBlind || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_HaveNothing &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop || [$A])]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_PotSize > 12)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_StraightPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_RaiseMax :
f$myfunc66  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && nopponentsplaying == 1 && f$OpenPPL_Raises == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall < 50/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)] || me_re_userdead)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)])]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveBestKicker || nopponentsplaying >= 3 || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_BetSize > 38/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 47/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 33/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ ([($AA) || ($KK)] && f$OpenPPL_RaisesBeforeFlop && nopponentsplaying == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize > 20/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_RaiseMax :
f$myfunc66  &&  [ ([($AA) || ($KK)] && f$OpenPPL_RaisesBeforeFlop && nopponentsplaying == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 20/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 20 &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveBackdoorFlushDraw || ($AK)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_Raises >= 2 &&  ![([$AA] || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_OpponentIsAllin)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_CalledOnFlop && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize && f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_BotIsLastRaiser && f$OpenPPL_StackSize > 20 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible || nopponentsplaying > 2)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] && f$OpenPPL_StraightPossible)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] && f$OpenPPL_StraightPossible)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)])]) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_BotIsLastRaiser && f$OpenPPL_StackSize > 20 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible || nopponentsplaying > 1)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)])]) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_Overcards >= 1 &&  ![(f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 27/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_HaveOverPair &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [$AA] || [$KK] || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_OpponentIsAllin || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 64/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![([$AA] || [$KK] || f$OpenPPL_OpponentIsAllin)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 64/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ([f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 41/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_HaveBackdoorFlushDraw && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_FlushPossible)] && f$OpenPPL_BetSize < 7 && f$OpenPPL_BetSize <= 20/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_Overcards == 2)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 3 && f$OpenPPL_AmountToCall > 35/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 5/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_Have3rdOverPair &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_BotIsLastRaiser)] &&  ![(f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && nopponentsplaying == 1 && f$OpenPPL_BotIsLastRaiser)] &&  ![(f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Random <= 60) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))] && f$OpenPPL_Checks >= 1 && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlushDraw || [$AA] || [$KK] || [$QQ] || [$JJ] || [$TT] || [$99] || f$OpenPPL_HaveTopNonBoardPairedPair)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))] && f$OpenPPL_Checks >= 1 && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlushDraw)] && [($2) || ($3) || ($4) || ($5) || ($6) || ($7)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)]) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveTopPair && [($AK) || ($AQ)] && nopponentsplaying == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)])] && f$OpenPPL_AmountToCall < 53/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || [$KK] || [$AA] || f$OpenPPL_OpponentIsAllin || f$OpenPPL_AmountToCall < 36/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_Overcards == 1 && f$OpenPPL_HaveInsideStraightDraw &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 8/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [nopponentsplaying > 1 || f$OpenPPL_Folds >= 1 || f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ( ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop)] && [f$OpenPPL_Position == f$OpenPPL_Last || f$OpenPPL_Position == f$OpenPPL_Middle] &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize > 10/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Bets >= 1) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_PairOnBoard && f$OpenPPL_HaveUnderPair &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (nopponentsplaying >= 2 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_AmountToCall < 14/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (nopponentsplaying >= 2 && [f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair] &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0 || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_Overcards == 0 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0 || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_OnlyOneStraightPossible || f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 20 && f$OpenPPL_BetSize > 90/100 * f$OpenPPL_PotSize &&  ![([$AA] || [$KK] || [$QQ] || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTrips) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises <= 1] && f$OpenPPL_HaveOverPair && [($AA) || ($KK)] && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises <= 1] && f$OpenPPL_HaveOverPair && [($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_HaveInsideNutStraightDraw && [f$OpenPPL_Bets == 1 || f$OpenPPL_Bets == 0] && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc66  &&  [ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_HaveInsideNutStraightDraw && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] && nopponentsplaying > 2 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveBottomPair && f$OpenPPL_Position == f$OpenPPL_First &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || [$9] || [$8] || [$7] || [$2] || [[ /* 3c */ $3X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_3c * 1] != 0]]] || [[ /* 3s */ $3X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_3s * 1] != 0]]] || [[ /* 4c */ $4X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_4c * 1] != 0]]] || [[ /* 4s */ $4X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_4s * 1] != 0]]] || [[ /* 5c */ $5X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_5c * 1] != 0]]] || [[ /* 5s */ $5X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_5s * 1] != 0]]] || [[ /* 6c */ $6X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_6c * 1] != 0]]] || [[ /* 6s */ $6X && [f$prime_coded_hole_cards % [1 * f$PrimeCode_6s * 1] != 0]]])]) ] ? f$OpenPPL_RaiseMin :
f$myfunc66  &&  [ (nopponentsplaying > 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveBackdoorFlushDraw || f$OpenPPL_Folds >= 2)] && f$OpenPPL_BetSize > 8 && f$OpenPPL_BetSize < 20) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 47/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] && f$OpenPPL_Bets == 1 && [nopponentsplaying > 1 || f$OpenPPL_Folds >= 1] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))] && f$OpenPPL_Bets == 1 && [nopponentsplaying > 2 || f$OpenPPL_Folds >= 2] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveOverPair || f$OpenPPL_AmountToCall < 33/100 * f$OpenPPL_PotSize)] &&  ![(f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 18/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc66  &&  [ ([f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveNutFlush] && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc66  &&  [ (f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTwoPair || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND nopponentsplaying >= 3)
//
f$myfunc67  &&  [ ([f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveNutFlush]) ] ? f$OpenPPL_Call :
f$myfunc67  &&  [ ([f$OpenPPL_HaveTrips || f$OpenPPL_HaveNutStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair] && f$OpenPPL_SuitsOnBoard == 3 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? f$OpenPPL_Call :
f$myfunc67  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_SuitsOnBoard == 3 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)]) ] ? 50/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (HaveOverPair)
//
f$myfunc68  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_Bets >= 1 && f$OpenPPL_BetSize < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTopPair)
//
f$myfunc69  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 3 &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlushDraw || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BetSize > 47/100 * f$OpenPPL_PotSize || f$OpenPPL_StackSize < 25 || f$OpenPPL_Folds >= 1)]) ] ? f$OpenPPL_Call :
f$myfunc69  &&  [ ( ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall > 3 && f$OpenPPL_AmountToCall > 23/100 * f$OpenPPL_PotSize)] && nopponentsplaying <= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize <= 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc69  &&  [ ( ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin)] &&  ![(f$OpenPPL_HaveNutStraightDraw &&  ![f$OpenPPL_FlushPossible])] &&  ![(f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize || f$OpenPPL_BetSize < 40/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 41/100 * f$OpenPPL_PotSize && f$OpenPPL_StackSize > 20) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (PairOnBoard AND NOT ((board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8)) AND nopponentsplaying < 3)
//
f$myfunc70  &&  [ ([$AA] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc70  &&  [ ([$AA] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc70  &&  [ ([$AA] && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc70  &&  [ ([($KK) || ($QQ) || ($JJ) || ($TT)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc70  &&  [ ([$KK] && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 20) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (OpponentsOnFlop = 1 AND OpponentIsAllin AND (Bets = 1 OR Raises = 1) AND NOT (UserDead))
//
f$myfunc71  &&  [ (f$OpenPPL_AmountToCall < 28/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || ($A) || f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc71  &&  [ (f$OpenPPL_AmountToCall < 41/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || ($AK) || ($AQ)] &&  ![(f$OpenPPL_HaveBottomPair || f$OpenPPL_HaveUnderPair)]) ] ? f$OpenPPL_Call :
f$myfunc71  &&  [ (f$OpenPPL_AmountToCall < 33/100 * f$OpenPPL_PotSize && [$A] && f$OpenPPL_Overcards == 2) ] ? f$OpenPPL_Call :
f$myfunc71  &&  [ (f$OpenPPL_PotSize > 10 && f$OpenPPL_BetSize < 6 && [f$OpenPPL_HavePair || ($A) || f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND (hand = A K) AND PairOnBoard AND ((board = 2 2) OR (board = 3 3) OR (board = 4 4) OR (board = 5 5) OR (board = 6 6)) AND NOT (Folds >= 1))
//
f$myfunc72  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && f$OpenPPL_Raises <= 1) ] ? f$OpenPPL_RaisePot :
f$myfunc72  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && f$OpenPPL_Raises == 2 &&  ![(f$OpenPPL_OpponentIsAllin || f$OpenPPL_StackSize < 60)] && f$OpenPPL_BetSize < 50/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying > 2 AND NOT ((board = A) OR (board = K) OR (board = Q) OR (board = J) OR (board = T) OR (board = 9)) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker OR HaveTwoPair OR HaveSet OR HaveFullHouse OR HaveQuads OR HaveInsideStraightDraw OR HaveFlushDraw OR PairOnBoard OR FlushPossible))
//
f$myfunc73  &&  [ (f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (NOT (PairOnBoard OR StraightPossible) AND HaveNutFlushDraw AND HaveTopPair AND HaveBestKicker)
//
f$myfunc74  &&  [ (f$OpenPPL_Raises <= 1) ] ? f$OpenPPL_RaisePot :
f$myfunc74  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (NOT (PairOnBoard OR MoreThanOneStraightPossibleOnFlop OR (hand = A A) OR FlushPossible OR HaveSet OR HaveTwoPair OR HaveStraight OR HaveStraightDraw) AND HaveNutFlushDraw AND (HavePair OR Overcards = 2))
//
f$myfunc75  &&  [ (f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc75  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize <= 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc75  &&  [ (f$OpenPPL_TotalInvested > 75/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc75  &&  [ (f$OpenPPL_BetSize > 35/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_StackSize < 50)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (nopponentsplaying >= 3 AND HaveTopPair AND NOT (HaveBestKicker OR HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveFlushDraw OR HaveInsideStraightDraw))
//
f$myfunc76  &&  [ ( ![(f$OpenPPL_Position == f$OpenPPL_Last)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc76  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
f$myfunc76  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 8) ] ? f$OpenPPL_Call :
f$myfunc76  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize >= 8) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (nopponentsplaying <= 2 AND HaveTopPair AND HaveBestKicker AND RaisesBeforeFlop AND NOT (PairOnBoard OR StraightPossible OR FlushPossible OR BotRaisedBeforeFlop))
//
f$myfunc77  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 12) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND OpponentIsAllin AND (Bets = 1 OR Raises = 1) AND NOT (UserDead))
//
f$myfunc78  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush] && f$OpenPPL_AmountToCall < 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc78  &&  [ ([f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND (Bets = 1 OR Raises >= 1) AND NOT (HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveInsideStraightDraw OR HaveFlush OR HaveFlushDraw OR TotalInvested > 90% StackSize))
//
f$myfunc79  &&  [ (f$OpenPPL_HaveBestKicker && f$OpenPPL_BetSize > 35 && f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 52/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 52/100 * f$OpenPPL_PotSize &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)])]) ] ? f$OpenPPL_Fold :
f$myfunc79  &&  [ (f$OpenPPL_BetSize > 20 && f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 45/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveBestKicker)] &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (FlushPossible AND (hand = A A) AND HaveNutFlushDraw)
//
f$myfunc80  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaisePot :
f$myfunc80  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize >= 15/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc80  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc80  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 35/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_TotalInvested > 75/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc80  &&  [ (f$OpenPPL_Raises >= 2 &&  ![(f$OpenPPL_TotalInvested > 75/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc80  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (FlushPossible)
//
f$myfunc81  &&  [ ( ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_HaveNutFlushDraw && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_BetSize < 14/100 * f$OpenPPL_StackSize || f$OpenPPL_AmountToCall < 43/100 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
f$myfunc81  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_StraightPossible)] && [nopponentsplaying > 1 || f$OpenPPL_Folds >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_BetSize == 1 || f$OpenPPL_BetSize < 28/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc81  &&  [ ([f$OpenPPL_Raises >= 1 || f$OpenPPL_BetSize > 25/100 * f$OpenPPL_StackSize] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_AmountToCall < 31/100 * f$OpenPPL_PotSize || f$OpenPPL_AmountToCall < 8)]) ] ? f$OpenPPL_Fold :
f$myfunc81  &&  [ (f$OpenPPL_StraightPossible && [nopponentsplaying > 1 || f$OpenPPL_Folds >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_BetSize == 1 || f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize || f$OpenPPL_AmountToCall < 6)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Bets = 1 AND BetSize > 2 AND NOT (HavePair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveStraight OR HaveFlush OR HaveInsideStraightDraw OR HaveFlushDraw))
//
f$myfunc82  &&  [ (f$OpenPPL_BetSize > 33/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc82  &&  [ (f$OpenPPL_Overcards == 2 && [$A] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)])]) ] ? f$OpenPPL_Call :
f$myfunc82  &&  [ (f$OpenPPL_Overcards == 2 && [$KQ] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)])]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND HaveBestKicker AND NOT ((board = A) OR (board = K) OR (board = Q) OR (board = J) OR (board = T) OR PairOnBoard OR HaveNutFlushDraw))
//
f$myfunc83  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc83  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 20/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc83  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize >= 20/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc83  &&  [ (f$OpenPPL_Raises >= 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Board = A) AND (Have2ndOverPair OR Have2ndTopPair) AND NOT (HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveStraight OR HaveFlush OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc84  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
f$myfunc84  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Hand = A A) AND nopponentsplaying = 1 AND Raises = 1 AND NOT ((board = K) OR (board = Q) OR (board = J) OR (board = T) OR PairOnBoard OR FlushPossible))
//
f$myfunc85  &&  [ (f$OpenPPL_BetSize < 35/100 * f$OpenPPL_StackSize && [[ /* Ac */ $AX && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ac * 1] != 0]]]) ] ? f$OpenPPL_RaisePot :
f$myfunc85  &&  [ ( ![(f$OpenPPL_StraightPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc85  &&  [ (f$OpenPPL_BetSize < 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc85  &&  [ (f$OpenPPL_BetSize > 35/100 * f$OpenPPL_StackSize && [([ /* Ac */ $AX && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ac * 1] != 0]]) || ([ /* Ah */ $AX && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ah * 1] != 0]])]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTopPair AND HaveBestKicker AND ((board = A) OR (board = K) OR (board = Q)) AND NOT (PairOnBoard OR HaveSet OR HaveStraight OR HaveFlush OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc86  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_BetSize <= 40/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize || f$OpenPPL_StackSize < 50)]) ] ? f$OpenPPL_Call :
f$myfunc86  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_OpponentIsAllin || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize || f$OpenPPL_StackSize < 50)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND HaveStraightDraw AND Bets = 1 AND Raises = 0 AND NOT (HavePair OR HaveTrips OR HaveFlushDraw OR StraightPossible))
//
f$myfunc87  &&  [ (f$OpenPPL_SuitsOnBoard == 3 && f$OpenPPL_BetSize < 9/100 * f$OpenPPL_StackSize && f$OpenPPL_BetSize <= 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc87  &&  [ (f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_BetSize < 6/100 * f$OpenPPL_StackSize && f$OpenPPL_BetSize <= 38/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT ((hand = A A) OR (hand = K K) OR (hand = Q Q)) AND RaisesBeforeFlop AND Bets = 1 AND Raises = 0)
//
f$myfunc88  &&  [ (f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 25/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_HaveNutFlushDraw)] &&  ![(f$OpenPPL_HaveNutStraightDraw &&  ![f$OpenPPL_FlushPossible])] &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_StackSize)] && f$OpenPPL_BetSize > 43/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 55/100 * f$OpenPPL_PotSize && f$OpenPPL_Random <= 50) ] ? f$OpenPPL_Call :
f$myfunc88  &&  [ (f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 25/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_HaveNutFlushDraw)] &&  ![(f$OpenPPL_HaveNutStraightDraw &&  ![f$OpenPPL_FlushPossible])] &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_StackSize)] && f$OpenPPL_BetSize > 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT ((hand = A A) OR (hand = K K) OR (hand = Q Q)) AND RaisesBeforeFlop AND Raises >= 1)
//
f$myfunc89  &&  [ (f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize > 30/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] &&  ![(f$OpenPPL_HaveNutStraightDraw &&  ![f$OpenPPL_FlushPossible])] &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (((board = 5 5) OR (board = 4 4) OR (board = 3 3) OR (board = 2 2)) AND NOT (TripsOnBoard OR nopponentsplaying >= 3) AND HaveOverPair)
//
f$myfunc90  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc90  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && [($TT) || ($JJ) || ($QQ) || ($KK) || ($AA)] &&  ![(f$OpenPPL_Folds >= 2 || f$OpenPPL_Calls >= 2)] && f$OpenPPL_BetSize < 61/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc90  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && [($TT) || ($JJ) || ($QQ) || ($KK) || ($AA)] &&  ![(f$OpenPPL_Folds >= 2 || f$OpenPPL_Calls >= 2)] && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc90  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_OpponentIsAllin && [($TT) || ($JJ) || ($QQ) || ($KK) || ($AA)] && [f$OpenPPL_AmountToCall <= 15 || f$OpenPPL_AmountToCall < 47/100 * f$OpenPPL_PotSize] &&  ![(me_re_userdead)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTwoPair AND HaveTopPair AND NOT (PairOnBoard OR FlushPossible))
//
f$myfunc91  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_MoreThanOneStraightPossibleOnFlop)] && nopponentsplaying == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc91  &&  [ (f$OpenPPL_Raises == 1) ] ? f$OpenPPL_Call :
f$myfunc91  &&  [ (f$OpenPPL_Raises == 2 &&  ![(f$OpenPPL_MoreThanOneStraightPossibleOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc91  &&  [ (f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((hand = 9 9) OR (hand = T T) OR (hand = J J)) AND NOT (HaveStraight OR HaveFlush OR HaveStraightDraw OR HaveFlushDraw) AND Raises >= 1 AND StackSize > 45)
//
f$myfunc92  &&  [ (f$OpenPPL_AmountToCall > 38/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc92  &&  [ (f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc92  &&  [ (f$OpenPPL_BetSize > 62/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Bets = 1 AND (HavePair OR Overcards = 2 OR (hand = A) OR HaveBackdoorNutFlushDraw) AND Raises = 0 AND NOT (HaveNuts OR HaveFullHouse OR HaveFlush OR HaveStraight OR HaveTrips OR HaveTwoPair OR HaveSet OR HaveTopPair OR HaveOverPair) AND BetSize < 7)
//
f$myfunc93  &&  [ (f$OpenPPL_BetSize <= 20/100 * f$OpenPPL_PotSize && nopponentsplaying <= 2) ] ? f$OpenPPL_Call :
f$myfunc93  &&  [ (f$OpenPPL_BetSize <= 25/100 * f$OpenPPL_PotSize && nopponentsplaying == 1 && f$OpenPPL_Random <= 20) ] ? f$OpenPPL_RaisePot :
f$myfunc93  &&  [ (f$OpenPPL_BetSize <= 25/100 * f$OpenPPL_PotSize && nopponentsplaying == 1 && f$OpenPPL_Random <= 20) ] ? f$OpenPPL_RaiseMin :
f$myfunc93  &&  [ (f$OpenPPL_BetSize <= 25/100 * f$OpenPPL_PotSize && nopponentsplaying == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((hand = A A) OR (hand = K K) OR (hand = Q Q)) AND NOT (PairOnBoard OR FlushPossible OR HaveNutFlushDraw OR (board = K) OR (board = Q) OR (board = J) OR (board = T) OR (board = 9) OR (board = 8) OR (board = 5 6 7) OR (board = 4 5 6) OR (board = 3 4 5) OR (board = 2 3 4)))
//
f$myfunc94  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc94  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc94  &&  [ (f$OpenPPL_Raises >= 1 && [f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize < 45/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (MoreThanOneStraightPossibleOnFlop AND ((board = A K) OR (board = A Q) OR (board = A J) OR (board = K Q) OR (board = K J) OR (board = Q J) OR (board = Q T)) AND NOT (HaveOverPair OR HaveTopPair OR HaveTwoPair OR HaveSet OR HaveFlush OR HaveStraight OR HaveNutStraightDraw OR HaveFlushDraw))
//
f$myfunc95  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [nopponentsplaying >= 2 || f$OpenPPL_Folds >= 1] && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Bets = 1 OR Raises = 1) AND NOT (HaveNuts OR HaveQuads OR HaveStraightFlush OR HaveFullHouse OR HaveFlush OR HaveStraight OR Raises >= 2) AND AmountToCall < 20)
//
f$myfunc96  &&  [ (f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc96  &&  [ (f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc96  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveNutFlushDraw] &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc96  &&  [ (f$OpenPPL_AmountToCall < 37/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips)]) ] ? f$OpenPPL_Call :
f$myfunc96  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips)]) ] ? f$OpenPPL_Call :
f$myfunc96  &&  [ (f$OpenPPL_AmountToCall < 37/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_SuitsOnBoard == 2)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND PairOnBoard)
//
f$myfunc97  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND FlushPossible)
//
f$myfunc98  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [ !(f$OpenPPL_HaveFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutFlushDraw]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND StraightPossible)
//
f$myfunc99  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [ !(f$OpenPPL_HaveStraight)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize)
//
f$myfunc100  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw] &&  ![f$OpenPPL_HaveStraight]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((HaveTopPair OR Have2ndOverPair OR Have2ndTopPair) AND NOT FlushPossible)
//
f$myfunc101  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TripsOnBoard AND NOT (HaveFullHouse OR HaveSet OR HaveTrips OR HaveQuads))
//
f$myfunc102  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc102  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveStraightFlush)
//
f$myfunc103  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc103  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc103  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc103  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveQuads)
//
f$myfunc104  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc104  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc104  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc104  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind > 4 AND NutFullHouseOrFourOfAKind <= 14) AND TripsOnBoard)
//
f$myfunc105  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc105  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc105  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND TripsOnBoard)
//
f$myfunc106  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc106  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc106  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 7) AND NOT TripsOnBoard)
//
f$myfunc107  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 5) ] ? f$OpenPPL_RaisePot :
f$myfunc107  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc107  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveNutFlush)
//
f$myfunc108  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc108  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc108  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc108  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveFlush)
//
f$myfunc109  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc109  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc109  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveNutStraight AND NOT FlushPossible)
//
f$myfunc110  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc110  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc110  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc110  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc110  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveNutStraight AND FlushPossible)
//
f$myfunc111  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc111  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc111  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND NOT FlushPossible)
//
f$myfunc112  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 4) ] ? f$OpenPPL_RaisePot :
f$myfunc112  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc112  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 30 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc112  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveStraight AND FlushPossible)
//
f$myfunc113  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND FlushPossible)
//
f$myfunc113  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND StraightPossible AND NOT FlushPossible AND Opponents = 1)
//
f$myfunc114  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First) ] ? f$OpenPPL_Call :
f$myfunc114  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc114  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc114  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Random <= 50 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize > 10) ] ? f$OpenPPL_RaiseMin :
f$myfunc114  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc114  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc114  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveSet AND (FlushPossible OR StraightPossible) AND Opponents <= 2)
//
f$myfunc115  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc115  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc115  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc115  &&  [ (f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveSet AND (FlushPossible OR StraightPossible))
//
f$myfunc116  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc116  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc116  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc116  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc116  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 3 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc117  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First) ] ? f$OpenPPL_Call :
f$myfunc117  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc117  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc117  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Random <= 50 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize > 10) ] ? f$OpenPPL_RaiseMin :
f$myfunc117  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc117  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc117  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND (FlushPossible OR StraightPossible))
//
f$myfunc118  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc118  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc118  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc118  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc118  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 3 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT)) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc119  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc119  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc119  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc119  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc120  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc120  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc120  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_AmountToCall <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc120  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc120  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TripsOnBoard AND NOT (HaveFullHouse OR HaveSet OR HaveTrips))
//
f$myfunc121  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc121  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopTwoPair AND (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc122  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc122  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc122  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc122  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc123  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc123  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc123  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc123  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTwoPair AND (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc124  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc124  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc124  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc124  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc125  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc125  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc125  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Call :
f$myfunc125  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc125  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT FlushPossible AND StraightPossible AND Opponents = 1 AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ) OR (hand = TT) OR (hand = 99)))
//
f$myfunc126  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_BetSize <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND HaveFlushDraw AND FlushPossible AND NOT StraightPossible AND Opponents = 1 AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ) OR (hand = TT) OR (hand = 99)))
//
f$myfunc127  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_BetSize <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND Opponents <= 2 AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard and ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)))
//
f$myfunc128  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc128  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc128  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc128  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND (hand = Q) AND Opponents = 1 AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard and ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)))
//
f$myfunc129  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc129  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc129  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc129  &&  [ (f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc129  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND Opponents = 1 AND StraightPossible AND NOT FlushPossible)
//
f$myfunc130  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc130  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc130  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc130  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND (hand = Q) AND Opponents = 1 AND StraightPossible AND NOT FlushPossible)
//
f$myfunc131  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc131  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc131  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc131  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_AmountToCall <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc131  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND FlushPossible AND HaveNutFlushDraw)
//
f$myfunc132  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc132  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc132  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc132  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc132  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc133  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc133  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 4) ] ? f$OpenPPL_RaisePot :
f$myfunc133  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc133  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc133  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc133  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)])] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc134  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc134  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc134  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc134  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = Q) OR (hand = J)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc135  &&  [ (f$OpenPPL_PotSize <= 20 && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 25) ] ? f$OpenPPL_Fold :
f$myfunc135  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc135  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc135  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc135  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = T) OR (hand = 9) OR (hand = 8) OR (hand = 7)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND Opponents = 1)
//
f$myfunc136  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 90/100 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 10) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc137  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc137  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc137  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc137  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc137  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc138  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc138  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc138  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_StillToAct == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc138  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc138  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT FlushPossible)
//
f$myfunc139  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc139  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT FlushPossible AND StraightPossible AND Opponents = 1 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)))
//
f$myfunc140  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize <= 20 && f$OpenPPL_BetSize <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND HaveFlushDraw AND FlushPossible AND NOT StraightPossible AND Opponents = 1 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)))
//
f$myfunc141  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize <= 20 && f$OpenPPL_BetSize <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND FlushPossible AND HaveNutFlushDraw)
//
f$myfunc142  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc142  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc142  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc142  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents <= 2)
//
f$myfunc143  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc143  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc143  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc143  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Random <= 50 AND HaveTopPair AND (hand = AK) AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents = 1)
//
f$myfunc144  &&  [ (f$OpenPPL_PotSize <= 20 && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 25) ] ? f$OpenPPL_Fold :
f$myfunc144  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc144  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First) ] ? f$OpenPPL_Call :
f$myfunc144  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc144  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc144  &&  [ (f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc145  &&  [ (f$OpenPPL_PotSize <= 20 && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 25) ] ? f$OpenPPL_Fold :
f$myfunc145  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc145  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc145  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc145  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc145  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc145  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = QJ) OR (hand = KT) OR (hand = QT) OR (hand = JT)) and (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND PotSize <= 15)
//
f$myfunc146  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc146  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc146  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc146  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Opponents == 1 && f$OpenPPL_StillToAct == 0 && [$AXs] &&  ![([$6] || [$7] || [$8] || [$9])] && f$OpenPPL_BetSize <= 90/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaisePot :
f$myfunc146  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_StillToAct == 0 && [($ATs) || ($KQs) || ($QJs) || ($KTs) || ($QTs) || ($JTs)] && f$OpenPPL_BetSize <= 90/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaisePot :
f$myfunc146  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc146  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = QJ) OR (hand = KT) OR (hand = QT) OR (hand = JT)) and (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND PotSize > 15)
//
f$myfunc147  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc147  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc147  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc147  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc147  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc147  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc148  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc148  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9] || f$OpenPPL_Opponents > 2)]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc148  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc149  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc149  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc149  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc149  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 10 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc149  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9])]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc149  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9])] && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaiseMin :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc149  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc149  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc149  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9])]) ] ? f$OpenPPL_RaisePot :
f$myfunc149  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9])]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc149  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT FlushPossible)
//
f$myfunc150  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc150  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND NOT (FlushPossible OR PairOnBoard) AND HaveStraightDraw AND ((Hand = TT) OR (hand = JJ) OR (hand = QQ) OR (hand = KK)))
//
f$myfunc151  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc151  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc151  &&  [ (f$OpenPPL_Opponents == 2 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc151  &&  [ (f$OpenPPL_Opponents == 2 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc151  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc152  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc152  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc152  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc153  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc153  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc153  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HavePair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc154  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveNutFlushDraw AND NOT FlushPossible AND (hand = A suited) AND Opponents = 1)
//
f$myfunc155  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc155  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (HaveNutFlushDraw)
//
f$myfunc156  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc156  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 10) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc156  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc156  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc156  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFlushDraw AND NOT FlushPossible)
//
f$myfunc157  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc157  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc157  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndNutFlushDraw)
//
f$myfunc158  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc158  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 20 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraightDraw AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc159  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc159  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PairOnBoard && f$OpenPPL_PotSize <= 5 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc159  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PairOnBoard && f$OpenPPL_PotSize > 5 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc159  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10 &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc159  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 10 &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND NOT FlushPossible AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND ((Board = AKT) OR (board = AQT) OR (board = AJT)))
//
f$myfunc160  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 15) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc160  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND NOT FlushPossible)
//
f$myfunc161  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Overcards = 2 AND NOT (FlushPossible OR StraightPossible) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ suited) OR (hand = KQ suited)))
//
f$myfunc162  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotRaisedBeforeFlop OR BotRaisedOnFlop) AND Opponents = 1 AND OpponentIsAllin and ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = KQ) OR PairInHand OR HavePair))
//
f$myfunc163  &&  [ (f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NOT (BotsLastAction = call) AND Opponents <= 2 AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc164  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (StillToAct = 0 AND NOT BotRaisedBeforeFlop AND BotsLastAction = call AND Overcards = 2 AND Opponents = 1 AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc165  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 4 &&  ![(f$OpenPPL_BigBlind || f$OpenPPL_SmallBlind)]) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (PairInHand AND PairOnBoard AND ((Hand = TT) OR (hand = 99) OR (hand = 88) OR (hand = 77) OR (hand = 66) OR (hand = 55)) AND Opponents = 2 AND Position = Middle)
//
f$myfunc166  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc166  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 10) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (PairInHand AND PairOnBoard)
//
f$myfunc167  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairInHand AND SuitsOnBoard = 3 AND NOT (FlushPossible OR StraightPossible) AND ((Hand = TT) OR (hand = 99) OR (hand = 88) OR (hand = 77) OR (hand = 66) OR (hand = 55)) AND Opponents = 1 AND Position = Last)
//
f$myfunc168  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc168  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 10) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (StraightPossible AND NOT (FlushPossible OR (hand = 2) OR (hand = 3) OR (hand = 4) OR (hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9)or (board = 2) OR (board = 3) OR (board = 4) OR (board = 5) OR (board = 6) OR (board = 7) OR (board = 8) OR (board = 9)) AND Opponents = 1 AND StillToAct = 0)
//
f$myfunc169  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc169  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 10) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// Others
//
f$myfunc170  &&  [ ([(f$OpenPPL_HaveFlushDraw && [ !(f$OpenPPL_FlushPossible)]) || (f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_Have3rdNutFlushDraw)] && [(f$OpenPPL_PotSize * 1.5 / f$OpenPPL_AmountToCall) > ([47 - mh_nouts] / mh_nouts)]) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveStraightDraw && [(f$OpenPPL_PotSize * 1.5 / f$OpenPPL_AmountToCall) > ([47 - mh_nouts] / mh_nouts)]) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


##f$turn##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize < 17/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize < 10/100 * f$OpenPPL_StackSize && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StackSize < 7 && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 11 && f$OpenPPL_RaisesBeforeFlop && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush] &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 11 && f$OpenPPL_RaisesBeforeFlop && [ !(f$OpenPPL_NoBettingOnFlop)] && f$OpenPPL_OneCardFlushPossible && [f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 11 && f$OpenPPL_RaisesBeforeFlop &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_OneCardStraightPossible && [f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 17/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || [$AA])]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 17/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTwoPair)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 23/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_PairOnBoard)] && [ !(f$OpenPPL_FlushPossible)] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 23/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_PairOnBoard)] && [ !(f$OpenPPL_FlushPossible)] && [ !(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard && [ !(f$OpenPPL_TripsOnBoard)] && [f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)])] && [f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || ($AA)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_FlushPossible && [f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTopTwoPair]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveOverPair && [($AA) || ($KK)]) ] ? f$OpenPPL_RaiseMax :
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TripsOnBoard && [ !([f$OpenPPL_TotalInvested > 100])/100 * f$OpenPPL_StackSize] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_NutFullHouseOrFourOfAKind == 5 || f$OpenPPL_NutFullHouseOrFourOfAKind == 6)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_StackSize && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKickerOrBetter] &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)])]) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BotIsLastRaiser || f$OpenPPL_OpponentIsAllin || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && f$OpenPPL_StackSize > 15 && [f$OpenPPL_Raises >= 1 || f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 300/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? 70/100 * f$OpenPPL_PotSize :
[ ([f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_StraightPossible && f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw)] &&  ![(f$OpenPPL_Overcards == 2 && f$OpenPPL_HaveNutStraightDraw)]) ] ? f$OpenPPL_Fold :
[ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] && [$A] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize && [ !(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7 * f$PrimeCode_8) == 0))] && f$OpenPPL_HaveUnderStraight && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 42/100 * f$OpenPPL_PotSize && [ !(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveUnderStraight && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_A) == 0))] && [ !(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_PairInHand && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0))] && [ !(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_6) == 0))] && f$OpenPPL_AmountToCall < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 55/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BigBlind && f$OpenPPL_HaveNothing &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop || [$A] || f$OpenPPL_NoBettingOnFlop)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_AmountToCall > 33/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_FlushPossible && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 33/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveOverPair && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$AA] || [$KK] || [$QQ] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || f$OpenPPL_NoBettingOnFlop)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveNutStraight || f$OpenPPL_HaveFlush || f$OpenPPL_StackSize < 45 || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)] &&  ![(f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1)] && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 56/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 20) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? 75/100 * f$OpenPPL_PotSize :
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 2)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 1)]) ] ? f$OpenPPL_RaisePot :
[ ([f$OpenPPL_Opponents >= 4 || f$OpenPPL_Folds >= 3] &&  ![(f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 25/100 * f$OpenPPL_PotSize)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_QuadsOnBoard && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_StackSize > 40 && f$OpenPPL_AmountToCall > 17 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 12 && f$OpenPPL_AmountToCall > 52/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
[ ([($TT) || ($JJ) || ($QQ) || ($KK) || ($AA)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 47/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 3 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)] || f$OpenPPL_RaisesOnFlop)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HadTopPairOnFlop && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? 75/100 * f$OpenPPL_PotSize :
[ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 17 && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_QuadsOnBoard)] && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TwoPairOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveTopPair || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)])] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TwoPairOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopPair || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize > 50/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TwoPairOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopPair || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && [f$OpenPPL_Opponents >= 2 || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))] && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TwoPairOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Raises >= 1 && [f$OpenPPL_AmountToCall > 25/100 * f$OpenPPL_StackSize || f$OpenPPL_AmountToCall > 60/100 * f$OpenPPL_PotSize] &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_RaisesOnFlop && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw || f$OpenPPL_AmountToCall < 41/100 * f$OpenPPL_PotSize)] && f$OpenPPL_Random <= 85) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveNuts)] &&  ![(f$OpenPPL_TotalInvested > 85/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 25/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 5 && [f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_Overcards == 2 || f$OpenPPL_HavePair || ($A)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_RaisesOnFlop &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_BetSize > 30/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveOverPair && [($JJ) || ($QQ) || ($KK) || ($AA)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)] && f$OpenPPL_BetSize >= 40/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 60/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveOverPair && [($JJ) || ($QQ) || ($KK) || ($AA)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_Overcards == 2 && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_CalledOnFlop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70/100 * f$OpenPPL_PotSize :
[ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnTurn || f$OpenPPL_HaveBottomPair)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Raises == 1 && [f$OpenPPL_AmountToCall <= 2 || f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize] && f$OpenPPL_AmountToCall < 10/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 15 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_StackSize > 25 && [f$OpenPPL_BetSize <= 5 || f$OpenPPL_BetSize <= 33/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize < 9/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_RaisesBeforeFlop && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 51/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || f$OpenPPL_HaveTrips || f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize && f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0))] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_PairOnFlop || f$OpenPPL_CalledOnFlop || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_StackSize < 25 || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && [$AA] && f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnTurn || f$OpenPPL_PairOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)] && [f$OpenPPL_RaisesOnFlop || f$OpenPPL_BotRaisedOnFlop] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StackSize > 20 && f$OpenPPL_NoBettingOnFlop &&  ![(f$OpenPPL_HadTopPairOnFlop || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_StraightPossible && f$OpenPPL_CalledOnFlop &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)])] && f$OpenPPL_BetSize > 33/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 52/100 * f$OpenPPL_PotSize && f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_FlushPossibleOnFlop && f$OpenPPL_OneCardFlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush || f$OpenPPL_HaveTopSet || f$OpenPPL_BetSize < 34/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 3 && f$OpenPPL_BetSize > 23/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 10/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_Opponents > 1 || f$OpenPPL_Folds >= 1 || f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents <= 2 && f$OpenPPL_HaveNutFlush &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_RaisePot :
[ ([f$OpenPPL_AcePresentOnFlop || f$OpenPPL_BotRaisedOnFlop] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents >= 2 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents >= 2 && [f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair] &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0 || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_Overcards == 0 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_BetSize < 12/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_CalledOnFlop && f$OpenPPL_AcePresentOnFlop && f$OpenPPL_Bets == 1 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35) ] ? 65/100 * f$OpenPPL_PotSize :
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 20 && f$OpenPPL_BetSize > 90/100 * f$OpenPPL_PotSize &&  ![([$AA] || [$KK] || [$QQ] || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HavePair && f$OpenPPL_StraightPossible && f$OpenPPL_BetSize > 75/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_QuadsOnBoard &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_QuadsOnBoard && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_OneCardFlushPossible && f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize &&  ![f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] && f$OpenPPL_HaveTrips) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0))] && f$OpenPPL_HaveTrips && f$OpenPPL_HaveBestKicker && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && [ !(f$OpenPPL_NoBettingOnFlop)] && f$OpenPPL_BotIsLastRaiser &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_OvercardsOnBoard >= 1 && f$OpenPPL_PairInHand &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_Opponents == 1 || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Opponents >= 3 AND Position = First AND Bets = 0 AND Raises = 0 AND Random <= 75)
//
f$myfunc171  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveNutStraight) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ ([ !(f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveNutFlush) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ ([ !(f$OpenPPL_NoBettingOnFlop)] && [f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Position = First AND Bets >= 1)
//
f$myfunc172  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveNutStraight) ] ? f$OpenPPL_RaiseMax :
f$myfunc172  &&  [ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_StraightFlushPossibleByOthers)] && f$OpenPPL_HaveNutFlush && f$OpenPPL_Raises >= 1 && f$OpenPPL_TotalInvested > 50/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc172  &&  [ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_StraightFlushPossibleByOthers)] && f$OpenPPL_HaveNutFlush) ] ? f$OpenPPL_RaisePot :
f$myfunc172  &&  [ ( ![f$OpenPPL_QuadsOnBoard] &&  ![f$OpenPPL_TripsOnBoard] &&  ![f$OpenPPL_TwoPairOnBoard] && f$OpenPPL_HaveFullHouse) ] ? f$OpenPPL_RaiseMax :
f$myfunc172  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible)] && f$OpenPPL_HaveSet && f$OpenPPL_Raises >= 1 && f$OpenPPL_TotalInvested > 50/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Position = First AND Bets = 1 AND Raises = 0 AND BetSize <= 7 AND NoBettingOnFlop AND (NOT (Folds >= 1)))
//
f$myfunc173  &&  [ ( ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnFlop)] && [$8]) ] ? f$OpenPPL_RaisePot :
f$myfunc173  &&  [ (f$OpenPPL_BetSize < 32/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveBestKickerOrBetter) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Position = Last AND Bets = 1 AND Raises = 0 AND BetSize < 33% PotSize AND NoBettingOnFlop AND (NOT (Folds >= 1)))
//
f$myfunc174  &&  [ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_HaveFlushDraw) ] ? f$OpenPPL_RaiseMin :
f$myfunc174  &&  [ (f$OpenPPL_PairOnFlop &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveBestKickerOrBetter)] && [($2) || ($3) || ($4) || ($5) || ($6) || ($7)]) ] ? f$OpenPPL_RaiseMin :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Position = Last AND Bets = 1 AND Raises = 0 AND (NOT (Folds >= 1)))
//
f$myfunc175  &&  [ ( ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_HaveTrips && f$OpenPPL_Overcards == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc175  &&  [ ( ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveQuads || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_BetSize > 35/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 10 && f$OpenPPL_Overcards <= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Opponents = 1 AND NOT (PairOnBoard OR HaveFlush OR HaveStraight OR HaveSet OR HaveTwoPair))
//
f$myfunc176  &&  [ ([f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have3rdTopPair] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize > 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (StraightPossible AND AcePresentOnFlop AND NOT (PairOnBoard OR FlushPossible OR OneCardStraightPossible))
//
f$myfunc177  &&  [ ( ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveFlushDraw AND NOT (PairOnBoard OR FlushPossible OR OneCardStraightPossible))
//
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND (OnlyOneStraightPossible OR NOT StraightPossible) AND NOT (FlushPossible OR OneCardStraightPossible OR (board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8) OR RaisesOnFlop) AND Opponents < 3)
//
f$myfunc179  &&  [ ([$AA] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc179  &&  [ ([$AA] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc179  &&  [ ([$AA] && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ ([($KK) || ($QQ) || ($JJ) || ($TT)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc179  &&  [ ([$KK] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 30) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND OpponentIsAllin)
//
f$myfunc180  &&  [ (f$OpenPPL_BetSize < 26/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || ($A) || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc180  &&  [ (f$OpenPPL_BetSize < 40/100 * f$OpenPPL_PotSize && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc180  &&  [ (f$OpenPPL_PotSize > 10 && f$OpenPPL_AmountToCall < 5 && f$OpenPPL_StackSize > 30 && f$OpenPPL_HavePair) ] ? f$OpenPPL_Call :
f$myfunc180  &&  [ (f$OpenPPL_PotSize > 10 && f$OpenPPL_AmountToCall < 5 && f$OpenPPL_StackSize > 30 && [$A] && f$OpenPPL_Overcards == 2) ] ? f$OpenPPL_Call :
f$myfunc180  &&  [ (f$OpenPPL_PotSize > 18 && f$OpenPPL_AmountToCall < 5 && f$OpenPPL_StackSize > 30 && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND NOT (HaveQuads OR HaveFullHouse OR HaveFlushDraw OR HaveStraightDraw OR HaveTrips))
//
f$myfunc181  &&  [ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTopPair)] && f$OpenPPL_BetSize > 8) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Position = Last AND NOT (NoBettingOnFlop OR HavePair OR HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveStraight OR HaveFlush))
//
f$myfunc182  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND OpponentIsAllin AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND (Bets = 1 OR Raises = 1))
//
f$myfunc183  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush] && f$OpenPPL_AmountToCall < 47/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc183  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_AmountToCall < 38/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc183  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc183  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush] && f$OpenPPL_AmountToCall < 60/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc183  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (FlushPossible AND (hand = A A) AND HaveNutFlushDraw AND NOT (HaveFlush OR HaveStraight OR HaveSet OR PairOnBoard OR OneCardStraightPossible))
//
f$myfunc184  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 20/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc184  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize >= 20/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc184  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 30/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc184  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 30/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc184  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopPair AND (AcePresentOnFlop OR BotRaisedOnFlop) AND NOT (HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveInsideStraightDraw OR HaveFlush OR HaveFlushDraw) AND (RaisesBeforeFlop OR BotRaisedBeforeFlop))
//
f$myfunc185  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Opponents >= 2] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [ !(f$OpenPPL_HaveBestKicker)]) ] ? f$OpenPPL_Call :
f$myfunc185  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Opponents >= 2] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [ !(f$OpenPPL_HaveBestKicker)] && f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc185  &&  [ (f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin)]) ] ? f$OpenPPL_Fold :
f$myfunc185  &&  [ (f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_PotSize && [ !(f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin)]) ] ? f$OpenPPL_Fold :
f$myfunc185  &&  [ (f$OpenPPL_AmountToCall > 58/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopPair AND CalledOnFlop AND Bets = 1 AND Raises = 0 AND NOT (PairOnBoard OR FlushPossible OR MoreThanOneStraightPossibleOnFlop OR OneCardStraightPossible OR HaveBestKicker OR HaveTwoPair OR HaveSet OR HaveStraight OR HaveFlushDraw))
//
f$myfunc186  &&  [ (f$OpenPPL_TwoOfOneSuitPresentOnFlop && f$OpenPPL_Have2ndBestKicker && f$OpenPPL_BetSize < 34) ] ? f$OpenPPL_Call :
f$myfunc186  &&  [ (f$OpenPPL_TwoOfOneSuitPresentOnFlop && f$OpenPPL_Have2ndBestKicker && f$OpenPPL_BetSize >= 34) ] ? f$OpenPPL_Fold :
f$myfunc186  &&  [ (f$OpenPPL_Have2ndBestKicker && f$OpenPPL_BetSize < 27) ] ? f$OpenPPL_Call :
f$myfunc186  &&  [ (f$OpenPPL_Have2ndBestKicker && f$OpenPPL_BetSize > 27) ] ? f$OpenPPL_Fold :
f$myfunc186  &&  [ (f$OpenPPL_BetSize < 20) ] ? f$OpenPPL_Call :
f$myfunc186  &&  [ (f$OpenPPL_BetSize >= 20) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (PairOnBoard AND NOT (NoBettingOnFlop OR CalledOnFlop OR FlushPossible OR StraightPossible OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8)))
//
f$myfunc187  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [([ /* AsK */ $AK && [f$prime_coded_hole_cards % [1 * f$PrimeCode_As * 1] != 0]]) || ([ /* AsQ */ $AQ && [f$prime_coded_hole_cards % [1 * f$PrimeCode_As * 1] != 0]]) || ([ /* AsJ */ $AJ && [f$prime_coded_hole_cards % [1 * f$PrimeCode_As * 1] != 0]]) || ([ /* AdK */ $AK && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ad * 1] != 0]]) || ([ /* AdQ */ $AQ && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ad * 1] != 0]]) || ([ /* AdJ */ $AJ && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ad * 1] != 0]]) || f$OpenPPL_HaveOverPair]) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT (HaveFullHouse OR HaveQuads OR OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc188  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker]) ] ? f$OpenPPL_RaisePot :
f$myfunc188  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_BetSize <= 12/100 * f$OpenPPL_StackSize || f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize <= 2]) ] ? f$OpenPPL_RaisePot :
f$myfunc188  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc188  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Raises == 1 && [f$OpenPPL_BetSize < 50/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize < 50/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 1 AND Raises = 0 AND StackSize > 50 AND (BetSize = 1 OR BetSize < 17% PotSize) AND (HavePair OR (hand = A K)) AND NOT ((board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR OneCardFlushPossible OR OneCardStraightPossible OR HaveTopPair OR HaveOverPair OR HaveTwoPair OR HaveTrips OR HaveSet OR HaveFullHouse OR HaveQuads OR HaveStraight OR HaveFlush OR RaisesOnFlop OR BotRaisedOnFlop OR HaveUnderPair OR Folds >= 1))
//
f$myfunc189  &&  [ (f$OpenPPL_Random <= 75) ] ? f$OpenPPL_Call :
f$myfunc189  &&  [ (f$OpenPPL_Random <= 25) ] ? f$OpenPPL_RaisePot :
f$myfunc189  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Raise :
//
// Starting open-ended when-condition
// (Opponents = 1 AND (HadTopPairOnFlop OR HadOverpairOnFlop) AND OvercardsOnBoard = 1 AND ((board = A) OR (board = K) OR (board = Q) OR (board = J)) AND NOT (HaveTwoPair OR HaveTrips OR HaveSet OR HaveFullHouse OR HaveQuads OR HaveFlush OR HaveStraight OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc190  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70/100 * f$OpenPPL_PotSize :
f$myfunc190  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
f$myfunc190  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTwoPair AND HaveTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc191  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_BetSize > 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc191  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_HaveTopTwoPair) ] ? f$OpenPPL_RaisePot :
f$myfunc191  &&  [ (f$OpenPPL_Raises == 1) ] ? f$OpenPPL_Call :
f$myfunc191  &&  [ (f$OpenPPL_Raises == 2 && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (FlushPossible AND HaveTopPair AND StackSize > 20 AND NOT (HaveBestKicker OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveFlush OR HaveStraight OR HaveTwoPair))
//
f$myfunc192  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize >= 43/100 * f$OpenPPL_PotSize && [f$OpenPPL_Folds >= 2 || f$OpenPPL_Opponents >= 2]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopPair AND HaveStraightDraw AND NOT (FlushPossible OR PairOnBoard OR HadTopPairOnFlop OR RaisesOnFlop OR HaveSet))
//
f$myfunc193  &&  [ (f$OpenPPL_CalledOnFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize < 51/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndTopPair AND HaveFlushDraw AND Bets = 1 AND Raises = 0 AND StackSize > 35)
//
f$myfunc194  &&  [ (f$OpenPPL_BetSize < 34/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc194  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc194  &&  [ (f$OpenPPL_Overcards == 1 && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc194  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 1 && f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND OneCardStraightPossible AND Opponents = 1)
//
f$myfunc195  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc195  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 24/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Bets = 1 OR Raises = 1) AND NOT (HaveNuts OR HaveQuads OR HaveStraightFlush OR HaveFullHouse OR HaveFlush OR HaveStraight) AND AmountToCall < 25)
//
f$myfunc196  &&  [ (f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveNutFlushDraw] &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible] && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_PotSize && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HavePair AND HaveFlushDraw AND RaisesOnFlop AND NOT (HaveTopPair OR HaveOverPair OR PairOnBoard OR FlushPossible))
//
f$myfunc197  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (PairOnBoard AND HaveStraight AND NOT (FlushPossible OR HaveUnderStraight OR OneCardStraightPossible) AND StackSize > 45)
//
f$myfunc198  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall > 41/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc198  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Have2ndNutStraight AND PairInHand AND OneCardStraightPossible AND NOT (PairOnBoard OR FlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A K T) OR (board = K Q J) OR (board = K Q T) OR (board = K Q 9) OR (board = K J T) OR (board = K J 9) OR (board = Q J T) OR (board = Q J 9) OR (board = Q J 8) OR (board = Q T 9) OR (board = J T 9) OR (board = T 9 8) OR (board = 9 8 7)))
//
f$myfunc199  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc199  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (OneCardStraightPossible AND Have2ndNutStraight AND (NOT FlushPossible))
//
f$myfunc200  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND BotRaisedOnFlop AND Bets = 0 AND Raises = 0 AND NOT (CalledOnFlop OR StackSize < 50))
//
f$myfunc201  &&  [ ( ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND CalledOnFlop AND Position = Last AND Checks = 1 AND Bets = 0 AND Raises = 0 AND (NOT (StackSize < 50)))
//
f$myfunc202  &&  [ ( ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Random <= 50) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Opponents <= 2 AND NoBettingOnFlop AND Bets = 0 AND Raises = 0 AND (NOT (StackSize < 50)))
//
f$myfunc203  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_MoreThanOneStraightPossibleOnTurn)] && f$OpenPPL_Random <= 50) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND NOT (NoBettingOnFlop OR CalledOnFlop OR StackSize < 50))
//
f$myfunc204  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 25 &&  ![(f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlushDraw)]) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// Others
//
f$myfunc205  &&  [ (f$OpenPPL_HaveNothing && f$OpenPPL_Raises >= 1 && f$OpenPPL_StackSize > 31 &&  ![(f$OpenPPL_TotalInvested > 145/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveTopNonBoardPairedPair] &&  ![(nopponentsplaying >= 2 && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall < 33/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc205  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1)] && f$OpenPPL_HaveFullHouse) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_TotalInvested > 300/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ ([f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 1] &&  ![(f$OpenPPL_Position == f$OpenPPL_Last)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && nopponentsplaying >= 2) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ ([f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? 70/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ ([f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [[ ( ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ] ? me_st_userlowturn_1 : 0] && 0 ? 0 :
f$myfunc205  &&  [[ (f$OpenPPL_TwoPairOnBoard) ] ? me_st_user2pb_1 : 0] && 0 ? 0 :
f$myfunc205  &&  [ (me_re_userminbettor && nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_CalledOnFlop &&  ![(f$OpenPPL_RaisesOnFlop)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize == 1 && f$OpenPPL_Random >= 60) ] ? 80/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [[ (f$OpenPPL_OpponentIsAllin &&  ![(me_re_userdead || me_re_userdead2)]) ] ? me_st_userdead3_1 : 0] && 0 ? 0 :
f$myfunc205  &&  [[ (nopponentsplaying == 1 && f$OpenPPL_OneCardStraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? me_st_userturngood_1 : 0] && 0 ? 0 :
f$myfunc205  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFullHouse && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveQuads || nopponentsplaying > 2 || f$OpenPPL_Folds > 2 || f$OpenPPL_BetSize > 46/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize > 35/100 * f$OpenPPL_StackSize || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T * f$PrimeCode_T) == 0)])]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveNutFlush && f$OpenPPL_Raises <= 1 &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_StraightFlushPossibleByOthers && f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_Have2ndNutFlush && f$OpenPPL_OneCardFlushPossible && f$OpenPPL_Raises == 1 && nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 34/100 * f$OpenPPL_PotSize &&  ![(me_re_userdead || me_re_userdead2)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StackSize < 40 || f$OpenPPL_BetSize < 12)] && f$OpenPPL_AmountToCall < 40) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StackSize < 40 || f$OpenPPL_BetSize < 35 || f$OpenPPL_BetSize > 50/100 * f$OpenPPL_StackSize)] && [f$OpenPPL_OnlyOneStraightPossible ||  !(f$OpenPPL_StraightPossible)] && f$OpenPPL_AmountToCall < 50) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ ([$AA] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_Raises >= 2)] && [f$OpenPPL_AmountToCall < 20 || f$OpenPPL_AmountToCall < 47/100 * f$OpenPPL_PotSize] &&  ![(nopponentsplaying >= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises >= 1)] &&  ![(f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveInsideStraightDraw && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 42/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_OnlyOneStraightPossible ||  !(f$OpenPPL_StraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopPair && nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Checks == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_RaisesOnFlop || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StackSize > 20) ] ? 70/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ ([f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] && nopponentsplaying == 1 && f$OpenPPL_Folds == 0 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_RaisesOnFlop || f$OpenPPL_CalledOnFlop || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)])] && f$OpenPPL_AmountToCall < 23/100 * f$OpenPPL_StackSize && f$OpenPPL_AmountToCall < 36/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ ([f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] && nopponentsplaying <= 2 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Checks == 2 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_BotsActionsOnFlop == 1 && f$OpenPPL_StackSize > 20 && f$OpenPPL_PotSize < 10) ] ? 70/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || f$OpenPPL_Folds > 1 || nopponentsplaying > 2)] && f$OpenPPL_AmountToCall < 38/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_Overcards >= 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 8/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ ([f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && nopponentsplaying == 1 && f$OpenPPL_OpponentsOnFlop == 1 &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_CalledOnFlop || f$OpenPPL_RaisesOnFlop)] && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_BotsActionsOnThisRound == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_SuitsOnFlop == 2 && f$OpenPPL_AmountToCall < 42/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)])]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ ([($AA) || ($KK) || ($QQ)] && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OpponentsOnFlop > 2 || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)])] && nopponentsplaying == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ ([($AA) || ($KK) || ($QQ)] && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OpponentsOnFlop > 2 || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)])] && nopponentsplaying == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_AmountToCall < 35/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMin :
f$myfunc205  &&  [ (f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Raise && f$OpenPPL_BotsActionsOnFlop == 1 &&  ![(f$OpenPPL_CalledOnFlop)] && me_re_user2set && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && nopponentsplaying <= 2 && f$OpenPPL_HaveTopPair) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ (f$OpenPPL_Overcards == 0 && f$OpenPPL_BetSize > 2 && f$OpenPPL_AmountToCall > 20/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_PairOnFlop && [f$OpenPPL_AcePresentOnFlop || f$OpenPPL_KingPresentOnFlop || f$OpenPPL_QueenPresentOnFlop] && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Bet && f$OpenPPL_SuitsOnFlop == 3 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw)] &&  ![(f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 16/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_UncoordinatedFlop && nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Folds == 0 && f$OpenPPL_CalledOnFlop && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_BotRaisedOnFlop || f$OpenPPL_NoBettingOnFlop)] && f$OpenPPL_PotSize > 20/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc205  &&  [ (nopponentsplaying == 1 && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 41/100 * f$OpenPPL_PotSize && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0))] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_RaisesOnFlop || f$OpenPPL_Folds >= 1)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 2 || f$OpenPPL_AmountToCall > 40)] &&  ![(f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 55/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 28)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_OpponentsOnFlop >= 3 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 15 &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_RaisesOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Calls == 1 &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_AmountToCall < 15 || f$OpenPPL_AmountToCall < 23/100 * f$OpenPPL_PotSize || f$OpenPPL_StackSize < 30 || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKicker)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_FlushPossible && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 58/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 30 && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_StackSize < 45)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_BetSize == 1 || f$OpenPPL_AmountToCall < 24/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_FlushPossible && nopponentsplaying >= 2 && f$OpenPPL_Raises >= 1 && f$OpenPPL_Calls >= 1 && f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 9 &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_StraightPossible && nopponentsplaying >= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw)] &&  ![(f$OpenPPL_Overcards == 2 && f$OpenPPL_HaveNutStraightDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveOverPair &&  ![([$QQ] || [$KK] || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_ThreeCardStraightOnBoard || f$OpenPPL_NoBettingOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveOverPair &&  ![([$QQ] || [$KK] || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_ThreeCardStraightOnBoard || f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveOverPair &&  ![([$QQ] || [$KK] || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_ThreeCardStraightOnBoard || f$OpenPPL_NoBettingOnFlop)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_Raises >= 1 && f$OpenPPL_HaveOverPair &&  ![([$QQ] || [$KK] || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_ThreeCardStraightOnBoard || f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] && [$A] && nopponentsplaying <= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Folds == 0 && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7 * f$PrimeCode_8) == 0))] && f$OpenPPL_HaveUnderStraight && nopponentsplaying == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 42/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveUnderStraight && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_A) == 0))] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_PairInHand && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0))] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || f$OpenPPL_Raises >= 2)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_6) == 0))] && f$OpenPPL_AmountToCall < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 55/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0))] && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 47/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_MoreThanOneStraightPossibleOnTurn || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_InBigBlind && f$OpenPPL_HaveNothing &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop || [$A] || f$OpenPPL_NoBettingOnFlop)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_AmountToCall > 33/100 * f$OpenPPL_PotSize || f$OpenPPL_Raises >= 2)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_FlushPossible && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 33/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveOverPair && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$AA] || [$KK] || [$QQ] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || f$OpenPPL_NoBettingOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveNutStraight || f$OpenPPL_HaveFlush || f$OpenPPL_StackSize < 45 || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)] &&  ![(f$OpenPPL_OpponentIsAllin && nopponentsplaying == 1)] && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 56/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 20) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ ( ![(f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Raise)] &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize < 26/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 2)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 1)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ ([nopponentsplaying >= 4 || f$OpenPPL_Folds >= 3] &&  ![(f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 25/100 * f$OpenPPL_PotSize)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_QuadsOnBoard && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_StackSize > 40 && f$OpenPPL_AmountToCall > 17 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 12 && f$OpenPPL_AmountToCall > 52/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ ([($TT) || ($JJ) || ($QQ) || ($KK) || ($AA)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 47/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 3 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)] || f$OpenPPL_RaisesOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HadTopPairOnFlop && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 17 && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7 * f$PrimeCode_7) == 0))] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)])] && nopponentsplaying == 1 && [$KK] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 46/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_QuadsOnBoard)] && f$OpenPPL_AmountToCall > 25/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_TwoPairOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveTopPair || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)])] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_TwoPairOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopPair || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize > 50/100 * f$OpenPPL_PotSize &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_TwoPairOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopPair || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && [nopponentsplaying >= 2 || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))] && f$OpenPPL_Raises >= 1 &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_TwoPairOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Raises >= 1 && [f$OpenPPL_AmountToCall > 25/100 * f$OpenPPL_StackSize || f$OpenPPL_AmountToCall > 60/100 * f$OpenPPL_PotSize] &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutFlushDraw || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_RaisesOnFlop && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw || f$OpenPPL_AmountToCall < 41/100 * f$OpenPPL_PotSize)] && f$OpenPPL_Random <= 85) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveNuts)] &&  ![(f$OpenPPL_TotalInvested > 85/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 25/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 5 && [f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_Overcards == 2 || f$OpenPPL_HavePair || ($A)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (nopponentsplaying == 1 && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_RaisesOnFlop &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_BetSize > 30/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (nopponentsplaying == 1 && f$OpenPPL_HaveOverPair && [($JJ) || ($QQ) || ($KK) || ($AA)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)] && f$OpenPPL_BetSize >= 40/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 55/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_OneCardStraightPossible && f$OpenPPL_RaisesOnFlop && f$OpenPPL_BetSize > 16)] &&  ![(f$OpenPPL_OneCardStraightPossible && f$OpenPPL_BetSize > 22)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (nopponentsplaying == 1 && f$OpenPPL_HaveOverPair && [($JJ) || ($QQ) || ($KK) || ($AA)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_Overcards == 2 && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_CalledOnFlop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair && nopponentsplaying <= 2 && f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnTurn || f$OpenPPL_HaveBottomPair)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Raises == 1 && [f$OpenPPL_AmountToCall <= 2 || f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize] && f$OpenPPL_AmountToCall < 10/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 15 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_StackSize > 25 && [f$OpenPPL_BetSize <= 5 || f$OpenPPL_BetSize <= 33/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize < 9/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_RaisesBeforeFlop && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_PairOnBoard && nopponentsplaying <= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 51/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 25/100 * f$OpenPPL_StackSize && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || f$OpenPPL_HaveTrips || f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 15/100 * f$OpenPPL_StackSize && f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0))] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_PairOnFlop || f$OpenPPL_CalledOnFlop || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_StackSize < 25 || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)] && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (nopponentsplaying == 1 && [$AA] && f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnTurn || f$OpenPPL_PairOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)] && [f$OpenPPL_RaisesOnFlop || f$OpenPPL_BotRaisedOnFlop] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopPair && nopponentsplaying == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StackSize > 20 && f$OpenPPL_NoBettingOnFlop &&  ![(f$OpenPPL_HadTopPairOnFlop || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_StraightPossible && f$OpenPPL_CalledOnFlop &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)])] && f$OpenPPL_BetSize > 33/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 52/100 * f$OpenPPL_PotSize && f$OpenPPL_StackSize > 35 && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_FlushPossibleOnFlop && f$OpenPPL_OneCardFlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush || f$OpenPPL_HaveTopSet || f$OpenPPL_BetSize < 34/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 3 && f$OpenPPL_BetSize > 23/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 10/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [nopponentsplaying > 1 || f$OpenPPL_Folds >= 1 || f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_PairOnBoard && nopponentsplaying <= 2 && f$OpenPPL_HaveNutFlush &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)])]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ ([f$OpenPPL_AcePresentOnFlop || f$OpenPPL_BotRaisedOnFlop] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (nopponentsplaying >= 2 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (nopponentsplaying >= 2 && [f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair] &&  ![(f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0 || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_Overcards == 0 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_BetSize < 12/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_CalledOnFlop && f$OpenPPL_AcePresentOnFlop && f$OpenPPL_Bets == 1 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (nopponentsplaying == 1 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35) ] ? 65/100 * f$OpenPPL_PotSize :
f$myfunc205  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 20 && f$OpenPPL_BetSize > 90/100 * f$OpenPPL_PotSize &&  ![([$AA] || [$KK] || [$QQ] || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_StraightPossible && f$OpenPPL_BetSize > 75/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_QuadsOnBoard &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_QuadsOnBoard && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (f$OpenPPL_OneCardFlushPossible && f$OpenPPL_BetSize > 15/100 * f$OpenPPL_StackSize &&  ![f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] && f$OpenPPL_HaveTrips) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0))] && f$OpenPPL_HaveTrips && f$OpenPPL_HaveBestKicker && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc205  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_First &&  ![(f$OpenPPL_NoBettingOnFlop)] && f$OpenPPL_BotIsLastRaiser &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
f$myfunc205  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_OvercardsOnBoard >= 1 && f$OpenPPL_PairInHand &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || nopponentsplaying == 1 || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (nopponentsplaying >= 3 AND Position = First AND Bets = 0 AND Raises = 0 AND Random <= 75)
//
f$myfunc206  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveNutStraight) ] ? f$OpenPPL_Call :
f$myfunc206  &&  [ ( ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveNutFlush) ] ? f$OpenPPL_Call :
f$myfunc206  &&  [ ( ![(f$OpenPPL_NoBettingOnFlop)] && [f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying >= 2 AND Position = First AND Bets >= 1)
//
f$myfunc207  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveNutStraight) ] ? f$OpenPPL_RaiseMax :
f$myfunc207  &&  [ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_StraightFlushPossibleByOthers)] && f$OpenPPL_HaveNutFlush && f$OpenPPL_Raises >= 1 && f$OpenPPL_TotalInvested > 50/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc207  &&  [ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_StraightFlushPossibleByOthers)] && f$OpenPPL_HaveNutFlush) ] ? f$OpenPPL_RaisePot :
f$myfunc207  &&  [ ( ![f$OpenPPL_QuadsOnBoard] &&  ![f$OpenPPL_TripsOnBoard] &&  ![f$OpenPPL_TwoPairOnBoard] && f$OpenPPL_HaveFullHouse) ] ? f$OpenPPL_RaiseMax :
f$myfunc207  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible)] && f$OpenPPL_HaveSet && f$OpenPPL_Raises >= 1 && f$OpenPPL_TotalInvested > 50/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND Position = First AND Bets = 1 AND Raises = 0 AND BetSize <= 7 AND NoBettingOnFlop AND NOT (Folds >= 1))
//
f$myfunc208  &&  [ ( ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnFlop)] && [$8]) ] ? f$OpenPPL_RaisePot :
f$myfunc208  &&  [ (f$OpenPPL_BetSize < 32/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveBestKickerOrBetter) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND Position = Last AND Bets = 1 AND Raises = 0 AND BetSize < 33% PotSize AND NoBettingOnFlop AND NOT (Folds >= 1))
//
f$myfunc209  &&  [ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_HaveFlushDraw) ] ? f$OpenPPL_RaiseMin :
f$myfunc209  &&  [ (f$OpenPPL_PairOnFlop &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveBestKickerOrBetter)] && [($2) || ($3) || ($4) || ($5) || ($6) || ($7)]) ] ? f$OpenPPL_RaiseMin :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND Position = Last AND Bets = 1 AND Raises = 0 AND NOT (Folds >= 1))
//
f$myfunc210  &&  [ ( ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_HaveTrips && f$OpenPPL_Overcards == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc210  &&  [ ( ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveQuads || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_BetSize > 35/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 10 && f$OpenPPL_Overcards <= 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND NOT (PairOnBoard OR HaveFlush OR HaveStraight OR HaveSet OR HaveTwoPair))
//
f$myfunc211  &&  [ ([f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have3rdTopPair] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize > 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (StraightPossible AND AcePresentOnFlop AND NOT (PairOnBoard OR FlushPossible OR OneCardStraightPossible))
//
f$myfunc212  &&  [ ( ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_BetSize == 1)]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveFlushDraw AND NOT (PairOnBoard OR FlushPossible OR OneCardStraightPossible))
//
f$myfunc213  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND (OnlyOneStraightPossible OR NOT StraightPossible) AND NOT (FlushPossible OR OneCardStraightPossible OR (board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8) OR RaisesOnFlop) AND nopponentsplaying < 3)
//
f$myfunc214  &&  [ ([$AA] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc214  &&  [ ([$AA] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc214  &&  [ ([$AA] && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc214  &&  [ ([($KK) || ($QQ) || ($JJ) || ($TT)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc214  &&  [ ([$KK] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 30) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND OpponentIsAllin AND (Bets = 1 OR Raises = 1) AND NOT (UserDead OR UserDead2))
//
f$myfunc215  &&  [ (f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || ($A) || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc215  &&  [ (f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_PotSize && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc215  &&  [ (f$OpenPPL_PotSize > 10 && f$OpenPPL_AmountToCall < 5 && f$OpenPPL_StackSize > 30 && f$OpenPPL_HavePair) ] ? f$OpenPPL_Call :
f$myfunc215  &&  [ (f$OpenPPL_PotSize > 10 && f$OpenPPL_AmountToCall < 5 && f$OpenPPL_StackSize > 30 && [$A] && f$OpenPPL_Overcards == 2) ] ? f$OpenPPL_Call :
f$myfunc215  &&  [ (f$OpenPPL_PotSize > 18 && f$OpenPPL_AmountToCall < 5 && f$OpenPPL_StackSize > 30 && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND NOT (HaveQuads OR HaveFullHouse OR HaveFlushDraw OR HaveStraightDraw OR HaveTrips))
//
f$myfunc216  &&  [ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTopPair)] && f$OpenPPL_BetSize > 8) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND Position = Last AND NOT (NoBettingOnFlop OR HavePair OR HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveStraight OR HaveFlush))
//
f$myfunc217  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND OpponentIsAllin AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR UserDead OR UserDead2) AND (Bets = 1 OR Raises = 1))
//
f$myfunc218  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_AmountToCall < 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc218  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_AmountToCall < 44/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc218  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_AmountToCall < 33/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc218  &&  [ ([f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush] && f$OpenPPL_AmountToCall < 44/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc218  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc218  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_AmountToCall < 31/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc218  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush] && f$OpenPPL_AmountToCall < 60/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc218  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (FlushPossible AND (hand = A A) AND HaveNutFlushDraw AND NOT (HaveFlush OR HaveStraight OR HaveSet OR PairOnBoard OR OneCardStraightPossible))
//
f$myfunc219  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 20/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc219  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize >= 20/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc219  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 30/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc219  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 30/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc219  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopPair AND (AcePresentOnFlop OR BotRaisedOnFlop) AND NOT (HaveTwoPair OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveInsideStraightDraw OR HaveFlush OR HaveFlushDraw) AND (RaisesBeforeFlop OR BotRaisedBeforeFlop))
//
f$myfunc220  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || nopponentsplaying >= 2] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveBestKicker)]) ] ? f$OpenPPL_Call :
f$myfunc220  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || nopponentsplaying >= 2] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveBestKicker)] && f$OpenPPL_BetSize < 41/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc220  &&  [ (f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin)]) ] ? f$OpenPPL_Fold :
f$myfunc220  &&  [ (f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveBestKicker)] &&  ![(nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin)]) ] ? f$OpenPPL_Fold :
f$myfunc220  &&  [ (f$OpenPPL_AmountToCall > 58/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopPair AND CalledOnFlop AND Bets = 1 AND Raises = 0 AND NOT (PairOnBoard OR FlushPossible OR MoreThanOneStraightPossibleOnFlop OR OneCardStraightPossible OR HaveBestKicker OR HaveTwoPair OR HaveSet OR HaveStraight OR HaveFlushDraw))
//
f$myfunc221  &&  [ (f$OpenPPL_TwoOfOneSuitPresentOnFlop && f$OpenPPL_Have2ndBestKicker && f$OpenPPL_BetSize < 34) ] ? f$OpenPPL_Call :
f$myfunc221  &&  [ (f$OpenPPL_TwoOfOneSuitPresentOnFlop && f$OpenPPL_Have2ndBestKicker && f$OpenPPL_BetSize >= 34) ] ? f$OpenPPL_Fold :
f$myfunc221  &&  [ (f$OpenPPL_Have2ndBestKicker && f$OpenPPL_BetSize < 27) ] ? f$OpenPPL_Call :
f$myfunc221  &&  [ (f$OpenPPL_Have2ndBestKicker && f$OpenPPL_BetSize > 27) ] ? f$OpenPPL_Fold :
f$myfunc221  &&  [ (f$OpenPPL_BetSize < 20) ] ? f$OpenPPL_Call :
f$myfunc221  &&  [ (f$OpenPPL_BetSize >= 20) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (PairOnBoard AND NOT (NoBettingOnFlop OR CalledOnFlop OR FlushPossible OR StraightPossible OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8)))
//
f$myfunc222  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [([ /* AsK */ $AK && [f$prime_coded_hole_cards % [1 * f$PrimeCode_As * 1] != 0]]) || ([ /* AsQ */ $AQ && [f$prime_coded_hole_cards % [1 * f$PrimeCode_As * 1] != 0]]) || ([ /* AsJ */ $AJ && [f$prime_coded_hole_cards % [1 * f$PrimeCode_As * 1] != 0]]) || ([ /* AdK */ $AK && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ad * 1] != 0]]) || ([ /* AdQ */ $AQ && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ad * 1] != 0]]) || ([ /* AdJ */ $AJ && [f$prime_coded_hole_cards % [1 * f$PrimeCode_Ad * 1] != 0]]) || f$OpenPPL_HaveOverPair]) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT (HaveFullHouse OR HaveQuads OR OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc223  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker]) ] ? f$OpenPPL_RaisePot :
f$myfunc223  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_BetSize <= 12/100 * f$OpenPPL_StackSize || f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize <= 2]) ] ? f$OpenPPL_RaisePot :
f$myfunc223  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc223  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Raises == 1 && [f$OpenPPL_BetSize < 50/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize < 50/100 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND Bets = 1 AND Raises = 0 AND StackSize > 50 AND (BetSize = 1 OR BetSize < 17% PotSize) AND (HavePair OR (hand = A K)) AND NOT ((board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR OneCardFlushPossible OR OneCardStraightPossible OR HaveTopPair OR HaveOverPair OR HaveTwoPair OR HaveTrips OR HaveSet OR HaveFullHouse OR HaveQuads OR HaveStraight OR HaveFlush OR RaisesOnFlop OR BotRaisedOnFlop OR HaveUnderPair OR Folds >= 1))
//
f$myfunc224  &&  [ (f$OpenPPL_Random <= 75) ] ? f$OpenPPL_Call :
f$myfunc224  &&  [ (f$OpenPPL_Random <= 25) ] ? f$OpenPPL_RaisePot :
f$myfunc224  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Raise :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND (HadTopPairOnFlop OR HadOverpairOnFlop) AND OvercardsOnBoard = 1 AND ((board = A) OR (board = K) OR (board = Q) OR (board = J)) AND NOT (HaveTwoPair OR HaveTrips OR HaveSet OR HaveFullHouse OR HaveQuads OR HaveFlush OR HaveStraight OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc225  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70/100 * f$OpenPPL_PotSize :
f$myfunc225  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
f$myfunc225  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTwoPair AND HaveTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc226  &&  [ (f$OpenPPL_Raises == 1 && nopponentsplaying == 1 && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_BetSize > 35/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc226  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_HaveTopTwoPair) ] ? f$OpenPPL_RaisePot :
f$myfunc226  &&  [ (f$OpenPPL_Raises == 1) ] ? f$OpenPPL_Call :
f$myfunc226  &&  [ (f$OpenPPL_Raises == 2 && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (FlushPossible AND HaveTopPair AND StackSize > 20 AND NOT (HaveBestKicker OR HaveSet OR HaveTrips OR HaveFullHouse OR HaveQuads OR HaveFlush OR HaveStraight OR HaveTwoPair))
//
f$myfunc227  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize >= 43/100 * f$OpenPPL_PotSize && [f$OpenPPL_Folds >= 2 || nopponentsplaying >= 2]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopPair AND HaveStraightDraw AND NOT (FlushPossible OR PairOnBoard OR HadTopPairOnFlop OR RaisesOnFlop OR HaveSet))
//
f$myfunc228  &&  [ (f$OpenPPL_CalledOnFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize < 51/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndTopPair AND HaveFlushDraw AND Bets = 1 AND Raises = 0 AND StackSize > 35 AND NOT (OneCardFlushPossible))
//
f$myfunc229  &&  [ (f$OpenPPL_BetSize < 34/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc229  &&  [ (nopponentsplaying == 1 && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc229  &&  [ (f$OpenPPL_Overcards == 1 && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc229  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Overcards == 1 && f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND OneCardStraightPossible AND nopponentsplaying = 1)
//
f$myfunc230  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc230  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall < 24/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Bets = 1 OR Raises = 1) AND NOT (HaveNuts OR HaveQuads OR HaveStraightFlush OR HaveFullHouse OR HaveFlush OR HaveStraight) AND AmountToCall < 25 AND (nopponentsplaying < 3 OR BetSize < 12))
//
f$myfunc231  &&  [ (f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc231  &&  [ (f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize && [f$OpenPPL_HavePair || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveNutFlushDraw] &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc231  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc231  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible] && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet]) ] ? f$OpenPPL_Call :
f$myfunc231  &&  [ (f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_PotSize && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HavePair AND HaveFlushDraw AND RaisesOnFlop AND NOT (HaveTopPair OR HaveOverPair OR PairOnBoard OR FlushPossible))
//
f$myfunc232  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc232  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (PairOnBoard AND HaveStraight AND NOT (FlushPossible OR HaveUnderStraight OR OneCardStraightPossible) AND StackSize > 45)
//
f$myfunc233  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall > 41/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc233  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Have2ndNutStraight AND PairInHand AND OneCardStraightPossible AND NOT (PairOnBoard OR FlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A K T) OR (board = K Q J) OR (board = K Q T) OR (board = K Q 9) OR (board = K J T) OR (board = K J 9) OR (board = Q J T) OR (board = Q J 9) OR (board = Q J 8) OR (board = Q T 9) OR (board = J T 9) OR (board = T 9 8) OR (board = 9 8 7)))
//
f$myfunc234  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc234  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (OneCardStraightPossible AND Have2ndNutStraight AND NOT (FlushPossible))
//
f$myfunc235  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && nopponentsplaying <= 2) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND BotRaisedOnFlop AND Bets = 0 AND Raises = 0 AND NOT (CalledOnFlop OR StackSize < 50))
//
f$myfunc236  &&  [ ( ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND CalledOnFlop AND Position = Last AND Checks = 1 AND Bets = 0 AND Raises = 0 AND NOT (StackSize < 50))
//
f$myfunc237  &&  [ ( ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Random <= 50) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (nopponentsplaying <= 2 AND NoBettingOnFlop AND Bets = 0 AND Raises = 0 AND NOT (StackSize < 50))
//
f$myfunc238  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_MoreThanOneStraightPossibleOnTurn)] && f$OpenPPL_Random <= 50) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND NOT (NoBettingOnFlop OR CalledOnFlop OR StackSize < 50))
//
f$myfunc239  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 25 &&  ![(f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlushDraw)]) ] ? 70/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Raises = 1 AND NOT (HaveNuts OR HaveFullHouse OR HaveQuads OR HaveStraightFlush))
//
f$myfunc240  &&  [ (f$OpenPPL_OneCardFlushPossible && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush || f$OpenPPL_Have3rdNutFlush)] && f$OpenPPL_AmountToCall < 15/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc240  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutStraight)] && f$OpenPPL_AmountToCall < 15/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc240  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutStraight || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)])] && f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc240  &&  [ ( ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] && f$OpenPPL_AmountToCall < 18/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc240  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] && f$OpenPPL_AmountToCall < 13/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc240  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_AmountToCall < 9/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND PairOnBoard)
//
f$myfunc241  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize)
//
f$myfunc242  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((HaveTopPair OR Have2ndOverPair OR Have2ndTopPair) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc243  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TripsOnBoard AND NOT (HaveFullHouse OR HaveSet OR HaveTrips OR HaveQuads) AND NOT PairOnBoard)
//
f$myfunc244  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc244  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TwoPairOnBoard AND (HaveOverPair OR HaveTopPair OR HaveFullHouse))
//
f$myfunc245  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc245  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TwoPairOnBoard AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveFullHouse OR HaveSet OR HaveTrips OR HaveQuads))
//
f$myfunc246  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc246  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveSet AND TotalInvested >= 66% StackSize AND BotsLastAction = raise)
//
f$myfunc247  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraightFlush)
//
f$myfunc248  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc248  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc248  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc248  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveQuads)
//
f$myfunc249  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc249  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc249  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc249  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind > 4 AND NutFullHouseOrFourOfAKind <= 14) AND TripsOnBoard)
//
f$myfunc250  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc250  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc250  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND TripsOnBoard)
//
f$myfunc251  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc251  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc251  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 7) AND NOT TripsOnBoard)
//
f$myfunc252  &&  [ (f$OpenPPL_BotRaisedOnTurn && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc252  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc252  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc252  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveNutFlush)
//
f$myfunc253  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc253  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFlush AND NOT (OneCardFlushPossible OR PairOnBoard))
//
f$myfunc254  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc254  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc254  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc255  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc255  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc255  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc255  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveNutStraight AND NOT FlushPossible)
//
f$myfunc256  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc256  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc256  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc256  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveNutStraight AND FlushPossible AND Opponents <= 2)
//
f$myfunc257  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc257  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND NOT FlushPossible)
//
f$myfunc258  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc258  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc258  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_PotSize <= 30 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc258  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND FlushPossible AND NOT OneCardFlushPossible)
//
f$myfunc259  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc259  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc259  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND StraightPossible AND NOT (FlushPossibleOnTurn OR StraightPossibleOnTurn OR OneCardStraightPossible) AND Opponents = 1)
//
f$myfunc260  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc260  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc260  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 10) ] ? f$OpenPPL_RaiseMin :
f$myfunc260  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc260  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc260  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveSet AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc261  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc261  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc261  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc261  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc261  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 3 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc262  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc262  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc262  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 10) ] ? f$OpenPPL_RaiseMin :
f$myfunc262  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc262  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc262  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc263  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc263  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc263  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc263  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT)) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc264  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc264  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc264  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc264  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc265  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc265  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc265  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 62/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc265  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopTwoPair AND NOT TwoPairOnBoard AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT OneCardFlushPossible)
//
f$myfunc266  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc266  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents > 1 && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible]) ] ? f$OpenPPL_Call :
f$myfunc266  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
f$myfunc266  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc266  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopTwoPair AND NOT TwoPairOnBoard AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc267  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc267  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc267  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc267  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTwoPair AND NOT TwoPairOnBoard AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT OneCardFlushPossible)
//
f$myfunc268  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc268  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents > 1 && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible]) ] ? f$OpenPPL_Call :
f$myfunc268  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_RaisePot :
f$myfunc268  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Opponents <= 2) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc268  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTwoPair AND NOT TwoPairOnBoard AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc269  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc269  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc269  &&  [ (f$OpenPPL_Raises >= 2 &&  ![(f$OpenPPL_Opponents > 2)]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND Opponents = 1 AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ) OR (hand = TT) OR (hand = 99)))
//
f$myfunc270  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize >= 15 && f$OpenPPL_PotSize <= 30 && f$OpenPPL_BetSize <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND HaveFlushDraw AND FlushPossible AND NOT (StraightPossible OR OneCardFlushPossible) AND Opponents = 1 AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ) OR (hand = TT) OR (hand = 99)))
//
f$myfunc271  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize >= 15 && f$OpenPPL_PotSize <= 30 && f$OpenPPL_BetSize <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND FlushPossible AND HaveNutFlushDraw)
//
f$myfunc272  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc272  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc272  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc272  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND Opponents <= 2 AND NOT (StraightPossible OR FlushPossible OR OneCardStraightPossible) AND PairOnBoard and ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)))
//
f$myfunc273  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc273  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc273  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc273  &&  [ (f$OpenPPL_Bets == 1 && [$Q]) ] ? f$OpenPPL_RaisePot :
f$myfunc273  &&  [ (f$OpenPPL_Raises >= 1 && [$Q] && f$OpenPPL_AmountToCall <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc273  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![($Q)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND Opponents = 1 AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc274  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc274  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc274  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc274  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND (StraightPossible OR FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND Opponents = 1)
//
f$myfunc275  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc275  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
f$myfunc275  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc275  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND (StraightPossible OR FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc276  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc276  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_RaisePot :
f$myfunc276  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Opponents <= 2) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc276  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc276  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc276  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)])] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc277  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc277  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc277  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc278  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc278  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc278  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc278  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = Q) OR (hand = J)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc279  &&  [ (f$OpenPPL_PotSize <= 20 && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 25) ] ? f$OpenPPL_Fold :
f$myfunc279  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc279  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc279  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
f$myfunc279  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Opponents <= 3) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc279  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc279  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc280  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc280  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc280  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc280  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc280  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT FlushPossible)
//
f$myfunc281  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc281  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND Opponents = 1 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)))
//
f$myfunc282  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize <= 30 && f$OpenPPL_BetSize <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND HaveFlushDraw AND FlushPossible AND NOT (StraightPossible OR OneCardFlushPossible) AND Opponents = 1 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)))
//
f$myfunc283  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize <= 30 && f$OpenPPL_BetSize <= 100/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND FlushPossible AND HaveNutFlushDraw)
//
f$myfunc284  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc284  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc284  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc284  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc285  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc285  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc285  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc285  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = KQ) OR (hand = KJ) OR (hand = KT) OR (hand = QJ) OR (hand = QT)) and (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND HaveFlushDraw)
//
f$myfunc286  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc286  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc286  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc286  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc286  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 20 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc287  &&  [ (f$OpenPPL_PotSize <= 20 && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 25) ] ? f$OpenPPL_Fold :
f$myfunc287  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc287  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc287  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc287  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc287  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = QJ) OR (hand = KT) OR (hand = QT) OR (hand = JT)) and (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND PotSize <= 20)
//
f$myfunc288  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc288  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc288  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 10) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc288  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc288  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc288  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = QJ) OR (hand = KT) OR (hand = QT) OR (hand = JT)) and (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND PotSize > 20)
//
f$myfunc289  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc289  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc289  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc289  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 10) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc289  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc289  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc289  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = QJ) OR (hand = KT) OR (hand = QT)) AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR FlushPossibleOnTurn) AND Opponents = 1)
//
f$myfunc290  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc291  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc291  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call || [$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9] || f$OpenPPL_Opponents > 1)]) ] ? f$OpenPPL_RaisePot :
f$myfunc291  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call || [$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9] || f$OpenPPL_Opponents > 1)]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc291  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc292  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc292  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9])]) ] ? f$OpenPPL_RaisePot :
f$myfunc292  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9])]) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc292  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc292  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc292  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc292  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_Opponents == 1) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc292  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT FlushPossible)
//
f$myfunc293  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc293  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND NOT (FlushPossible OR PairOnBoard) AND HaveStraightDraw AND ((Hand = TT) OR (hand = JJ) OR (hand = QQ) OR (hand = KK)))
//
f$myfunc294  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_Bets == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc294  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_Bets == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc294  &&  [ (f$OpenPPL_Opponents == 2 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_Bets == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc294  &&  [ (f$OpenPPL_Opponents == 2 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_Bets == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc294  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc295  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_PotSize <= 30 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc295  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_PotSize <= 30 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc295  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_PotSize <= 30 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc295  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_PotSize <= 30 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc295  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc296  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_PotSize <= 30 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc296  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_PotSize <= 30 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc296  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_PotSize <= 30 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc296  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_PotSize <= 30 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc296  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HavePair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents <= 2)
//
f$myfunc297  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveNutFlushDraw)
//
f$myfunc298  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc298  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc298  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFlushDraw AND NOT FlushPossible)
//
f$myfunc299  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc299  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc299  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndNutFlushDraw)
//
f$myfunc300  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc300  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 20 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraightDraw AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc301  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc301  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PairOnBoard && f$OpenPPL_PotSize <= 5 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc301  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PairOnBoard && f$OpenPPL_PotSize > 5 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc301  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10 &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc301  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 10 &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_AmountToCall <= 42/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND Position = Middle AND Opponents = 2 AND NOT (FlushPossible OR PairOnBoard) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND ((Board = AKT) OR (board = AQT) OR (board = AJT)))
//
f$myfunc302  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc302  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 15) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc302  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND StillToAct = 0 AND NOT (FlushPossible OR PairOnBoard) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND ((Board = AKT) OR (board = AQT) OR (board = AJT)))
//
f$myfunc303  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc303  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 15) ] ? 85/100 * f$OpenPPL_PotSize :
f$myfunc303  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND NOT FlushPossible)
//
f$myfunc304  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Overcards = 2 AND NOT (FlushPossible OR StraightPossible) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ suited) OR (hand = KQ suited)))
//
f$myfunc305  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Overcards = 2 AND Opponents = 1 AND (BotsLastAction = BET OR BotsLastAction = Raise))
//
f$myfunc306  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedOnFlop AND NOT (BotsLastAction = call) AND (HavePair OR HaveFlushDraw OR HaveNutStraightDraw) AND Opponents = 1 AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc307  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc307  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (StillToAct = 0 AND NOT BotRaisedOnFlop AND BotsLastAction = call AND Overcards = 1 AND Opponents = 1 AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc308  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc308  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 5) ] ? 65/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND (FlushPossibleOnTurn OR StraightPossibleOnTurn) AND NOT (PairOnBoard OR StraightPossibleOnFlop OR FlushPossibleOnFlop))
//
f$myfunc309  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc309  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 10) ] ? 65/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Random <= 75 AND BotRaisedOnFlop AND BotsLastAction = call AND Opponents = 1 AND PotSize <= 20 AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc310  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc310  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0) ] ? 75/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (PairInHand AND PairOnBoard)
//
f$myfunc311  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// Others
//
f$myfunc312  &&  [ ([(f$OpenPPL_HaveFlushDraw && [ !(f$OpenPPL_FlushPossible)]) || (f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_Have3rdNutFlushDraw)] && [(f$OpenPPL_PotSize / f$OpenPPL_AmountToCall) > ([46 - mh_nouts] / mh_nouts)]) ] ? f$OpenPPL_Call :
f$myfunc312  &&  [ (f$OpenPPL_HaveStraightDraw && [(f$OpenPPL_PotSize / f$OpenPPL_AmountToCall) > ([46 - mh_nouts] / mh_nouts)]) ] ? f$OpenPPL_Call :
f$myfunc312  &&  [ (f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


##f$river##
[ ( ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnTurn] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize < 14/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize < 9/100 * f$OpenPPL_StackSize && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StackSize < 7 && f$OpenPPL_Bets == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 11 && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_Bets == 1 && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush] &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 11 && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_Bets == 1 &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_PairOnBoard)] && f$OpenPPL_OneCardFlushPossible && f$OpenPPL_HaveFlush) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 11 && f$OpenPPL_RaisesBeforeFlop &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_OneCardStraightPossible && [f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 17/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || [$AA])]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 17/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 23/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_PairOnBoard)] && [ !(f$OpenPPL_FlushPossible)] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || [$AA])]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize > 75 && f$OpenPPL_BetSize > 23/100 * f$OpenPPL_StackSize && [ !(f$OpenPPL_PairOnBoard)] && [ !(f$OpenPPL_FlushPossible)] && [ !(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || [$AA] || [$KK])]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_TripsOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || ($AA)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_FlushPossible && [f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush || f$OpenPPL_Have3rdNutFlush]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveSet) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BetSize > 40/100 * f$OpenPPL_StackSize && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveOverPair && [$AA]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_TripsOnBoard && [ !([f$OpenPPL_TotalInvested > 100])/100 * f$OpenPPL_StackSize] &&  ![(f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_NutFullHouseOrFourOfAKind == 5 || f$OpenPPL_NutFullHouseOrFourOfAKind == 6)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_StackSize && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKickerOrBetter] &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)])]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_HavePair) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 300/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveNuts && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 25/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
[ ([f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? 60/100 * f$OpenPPL_PotSize :
[ ([f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_Raises == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && [f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight] &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads)] && f$OpenPPL_AmountToCall <= 34/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 34/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_RaisesOnTurn || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_Folds >= 1 || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 56/100 * f$OpenPPL_PotSize && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] &&  ![(f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair)] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveFullHouse && f$OpenPPL_BetSize <= 34/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TwoPairOnBoard && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveFullHouse && f$OpenPPL_BetSize <= 34/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents <= 2 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTopPair && f$OpenPPL_NoBettingOnTurn &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ] ? 60/100 * f$OpenPPL_PotSize :
[ (f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall >= 55/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair && f$OpenPPL_StraightPossible && f$OpenPPL_BetSize > 12 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_MoreThanOneStraightPossibleOnTurn)]) ] ? f$OpenPPL_Call :
[ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] && [$A] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7 * f$PrimeCode_8) == 0))] && f$OpenPPL_HaveUnderStraight && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 42/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0))] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight || f$OpenPPL_BetSize < 26/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StraightOnBoard &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)])] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 53/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveUnderStraight && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_A) == 0))] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_PairInHand && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0))] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_6) == 0))] && f$OpenPPL_AmountToCall < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 55/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)])]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [($AK) || ($AQ)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 50/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_Raises >= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTwoPair && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? 65/100 * f$OpenPPL_PotSize :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Have3rdTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveTopPair] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnTurn || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_BetSize > 43/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize > 12)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_FlushPossible && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 42/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_NoBettingOnTurn || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && f$OpenPPL_PairOnBoard && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Checks == 1 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || f$OpenPPL_RaisesOnTurn || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnTurn)]) ] ? 60/100 * f$OpenPPL_PotSize :
[ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? 60/100 * f$OpenPPL_PotSize :
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 2)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 1)]) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_HaveTrips && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 33/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_Opponents > 1 || f$OpenPPL_RaisesOnTurn || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? 60/100 * f$OpenPPL_PotSize :
[ ([f$OpenPPL_Opponents >= 4 || f$OpenPPL_Folds >= 3] &&  ![(f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 25/100 * f$OpenPPL_PotSize)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnTurn || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_HaveNuts || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_NoBettingOnFlop && f$OpenPPL_NoBettingOnTurn &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 4) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 20 &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 30/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Raises == 1 && [f$OpenPPL_AmountToCall <= 2 || f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize] && f$OpenPPL_AmountToCall < 10/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 15 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_Folds >= 1)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveBestKicker]) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have5thOverPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 41/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_NoBettingOnFlop && f$OpenPPL_NoBettingOnTurn &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
[ ( ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 25/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_OneCardFlushPossible && [f$OpenPPL_BetSize > 20/100 * f$OpenPPL_StackSize || f$OpenPPL_BetSize > 10] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_OneCardFlushPossible && [ !(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 55/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_TotalInvested > 110/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_OneCardFlushPossible && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 3 && f$OpenPPL_StackSize > 20) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_QuadsOnBoard && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_RaisePot :
[ (f$OpenPPL_TripsOnBoard && [ !(f$OpenPPL_QuadsOnBoard)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveFullHouse && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 26/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TripsOnBoard && [ !(f$OpenPPL_QuadsOnBoard)] && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible && f$OpenPPL_BetSize > 5 &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_QuadsOnBoard)] && f$OpenPPL_BetSize > 7 && f$OpenPPL_AmountToCall > 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TwoPairOnBoard && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] && f$OpenPPL_HaveFullHouse && [ !([$A])] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TwoPairOnBoard && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] && f$OpenPPL_HaveFullHouse && [ !([$A])] && f$OpenPPL_BetSize > 38/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_QuadsOnBoard &&  ![f$OpenPPL_HaveBestKicker]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_QuadsOnBoard && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_RaiseMin :
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] && f$OpenPPL_HaveTrips && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 15) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0))] && f$OpenPPL_HaveTrips && f$OpenPPL_HaveBestKicker && f$OpenPPL_Raises == 1) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 18/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND FlushPossible AND NOT (PairOnBoard OR OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc313  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveNuts || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc313  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveNuts || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 50/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 15) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND HaveStraight AND NOT (FlushPossible OR OneCardStraightPossible OR HaveTrips OR HaveFullHouse) AND StackSize > 45)
//
f$myfunc314  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall > 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc314  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc314  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 47/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc314  &&  [ (f$OpenPPL_Raises == 2 && f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc314  &&  [ (f$OpenPPL_Raises == 2 && f$OpenPPL_AmountToCall <= 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND PairOnBoard AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible OR (board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR Folds >= 1))
//
f$myfunc315  &&  [ (f$OpenPPL_HaveNutStraight && f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (PairOnBoard AND (OnlyOneStraightPossible OR NOT StraightPossible) AND NOT (FlushPossible OR OneCardStraightPossible OR (board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8) OR CalledOnTurn OR RaisesOnFlop) AND Opponents <= 2)
//
f$myfunc316  &&  [ ([$AA] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc316  &&  [ ([$AA] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc316  &&  [ ([$AA] && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc316  &&  [ ([($KK) || ($QQ) || ($JJ) || ($TT)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc316  &&  [ ([$KK] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 40) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((NOT NoBettingOnFlop) AND (NOT NoBettingOnTurn) AND (FlushPossible OR MoreThanOneStraightPossibleOnFlop OR MoreThanOneStraightPossibleOnTurn) AND Opponents = 1 AND Position = First AND (HaveOverPair OR HaveTopPair OR Have2ndOverPair) AND NOT (PairOnBoard OR HaveSet OR HaveTwoPair OR HaveStraight OR HaveFlush))
//
f$myfunc317  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc317  &&  [ (f$OpenPPL_BetSize >= 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc317  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND NOT (HaveQuads OR HaveFullHouse OR HaveFlush OR HaveStraight OR HaveTrips))
//
f$myfunc318  &&  [ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)] && f$OpenPPL_BetSize > 8) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Opponents = 1 AND OpponentIsAllin AND (Bets = 1 OR Raises = 1) AND (HaveTopPair OR HaveOverPair OR Have2ndOverPair OR HaveTwoPair OR HaveTrips OR HaveSet OR HaveFullHouse OR HaveStraight OR HaveFlush))
//
f$myfunc319  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 45/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc319  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 47/100 * f$OpenPPL_PotSize && [f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker]) ] ? f$OpenPPL_Call :
f$myfunc319  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveOverPair) ] ? f$OpenPPL_Call :
f$myfunc319  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 54/100 * f$OpenPPL_PotSize && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND (Bets = 1 OR Raises = 1) AND NOT (HaveFullHouse OR HaveQuads))
//
f$myfunc320  &&  [ ( ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc320  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && [f$OpenPPL_BetSize < 50/100 * f$OpenPPL_StackSize || f$OpenPPL_BetSize < 61/100 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
f$myfunc320  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_OnlyOneStraightPossible) ] ? f$OpenPPL_RaisePot :
f$myfunc320  &&  [ (f$OpenPPL_BetSize > 10 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT (HaveFullHouse OR HaveQuads OR OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 10 && f$OpenPPL_AmountToCall < 7) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall < 10) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 20 && f$OpenPPL_AmountToCall < 15) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 25 && f$OpenPPL_AmountToCall < 17) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 30 && f$OpenPPL_AmountToCall < 22) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 35 && f$OpenPPL_AmountToCall < 26) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 40 && f$OpenPPL_AmountToCall < 30) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 45 && f$OpenPPL_AmountToCall < 33) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 50 && f$OpenPPL_AmountToCall < 37) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 60 && f$OpenPPL_AmountToCall < 45) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 75 && f$OpenPPL_AmountToCall < 56) ] ? f$OpenPPL_Call :
f$myfunc321  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && [ !(f$OpenPPL_RaisesOnTurn)]) ] ? 60/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 0 AND Raises = 0 AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (PairOnBoard OR FlushPossible OR RaisesOnTurn OR OneCardStraightPossible))
//
f$myfunc322  &&  [ ([ !(f$OpenPPL_StraightPossible)]) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc322  &&  [ (f$OpenPPL_OnlyOneStraightPossible) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc322  &&  [ (f$OpenPPL_Random <= 25) ] ? 40/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 0 AND Raises = 0 AND HaveOverPair AND NOT (PairOnBoard OR FlushPossible OR RaisesOnTurn OR OneCardStraightPossible))
//
f$myfunc323  &&  [ ([ !(f$OpenPPL_StraightPossible)]) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc323  &&  [ (f$OpenPPL_OnlyOneStraightPossible) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc323  &&  [ (f$OpenPPL_Random <= 25) ] ? 40/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 1 AND PairOnBoard AND HaveFlush AND NOT (PairOnTurn OR (board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8) OR Folds >= 1))
//
f$myfunc324  &&  [ (f$OpenPPL_StraightFlushPossible && f$OpenPPL_Have2ndNutFlush && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc324  &&  [ (f$OpenPPL_HaveNutFlush && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc324  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 50/100 * f$OpenPPL_StackSize && f$OpenPPL_Random <= 75) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND PairOnBoard AND NOT (FlushPossible OR TripsOnBoard))
//
f$myfunc325  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || f$OpenPPL_RaisesOnTurn)] && [f$OpenPPL_Opponents <= 2 || f$OpenPPL_Checks >= 1]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc325  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || f$OpenPPL_RaisesOnTurn)] && f$OpenPPL_BetSize < 57/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc325  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 51/100 * f$OpenPPL_PotSize && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_Call :
f$myfunc325  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
f$myfunc325  &&  [ (f$OpenPPL_Raises == 2 && f$OpenPPL_BetSize < 34/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND HaveTrips AND NOT (FlushPossible OR HaveStraight OR HaveFullHouse OR StackSize < 55 OR TotalInvested > 85% StackSize OR (hand = A K)))
//
f$myfunc326  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_StraightPossible && f$OpenPPL_AmountToCall > 52/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 15) ] ? f$OpenPPL_Fold :
f$myfunc326  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 70/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 15) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Bets = 1 OR Raises = 1) AND NOT (HaveNuts OR HaveQuads OR HaveStraightFlush OR HaveFullHouse OR HaveFlush OR HaveStraight) AND AmountToCall < 30)
//
f$myfunc327  &&  [ (f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc327  &&  [ (f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have5thOverPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc327  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have5thOverPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc327  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible] && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet]) ] ? f$OpenPPL_Call :
f$myfunc327  &&  [ (f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_PotSize && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND HaveFlush AND NOT (TripsOnBoard OR OneCardFlushPossible OR HaveFullHouse OR HaveQuads OR HaveStraightFlush))
//
f$myfunc328  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0))]) ] ? f$OpenPPL_Call :
f$myfunc328  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 57/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (OneCardStraightPossible AND Have2ndNutStraight AND NOT (FlushPossible OR RaisesOnTurn))
//
f$myfunc329  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? 60/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (FlushPossible AND (NOT OneCardFlushPossible))
//
f$myfunc330  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_AmountToCall > 55/100 * f$OpenPPL_PotSize || f$OpenPPL_HaveFlush || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair) ] ? f$OpenPPL_Call :
f$myfunc330  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 52/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc330  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_HaveSet || f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight || f$OpenPPL_HaveTrips]) ] ? f$OpenPPL_Call :
f$myfunc330  &&  [ (f$OpenPPL_Raises >= 2 && [ !(f$OpenPPL_HaveFlush)] && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Opponents = 1 AND NoBettingOnTurn AND Bets = 0 AND Raises = 0 AND (NOT (StackSize < 50)))
//
f$myfunc331  &&  [ ( ![(f$OpenPPL_HavePair || f$OpenPPL_HaveBestKicker || f$OpenPPL_NoBettingOnFlop || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_UncoordinatedFlop)] && f$OpenPPL_Random <= 50) ] ? 60/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// Others
//
f$myfunc332  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_BotsActionsOnThisRound == 0 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_TotalInvested > 140/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc332  &&  [ ( ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || [$A] || [$K])]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ ([f$OpenPPL_RaisesOnFlop || f$OpenPPL_RaisesOnTurn] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_StackSize < 20)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveTopNonBoardPairedPair] &&  ![(nopponentsplaying >= 2 && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall < 33/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc332  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1)] && f$OpenPPL_HaveFullHouse) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_StraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_HavePair) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TotalInvested > 300/100 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_HaveNuts && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 25/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc332  &&  [ ([f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc332  &&  [ ([f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (me_re_userlowturn && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0))] &&  ![(f$OpenPPL_CalledOnFlop || f$OpenPPL_CalledOnTurn || f$OpenPPL_NoBettingOnFlop || f$OpenPPL_NoBettingOnTurn || f$OpenPPL_BetSize < 34/100 * f$OpenPPL_PotSize || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (me_re_user2pb && nopponentsplaying == 1 && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveFullHouse) ] ? 65/100 * f$OpenPPL_PotSize :
f$myfunc332  &&  [ (me_re_user2pb && nopponentsplaying == 1 && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [$AA] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65/100 * f$OpenPPL_PotSize :
f$myfunc332  &&  [ (me_re_user2pb && nopponentsplaying == 1 && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveFullHouse && f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopPair || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_RiverCardisOvercardToBoard || f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TripsOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize > 2 && nopponentsplaying > 2 &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveQuads || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFullHouse && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || nopponentsplaying > 2 || f$OpenPPL_Folds > 2 || f$OpenPPL_BetSize > 46/100 * f$OpenPPL_PotSize || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T * f$PrimeCode_T) == 0)])]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveTrips && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_RaisesOnFlop && f$OpenPPL_CalledOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveBestKicker)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_HaveFullHouse && me_re_userturngood && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_FlushOnBoard && f$OpenPPL_StraightOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)])] && f$OpenPPL_Raises > 1 && f$OpenPPL_AmountToCall > 6) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_FlushOnBoard && f$OpenPPL_StraightOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)])] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall > 10 && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_OneCardFlushPossible && nopponentsplaying > 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 6 && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_OneCardFlushPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 6 && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush || f$OpenPPL_Have3rdNutFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_NoBettingOnTurn || f$OpenPPL_OnlyOneStraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveUnderStraight || f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_BetSize < 15 || f$OpenPPL_BetSize < 18/100 * f$OpenPPL_StackSize || f$OpenPPL_BetSize < 46/100 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_BetSize == 1 || f$OpenPPL_AmountToCall < 24/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_FlushPossibleOnTurn && f$OpenPPL_RaisesOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_First &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall > 2 && f$OpenPPL_AmountToCall > 34/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall > 3 && f$OpenPPL_AmountToCall > 42/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_FlushPossible && nopponentsplaying >= 3 && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall > 5 && f$OpenPPL_AmountToCall > 42/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)])] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_PairOnTurn && f$OpenPPL_HaveTrips && f$OpenPPL_RaisesOnTurn && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_TripsOnBoard || f$OpenPPL_TwoPairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_BetSize < 30/100 * f$OpenPPL_PotSize || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OnlyOneStraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_OnlyOneStraightPossible &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_OnlyOneStraightPossible && f$OpenPPL_HaveTrips && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && nopponentsplaying == 1 && f$OpenPPL_BetSize < 41/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_RaisesOnTurn || f$OpenPPL_PairOnTurn || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveTrips && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && nopponentsplaying == 1 && f$OpenPPL_BetSize < 44/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_RaisesOnTurn || f$OpenPPL_PairOnTurn || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && [f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight] &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads)] && f$OpenPPL_AmountToCall <= 34/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 34/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_RaisesOnTurn || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_Folds >= 1 || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] &&  ![(f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall > 5 && f$OpenPPL_AmountToCall > 23/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 56/100 * f$OpenPPL_PotSize && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] &&  ![(f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair)] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7 * f$PrimeCode_7) == 0))] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || f$OpenPPL_RaisesOnTurn || f$OpenPPL_HaveStraightFlush)] && nopponentsplaying == 1 && [$KK] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 46/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7 * f$PrimeCode_7) == 0))] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || f$OpenPPL_RaisesOnTurn || f$OpenPPL_HaveStraightFlush)] && nopponentsplaying == 1 && [$KK] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 37/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TripsOnBoard && nopponentsplaying == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveFullHouse && f$OpenPPL_BetSize <= 34/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_RaisesOnTurn)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TwoPairOnBoard && nopponentsplaying == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveFullHouse && f$OpenPPL_BetSize <= 34/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (nopponentsplaying <= 2 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTopPair && f$OpenPPL_NoBettingOnTurn &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc332  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall >= 55/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair && f$OpenPPL_StraightPossible && f$OpenPPL_BetSize > 12 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_MoreThanOneStraightPossibleOnTurn)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] && [$A] && nopponentsplaying <= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Folds == 0 && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7 * f$PrimeCode_8) == 0))] && f$OpenPPL_HaveUnderStraight && nopponentsplaying == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 42/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0))] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight || f$OpenPPL_BetSize < 26/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_StraightOnBoard &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)])] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 53/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveUnderStraight && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_A) == 0))] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_PairInHand && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0))] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard || f$OpenPPL_Raises >= 2)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_6) == 0))] && f$OpenPPL_AmountToCall < 55/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 55/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightOnBoard || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)])]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [($AK) || ($AQ)] && nopponentsplaying == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 50/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_Raises >= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? 65/100 * f$OpenPPL_PotSize :
f$myfunc332  &&  [ (nopponentsplaying == 1 && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Have3rdTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveTopPair] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnTurn || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_BetSize > 43/100 * f$OpenPPL_PotSize || f$OpenPPL_BetSize > 12)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_FlushPossible && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 42/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_NoBettingOnTurn || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (nopponentsplaying == 1 && f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && f$OpenPPL_PairOnBoard && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Checks == 1 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || f$OpenPPL_RaisesOnTurn || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnTurn)]) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc332  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 50) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc332  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 2)]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_Raises >= 1)]) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 33/100 * f$OpenPPL_PotSize &&  ![(nopponentsplaying > 1 || f$OpenPPL_RaisesOnTurn || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc332  &&  [ ([nopponentsplaying >= 4 || f$OpenPPL_Folds >= 3] &&  ![(f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall < 25/100 * f$OpenPPL_PotSize)] &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnTurn || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_HaveNuts || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_NoBettingOnFlop && f$OpenPPL_NoBettingOnTurn &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 4) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 20 &&  ![(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker)] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 30/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Raises == 1 && [f$OpenPPL_AmountToCall <= 2 || f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize] && f$OpenPPL_AmountToCall < 10/100 * f$OpenPPL_StackSize && f$OpenPPL_StackSize > 15 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_Folds >= 1)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveBestKicker]) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ ([f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have5thOverPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 41/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_NoBettingOnFlop && f$OpenPPL_NoBettingOnTurn &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_PairOnBoard && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ ( ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 25/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_OneCardFlushPossible && [f$OpenPPL_BetSize > 20/100 * f$OpenPPL_StackSize || f$OpenPPL_BetSize > 10] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 55/100 * f$OpenPPL_StackSize &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_TotalInvested > 110/100 * f$OpenPPL_StackSize)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_OneCardFlushPossible && f$OpenPPL_Raises >= 1 &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_TotalInvested > 100/100 * f$OpenPPL_StackSize)] && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize > 3 && f$OpenPPL_StackSize > 20) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_QuadsOnBoard && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_QuadsOnBoard)] && nopponentsplaying == 1 && f$OpenPPL_HaveFullHouse && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 26/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_QuadsOnBoard)] && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (nopponentsplaying >= 2 && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible && f$OpenPPL_BetSize > 5 &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_QuadsOnBoard)] && f$OpenPPL_BetSize > 15 && f$OpenPPL_AmountToCall > 33/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_TwoPairOnBoard && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] && f$OpenPPL_HaveFullHouse &&  ![([$A])] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_TwoPairOnBoard && [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] && f$OpenPPL_HaveFullHouse &&  ![([$A])] && f$OpenPPL_BetSize > 38/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_QuadsOnBoard &&  ![f$OpenPPL_HaveBestKicker]) ] ? f$OpenPPL_Fold :
f$myfunc332  &&  [ (f$OpenPPL_QuadsOnBoard && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_RaiseMin :
f$myfunc332  &&  [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] && f$OpenPPL_HaveTrips && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 15) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0))] && f$OpenPPL_HaveTrips && f$OpenPPL_HaveBestKicker && f$OpenPPL_Raises == 1) ] ? f$OpenPPL_Call :
f$myfunc332  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_BetSize < 38/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 18/100 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND FlushPossible AND NOT (PairOnBoard OR OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc333  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveNuts || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc333  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveNuts || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 50/100 * f$OpenPPL_PotSize && f$OpenPPL_BetSize < 15) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND HaveStraight AND NOT (FlushPossible OR OneCardStraightPossible OR HaveTrips OR HaveFullHouse) AND StackSize > 45)
//
f$myfunc334  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall > 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc334  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall > 47/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc334  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 47/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc334  &&  [ (f$OpenPPL_Raises == 2 && f$OpenPPL_AmountToCall > 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc334  &&  [ (f$OpenPPL_Raises == 2 && f$OpenPPL_AmountToCall <= 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND PairOnBoard AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible OR (board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR Folds >= 1))
//
f$myfunc335  &&  [ (f$OpenPPL_HaveNutStraight && f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (PairOnBoard AND (OnlyOneStraightPossible OR NOT StraightPossible) AND NOT (FlushPossible OR OneCardStraightPossible OR (board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8) OR CalledOnTurn OR RaisesOnFlop) AND nopponentsplaying <= 2)
//
f$myfunc336  &&  [ ([$AA] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc336  &&  [ ([$AA] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc336  &&  [ ([$AA] && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc336  &&  [ ([($KK) || ($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc336  &&  [ ([($KK) || ($QQ) || ($JJ) || ($TT)] && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc336  &&  [ ([$KK] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 40) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (NOT (NoBettingOnFlop) AND NOT (NoBettingOnTurn) AND (FlushPossible OR MoreThanOneStraightPossibleOnFlop OR MoreThanOneStraightPossibleOnTurn) AND nopponentsplaying = 1 AND Position = First AND (HaveOverPair OR HaveTopPair OR Have2ndOverPair) AND NOT (PairOnBoard OR HaveSet OR HaveTwoPair OR HaveStraight OR HaveFlush))
//
f$myfunc337  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc337  &&  [ (f$OpenPPL_BetSize >= 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc337  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize < 40/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND NOT (HaveQuads OR HaveFullHouse OR HaveFlush OR HaveStraight OR HaveTrips))
//
f$myfunc338  &&  [ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)] && f$OpenPPL_BetSize > 8) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND OpponentIsAllin AND (Bets = 1 OR Raises = 1) AND (HaveTopPair OR HaveOverPair OR Have2ndOverPair OR HaveTwoPair OR HaveTrips OR HaveSet OR HaveFullHouse OR HaveStraight OR HaveFlush) AND NOT (UserDead OR UserDead2 OR UserDead3))
//
f$myfunc339  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 45/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc339  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 47/100 * f$OpenPPL_PotSize && [f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker]) ] ? f$OpenPPL_Call :
f$myfunc339  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 51/100 * f$OpenPPL_PotSize && f$OpenPPL_HaveOverPair) ] ? f$OpenPPL_Call :
f$myfunc339  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall < 54/100 * f$OpenPPL_PotSize && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND (Bets = 1 OR Raises = 1) AND NOT (HaveFullHouse OR HaveQuads))
//
f$myfunc340  &&  [ ( ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc340  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && [f$OpenPPL_BetSize < 50/100 * f$OpenPPL_StackSize || f$OpenPPL_BetSize < 61/100 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
f$myfunc340  &&  [ ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_OnlyOneStraightPossible) ] ? f$OpenPPL_RaisePot :
f$myfunc340  &&  [ (f$OpenPPL_BetSize > 10 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT (HaveFullHouse OR HaveQuads OR OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (nopponentsplaying == 1 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 10 && f$OpenPPL_AmountToCall < 7) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall < 10) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 20 && f$OpenPPL_AmountToCall < 15) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 25 && f$OpenPPL_AmountToCall < 17) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 30 && f$OpenPPL_AmountToCall < 22) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 35 && f$OpenPPL_AmountToCall < 26) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 40 && f$OpenPPL_AmountToCall < 30) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 45 && f$OpenPPL_AmountToCall < 33) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 50 && f$OpenPPL_AmountToCall < 37) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 60 && f$OpenPPL_AmountToCall < 45) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 75 && f$OpenPPL_AmountToCall < 56) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && nopponentsplaying == 1 &&  ![(f$OpenPPL_RaisesOnTurn)]) ] ? 60/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND Bets = 0 AND Raises = 0 AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (PairOnBoard OR FlushPossible OR RaisesOnTurn OR OneCardStraightPossible))
//
f$myfunc342  &&  [ ( ![(f$OpenPPL_StraightPossible)]) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc342  &&  [ (f$OpenPPL_OnlyOneStraightPossible) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc342  &&  [ (f$OpenPPL_Random <= 25) ] ? 40/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND Bets = 0 AND Raises = 0 AND HaveOverPair AND NOT (PairOnBoard OR FlushPossible OR RaisesOnTurn OR OneCardStraightPossible))
//
f$myfunc343  &&  [ ( ![(f$OpenPPL_StraightPossible)]) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc343  &&  [ (f$OpenPPL_OnlyOneStraightPossible) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc343  &&  [ (f$OpenPPL_Random <= 25) ] ? 40/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND Bets = 1 AND PairOnBoard AND HaveFlush AND NOT (PairOnTurn OR (board = A A) OR (board = K K) OR (board = Q Q) OR (board = J J) OR (board = T T) OR (board = 9 9) OR (board = 8 8) OR Folds >= 1))
//
f$myfunc344  &&  [ (f$OpenPPL_StraightFlushPossible && f$OpenPPL_Have2ndNutFlush && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc344  &&  [ (f$OpenPPL_HaveNutFlush && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc344  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize < 50/100 * f$OpenPPL_StackSize && f$OpenPPL_Random <= 75) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND PairOnBoard AND NOT (FlushPossible OR TripsOnBoard))
//
f$myfunc345  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || f$OpenPPL_RaisesOnTurn)] && [nopponentsplaying <= 2 || f$OpenPPL_Checks >= 1]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc345  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || f$OpenPPL_RaisesOnTurn)] && f$OpenPPL_BetSize < 57/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc345  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 51/100 * f$OpenPPL_PotSize && nopponentsplaying <= 2) ] ? f$OpenPPL_Call :
f$myfunc345  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BetSize < 43/100 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
f$myfunc345  &&  [ (f$OpenPPL_Raises == 2 && f$OpenPPL_BetSize < 34/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND HaveTrips AND NOT (FlushPossible OR HaveStraight OR HaveFullHouse OR StackSize < 55 OR TotalInvested > 85% StackSize OR (hand = A K)))
//
f$myfunc346  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_StraightPossible && f$OpenPPL_AmountToCall > 52/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 15) ] ? f$OpenPPL_Fold :
f$myfunc346  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 70/100 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall > 15) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Bets = 1 OR Raises = 1) AND NOT (HaveNuts OR HaveQuads OR HaveStraightFlush OR HaveFullHouse OR HaveFlush OR HaveStraight OR TwoPairOnBoard) AND AmountToCall < 30 AND (nopponentsplaying < 3 OR BetSize < 12))
//
f$myfunc347  &&  [ (f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc347  &&  [ (f$OpenPPL_AmountToCall < 26/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have5thOverPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Call :
f$myfunc347  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveBottomPair || f$OpenPPL_Have5thOverPair || f$OpenPPL_Have4thTopPair || f$OpenPPL_Have4thOverPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_Have3rdOverPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc347  &&  [ (f$OpenPPL_AmountToCall < 34/100 * f$OpenPPL_PotSize && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible] && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet]) ] ? f$OpenPPL_Call :
f$myfunc347  &&  [ (f$OpenPPL_AmountToCall < 40/100 * f$OpenPPL_PotSize && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairOnBoard AND HaveFlush AND NOT (TripsOnBoard OR OneCardFlushPossible OR HaveFullHouse OR HaveQuads OR HaveStraightFlush))
//
f$myfunc348  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall > 50/100 * f$OpenPPL_PotSize && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0))]) ] ? f$OpenPPL_Call :
f$myfunc348  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 57/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (OneCardStraightPossible AND Have2ndNutStraight AND NOT (FlushPossible OR RaisesOnTurn))
//
f$myfunc349  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && nopponentsplaying <= 2) ] ? 60/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (FlushPossible AND NOT (OneCardFlushPossible))
//
f$myfunc350  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_AmountToCall > 55/100 * f$OpenPPL_PotSize || f$OpenPPL_HaveFlush || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair) ] ? f$OpenPPL_Call :
f$myfunc350  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall > 52/100 * f$OpenPPL_PotSize &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc350  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_HaveSet || f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight || f$OpenPPL_HaveTrips]) ] ? f$OpenPPL_Call :
f$myfunc350  &&  [ (f$OpenPPL_Raises >= 2 &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_AmountToCall > 43/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (nopponentsplaying = 1 AND NoBettingOnTurn AND Bets = 0 AND Raises = 0 AND NOT (StackSize < 50))
//
f$myfunc351  &&  [ ( ![(f$OpenPPL_HavePair || f$OpenPPL_HaveBestKicker || f$OpenPPL_NoBettingOnFlop || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_UncoordinatedFlop)] && f$OpenPPL_Random <= 50) ] ? 60/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Raises = 1 AND NOT (HaveNuts OR HaveFullHouse OR HaveQuads OR HaveStraightFlush))
//
f$myfunc352  &&  [ (f$OpenPPL_OneCardFlushPossible && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush || f$OpenPPL_Have3rdNutFlush)] && f$OpenPPL_AmountToCall < 15/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc352  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutStraight)] && f$OpenPPL_AmountToCall < 15/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc352  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveNutStraight || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)])] && f$OpenPPL_AmountToCall < 20/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc352  &&  [ ( ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] && f$OpenPPL_AmountToCall < 18/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc352  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] && f$OpenPPL_AmountToCall < 13/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc352  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_AmountToCall < 9/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND PairOnBoard)
//
f$myfunc353  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND FlushPossible)
//
f$myfunc354  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND StraightPossible)
//
f$myfunc355  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize)
//
f$myfunc356  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have3rdTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 300% StackSize)
//
f$myfunc357  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_HaveBestKicker) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TripsOnBoard AND NOT (HaveFullHouse OR HaveSet OR HaveTrips OR HaveQuads))
//
f$myfunc358  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc358  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TwoPairOnBoard AND (HaveOverPair OR HaveTopPair OR HaveFullHouse))
//
f$myfunc359  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc359  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TwoPairOnBoard AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveFullHouse OR HaveSet OR HaveTrips OR HaveQuads))
//
f$myfunc360  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc360  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveStraightFlush)
//
f$myfunc361  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc361  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc361  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc361  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveQuads)
//
f$myfunc362  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc362  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc362  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc362  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind > 4 AND NutFullHouseOrFourOfAKind <= 14) AND TripsOnBoard)
//
f$myfunc363  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc363  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_StillToAct == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc363  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND TripsOnBoard)
//
f$myfunc364  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc364  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc364  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 7) AND NOT TripsOnBoard)
//
f$myfunc365  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc365  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc365  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (FlushOnBoard AND NOT (HaveNutFlush OR Have2ndNutFlush))
//
f$myfunc366  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveNutFlush AND NOT PairOnBoard)
//
f$myfunc367  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc367  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc367  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveNutFlush AND PairOnBoard)
//
f$myfunc368  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc368  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc368  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (FlushOnBoard AND NOT HaveNutFlush)
//
f$myfunc369  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveFlush AND NOT (OneCardFlushPossible OR PairOnBoard))
//
f$myfunc370  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc370  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc370  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc371  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc371  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc371  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc371  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveNutStraight AND NOT FlushPossible)
//
f$myfunc372  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc372  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc372  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveNutStraight AND FlushPossible AND NOT OneCardFlushPossible AND Opponents <= 2)
//
f$myfunc373  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc373  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc373  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND NOT FlushPossible)
//
f$myfunc374  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc374  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_StillToAct == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc374  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc374  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND FlushPossible AND NOT OneCardFlushPossible AND Opponents <= 2)
//
f$myfunc375  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc375  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc375  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc376  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc377  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc377  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
f$myfunc377  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc377  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc377  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc377  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc377  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
f$myfunc377  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc377  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc378  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc378  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60/100 * f$OpenPPL_PotSize :
f$myfunc378  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc378  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveSet AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc379  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc380  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc380  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_StillToAct == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc380  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc380  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc380  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc381  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc381  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc381  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc382  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc382  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc382  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc382  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc383  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTwoPair AND NOT TwoPairOnBoard AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc384  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc384  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc384  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc384  &&  [ (f$OpenPPL_Raises >= 2 &&  ![(f$OpenPPL_Opponents > 2)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc384  &&  [ (f$OpenPPL_Raises >= 2 &&  ![(f$OpenPPL_Opponents <= 2)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTwoPair AND NOT TwoPairOnBoard AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc385  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc385  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc385  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND (hand = Q) AND Opponents = 1 AND (StraightPossible OR PairOnBoard) AND NOT (FlushPossible OR OneCardStraightPossible) and ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)))
//
f$myfunc386  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc386  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc386  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc386  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND Opponents <= 2 AND (StraightPossible OR PairOnBoard) AND NOT (FlushPossible OR OneCardStraightPossible) and ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)))
//
f$myfunc387  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc387  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc387  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc387  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND Opponents = 1 AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc388  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc388  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc388  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc388  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc389  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc389  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
f$myfunc389  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc389  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND PairOnBoard AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc390  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc390  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)])]) ] ? f$OpenPPL_RaisePot :
f$myfunc390  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)])]) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc390  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND (StraightPossible OR FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc391  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc391  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc391  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q) OR (hand = J)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc392  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc392  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc392  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc392  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc393  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc393  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc393  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc393  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc394  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc394  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND (StraightPossible OR FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR FlushPossibleOnTurn) AND ((Hand = A) OR (hand = K)) AND Opponents = 1)
//
f$myfunc395  &&  [ (f$OpenPPL_BotRaisedOnTurn && f$OpenPPL_Raises >= 1 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND Opponents <= 2 AND (StraightPossible OR PairOnBoard) AND NOT (FlushPossible OR OneCardStraightPossible) and ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)))
//
f$myfunc396  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc396  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc396  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct == 0) ] ? 50/100 * f$OpenPPL_PotSize :
f$myfunc396  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc397  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc397  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc397  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75/100 * f$OpenPPL_PotSize :
f$myfunc397  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc398  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc398  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc398  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = QJ) OR (hand = KT) OR (hand = QT)) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc399  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc399  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc399  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 12 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = QJ) OR (hand = KT) OR (hand = QT)) AND (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc400  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc400  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc400  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 10 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR (hand = 2) OR (hand = 3) OR (hand = 4) OR (hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9)))
//
f$myfunc401  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc401  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc401  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 40 && f$OpenPPL_AmountToCall <= 52/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker))
//
f$myfunc402  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 12/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc403  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND (StraightPossible OR FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR FlushPossibleOnTurn) AND ((Hand = AK) OR (hand = AQ)) AND Opponents = 1)
//
f$myfunc404  &&  [ (f$OpenPPL_BotRaisedOnTurn && f$OpenPPL_Raises >= 1 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc405  &&  [ ([($KK) || ($QQ) || ($JJ) || ($TT)] && f$OpenPPL_BotRaisedOnTurn &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 30) ] ? 50/100 * f$OpenPPL_PotSize :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc406  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc406  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 12/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndTopPair AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc407  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc407  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 12/100 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HavePair AND NOT ((Hand = 2) OR (hand = 3) OR (hand = 4) OR (hand = 5) OR (hand = 6)) AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc408  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotsLastAction = RAISE OR BotsLastAction = bet))
//
f$myfunc409  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// Others
//
f$myfunc410  &&  [ (f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


//************************************************************************
//
// Resetting all User-Defined Variables.
//
// To be called at the very beginning of a hand.
//
//************************************************************************


##f$OpenPPL_ResetUserVariables##
0
+  me_st_user2pb_0
+  me_st_user2set_0
+  me_st_usercutoff_0
+  me_st_userdead2_0
+  me_st_userdead3_0
+  me_st_userearlyraiser_0
+  me_st_userlateraiser_0
+  me_st_userlowturn_0
+  me_st_usermid1_0
+  me_st_usermid2_0
+  me_st_usermid3_0
+  me_st_usermiddleraiser_0
+  me_st_userminbettor_0
+  me_st_usersmalblindraiser_0
+  me_st_userturngood_0
+  me_st_userutg_0
+  me_st_userutg1_0


//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 2.2.0 or later
//   Symbols not working with 2.1.x:
//     * isfinaltable
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
//  Predefined action constants
//  ===========================
//
//  Positive values mean: betsizes (in big-blinds)
//
//  Zero and negative values mean: predefined actions, that have to be translated later
//  to standard OpenHoldem autoplayer actions.
//
//  Note: Beep is not supported.
//
//*****************************************************************************

##f$OpenPPL_Fold##
-1

##f$OpenPPL_Check##
-2

##f$OpenPPL_Undefined_BetSize_Probably_Due_To_Misscraped_Pot_Defaulting_To_Minraise##
// Note: When "Raise X% (PotSize)" is used, but the potsize got misscraped
// (as zero), this will lead to a final action of "0".
// To make this library more robust (against bad tablemaps of our users ;-)
// we will react to "0" with a normal (min-) raise, so we won't fail completely.
0

##f$OpenPPL_RaiseMin##
f$OpenPPL_Raise

##f$OpenPPL_RaiseHalfPot##
[1/2 * f$OpenPPL_PotSize]

##f$OpenPPL_RaisePot##
f$OpenPPL_PotSize

##f$OpenPPL_RaiseMax##
-3

##f$OpenPPL_Call##
-4

##f$OpenPPL_Play##
f$OpenPPL_Call

##f$OpenPPL_Bet##
f$OpenPPL_Raise

##f$OpenPPL_BetMin##
f$OpenPPL_Bet

##f$OpenPPL_BetHalfPot##
f$OpenPPL_RaiseHalfPot

##f$OpenPPL_BetPot##
f$OpenPPL_RaiseHalfPot

##f$OpenPPL_BetMax##
f$OpenPPL_RaiseMax

##f$OpenPPL_None##
-5

##f$OpenPPL_SitOut##
-6

##f$OpenPPL_Raise##
-7

##f$OpenPPL_UndefinedReturnValue##
// Every user-defined function ends with this return-value
// mainly to ensure syntactical correctness
// and to avoid undefined return values.
// OpenHoldem would return 0, when a return-value was not specified,
// but this might be meaningful in most contexts.
//
// To always be on the save site we use...
// f$OpenPPL_UndefinedReturnValue = f$OpenPPL_Fold = -1
f$OpenPPL_Fold

//*****************************************************************************
//
//  OpenPPL - Card Constants
//  ===========================
//  
//  Both ranks and suits accordint to the OpenHoldem docu
//
//*****************************************************************************

##f$OpenPPL_ConstCardAce##
14

##f$OpenPPL_ConstCardKing##
13

##f$OpenPPL_ConstCardQueen##
12

##f$OpenPPL_ConstCardJack##
11

##f$OpenPPL_ConstCardTen##
10

##f$OpenPPL_ConstCardNine##
9

##f$OpenPPL_ConstCardEight##
8

##f$OpenPPL_ConstCardSeven##
7

##f$OpenPPL_ConstCardSix##
6

##f$OpenPPL_ConstCardFive##
5

##f$OpenPPL_ConstCardFour##
4

##f$OpenPPL_ConstCardThree##
3

##f$OpenPPL_ConstCardTwo##
2

##f$OpenPPL_ConstSuitClubs##
1

##f$OpenPPL_ConstSuitDiamonds##
2

##f$OpenPPL_ConstSuitHearts##
3

##f$OpenPPL_ConstSuitSpades##
4

//*****************************************************************************
//
// OpenPPL - Betting Round Constants
//
//*****************************************************************************

##f$OpenPPL_ConstBetRoundPreflop##
1

##f$OpenPPL_ConstBetRoundFlop##
2

##f$OpenPPL_ConstBetRoundTurn##
3

##f$OpenPPL_ConstBetRoundRiver##
4

//*****************************************************************************
//
// OpenPPL - Other Constants
//
//*****************************************************************************

##f$OpenPPL_True##
1

##f$OpenPPL_False##
0

//*****************************************************************************
//
// OpenPPL - verbose errors and warning
//
// Instead of returning just -1 we define constants like
// "f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist"
// This way we get a verbose explanation in the log-file.
//
//*****************************************************************************

##f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY##
-1

##f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_Suit_Of_HoleCard_Not_Recognized_Correctly__Check_Your_TableMap##
// Treating this error as PLUS 1 to not mix the primecoding of board-cards up.
 1

##f$OpenPPL_ERROR_Betround_Out_Of_Range##
-1

##f$OpenPPL_ERROR_BotsActionsOnThisRound_Out_Of_Range##
-1

##f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_CutOffChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition3Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition2Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition3Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition2Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__No_Not_Call_This_Function##
-1

##f$OpenPPL_ERROR_Dealposition_Out_Of_Range__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__Do_Not_Call_This_Function##
-1

##f$OpenPPL_ERROR_No_Opponents_Detected__Check_Your_TableMap##
// Returning -bblind, because we divide by bblind to -1.
(0 - bblind)

##f$OpenPPL_HINT_We_Dont_Have_A_FullHouse_At_All##
// Docu says: this case is 0; and this special case needs extra care.
// However returning a high number instead of 0 seems better to uz,
// as it indicates the weakness and avoids any pitfalls.
999

##f$OpenPPL_HINT_There_Are_No_True_Raisers##
-1

##f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist##
-1

##f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated##
-1

##f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist##
-1

##f$OpenPPL_HINT_EarlyPosition2_Does_Not_Exist##
-1

##f$OpenPPL_HINT_EarlyPosition3_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition1_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition2_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition3_Does_Not_Exist##
-1

##f$OpenPPL_HINT_CutOff_Does_Not_Exist##
-1

##f$OpenPPL_HINT_There_Is_No_Raiser_Therefore_No_CurrentBet##
0

##f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board##
-1

##f$OpenPPL_HINT_Nothing_To_Do_But_All_OK##
0

##f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round##
0

//*****************************************************************************
//
// OpenPPL - Verbosity
//
// Some OpenHoldem-symbols are awfully illnamed,
// thanks to Ray E. Bornert who invented WinHoldem.
// rais, swag, $$pr0, etc.
// We provide meaningful names here to make this library more readable.
//
//*****************************************************************************

##f$OpenPPL_RankOfFirstHoleCard##
$$pr0

##f$OpenPPL_RankOfSecondHoleCard##
$$pr1

##f$OpenPPL_FirstFlopCard##
$$cr0

##f$OpenPPL_SecondFlopCard##
$$cr1

##f$OpenPPL_ThirdFlopCard##
$$cr2

##f$OpenPPL_TurnCard##
$$cr3

##f$OpenPPL_RiverCard##
$$cr4

//*****************************************************************************
//                                                                 
//  Prime-coded board ranks                                        
//  =======================                                        
//                                                                 
//  "Board = XYZ"-expressions are difficult to translate           
//  to OH-script.                                                  
//  Cards may appear more than once, e.g. 'board = ATT',	        
//  therefore we can't work with rankbits here,  	                
//  but do some prime-coding, so that we can easily check for      
//  multiple cards.                                                
//                                                                 
//  Card:      2   3   4   5   6   7   8   9   T   J   Q   K   A   
//  Coding:    2   3   5   7  11  13  17  19  23  29  31  37  41   
//                                                                 
//  Example: prime-coding for ATT = 41 * 23 * 23 = 21689           
//  Therefore a board contains ATT, exactly if its prime-coding    
//  can be divided by 21689 without a reminder.                    
//
// Note: this code gets generated by the converter and looks like:
//   ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0))
//                                                                 
//*****************************************************************


##f$prime_coded_board_ranks##
// First board card 
  [($$cr0 ==  2) ? f$PrimeCode_2 : ($$cr0 ==  3) ? f$PrimeCode_3 : 
   ($$cr0 ==  4) ? f$PrimeCode_4 : ($$cr0 ==  5) ? f$PrimeCode_5 : 
   ($$cr0 ==  6) ? f$PrimeCode_6 : ($$cr0 ==  7) ? f$PrimeCode_7 : 
   ($$cr0 ==  8) ? f$PrimeCode_8 : ($$cr0 ==  9) ? f$PrimeCode_9 : 
   ($$cr0 == 10) ? f$PrimeCode_T : ($$cr0 == 11) ? f$PrimeCode_J : 
   ($$cr0 == 12) ? f$PrimeCode_Q : ($$cr0 == 13) ? f$PrimeCode_K : 
   ($$cr0 == 14) ? f$PrimeCode_A : 1] 
*
// Second board card 
  [($$cr1 ==  2) ? f$PrimeCode_2 : ($$cr1 ==  3) ? f$PrimeCode_3 : 
   ($$cr1 ==  4) ? f$PrimeCode_4 : ($$cr1 ==  5) ? f$PrimeCode_5 : 
   ($$cr1 ==  6) ? f$PrimeCode_6 : ($$cr1 ==  7) ? f$PrimeCode_7 : 
   ($$cr1 ==  8) ? f$PrimeCode_8 : ($$cr1 ==  9) ? f$PrimeCode_9 : 
   ($$cr1 == 10) ? f$PrimeCode_T : ($$cr1 == 11) ? f$PrimeCode_J : 
   ($$cr1 == 12) ? f$PrimeCode_Q : ($$cr1 == 13) ? f$PrimeCode_K : 
   ($$cr1 == 14) ? f$PrimeCode_A : 1] 
*
// Third board card 
  [($$cr2 ==  2) ? f$PrimeCode_2 : ($$cr2 ==  3) ? f$PrimeCode_3 : 
   ($$cr2 ==  4) ? f$PrimeCode_4 : ($$cr2 ==  5) ? f$PrimeCode_5 : 
   ($$cr2 ==  6) ? f$PrimeCode_6 : ($$cr2 ==  7) ? f$PrimeCode_7 : 
   ($$cr2 ==  8) ? f$PrimeCode_8 : ($$cr2 ==  9) ? f$PrimeCode_9 : 
   ($$cr2 == 10) ? f$PrimeCode_T : ($$cr2 == 11) ? f$PrimeCode_J : 
   ($$cr2 == 12) ? f$PrimeCode_Q : ($$cr2 == 13) ? f$PrimeCode_K : 
   ($$cr2 == 14) ? f$PrimeCode_A : 1] 
*
// Fourth board card 
  [($$cr3 ==  2) ? f$PrimeCode_2 : ($$cr3 ==  3) ? f$PrimeCode_3 : 
   ($$cr3 ==  4) ? f$PrimeCode_4 : ($$cr3 ==  5) ? f$PrimeCode_5 : 
   ($$cr3 ==  6) ? f$PrimeCode_6 : ($$cr3 ==  7) ? f$PrimeCode_7 : 
   ($$cr3 ==  8) ? f$PrimeCode_8 : ($$cr3 ==  9) ? f$PrimeCode_9 : 
   ($$cr3 == 10) ? f$PrimeCode_T : ($$cr3 == 11) ? f$PrimeCode_J : 
   ($$cr3 == 12) ? f$PrimeCode_Q : ($$cr3 == 13) ? f$PrimeCode_K : 
   ($$cr3 == 14) ? f$PrimeCode_A : 1] 
*
// Fifth board card 
  [($$cr4 ==  2) ? f$PrimeCode_2 : ($$cr4 ==  3) ? f$PrimeCode_3 : 
   ($$cr4 ==  4) ? f$PrimeCode_4 : ($$cr4 ==  5) ? f$PrimeCode_5 : 
   ($$cr4 ==  6) ? f$PrimeCode_6 : ($$cr4 ==  7) ? f$PrimeCode_7 : 
   ($$cr4 ==  8) ? f$PrimeCode_8 : ($$cr4 ==  9) ? f$PrimeCode_9 : 
   ($$cr4 == 10) ? f$PrimeCode_T : ($$cr4 == 11) ? f$PrimeCode_J : 
   ($$cr4 == 12) ? f$PrimeCode_Q : ($$cr4 == 13) ? f$PrimeCode_K : 
   ($$cr4 == 14) ? f$PrimeCode_A : 1] 


##f$PrimeCode_2##
  2

##f$PrimeCode_3##
  3

##f$PrimeCode_4##
  5

##f$PrimeCode_5##
  7

##f$PrimeCode_6##
  11

##f$PrimeCode_7##
  13

##f$PrimeCode_8##
  17

##f$PrimeCode_9##
  19

##f$PrimeCode_T##
  23

##f$PrimeCode_J##
  29

##f$PrimeCode_Q##
  31

##f$PrimeCode_K##
  37

##f$PrimeCode_A##
  41
  
//*****************************************************************************
//                                                                 
//  Prime-coded hole-cards
//  ======================                                        
//    
//  Similar to prime-coded board-ranks.
//  With OH we can't check for specific suits like AhKd easiliy.
//  We have to check 2 ranks * 2 suits * 2 permuations explicitly.
//  As this is really awfule and generates long and unreadable code
//  we also use the prome-coding technique here.
//             
//*****************************************************************************
//
//  Prime numbers: http://www.miniwebtool.com/list-of-prime-numbers/?to=1000
//
//  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 
//  71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 
//  151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 
//  233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293
//
//*****************************************************************************

##f$prime_coded_hole_cards##
[f$prime_code_first_hole_card * f$prime_code_second_hole_card]

##f$prime_code_first_hole_card##
[
($$ps0 == f$OpenPPL_ConstSuitClubs)   ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   1] :
($$ps0 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   1] : 
($$ps0 == f$OpenPPL_ConstSuitHearts)  ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   1] : 
($$ps0 == f$OpenPPL_ConstSuitSpades)  ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   1] :
f$OpenPPL_ERROR_Suit_Of_HoleCard_Not_Recognized_Correctly__Check_Your_TableMap     
] 
 
##f$prime_code_second_hole_card##
[
($$ps1 == f$OpenPPL_ConstSuitClubs)   ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   1] :
($$ps1 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   1] : 
($$ps1 == f$OpenPPL_ConstSuitHearts)  ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   1] : 
($$ps1 == f$OpenPPL_ConstSuitSpades)  ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   1] :
f$OpenPPL_ERROR_Suit_Of_HoleCard_Not_Recognized_Correctly__Check_Your_TableMap   
]

//
// Clubs
//
##f$PrimeCode_2c##
  2

##f$PrimeCode_3c##
  3

##f$PrimeCode_4c##
  5

##f$PrimeCode_5c##
  7

##f$PrimeCode_6c##
  11

##f$PrimeCode_7c##
  13

##f$PrimeCode_8c##
  17

##f$PrimeCode_9c##
  19

##f$PrimeCode_Tc##
  23

##f$PrimeCode_Jc##
  29

##f$PrimeCode_Qc##
  31

##f$PrimeCode_Kc##
  37

##f$PrimeCode_Ac##
  41

//
// Diamonds
//  
##f$PrimeCode_2d##
  43

##f$PrimeCode_3d##
  47

##f$PrimeCode_4d##
  53

##f$PrimeCode_5d##
  59

##f$PrimeCode_6d##
  61

##f$PrimeCode_7d##
  67

##f$PrimeCode_8d##
  71

##f$PrimeCode_9d##
  73

##f$PrimeCode_Td##
  79

##f$PrimeCode_Jd##
  83

##f$PrimeCode_Qd##
  89

##f$PrimeCode_Kd##
  97

##f$PrimeCode_Ad##
  101

//
// Spades  
//
##f$PrimeCode_2h##
  103

##f$PrimeCode_3h##
  107

##f$PrimeCode_4h##
  109

##f$PrimeCode_5h##
  113

##f$PrimeCode_6h##
  127

##f$PrimeCode_7h##
  131

##f$PrimeCode_8h##
  137

##f$PrimeCode_9h##
  139

##f$PrimeCode_Th##
  149

##f$PrimeCode_Jh##
  151

##f$PrimeCode_Qh##
  157
  
##f$PrimeCode_Kh##
  163

##f$PrimeCode_Ah##
  167

//  
// Spades
//  
##f$PrimeCode_2s##
//  ---

##f$PrimeCode_3s##
  173

##f$PrimeCode_4s##
  179

##f$PrimeCode_5s##
  181

##f$PrimeCode_6s##
  191

##f$PrimeCode_7s##
  193

##f$PrimeCode_8s##
  197

##f$PrimeCode_9s##
  199

##f$PrimeCode_Ts##
  211

##f$PrimeCode_Js##
  223

##f$PrimeCode_Qs##
  227

##f$PrimeCode_Ks##
  229

##f$PrimeCode_As##
  233
  

//***********************************************************
//                                                           
//  Technical functions                                      
//  ===================                                      
//                                                           
//  Functions needed for integration into OpenHoldem.        
//  They translate the f$Decision-function to standard       
//  autoplayer-functions like f$alli, f$rais and f$call.     
//                                                           
//***********************************************************

##f$OpenPPL_Decision##
// f$preflop, f$flop, f$turn and f$river will be added by the translator.
// Returns either a fixed action (coded as a negative number)
// or a positive number (bet-size, counted in bets)
[betround == 1] ? f$preflop :
[betround == 2] ? f$flop :
[betround == 3] ? f$turn :
[betround == 4] ? f$river :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_RememberToSitoutIfNecessary##
// OpenHoldem handles autoplayer actions when it is heros turn,
// but f$sitin, f$sitout and f$leave once every N heartbeats,
// contrary to OpenPPL were both can happen only at heros turn.
// Therefore we have to remember a decision to SitOut somehow
// and recall it later.
[f$OpenPPL_Decision == f$OpenPPL_SitOut] ? me_st_GoBuddyTakeABreakAndABeer_1 : 0

##f$alli##
// f$alli is the very first function to be called on each turn,
// so we abuse it to initialize memory-symbhols as a side-effect
// and only then we do the real evaluation.

// We can't use addition here to call the functions in correct sequential order,
// because OH doesn't add the operands in order:
// http://www.maxinmontreal.com/forums/viewtopic.php?f=111&t=14525&start=0

   [f$OpenPPL_InitMemorySymbols * 0]
|| [f$OpenPPL_RememberToSitoutIfNecessary * 0]
|| [f$OpenPPL_Decision == f$OpenPPL_RaiseMax]
|| [(f$OpenPPL_Decision > f$OpenPPL_StackSize) && (f$OpenPPL_StackSize > 0)]

##f$betsize##
f$alli ? [balance + currentbet] :
[f$OpenPPL_Decision >= 0] ? f$OpenPPL_Decision : 0

##f$rais##
   [f$OpenPPL_Decision == f$OpenPPL_Raise]
|| [f$OpenPPL_Decision == f$OpenPPL_RaiseMax]   
|| [f$OpenPPL_Decision > 0]
//
// Below is 2 times the same expression,
// but we want to log the very verbose explanation
// only in the case of a true error
// and not for normal evaluations.
//
|| [f$OpenPPL_Decision == 0 && f$betsize == f$OpenPPL_Undefined_BetSize_Probably_Due_To_Misscraped_Pot_Defaulting_To_Minraise]

##f$call##
   [f$OpenPPL_Decision == f$OpenPPL_Check]
|| [f$OpenPPL_Decision == f$OpenPPL_Call]
|| [f$OpenPPL_AmountToCall == 0]
|| f$rais

##f$sitout##
me_re_GoBuddyTakeABreakAndABeer

  
//*****************************************************************************
//
// OpenPPL - BettingAction Symbols
//
//*****************************************************************************

##f$OpenPPL_InitBets##
// No bet in front of us to call
((currentbet == 0) && (f$OpenPPL_AmountToCall == 0)) ? me_st_MemBets_0 :
// A bet to call and we din't act before or we checked
((currentbet == 0) && (f$OpenPPL_AmountToCall > 0)) ? me_st_MemBets_1 :
// Otherwise: we did already bet ourself or call a bet.
// So don't change anything
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_Bets##
me_re_MemBets

##f$OpenPPL_BotCalledBeforeFlop##
didcallround1

##f$OpenPPL_AggressorChair##
// ac_aggressor alone is somewhat unreliable, as it gets scraped (by bets).
// But if we raise and there are super-fast calls behind us (e.g. at PokerAcademy),
// then we don't have stable frames and soon we will switch to the next betting round.
// (There are however no problems, if somebody else raises,
// because we always get stable frames at out turn.)
// So we also check for our last action and the amount to call.
// (-1 = fold 0 = check 1 = call 2 = raise e3 = swag 4 = allin)
(((prevaction ==  2) || (prevaction == 3)) && (f$OpenPPL_AmountToCall == 0)) ? userchair :
ac_aggressor

##f$OpenPPL_BotIsLastRaiser##
(f$OpenPPL_AggressorChair==userchair)

##f$OpenPPL_BotRaisedBeforeFlop##
(didraisround1 || didswaground1)

##f$OpenPPL_BotRaisedOnFlop##
(didraisround2 || didswaground2)

##f$OpenPPL_BotRaisedOnTurn##
(didraisround3 || didswaground3)

##f$OpenPPL_BotsActionsOnFlop##
// Checks are not counted
(didcallround2 + didraisround2 + didswaground2)

##f$OpenPPL_BotsActionsOnThisRound##
// Checks are not counted
(didcall + didrais + didswag)

##f$OpenPPL_BotsActionsOnThisRoundIncludingChecks##
// Folds and allins are not relevant, as then the hand is over for us.
(didchec + didcall + didswag + didrais)

##f$OpenPPL_BotsActionsPreflop##
// Checks are not counted per definition
// and we can't check preflop without posting a blind out of order (first hand only).
(didcallround1 + didraisround1 + didswaground1)

##f$OpenPPL_InitBotsLastAction##
// Initialization on first action preflop
// This has to be done *before* we call the Decision-function,
// InitBotsLastAction has to be the last init-function to be called
// (inside f$OpenPPL_InitMemorySymbols)
// because it will call the final f$Decision routine.
//
([(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? me_st_MemBotsLastAction_f$OpenPPL_None :
//
// "Initialize" first action on other rounds to last value of last round,
// i.e. do nothing and keep the old value.
//
[[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 0 : 0])
//
// Then we call f$OpenPPL_Decision and store BotsLastAction for the next time...
//
|| [
// Call = Play
   (f$OpenPPL_Decision == f$OpenPPL_Call)
|| (f$OpenPPL_Decision == f$OpenPPL_Play) ? me_st_MemBotsLastAction_f$OpenPPL_Call :
// Fold
(f$OpenPPL_Decision == f$OpenPPL_Fold) ? me_st_MemBotsLastAction_f$OpenPPL_Fold :
// Check
(f$OpenPPL_Decision == f$OpenPPL_Check) ? me_st_MemBotsLastAction_f$OpenPPL_Check :
// Bet, Raise, BetHalfPot, BetPot, etc.
// Also handling positive values for f$OpenPPL_Decision, which mean betsizes.
[  (f$OpenPPL_Decision == f$OpenPPL_Raise)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseMin)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseMax)
|| (f$OpenPPL_Decision == f$OpenPPL_Bet)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMin)
|| (f$OpenPPL_Decision == f$OpenPPL_BetHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMax)
|| (f$OpenPPL_Decision > 0)] ?
[(ncallbets == 0) ? me_st_MemBotsLastAction_f$OpenPPL_Bet : me_st_MemBotsLastAction_f$OpenPPL_Raise] :
// Other cases: this should not happen
// Handling them as "None"
me_st_MemBotsLastAction_f$OpenPPL_None
]

##f$OpenPPL_BotsLastAction##
me_re_MemBotsLastAction

##f$OpenPPL_InitBotsLastPreflopAction##
// Don't use BotsLastAction on the first orbit,
// because that variable has to be the last one to be initialized
// and is therefore undefined.
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRound == 0)] ? 
    me_st_MemBotsLastPreflopAction_f$OpenPPL_None :
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRound > 0)] ? 
    me_st_MemBotsLastPreflopAction_f$OpenPPL_BotsLastAction : 
[(betround == f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_BotsActionsOnThisRound == 0)] ?
    me_st_MemBotsLastPreflopAction_f$OpenPPL_BotsLastAction : 0  

##f$OpenPPL_BotsLastPreflopAction##
me_re_MemBotsLastPreflopAction

##f$OpenPPL_CalledOnFlop##
didcallround2

##f$OpenPPL_CalledOnTurn##
didcallround3

##f$OpenPPL_AddNopponentscalling##
f$OpenPPL_Calls + nopponentscalling

##f$OpenPPL_InitCalls##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ?
  me_st_MemCalls_nopponentscalling :
  me_st_MemCalls_f$OpenPPL_AddNopponentscalling

##f$OpenPPL_Calls##
me_re_MemCalls

##f$OpenPPL_LastRaiserCurrentBet##
raischair == 0 ? currentbet0 :
raischair == 1 ? currentbet1 :
raischair == 2 ? currentbet2 :
raischair == 3 ? currentbet3 :
raischair == 4 ? currentbet4 :
raischair == 5 ? currentbet5 :
raischair == 6 ? currentbet6 :
raischair == 7 ? currentbet7 :
raischair == 8 ? currentbet8 :
raischair == 9 ? currentbet9 :
f$OpenPPL_HINT_There_Is_No_Raiser_Therefore_No_CurrentBet

##f$OpenPPL_PlayersRaisingOrColdCallingTheLastRaise##
  (currentbet0 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet1 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet2 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet3 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet4 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet5 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet6 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet7 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet8 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet9 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)

##f$OpenPPL_CallsSinceLastRaise##
(f$OpenPPL_PlayersRaisingOrColdCallingTheLastRaise - 1)

##f$OpenPPL_Folds##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? (nplayersdealt  - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundFlop)    ? (nplayersround2 - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundTurn)    ? (nplayersround3 - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundRiver)   ? (nplayersround4 - nopponentsplaying - 1) :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_ChecksAfterHero##
// Valid second orbit only
// All active players with a zero bet
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? 0 :
nopponentschecking

##f$OpenPPL_ChecksInFrontOfHero##
// No checks preflop. Not even big blind can check (game over).
// We ignore additional blind-posters however.
(betround == f$OpenPPL_ConstBetRoundPreflop) ? 0 :
// I did already act, so no longer any posters in front of me
(currentbet > 0) ? 0 :
// A bet to call, subtract all players with a non-zero bet in front of us
(f$OpenPPL_AmountToCall > 0) ? (betposition - nopponentsbetting - 1):
// All players before us checked, not even open-folds can throw this logic off.
[betposition - 1]

##f$OpenPPL_CalculateChecks##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? f$OpenPPL_ChecksInFrontOfHero :
// Stored value of checks on previous orbit plus players behind
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 1) ? (f$OpenPPL_Checks + f$OpenPPL_ChecksAfterHero) :
// There can no longer be any checking players, so don't change anything
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitChecks##
(f$OpenPPL_BotsActionsOnThisRound <= 1) ? me_st_MemChecks_f$OpenPPL_CalculateChecks : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_Checks##
me_re_MemChecks

##f$OpenPPL_NoBettingOnFlop##
(nbetsround2 == 0)

##f$OpenPPL_NoBettingOnTurn##
(nbetsround3 == 0)

##f$OpenPPL_NoVillainBetOrRaisedOnFlop##
((raisbits2 & ~(1<<userchair)) == 0)

##f$OpenPPL_NoVillainBetOrRaisedOnTurn##
((raisbits3 & ~(1<<userchair)) == 0)

##f$OpenPPL_OpponentCalledOnFlop##
   (betround > f$OpenPPL_ConstBetRoundFlop)
&& ((didraisround2 + didswaground2) == 1)
&& !didchecround2
&& !didcallround2
&& f$OpenPPL_NoVillainBetOrRaisedOnFlop

##f$OpenPPL_OpponentCalledOnTurn##
   (betround > f$OpenPPL_ConstBetRoundTurn)
&& ((didraisround3 + didswaground3) == 1)
&& !didchecround3
&& !didcallround3
&& f$OpenPPL_NoVillainBetOrRaisedOnTurn

##f$OpenPPL_InitRaisesBeforeFlop##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MemRaisesBeforeFlop_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitRaisesOnFlop##
(betround == f$OpenPPL_ConstBetRoundFlop) ? me_st_MemRaisesOnFlop_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitRaisesOnTurn##
(betround == f$OpenPPL_ConstBetRoundTurn) ? me_st_MemRaisesOnTurn_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_NumberOfRaisesBeforeFlop##
(betround > f$OpenPPL_ConstBetRoundPreflop) ? me_re_MemRaisesBeforeFlop : 0

##f$OpenPPL_NumberOfRaisesOnFlop##
(betround > f$OpenPPL_ConstBetRoundFlop) ? me_re_MemRaisesOnFlop : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_NumberOfRaisesOnTurn##
(betround > f$OpenPPL_ConstBetRoundTurn) ? me_re_MemRaisesOnTurn : 0

##f$OpenPPL_Calculate_Raises##
(me_re_MemRaises + f$OpenPPL_RaisesSinceLastPlay)

##f$OpenPPL_InitRaises##
(f$OpenPPL_BotsActionsOnThisRound == 0) ? me_st_MemRaises_f$OpenPPL_RaisesSinceLastPlay :
me_st_MemRaises_f$OpenPPL_Calculate_Raises

##f$OpenPPL_Raises##
me_re_MemRaises

##f$OpenPPL_RaisesBeforeFlop##
(f$OpenPPL_NumberOfRaisesBeforeFlop > 0)

##f$OpenPPL_RaisesOnFlop##
(f$OpenPPL_NumberOfRaisesOnFlop > 0)

##f$OpenPPL_RaisesOnTurn##
(f$OpenPPL_NumberOfRaisesOnTurn > 0)

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPostflop##
(nopponentsraising > 0) ? (nopponentsraising - 1) : 0

##f$OpenPPL_AntesPresent##
// First orbit preflop only,
// as this function tries to guess the antes from the bets.
   [(currentbet0 > 0) && (currentbet0 < sblind) && (balance0 > 0)]
|| [(currentbet1 > 0) && (currentbet1 < sblind) && (balance1 > 0)]
|| [(currentbet2 > 0) && (currentbet2 < sblind) && (balance2 > 0)]
|| [(currentbet3 > 0) && (currentbet3 < sblind) && (balance3 > 0)]
|| [(currentbet4 > 0) && (currentbet4 < sblind) && (balance4 > 0)]
|| [(currentbet5 > 0) && (currentbet5 < sblind) && (balance5 > 0)]
|| [(currentbet6 > 0) && (currentbet6 < sblind) && (balance6 > 0)]
|| [(currentbet7 > 0) && (currentbet7 < sblind) && (balance7 > 0)]
|| [(currentbet8 > 0) && (currentbet8 < sblind) && (balance8 > 0)]
|| [(currentbet9 > 0) && (currentbet9 < sblind) && (balance9 > 0)]

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInSmallBlind##
// If we are in small-blind, there is 1 opponent "blind-raising",
// And we also have to care about potential antes
[(nopponentsraising - 1) - (f$OpenPPL_AntesPresent ? 1 : 0)]

##f$OpenPPL_NumberOfOpponentsLimpingPreflop##
// First orbit preflop only
// Does not count the user
// Does not count the big-blind, who can't limp
  [(currentbet0 == bblind) && (userchair != 0) && (f$OpenPPL_BigBlindChair != 0) ? 1 : 0]
+ [(currentbet1 == bblind) && (userchair != 1) && (f$OpenPPL_BigBlindChair != 1) ? 1 : 0]
+ [(currentbet2 == bblind) && (userchair != 2) && (f$OpenPPL_BigBlindChair != 2) ? 1 : 0]
+ [(currentbet3 == bblind) && (userchair != 3) && (f$OpenPPL_BigBlindChair != 3) ? 1 : 0]
+ [(currentbet4 == bblind) && (userchair != 4) && (f$OpenPPL_BigBlindChair != 4) ? 1 : 0]
+ [(currentbet5 == bblind) && (userchair != 5) && (f$OpenPPL_BigBlindChair != 5) ? 1 : 0]
+ [(currentbet6 == bblind) && (userchair != 6) && (f$OpenPPL_BigBlindChair != 6) ? 1 : 0]
+ [(currentbet7 == bblind) && (userchair != 7) && (f$OpenPPL_BigBlindChair != 7) ? 1 : 0]
+ [(currentbet8 == bblind) && (userchair != 8) && (f$OpenPPL_BigBlindChair != 8) ? 1 : 0]
+ [(currentbet9 == bblind) && (userchair != 9) && (f$OpenPPL_BigBlindChair != 9) ? 1 : 0]

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInBigBlind##
// If we are in big-blind, there *was* 1 opponent "blind-raising",
// but he does no longer get counted, as he either did fold,
// did call or did truely raise.
// In big blind nopponentsraising does somewhat unexpectedly
// call an open-limper as blind-raiser, so we have to adapt for that case.
// Besides of that have to care about potential antes.
(f$OpenPPL_NumberOfOpponentsLimpingPreflop >= 1) ? 
  [nopponentsraising - 1 - (f$OpenPPL_AntesPresent ? 1 : 0)] :
  [nopponentsraising - (f$OpenPPL_AntesPresent ? 1 : 0)]

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopNotInTheBlinds##
// There are (usually) 2 blindraisers which should not get countet
// And we also have to care about potential antes
[(nopponentsraising - 2) - (f$OpenPPL_AntesPresent ? 1 : 0)]

##f$OpenPPL_RaisesBeforeOurFirstAction##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0) ? 0 :
(betround > f$OpenPPL_ConstBetRoundPreflop) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPostflop :
(dealposition == 1) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInSmallBlind :
(dealposition == 2) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInBigBlind :
f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopNotInTheBlinds

##f$OpenPPL_RaisesSinceLastPlayOnOurSecondAction##
// If we checked the first time the bettor sits behind us.
[didchec && (nopponentsraising > 0) ] ? (nopponentsraising - 1) :
[didchec && (nopponentsraising == 0)] ? 0 :
// Otherwise: either we were the first bettor
// or there was a bet and maybe raises in front of us,
// so all technical "raises" behind us are true raises
nopponentsraising

##f$OpenPPL_RaisesSinceLastPlayAfterOurSecondAction##
// Now all technical raises are true raises, no bettors possible
nopponentsraising

##f$OpenPPL_RaisesSinceLastPlay##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? f$OpenPPL_RaisesBeforeOurFirstAction :
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 1) ? f$OpenPPL_RaisesSinceLastPlayOnOurSecondAction :
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks >= 2) ? f$OpenPPL_RaisesSinceLastPlayAfterOurSecondAction :
f$OpenPPL_ERROR_BotsActionsOnThisRound_Out_Of_Range

//*****************************************************************************
//
// OpenPPL - Betsizes and StackSizes - supporting technical functions
//
//*****************************************************************************

##f$OpenPPL_Chair0StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance0 + currentbet0) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair1StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance1 + currentbet1) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair2StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance2 + currentbet2) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair3StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance3 + currentbet3) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair4StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance4 + currentbet4) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair5StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance5 + currentbet5) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair6StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance6 + currentbet6) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair7StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance7 + currentbet7) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair8StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance8 + currentbet8) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair9StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance9 + currentbet9) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_ButtonStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_ButtonChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_ButtonChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_ButtonChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_ButtonChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_ButtonChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_ButtonChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_ButtonChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_ButtonChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_ButtonChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_ButtonChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CutOffStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_CutOffChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_CutOffChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_CutOffChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_CutOffChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_CutOffChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_CutOffChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_CutOffChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_CutOffChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_CutOffChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_CutOffChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_CutOffChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition3StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition3Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition3Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition2StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition2Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition2Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition1StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition1Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition3StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition3Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition3Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition2StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition2Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition2Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition1StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition1Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_BigBlindStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_BigBlindChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_BigBlindChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_BigBlindChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_BigBlindChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_BigBlindChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_BigBlindChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_BigBlindChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_BigBlindChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_BigBlindChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_BigBlindChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_SmallBlindStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_SmallBlindChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_SmallBlindChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_SmallBlindChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_SmallBlindChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_SmallBlindChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_SmallBlindChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_SmallBlindChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_SmallBlindChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_SmallBlindChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_SmallBlindChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_BigBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(f$OpenPPL_BigBlindChair == 0) ? (currentbet0 / bet) :
(f$OpenPPL_BigBlindChair == 1) ? (currentbet1 / bet) :
(f$OpenPPL_BigBlindChair == 2) ? (currentbet2 / bet) :
(f$OpenPPL_BigBlindChair == 3) ? (currentbet3 / bet) :
(f$OpenPPL_BigBlindChair == 4) ? (currentbet4 / bet) :
(f$OpenPPL_BigBlindChair == 5) ? (currentbet5 / bet) :
(f$OpenPPL_BigBlindChair == 6) ? (currentbet6 / bet) :
(f$OpenPPL_BigBlindChair == 7) ? (currentbet7 / bet) :
(f$OpenPPL_BigBlindChair == 8) ? (currentbet8 / bet) :
(f$OpenPPL_BigBlindChair == 9) ? (currentbet9 / bet) :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_SmallBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(f$OpenPPL_SmallBlindChair == 0) ? (currentbet0 / bet) :
(f$OpenPPL_SmallBlindChair == 1) ? (currentbet1 / bet) :
(f$OpenPPL_SmallBlindChair == 2) ? (currentbet2 / bet) :
(f$OpenPPL_SmallBlindChair == 3) ? (currentbet3 / bet) :
(f$OpenPPL_SmallBlindChair == 4) ? (currentbet4 / bet) :
(f$OpenPPL_SmallBlindChair == 5) ? (currentbet5 / bet) :
(f$OpenPPL_SmallBlindChair == 6) ? (currentbet6 / bet) :
(f$OpenPPL_SmallBlindChair == 7) ? (currentbet7 / bet) :
(f$OpenPPL_SmallBlindChair == 8) ? (currentbet8 / bet) :
(f$OpenPPL_SmallBlindChair == 9) ? (currentbet9 / bet) :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStackSize

##f$OpenPPL_MaxStillToActStackSizeAfterButton##
f$OpenPPL_SmallBlindStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind

##f$OpenPPL_MaxStillToActStackSizeAfterCutOff##
f$OpenPPL_ButtonStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterButton ?
  f$OpenPPL_ButtonStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterButton

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterCutOff?
  f$OpenPPL_CutOffStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterCutOff

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2

##f$OpenPPL_MinStillToActStackSizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStackSize

##f$OpenPPL_MinStillToActStackSizeAfterButton##
f$OpenPPL_SmallBlindStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterSmallBlind

##f$OpenPPL_MinStillToActStackSizeAfterCutOff##
f$OpenPPL_ButtonStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterButton ?
  f$OpenPPL_ButtonStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterButton

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterCutOff ?
  f$OpenPPL_CutOffStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterCutOff

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2

##f$OpenPPL_InitMaxOpponentStackSize##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MaxOpponentStackSize_f$OpenPPL_MaxOpponentStackSizeCalculation : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitMinOpponentStackSize##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MinOpponentStackSize_f$OpenPPL_MinOpponentStackSizeCalculation :
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_MaxOpponentStackSizeCalculation##
(bblind <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(balance_rank0 == balance) ? (balance_rank1 / bblind) : (balance_rank0 / bblind)

##f$OpenPPL_MinOpponentStackSizeCalculation##
(bblind <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
[ 1 / bblind *
[ nplayersdealt == 10 ?
    (balance_rank9 == balance ? balance_rank8 : balance_rank9) :
  nplayersdealt == 9 ?
    (balance_rank8 == balance ? balance_rank7 : balance_rank8) :
  nplayersdealt == 8 ?
    (balance_rank7 == balance ? balance_rank6 : balance_rank7) :
  nplayersdealt == 7 ?
    (balance_rank6 == balance ? balance_rank5 : balance_rank6) :
  nplayersdealt == 6 ?
    (balance_rank5 == balance ? balance_rank4 : balance_rank5) :
  nplayersdealt == 5 ?
    (balance_rank4 == balance ? balance_rank3 : balance_rank4) :
  nplayersdealt == 4 ?
    (balance_rank3 == balance ? balance_rank2 : balance_rank3) :
  nplayersdealt == 3 ?
    (balance_rank2 == balance ? balance_rank1 : balance_rank2) :
  nplayersdealt == 2 ?
    (balance_rank1 == balance ? balance_rank0 : balance_rank1) :
f$OpenPPL_ERROR_No_Opponents_Detected__Check_Your_TableMap]]

##f$OpenPPL_OpponentsWithHigherStack##
// No need to tinker with memory symbols here,
// this logic is valid for all betting rounds.
  (((balance0 + currentbet0) > (balance + currentbet)) ? 1: 0)
+ (((balance1 + currentbet1) > (balance + currentbet)) ? 1: 0)
+ (((balance2 + currentbet2) > (balance + currentbet)) ? 1: 0)
+ (((balance3 + currentbet3) > (balance + currentbet)) ? 1: 0)
+ (((balance4 + currentbet4) > (balance + currentbet)) ? 1: 0)
+ (((balance5 + currentbet5) > (balance + currentbet)) ? 1: 0)
+ (((balance6 + currentbet6) > (balance + currentbet)) ? 1: 0)
+ (((balance7 + currentbet7) > (balance + currentbet)) ? 1: 0)
+ (((balance8 + currentbet8) > (balance + currentbet)) ? 1: 0)
+ (((balance9 + currentbet9) > (balance + currentbet)) ? 1: 0)

##f$OpenPPL_CalculateStartingStackSize##
// Precondition: first hand, preflop
(bblind > 0) ? ((currentbet + balance) / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_InitStartingStackSize##
((handsplayed == 0 || f$OpenPPL_StartingStackSize == 0) && (betround == f$OpenPPL_ConstBetRoundPreflop)) ?
  me_st_MemStartingStackSize_f$OpenPPL_CalculateStartingStackSize : f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_StartingStackSize##
me_re_MemStartingStackSize

//*****************************************************************************
//
// OpenPPL - Betsizes and StackSizes
//
//*****************************************************************************

##f$OpenPPL_DollarsToCall##
(call <= balance) ? call : balance

##f$OpenPPL_AmountToCall##
(bblind > 0) ? (f$OpenPPL_DollarsToCall / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_BetSize##
ncallbets

##f$OpenPPL_BigBlindSize##
bet1

##f$OpenPPL_MaxOpponentStackSize##
me_re_MaxOpponentStackSize

##f$OpenPPL_MaxStillToActStackSize##
userchair == f$OpenPPL_BigBlindChair        ? -1 :
userchair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind      :
userchair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MaxStillToActStackSizeAfterButton          :
userchair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MaxStillToActStackSizeAfterCutOff          :
userchair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3 :
userchair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2 :
userchair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1 :
userchair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3  :
userchair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2  :
userchair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition1  :
f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated

##f$OpenPPL_MinOpponentStackSize##
me_re_MinOpponentStackSize

##f$OpenPPL_MinStillToActStackSize##
userchair == f$OpenPPL_BigBlindChair        ? -1:
userchair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MinStillToActStackSizeAfterSmallBlind      :
userchair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MinStillToActStackSizeAfterButton          :
userchair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MinStillToActStackSizeAfterCutOff          :
userchair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3 :
userchair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2 :
userchair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1 :
userchair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3  :
userchair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2  :
userchair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition1  :
f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated

##f$OpenPPL_PotSize##
(bblind > 0) ? (pot / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_StackSize##
(bblind > 0) ? (balance / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_TotalInvested##
(betround == f$OpenPPL_ConstBetRoundPreflop && nbetsround  > 0) ? ncurrentbets :
(betround == f$OpenPPL_ConstBetRoundFlop    && nbetsround1 > 0) ? (nbetsround1 + ncurrentbets) :
(betround == f$OpenPPL_ConstBetRoundTurn    && nbetsround1 > 0) ? (nbetsround1 + nbetsround2 + ncurrentbets) :
(betround == f$OpenPPL_ConstBetRoundRiver   && nbetsround1 > 0) ? (nbetsround1 + nbetsround2 + nbetsround3 + ncurrentbets) :
f$OpenPPL_ERROR_Betround_Out_Of_Range

//*****************************************************************************
//
// OpenPPL - Board Symbols
//
//*****************************************************************************

##f$OpenPPL_2ndBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo   :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_AcePresentOnFlop##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardAce) || (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardAce) || (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardAce)

##f$OpenPPL_AcePresentOnTurn##
f$OpenPPL_AcePresentOnFlop || (f$OpenPPL_TurnCard == f$OpenPPL_ConstCardAce)

##f$OpenPPL_BestBoardCard##
rankhicommon

##f$OpenPPL_DoubleGutShotOnBoard##
((rankbitscommon >> 8) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 7) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 6) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 5) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 4) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 3) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 2) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 1) &0x7f) == 0x5d ? 1 : 0

##f$OpenPPL_ExactlyOneStraightPossibleOnFlop##
   [f$OpenPPL_StraightPossibleOnFlop && f$OpenPPL_AcePresentOnFlop && ((f$OpenPPL_LowestFlopCard >= 10) || (f$OpenPPL_TopFlopCard <= 5))]
|| [f$OpenPPL_StraightPossibleOnFlop && (f$OpenPPL_TopFlopCard - f$OpenPPL_LowestFlopCard == 4)]

##f$OpenPPL_FlopCardPairedonTurn##
   f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard
|| f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard
|| f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard

##f$OpenPPL_FlushPossible##
(nsuitedcommon >= 3)

##f$OpenPPL_FlushOnBoard##
($$cs0 == $$cs1 && $$cs0 == $$cs2 && $$cs0 == $$cs3 && $$cs0 == $$cs4)

##f$OpenPPL_FlushPossibleOnFlop##
($$cs0 == $$cs1 && $$cs0 == $$cs2)

##f$OpenPPL_FlushPossibleOnTurn##
[  ($$cs0 == $$cs1 && $$cs0 == $$cs2)
|| ($$cs0 == $$cs1 && $$cs0 == $$cs3)
|| ($$cs0 == $$cs2 && $$cs0 == $$cs3)
|| ($$cs1 == $$cs2 && $$cs1 == $$cs3) ]

##f$OpenPPL_FourCardsToWheelOnBoard##
`(rankbitscommon & 0b0000000000111110) >= 4

##f$OpenPPL_FourOf1SuiteOnTurn##
(($$cs0 == $$cs1) && ($$cs2 == $$cs3) && ($$cs0 == $$cs3))

##f$OpenPPL_FullHouseOnBoard##
(pokervalcommon & fullhouse)

##f$OpenPPL_HighestRankOnFlop##
[(f$OpenPPL_FirstFlopCard >= f$OpenPPL_SecondFlopCard) && (f$OpenPPL_FirstFlopCard >= f$OpenPPL_ThirdFlopCard)] ? f$OpenPPL_FirstFlopCard :
[(f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard) && (f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard)] ? f$OpenPPL_SecondFlopCard :
[(f$OpenPPL_ThirdFlopCard >= f$OpenPPL_FirstFlopCard) && (f$OpenPPL_ThirdFlopCard >= f$OpenPPL_SecondFlopCard)] ? f$OpenPPL_ThirdFlopCard :
-1

##f$OpenPPL_KingPresentOnFlop##
   (f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardKing)
|| (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardKing)
|| (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardKing)

##f$OpenPPL_LowCardsOnBoard##
`f$OpenPPL_RankBitsCommonLowCardsOnly

##f$OpenPPL_MoreThanOneStraightPossibleOnFlop##
f$OpenPPL_StraightPossibleOnFlop && !f$OpenPPL_ExactlyOneStraightPossibleOnFlop

##f$OpenPPL_MoreThanOneStraightPossibleOnRiver##
(betround == f$OpenPPL_ConstBetRoundRiver && (f$OpenPPL_NumberOfStraightsPossibleOnRiver == 1))

##f$OpenPPL_RankBitsCommonRiver##
// As this can only be called at the river it is identical to rankbiscommon
rankbitscommon

##f$OpenPPL_NumberOfStraightsPossibleOnTurn##
  (`((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_NumberOfStraightsPossibleOnRiver##
  (`((f$OpenPPL_RankBitsCommonRiver >> 10) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  9) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  8) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  7) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  6) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  5) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  4) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  3) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  2) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_MoreThanOneOneCardStraightPossible##
f$OpenPPL_DoubleGutShotOnBoard || f$OpenPPL_OpenEndedStraightDrawOnBoard

##f$OpenPPL_MoreThanOneStraightPossibleOnTurn##
(f$OpenPPL_NumberOfStraightsPossibleOnTurn > 1)

##f$OpenPPL_NumberOfOneCardStraightsPossibleOnTurn##
  (f$OpenPPL_OneCardStraightPossibleOnTurn_AceHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_KingHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_QueenHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_JackHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_TenHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_NineHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_EightHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_SevenHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_SixHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_FiveHigh  ? 1 : 0)

##f$OpenPPL_OneCardFlushPossible##
(nsuitedcommon >= 4)

##f$OpenPPL_OneCardStraightFlushPossible##
(nstraightflushfillcommon <= 1)

##f$OpenPPL_OneCardStraightPossible##
(nstraightfillcommon <= 1)

##f$OpenPPL_OneCardStraightPossibleOnTurn_AceHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b111110000000000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_KingHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b011111000000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_QueenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b001111100000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_JackHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000111110000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_TenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000011111000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_NineHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000001111100000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_EightHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000111110000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_SevenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000011111000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_SixHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000001111100) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_FiveHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000000111110) >= 4)

##f$OpenPPL_OneCardStraightPossibleOnTurn##
(f$OpenPPL_NumberOfOneCardStraightsPossibleOnTurn >= 1)

##f$OpenPPL_Only1OneCardStraightPossible##
f$OpenPPL_OneCardStraightPossible && !f$OpenPPL_MoreThanOneOneCardStraightPossible

##f$OpenPPL_OpenEndedStraightDrawOnBoard##
(nstraightcommon == 4 && (`((rankbitscommon >> 10) & 0x1f) < 4) && (`((rankbitscommon >> 1) & 0x1f) < 4)) ? 1 : 0

##f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop##
[(f$OpenPPL_TopFlopCard - f$OpenPPL_2ndTopFlopCard <= 3) && (f$OpenPPL_TopFlopCard != f$OpenPPL_ConstCardAce)]
|| [(f$OpenPPL_2ndTopFlopCard - f$OpenPPL_LowestFlopCard <= 3) && (f$OpenPPL_LowestFlopCard >= f$OpenPPL_ConstCardTwo)]

##f$OpenPPL_IndividualOverCardsOnBoard##
// Works like OvercardsOnBoard, except that it counts cards only once
`[rankbitscommon >> (rankhiplayer + 1)]

##f$OpenPPL_OvercardsOnBoard##
  ((f$OpenPPL_FirstFlopCard  > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_SecondFlopCard > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_ThirdFlopCard  > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_TurnCard       > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_RiverCard      > rankhiplayer) ? 1 : 0)

##f$OpenPPL_PairOnBoard##
(nrankedcommon >= 2)

##f$OpenPPL_PairOnFlop##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard)

##f$OpenPPL_LowestFlopCard##
f$OpenPPL_FirstFlopCard  <= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  <=  f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_SecondFlopCard <= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard <=  f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_ThirdFlopCard  <= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  <=  f$OpenPPL_SecondFlopCard ? f$OpenPPL_ThirdFlopCard : 
-1

##f$OpenPPL_LowestFlopCardPairedOnTurn##
(f$OpenPPL_LowestFlopCard == f$OpenPPL_TurnCard) 

##f$OpenPPL_OnlyOneStraightPossible##
f$OpenPPL_StraightPossible
&& ![f$OpenPPL_MoreThanOneStraightPossibleOnFlop
  || f$OpenPPL_MoreThanOneStraightPossibleOnTurn
  || f$OpenPPL_MoreThanOneStraightPossibleOnRiver]

##f$OpenPPL_PairOnTurn##
   f$OpenPPL_PairOnFlop
|| f$OpenPPL_TopFlopCardPairedonTurn
|| f$OpenPPL_2ndTopFlopCardPairedOnTurn
|| f$OpenPPL_LowestFlopCardPairedOnTurn

##f$OpenPPL_QuadsOnBoard##
(nrankedcommon == 4)

##f$OpenPPL_QueenPresentOnFlop##
   (f$OpenPPL_FirstFlopCard==f$OpenPPL_ConstCardQueen)
|| (f$OpenPPL_SecondFlopCard==f$OpenPPL_ConstCardQueen)
|| (f$OpenPPL_ThirdFlopCard==f$OpenPPL_ConstCardQueen)

##f$OpenPPL_RankBitsCommonLowCardsOnly##
// Bits 8..ace(low), last bit is unused
(rankbitscommon & 0b111111110)

##f$OpenPPL_RiverCardisOvercardToBoard##
[  f$OpenPPL_RiverCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_ThirdFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_TurnCard ]

##f$OpenPPL_2ndTopFlopCard##
f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_SecondFlopCard <= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_ThirdFlopCard  :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_FirstFlopCard  :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_FirstFlopCard  <= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_ThirdFlopCard  :
f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard ? f$OpenPPL_FirstFlopCard  :
f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  <= f$OpenPPL_SecondFlopCard ? f$OpenPPL_SecondFlopCard :
// Otherwise: there is no 2ndTopFlopCard, because all ranks are even
-1

// Shanky is a bit inconsistent with the naming
// So we provide both 2ndTopFlopCardPairedOnRiver and SecondTopFlopCardPairedOnRiver,
// same for turn. "SecondTopFlopCardPairedOnRiver" is the "standard" here.

##f$OpenPPL_SecondTopFlopCardPairedOnRiver##
f$OpenPPL_2ndTopFlopCardPairedOnRiver

##f$OpenPPL_SecondTopFlopCardPairedOnTurn##
f$OpenPPL_2ndTopFlopCardPairedOnTurn

##f$OpenPPL_2ndTopFlopCardPairedOnRiver##
(f$OpenPPL_2ndTopFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_2ndTopFlopCardPairedOnTurn##
(f$OpenPPL_2ndTopFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_srankbitshero##
 (($$ps0==tsuit ? (f$OpenPPL_RankOfFirstHoleCard!=f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_RankOfFirstHoleCard : 0b100000000000010) : 0)
| ($$ps1==tsuit ? (f$OpenPPL_RankOfSecondHoleCard!=f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_RankOfSecondHoleCard : 0b100000000000010) : 0))

##f$OpenPPL_srankavailable##
// Available suited cards for other players,
// possibly contributing to a flush or straight flush
~(srankbitscommon | f$OpenPPL_srankbitshero)

##f$OpenPPL_StraightFlushPossibleByOthers##
(nstraightflushfillcommon <= 2)

##f$OpenPPL_SuitsOnBoard##
(betround == f$OpenPPL_ConstBetRoundFlop)  ? f$OpenPPL_SuitsOnFlop :
(betround == f$OpenPPL_ConstBetRoundTurn)  ? f$OpenPPL_SuitsOnTurn :
(betround == f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_SuitsOnRiver :
f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round

##f$OpenPPL_SuitsOnFlop##
(betround < f$OpenPPL_ConstBetRoundFlop) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ ($$cs0 == $$cs1 && $$cs1 == $$cs2) ? 1 :
 (($$cs0 == $$cs1 && $$cs1 != $$cs2) || ($$cs0 == $$cs2 && $$cs0 != $$cs1) || ($$cs0 != $$cs1 && $$cs1 == $$cs2)) ? 2 :
  ($$cs0 != $$cs1 && $$cs1 != $$cs2 && $$cs0 != $$cs2) ? 3 : f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY]

##f$OpenPPL_SuitsOnRiver##
(betround < f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ f$OpenPPL_SuitsOnTurn
  + ((($$cs4 != $$cs0) && ($$cs4 != $$cs1) && ($$cs4 != $$cs2) && ($$cs4 != $$cs3)) ? 1 : 0)]
  
##f$OpenPPL_SuitsOnTurn##
(betround < f$OpenPPL_ConstBetRoundTurn) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ f$OpenPPL_SuitsOnFlop 
  + ((($$cs3 != $$cs0) && ($$cs3 != $$cs1) && ($$cs3 != $$cs2)) ? 1 : 0)]
  
##f$OpenPPL_StraightFlushPossible##
`((srankbitscommon >> 10) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 9) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 8) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 7) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 6) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 5) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 4) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 3) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 2) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 1) & 0x1f) >= 3 ? 1 : 0

##f$OpenPPL_StraightOnBoard##
(nstraightcommon >= 5)

##f$OpenPPL_StraightPossible##
(nstraightfillcommon <= 2)

##f$OpenPPL_RankBitsCommOnFlop##
  (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_FirstFlopCard : 0b100000000000010)
| (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_SecondFlopCard : 0b100000000000010)
| (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_ThirdFlopCard : 0b100000000000010)

##f$OpenPPL_RankBitsCommonTurn##
  (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_FirstFlopCard : 0b100000000000010)
| (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_SecondFlopCard : 0b100000000000010)
| (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_ThirdFlopCard : 0b100000000000010)
| (f$OpenPPL_TurnCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_TurnCard : 0b100000000000010)

##f$OpenPPL_StraightPossibleOnFlop##
`(((f$OpenPPL_RankBitsCommOnFlop >> 10) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  9) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  8) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  7) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  6) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  5) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  4) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  3) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  2) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_StraightPossibleOnTurn##
`(((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_ThreeCardStraightOnBoard##
nstraightcommon >= 3

##f$OpenPPL_TopFlopCard##
f$OpenPPL_FirstFlopCard >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard >= f$OpenPPL_ThirdFlopCard ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_ThirdFlopCard >= f$OpenPPL_FirstFlopCard && f$OpenPPL_ThirdFlopCard >= f$OpenPPL_SecondFlopCard ? f$OpenPPL_ThirdFlopCard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_TopFlopCardPairedonRiver##
(f$OpenPPL_TopFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_TopFlopCardPairedonTurn##
(f$OpenPPL_TopFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_TripsOnBoard##
(nrankedcommon >= 3)

##f$OpenPPL_TripsOnBoardOnTurn##
   (f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard && f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard)
|| (f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard && f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard)
|| (f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard && f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard)
|| (f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard && f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_TurnCardisOvercardToBoard##
[  f$OpenPPL_TurnCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_TurnCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_TurnCard > f$OpenPPL_ThirdFlopCard ]

##f$OpenPPL_TurnCardPaired##
(f$OpenPPL_TurnCard == f$OpenPPL_RiverCard)

##f$OpenPPL_TwoOfOneSuitPresentOnFlop##
(($$cs0 == $$cs1) || ($$cs0 == $$cs2) || ($$cs1 == $$cs2))

##f$OpenPPL_TwoPairOnBoard##
(pokervalcommon & twopair) || (pokervalcommon & fullhouse)

##f$OpenPPL_UncoordinatedFlop##
!f$OpenPPL_PairOnFlop
// No possible flush: guaranteed by the next condition...
// three different suits
&& (f$OpenPPL_SuitsOnFlop == 3)
&& !f$OpenPPL_StraightPossibleOnFlop
&& !f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop

##f$OpenPPL_WheelPossible##
`((rankbitscommon & 0b111110) >= 3)

//*****************************************************************************
//
// OpenPPL - Hand(Strength) Symbols
//
//*****************************************************************************

##f$OpenPPL_HadOverPairOnFlop##
[  ispair
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_ThirdFlopCard ]

##f$OpenPPL_HadPairOnFlop##
   ispair 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_ThirdFlopCard  
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard  
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_ThirdFlopCard

##f$OpenPPL_HadPairOnTurn##
   f$OpenPPL_HadPairOnFlop 
|| f$OpenPPL_FlopCardPairedonTurn 
|| f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_TurnCard

##f$OpenPPL_HadTopPairOnFlop##
[(f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_HighestRankOnFlop) || (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_HighestRankOnFlop)]

##f$OpenPPL_HighestRankOnTurn##
((f$OpenPPL_TurnCard > f$OpenPPL_HighestRankOnFlop) ? f$OpenPPL_TurnCard : f$OpenPPL_HighestRankOnFlop)

##f$OpenPPL_HadTopPairOnTurn##
[ f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_HighestRankOnTurn || f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_HighestRankOnTurn ]

##f$OpenPPL_HadTwoPairOnFlop##
   (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_ThirdFlopCard)
&& (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_ThirdFlopCard)
&& !ispair

##f$OpenPPL_Have2ndBestKicker##
(mh_kickerbetter == 1)

##f$OpenPPL_Have2ndBestKickerOrBetter##
f$OpenPPL_Have2ndBestKicker || f$OpenPPL_HaveBestKickerOrBetter

##f$OpenPPL_Have2ndBestOverPair##
   ($KK
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardKing)

##f$OpenPPL_Have2ndBestOverPairOrBetter##
(f$OpenPPL_Have2ndBestOverPair || f$OpenPPL_HaveBestOverPairOrBetter)

##f$OpenPPL_Have2ndNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)]

##f$OpenPPL_Have2ndNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsAceHigh##
`(rankbitscommon & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing  :
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsKingHigh##
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsQueenHigh##
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsJackHigh##
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsTenHigh##
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsNineHigh##
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsEightHigh##
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSevenHigh##
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix  :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSixHigh##
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOfBestPossibleStraight##
`(rankbitscommon & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce   :
`(rankbitscommon & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing  :
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
-1

##f$OpenPPL_HighCardOf2ndBestPossibleStraight##
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardAce)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsAceHigh   :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardKing)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsKingHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardQueen) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsQueenHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardJack)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsJackHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardTen)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsTenHigh   :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardNine)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsNineHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardEight) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsEightHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardSeven) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSevenHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardSix)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSixHigh   :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOfOurStraight##
// Precondition: we have a straight
`(rankbits & 0b111110000000000) == 5 ? f$OpenPPL_ConstCardAce   :
`(rankbits & 0b011111000000000) == 5 ? f$OpenPPL_ConstCardKing  :
`(rankbits & 0b001111100000000) == 5 ? f$OpenPPL_ConstCardQueen :
`(rankbits & 0b000111110000000) == 5 ? f$OpenPPL_ConstCardJack  :
`(rankbits & 0b000011111000000) == 5 ? f$OpenPPL_ConstCardTen   :
`(rankbits & 0b000001111100000) == 5 ? f$OpenPPL_ConstCardNine  :
`(rankbits & 0b000000111110000) == 5 ? f$OpenPPL_ConstCardEight :
`(rankbits & 0b000000011111000) == 5 ? f$OpenPPL_ConstCardSeven :
`(rankbits & 0b000000001111100) == 5 ? f$OpenPPL_ConstCardSix   :
`(rankbits & 0b000000000111110) == 5 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__Do_Not_Call_This_Function

##f$OpenPPL_Have2ndNutStraight##
f$OpenPPL_HaveStraight
&& (f$OpenPPL_HighCardOf2ndBestPossibleStraight == f$OpenPPL_HighCardOfOurStraight)

##f$OpenPPL_Have2ndOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_BestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_Have2ndTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_Have2ndTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_TopBitOfRankBitsCommon##
(1 << rankhicommon)

##f$OpenPPL_2ndTopBitOfRankBitsCommon##
(1 << f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_3rdTopBitOfRankBitsCommon##
(1 << f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_4thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_5thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_RankBitsCommonWithoutTopBit##
rankbitscommon & ~f$OpenPPL_TopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopTwoBits##
f$OpenPPL_RankBitsCommonWithoutTopBit & ~f$OpenPPL_2ndTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopThreeBits##
f$OpenPPL_RankBitsCommonWithoutTopTwoBits & ~f$OpenPPL_3rdTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopFourBits##
f$OpenPPL_RankBitsCommonWithoutTopThreeBits & ~f$OpenPPL_4thTopBitOfRankBitsCommon

##f$OpenPPL_Have3rdBestKicker##
(mh_kickerbetter == 2)

##f$OpenPPL_Have3rdBestKickerOrBetter##
f$OpenPPL_Have3rdBestKicker || f$OpenPPL_Have2ndBestKickerOrBetter

##f$OpenPPL_Have3rdBestOverPair##
   $QQ
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardQueen

##f$OpenPPL_3rdBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have3rdBestOverPairOrBetter##
(f$OpenPPL_Have3rdBestOverPair ||  f$OpenPPL_Have2ndBestOverPairOrBetter)

##f$OpenPPL_Have3rdNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)]

##f$OpenPPL_Have3rdNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_Have3rdOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_2ndBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_Have3rdTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_3rdBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_Have3rdTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_Have4thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)]

##f$OpenPPL_Have4thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)

##f$OpenPPL_4thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have4thOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_3rdBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_Have4thTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_4thBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_Have4thTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_Have5thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)]

##f$OpenPPL_Have5thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)

##f$OpenPPL_5thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have5thOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_4thBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_HaveAnyKindOfInsideStraightDraw##
// Note: This does also count straightdraws at the board,
// where we don't contribute any card. Special care should be taken
// in f$OpenPPL_HaveInsideStraightDraw
(nstraightfill <= 1)

##f$OpenPPL_HaveBackdoorFlushDrawContributingTwoCards##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& ($$ps0 == tsuit)
&& ($$ps1 == tsuit)

##f$OpenPPL_HaveBackdoorNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveBackDoor2ndNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HaveBackDoor3rdNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_HaveBackdoorFlushDraw##
   f$OpenPPL_HaveBackdoorFlushDrawContributingTwoCards
|| f$OpenPPL_HaveBackdoorNutFlushDraw
|| f$OpenPPL_HaveBackDoor2ndNutFlushDraw

##f$OpenPPL_HaveBestKicker##
(mh_kickerbetter == 0)

##f$OpenPPL_HaveBestKickerOrBetter##
(f$OpenPPL_HaveBestKicker || f$OpenPPL_HavePair  || f$OpenPPL_HaveOverPairOrBetter)

##f$OpenPPL_HaveBestOverPair##
   ($AA
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardAce)

##f$OpenPPL_HaveBestOverPairOrBetter##
  (f$OpenPPL_HaveBestOverPair
|| f$OpenPPL_HaveTwoPair
|| f$OpenPPL_HaveSet
|| f$OpenPPL_HaveTrips
|| f$OpenPPL_HaveStraight
|| f$OpenPPL_HaveFlush
|| f$OpenPPL_HaveFullHouse
|| f$OpenPPL_HaveQuads
|| f$OpenPPL_HaveStraightFlush)

##f$OpenPPL_LowestBitOfRankBitsCommon##
(1<<ranklocommon)

##f$OpenPPL_RankBitsCommonWithoutLowestBit##
// we negate lowest-bit and then do an and-operation
rankbitscommon & ~f$OpenPPL_LowestBitOfRankBitsCommon

##f$OpenPPL_LowestBoardCard##
ranklocommon

##f$OpenPPL_2ndLowestBoardCard##
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000000100) != 1 ? f$OpenPPL_ConstCardTwo   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000001000) != 1 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000010000) != 1 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000100000) != 1 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000001000000) != 1 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000010000000) != 1 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000100000000) != 1 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000001000000000) != 1 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000010000000000) != 1 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000100000000000) != 1 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b001000000000000) != 1 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b010000000000000) != 1 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b100000000000000) != 1 ? f$OpenPPL_ConstCardAce   :
-1

##f$OpenPPL_HaveBottomPair##
[ isonepair && (rankhiplayer == ranklocommon || rankloplayer == ranklocommon) ]

##f$OpenPPL_HaveBottomSet##
((nrankedcommon == 1) && ispair && isthreeofakind && (rankhiplayer == ranklocommon))

##f$OpenPPL_HaveBottomTwoPair##
   (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_LowestBoardCard && f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndLowestBoardCard)
|| (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndLowestBoardCard && f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_LowestBoardCard)

##f$OpenPPL_HaveDoubleGutshotDraw##
   `((rankbits >> 1) & 0b1011101) == 5  // A_345_7
|| `((rankbits >> 2) & 0b1011101) == 5  // 2_456_8
|| `((rankbits >> 3) & 0b1011101) == 5  // 3_567_9
|| `((rankbits >> 4) & 0b1011101) == 5  // 4_678_T
|| `((rankbits >> 5) & 0b1011101) == 5  // 5_789_J
|| `((rankbits >> 6) & 0b1011101) == 5  // 6_89T_Q
|| `((rankbits >> 7) & 0b1011101) == 5  // 8_9TJ_K
|| `((rankbits >> 8) & 0b1011101) == 5  // 9_TJQ_A
|| `((rankbits >> 1) & 0b11011011) == 6 // A2_45_78
|| `((rankbits >> 2) & 0b11011011) == 6 // 23_56_89
|| `((rankbits >> 3) & 0b11011011) == 6 // 34_67_9T
|| `((rankbits >> 4) & 0b11011011) == 6 // 45_78_TJ
|| `((rankbits >> 5) & 0b11011011) == 6 // 56_89_JQ
|| `((rankbits >> 6) & 0b11011011) == 6 // 67_9T_QK
|| `((rankbits >> 7) & 0b11011011) == 6 // 78_TJ_KA

##f$OpenPPL_HaveFlush##
(nsuited >= 5)

##f$OpenPPL_HaveFlushDraw##
(nsuited >= 4)

##f$OpenPPL_HaveFullHouse##
[isfullhouse || f$OpenPPL_HaveQuads] &&!(pokervalcommon & threeofakind)

##f$OpenPPL_HaveNothing##
!f$OpenPPL_HavePair && !(f$OpenPPL_Overcards == 2) && !f$OpenPPL_HaveBestOverPairOrBetter
&& !f$OpenPPL_HaveBackdoorFlushDraw
// && !f$OpenPPL_HaveBackdoorStraightDraw

##f$OpenPPL_HaveNutFlush##
    f$OpenPPL_HaveNutStraightFlush
|| [f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]

##f$OpenPPL_HaveNutFlushCard##
(f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveNutFlushDraw##
    f$OpenPPL_HaveNutStraightFlush
|| [f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]


##f$OpenPPL_HaveNutStraight##
ishistraight

##f$OpenPPL_RankBitsCommonWithAdditionalAce##
rankbitscommon | 0b100000000000010

##f$OpenPPL_RankBitsCommonWithAdditionalKing##
rankbitscommon | 0b010000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalQueen##
rankbitscommon | 0b001000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalJack##
rankbitscommon | 0b000100000000000

##f$OpenPPL_RankBitsCommonWithAdditionalTen##
rankbitscommon | 0b000010000000000

##f$OpenPPL_RankBitsCommonWithAdditionalNine##
rankbitscommon | 0b000001000000000

##f$OpenPPL_RankBitsCommonWithAdditionalEight##
rankbitscommon | 0b000000100000000

##f$OpenPPL_RankBitsCommonWithAdditionalSeven##
rankbitscommon | 0b000000010000000

##f$OpenPPL_RankBitsCommonWithAdditionalSix##
rankbitscommon | 0b000000001000000

##f$OpenPPL_RankBitsCommonWithAdditionalFive##
rankbitscommon | 0b000000000100000

##f$OpenPPL_RankBitsCommonWithAdditionalFour##
rankbitscommon | 0b000000000010000

##f$OpenPPL_RankBitsCommonWithAdditionalThree##
rankbitscommon | 0b000000000001000

##f$OpenPPL_RankBitsCommonWithAdditionalTwo##
rankbitscommon | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
`(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_RankBitsWithAdditionalAce##
rankbits | 0b100000000000010

##f$OpenPPL_RankBitsWithAdditionalKing##
rankbits | 0b010000000000000

##f$OpenPPL_RankBitsWithAdditionalQueen##
rankbits | 0b001000000000000

##f$OpenPPL_RankBitsWithAdditionalJack##
rankbits | 0b000100000000000

##f$OpenPPL_RankBitsWithAdditionalTen##
rankbits | 0b000010000000000

##f$OpenPPL_RankBitsWithAdditionalNine##
rankbits | 0b000001000000000

##f$OpenPPL_RankBitsWithAdditionalEight##
rankbits | 0b000000100000000

##f$OpenPPL_RankBitsWithAdditionalSeven##
rankbits | 0b000000010000000

##f$OpenPPL_RankBitsWithAdditionalSix##
rankbits | 0b000000001000000

##f$OpenPPL_RankBitsWithAdditionalFive##
rankbits | 0b000000000100000

##f$OpenPPL_RankBitsWithAdditionalFour##
rankbits | 0b000000000010000

##f$OpenPPL_RankBitsWithAdditionalThree##
rankbits | 0b000000000001000

##f$OpenPPL_RankBitsWithAdditionalTwo##
rankbits | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalAce & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
`(f$OpenPPL_RankBitsWithAdditionalAce & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalKing & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalKing & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalTwo & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalTwo & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard)

##f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight##
  f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard

##f$OpenPPL_HaveNutStraightDraw##
(nsuitedcommon < 2) && (f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight >= 2)

##f$OpenPPL_HaveInsideNutStraightDraw##
(f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight >= 1)

##f$OpenPPL_HaveInsideStraightDraw##
f$OpenPPL_HaveAnyKindOfInsideStraightDraw

##f$OpenPPL_HaveNuts##
(nhandshi == 0)

##f$OpenPPL_HaveNutStraightFlush##
isstraightflush && (nhandshi == 0)

##f$OpenPPL_HaveOpenEndedStraightDraw##
f$OpenPPL_HaveStraight
|| ((rankbits >> 0) & 0b111100) == 0b111100 // 5432
|| ((rankbits >> 1) & 0b111100) == 0b111100 // 6543
|| ((rankbits >> 2) & 0b111100) == 0b111100 // 7654
|| ((rankbits >> 3) & 0b111100) == 0b111100 // 8765
|| ((rankbits >> 4) & 0b111100) == 0b111100 // 9876
|| ((rankbits >> 5) & 0b111100) == 0b111100 // T987
|| ((rankbits >> 6) & 0b111100) == 0b111100 // JT98
|| ((rankbits >> 7) & 0b111100) == 0b111100 // QJT9
|| ((rankbits >> 8) & 0b111100) == 0b111100 // KQJT

##f$OpenPPL_HaveQuads##
[ isfourofakind && (nrankedcommon < 4) ]

##f$OpenPPL_HaveOverPair##
ispair && (rankhiplayer > rankhicommon)

##f$OpenPPL_HaveOverPairOrBetter##
f$OpenPPL_HaveOverPair || f$OpenPPL_HaveBestOverPairOrBetter

##f$OpenPPL_HavePair##
[  f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_RankOfSecondHoleCard
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_ThirdFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_RiverCard
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_ThirdFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_RiverCard ]

##f$OpenPPL_HavePocketPair##
ispair

##f$OpenPPL_HaveSet##
[  ispair
&& (  (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_FirstFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_SecondFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_ThirdFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_TurnCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_RiverCard)) ]

##f$OpenPPL_HaveTrips##
!ispair
&&   [(pokerval & threeofakind) && !(pokervalcommon & threeofakind)
  || ((pokerval & fullhouse)    && `(pcbits & 0b11100) == 1)
  ||  (pokerval & fourofakind)  && !(pokervalcommon & fourofakind)]

##f$OpenPPL_HaveStraight##
(nstraightfill == 0)

##f$OpenPPL_HaveStraightDraw##
   f$OpenPPL_HaveOpenEndedStraightDraw 
|| f$OpenPPL_HaveDoubleGutshotDraw

##f$OpenPPL_HaveStraightFlush##
(isstraightflush || isroyalflush)

##f$OpenPPL_CommonCard0Paired##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard1Paired##
(f$OpenPPL_SecondFlopCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard2Paired##
(f$OpenPPL_ThirdFlopCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard3Paired##
(f$OpenPPL_TurnCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard4Paired##
(f$OpenPPL_RiverCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_RiverCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RiverCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_RankBitsCommonWithoutCommonRank0Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank1Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank2Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank3Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_TurnCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_TurnCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank4Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_RiverCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_RiverCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutPairs##
  f$OpenPPL_RankBitsCommonWithoutCommonRank0Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank1Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank2Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank3Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank4Pair

##f$OpenPPL_HighestUnpairedBoardCard##
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardAce)   & 1 ? f$OpenPPL_ConstCardAce   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardKing)  & 1 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardQueen) & 1 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardJack)  & 1 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardTen)   & 1 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardNine)  & 1 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardEight) & 1 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardSeven) & 1 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardSix)   & 1 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardFive)  & 1 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardFour)  & 1 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardThree) & 1 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardTwo)   & 1 ? f$OpenPPL_ConstCardTwo   : 0

##f$OpenPPL_HaveTopNonBoardPairedPair##
   [(betround >= f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_HighestUnpairedBoardCard)]
|| [(betround >= f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_HighestUnpairedBoardCard)]

##f$OpenPPL_HaveTopPair##
[ f$OpenPPL_RankOfFirstHoleCard==rankhicommon || f$OpenPPL_RankOfSecondHoleCard==rankhicommon ]

##f$OpenPPL_HaveTopSet##
((nrankedcommon == 1) && ispair && isthreeofakind && (rankhiplayer == rankhicommon))

##f$OpenPPL_HaveTopTwoPair##
(f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndTopPair)

##f$OpenPPL_RankbitsCommonWithoutAceLow##
// Don't count ace twice in HaveTwoPair
// bit0 is unused
// bit 2 is ace low
//                 AKQJT98765432-- 
rankbitscommon & 0b111111111111100

##f$OpenPPL_HaveTwoPair##
`(rankbitsplayer & f$OpenPPL_RankbitsCommonWithoutAceLow) == 2

##f$OpenPPL_HaveUnderPair##
[ ispair && rankhiplayer<ranklocommon ]

##f$OpenPPL_HaveUnderStraight##
f$OpenPPL_HaveStraight
&& (pcbits == 0b00011 || pcbits == 0b00001)

##f$OpenPPL_NumberOfUnknownSuitedOvercards##
// Suited unknown overcards to holecards,
// e.g. on Board Ah Th, in Hand Jh 9h => 2 suited overcards: Kh Qh.
`((~srankbits & 0x7fff) >> srankhiplayer)

##f$OpenPPL_BoardKicker_FourOfAKindOnBoard##
(betround == f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_HighestUnpairedBoardCard : 2

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WeHaveOverPairToPair##
// 3 is the best strength possible, because two quads are always possible
3
// 1 OverPair for each overcard = 1 higher full house
+ (f$OpenPPL_ConstCardAce - rankhiplayer)
// Higher set possible with pair onboard?
+ [(f$OpenPPL_RankOfPairOnBoard > rankhiplayer) ? 1 : 0 ]
// If the cards on board are higher than our pair,
// we have to subtract them again, as otherwise we count them twice,
// as set/quads and OverPair.
+ [(f$OpenPPL_RankOfPairOnBoard > rankhiplayer) ? -1 : 0 ]
+ [(f$OpenPPL_RankOfSetOnBoard  > rankhiplayer) ? -1 : 0 ]

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePlayTheBoard##
// 3 is the best strength possible, because two quads are always possible
3
// 1 OverPair for each overcard = 1 higher full house
+ (f$OpenPPL_ConstCardAce - rankhiplayer)
// +1 if the pair is higher as the set (higher set possible)
// -1 if the pair is higher as the set (counted twice as OverPair / set)
// but these cases neutralize each other

##f$OpenPPL_RankOfPairOfFullHouse##
// The last 20 bits of pokerval look like XXXX XXXX XXXX YYYY YYYY (see docu)
// XXXX are the rank of the set
// YYYY are the rank of the pair
(pokerval & 0b1111)

##f$OpenPPL_RankOfSetOfFullHouse##
// The last 20 bits of pokerval look like XXXX XXXX XXXX YYYY YYYY (see docu)
// XXXX are the rank of the set
// YYYY are the rank of the pair
((pokerval >> 12) & 0b1111)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitThePairAndAnotherCard##
// 1 for each overcard on baord to RankOfPairOnBoard, which make better 3oaks possible = better FH
  [[(rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardAce  )] ? 1 : 0]
+ [[(rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardKing )] ? 1 : 0]
+ [[(rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardQueen)] ? 1 : 0]
+ [[(rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardJack )] ? 1 : 0]
+ [[(rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTen  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardNine )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardEight)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSeven)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSix  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFive )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFour )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardThree)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTwo  )] ? 1 : 0]
// 1 for each board-card that is not the pair on board and higher than the other pair (board-user),
// as there ar higher FHs possible (same set, higher pair)
+ [[(rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardAce  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardAce  )] ? 1 : 0]
+ [[(rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardKing ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardKing )] ? 1 : 0]
+ [[(rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardQueen) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardQueen)] ? 1 : 0]
+ [[(rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardJack ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardJack )] ? 1 : 0]
+ [[(rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardTen  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardTen  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardNine ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardNine )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardEight) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardEight)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardSeven) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardSeven)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardSix  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardSix  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardFive ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardFive )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardFour ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardFour )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardThree) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardThree)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardTwo  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardTwo  )] ? 1 : 0]
// + 1 for our hand
+ 1

##f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse##
  (rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardAce  )
+ (rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardKing )
+ (rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardQueen)
+ (rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardJack )
+ (rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTen  )
+ (rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardNine )
+ (rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardEight)
+ (rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSeven)
+ (rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSix  )
+ (rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFive )
+ (rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFour )
+ (rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardThree)
+ (rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTwo  )

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomSet##
// 3 is the lowest nut rank possible, becuase theres still a quad and a FH with the higher pair possible.
// Theres always a higher pair on board, so if there are two higher ranked cards in common cards,
// theres also a higher set possible with a pocket pair and the remaining single card on board.
3 + [(f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse >= 2) ? 1 : 0]

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopSet##
// 2 is the lowest nut rank possible, becuase theres still a quad possible.
// Theres might be a higher card on board, so if there is a higher ranked card in common cards then our set rank,
// theres also a higher set possible with a pocket pair and the remaining single card on board.
2 + [(f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse >= 1) ? 1 : 0]

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomQuads##
2

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopQuads##
1

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WePairBothPairs##
// Theres might be a higher card on board,
// so if there is a higher ranked card in common cards then our pair ranks,
// there are also a higher pair and a higher set possible.
1
+ [((pokervalcommon & 0b1111) > f$OpenPPL_RankOfPairOfFullHouse) ? 1 : 0]
+ [((pokervalcommon & 0b1111) > f$OpenPPL_RankOfSetOfFullHouse ) ? 1 : 0]

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairBothBoardCards##
1

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighSetOnBoard##
1

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowSetOnBoard##
2

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighPairOnBoard##
2

##f$OpenPPL_RankOfTopPairOnBoard##
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) ] ? f$OpenPPL_ConstCardAce :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) ] ? f$OpenPPL_ConstCardKing :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) ] ? f$OpenPPL_ConstCardQueen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) ] ? f$OpenPPL_ConstCardJack :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) ] ? f$OpenPPL_ConstCardTen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) ] ? f$OpenPPL_ConstCardNine :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) ] ? f$OpenPPL_ConstCardEight :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) ] ? f$OpenPPL_ConstCardSeven :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) ] ? f$OpenPPL_ConstCardSix :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) ] ? f$OpenPPL_ConstCardFive :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) ] ? f$OpenPPL_ConstCardFour :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) ] ? f$OpenPPL_ConstCardThree :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) ] ? f$OpenPPL_ConstCardTwo :
f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board

##f$OpenPPL_RankOfBottomPairOnBoard##
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) ] ? f$OpenPPL_ConstCardTwo :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) ] ? f$OpenPPL_ConstCardThree :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) ] ? f$OpenPPL_ConstCardFour :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) ] ? f$OpenPPL_ConstCardFive :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) ] ? f$OpenPPL_ConstCardSix :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) ] ? f$OpenPPL_ConstCardSeven :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) ] ? f$OpenPPL_ConstCardEight :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) ] ? f$OpenPPL_ConstCardNine :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) ] ? f$OpenPPL_ConstCardTen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) ] ? f$OpenPPL_ConstCardJack :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) ] ? f$OpenPPL_ConstCardQueen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) ] ? f$OpenPPL_ConstCardKing :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) ] ? f$OpenPPL_ConstCardAce :
f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowPairOnBoard##
// One quads possible, so the bestcase is second nuts
2
// Bbecause the set does have a higher rank then our pair,
// with the rank of the set theres no OverPair possible,
// and therefore are only 11 OverPairs possible instead of 12 if we do have 22 pair,
// 10 if we have 33 pair, etc.
+ (13 - f$OpenPPL_RankOfBottomPairOnBoard)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitASetWithPocketPair##
// 2 is the lowest rank possible, because quads are still possible
2
// For each rank in the common cards above the rank in the pocket cards, theres a higher FH possible.
+  (rankbitscommon & 0b000000000001000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000000010000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000000100000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000001000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000010000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000100000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000001000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000010000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000100000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b001000000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b010000000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b100000000000000 > rankbitsplayer ? 1 : 0)
// If the Pair on board is higher than our pocket-pair it got already counted
- ((trankcommon > rankhiplayer) ? 1 : 0)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitQuads##
// With a single pair on board and quads for us we have the current nuts
1

##f$OpenPPL_NutFullHouseOrFourOfAKind_FourOfAKindOnBoard##
// PreCondition: FourOfAKindOnBoard
//
// case 1: we play the board. e.g. 8888Q, we have J5
[rankhiplayer < f$OpenPPL_BoardKicker_FourOfAKindOnBoard] ?
[
	// case 1A: common kicker is higher then quads, e.g. 8888Q.
   (f$OpenPPL_BoardKicker_FourOfAKindOnBoard > trankcommon ) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
   // case 1B: common kicker is lower than quads
   (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
] :
// Otherwise: case 2: One of our cards is better then the nonpaired board card, e.g. 88885, we have J2
[
   // case 2A: Our kicker is better than quads, too (better than all board cards)
   (rankhiplayer > trankcommon) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
   // case 2B: Our kicker is worse than quads, e.g. 88885, we have 72
   (f$OpenPPL_ConstCardAce - rankhiplayer)
]

##f$OpenPPL_NutFullHouseOrFourOfAKind_FullHouseOnBoard##
// Precondition: FH on board
// There are 7 cases:
//
// 1) we pair both board-cards, so we have quads and nobody can have better quads
[(rankhiplayer == f$OpenPPL_BestBoardCard) && (rankloplayer == f$OpenPPL_2ndBestBoardCard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairBothBoardCards :
//
// 2) we pair the set on board, which is higher than the pair, so we get the best quads
[((rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer == f$OpenPPL_RankOfSetOnBoard)) && (f$OpenPPL_RankOfSetOnBoard > f$OpenPPL_2ndBestBoardCard)] ? 1: 1/*f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighSetOnBoard :
//
// 3) we pair the set on board, which is lower than the pair, so somebody could have better quads
[((rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer == f$OpenPPL_RankOfSetOnBoard)) && (f$OpenPPL_RankOfSetOnBoard < 2ndBestBoardCard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowSetOnBoard :
//
// 4) we pair the pair on board, which is higher than the set, so we get a better FH, but there are still quads possible
[(   (rankhiplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard) || (rankloplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)) && (f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard > f$OpenPPL_RankOfSetOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighPairOnBoard :
//
// 5) we pair the pair on board, which is lower than the set, so we play the board, but one kind of quads is no longer possible
[((rankhiplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard) || (rankloplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)) && (f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard < f$OpenPPL_RankOfSetOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowPairOnBoard :
//
// 6) we don't pair anything, but have an OverPair to the pair on board (we probably have to distinguish, if it is higher than the set or lower)
[ispair && (rankhiplayer != f$OpenPPL_BestBoardCard) && (rankhiplayer != f$OpenPPL_2ndBestBoardCard) && (rankhiplayer > f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WeHaveOverPairToPair :
//
// 7) we don't have an OverPair to the pair and therefore play the board (probably again 2 cases)
f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePlayTheBoard
*/

##f$OpenPPL_RankOfSetOnBoard##
// Precondition: set on board
trankcommon

##f$OpenPPL_RankOfPairOnBoard##
f$OpenPPL_NOT_YET_IMPLEMENTED_YOUR_HELP_IS_REQUIRED

##f$OpenPPL_NutFullHouseOrFourOfAKind_ThreeOfAKindOnBoard##
// Case 1: we have the quads: the nuts
(rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer ==f$OpenPPL_RankOfSetOnBoard) ? 1 :
// Otherwise: we have a fullhouse with either a pocket-pair or pair a board-card.
// Case 2: Pocket-pair
ispair ?
[
    // Everybody who has a higher pocket pair or hits a higher board-card
    // or hits the set will get a better hand
    (f$OpenPPL_RankOfSetOnBoard > rankhiplayer) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
    // Otherwise: set is lower, so there is 1 additional card, that loses for us
    (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
] :
// Case 3: We pair the board
[
    // Same logic applies as above:
    // Case 3A: Our higher card hits the board
    (rankhiplayer == f$OpenPPL_BestBoardCard) || (rankhiplayer == f$OpenPPL_2ndBestBoardCard) || (rankhiplayer == f$OpenPPL_3rdBestBoardCard) ?
    [
        (f$OpenPPL_RankOfSetOnBoard > rankhiplayer) ? (f$OpenPPL_ConstCardAce - rankhiplayer) :
        // Otherwise: set is lower, so there is 1 additional card, that loses for us
        (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
    ] :
    [
        // Otherwise rankloplayer paired:
        (f$OpenPPL_RankOfSetOnBoard > rankloplayer) ? (f$OpenPPL_ConstCardAce - rankloplayer) :
        // Otherwise: set is lower, so there is 1 additional card, that loses for us
        (f$OpenPPL_ConstCardAce - rankloplayer + 1)
    ]
]

##f$OpenPPL_NutFullHouseOrFourOfAKind_TwoPairsOnBoard##
// 5 basic cases
//
// 1) we complete the higher pair to quads
[ispair && rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopQuads :
//
// 2) we complete the lower pair to quads
[ispair && rankhiplayer == f$OpenPPL_RankOfBottomPairOnBoard] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomQuads :
//
// 3) we pair both pairs: no quads possible, but:
//   * maybe 1 higher FH, if anybody pairs the higher pair and the last board-card, if it is higher than the low pair
//   * maybe 2 higher FHs, as above, if anybody pairs the completes the left board-card to higher trips
[(rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard) && (rankloplayer == f$OpenPPL_RankOfBottomPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WePairBothPairs :
//
// 4) we pair the higher board-card; probably several cases
[(rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard) || (rankloplayer == f$OpenPPL_RankOfTopPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopSet :
//
// 5) we pair the lower board card; probably several cases
[(rankhiplayer == f$OpenPPL_RankOfBottomPairOnBoard) || (rankloplayer == f$OpenPPL_RankOfBottomPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomSet :
//
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_NutFullHouseOrFourOfAKind_PairOnBoard##
// Precondition: we have FH or quads, there is a pair on board.
[ispair && (rankhiplayer == trankcommon)] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitQuads :
[ispair && (pokerval & fullhouse)] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitASetWithPocketPair :
[pokerval & fullhouse] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitThePairAndAnotherCard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_NutFullHouseOrFourOfAKind##
[pokerval & (fullhouse | fourofakind) == 0] ? f$OpenPPL_HINT_We_Dont_Have_A_FullHouse_At_All : 
f$OpenPPL_QuadsOnBoard     ? f$OpenPPL_NutFullHouseOrFourOfAKind_FourOfAKindOnBoard :
f$OpenPPL_FullHouseOnBoard ? f$OpenPPL_NutFullHouseOrFourOfAKind_FullHouseOnBoard :
f$OpenPPL_TripsOnBoard     ? f$OpenPPL_NutFullHouseOrFourOfAKind_ThreeOfAKindOnBoard :
f$OpenPPL_TwoPairOnBoard   ? f$OpenPPL_NutFullHouseOrFourOfAKind_TwoPairsOnBoard :
f$OpenPPL_PairOnBoard      ? f$OpenPPL_NutFullHouseOrFourOfAKind_PairOnBoard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_Overcards##
((f$OpenPPL_RankOfFirstHoleCard > rankhicommon)  && (f$OpenPPL_RankOfSecondHoleCard > rankhicommon))  ? 2 :
((f$OpenPPL_RankOfFirstHoleCard > rankhicommon)  || (f$OpenPPL_RankOfSecondHoleCard > rankhicommon))  ? 1 :
((f$OpenPPL_RankOfFirstHoleCard <= rankhicommon) && (f$OpenPPL_RankOfSecondHoleCard <= rankhicommon)) ? 0 : 0

##f$OpenPPL_PairInHand##
ispair

##f$OpenPPL_SuitsInHand##
($$ps0 == $$ps1) ? 1 :
($$ps0 != $$ps1) ? 2 :
0

//*****************************************************************************
//
// OpenPPL - Other Symbols
//
//*****************************************************************************

##f$OpenPPL_IsFinalTable##
// To be implemented by OpenHoldem 2.2.0
// Currently returning always false (OH 2.1.9.3+)
//
isfinaltable

##f$OpenPPL_Others##
// Always true
1

##f$OpenPPL_FloatingPointRandom_0_100##
// OpenHoldem uses floating point numbers
// and random is in the range [0..1]
// But for OpenPPL we need a range of [0..100]
[ random * 100 ]

##f$OpenPPL_IntegerRandom_0_100##
// Cutting of the fractional part of the random number is tricky.
// We do a bitwise XOR with 0, which doesn't change anything,
// but to evaluate the expression OpenHoldem internally truncates the number 
// to integer (bit-vector).
(f$OpenPPL_FloatingPointRandom_0_100 ^ 0)

##f$OpenPPL_Random##
f$OpenPPL_IntegerRandom_0_100

//*****************************************************************************
//
// OpenPPL - Players and Opponents
//
//*****************************************************************************

##f$OpenPPL_PlayersAtStartOfThisRound##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? nplayersround1 :
(betround == f$OpenPPL_ConstBetRoundFlop)    ? nplayersround2 :
(betround == f$OpenPPL_ConstBetRoundTurn)    ? nplayersround3 :
(betround == f$OpenPPL_ConstBetRoundRiver)   ? nplayersround4 :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_Opponents##
//(f$OpenPPL_PlayersAtStartOfThisRound - 1)
nopponentsplaying

##f$OpenPPL_OpponentsAtTable##
nopponentsdealt

##f$OpenPPL_NumberOfOpponentsAllin##
`f$OpenPPL_Opponents_AllinBits

##f$OpenPPL_OpponentIsAllin##
f$OpenPPL_NumberOfOpponentsAllin > 0

##f$OpenPPL_Opponents_AllinBits##
(betround == f$OpenPPL_ConstBetRoundPreflop) ?
[0
|(((opponentsplayingbits & (1 << 0)) && (currentbet0 > 0) && (balance0 == 0)) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && (currentbet1 > 0) && (balance1 == 0)) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && (currentbet2 > 0) && (balance2 == 0)) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && (currentbet3 > 0) && (balance3 == 0)) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && (currentbet4 > 0) && (balance4 == 0)) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && (currentbet5 > 0) && (balance5 == 0)) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && (currentbet6 > 0) && (balance6 == 0)) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && (currentbet7 > 0) && (balance7 == 0)) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && (currentbet8 > 0) && (balance8 == 0)) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && (currentbet9 > 0) && (balance9 == 0)) ? 1 << 9 : 0)
]
:
[0
|(((opponentsplayingbits & (1 << 0)) && balance0 == 0) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && balance1 == 0) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && balance2 == 0) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && balance3 == 0) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && balance4 == 0) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && balance5 == 0) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && balance6 == 0) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && balance7 == 0) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && balance8 == 0) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && balance9 == 0) ? 1 << 9 : 0)
]

##f$OpenPPL_OpponentsLeft##
nopponentsplaying

##f$OpenPPL_OpponentsOnFlop##
(nplayersround2 - 1)

##f$OpenPPL_OpponentsWithLowerStack##
  (((balance0 + currentbet0) < (balance + currentbet)) && (playersseatedbits & 0x0001) ? 1:0)
+ (((balance1 + currentbet1) < (balance + currentbet)) && (playersseatedbits & 0x0002) ? 1:0)
+ (((balance2 + currentbet2) < (balance + currentbet)) && (playersseatedbits & 0x0004) ? 1:0)
+ (((balance3 + currentbet3) < (balance + currentbet)) && (playersseatedbits & 0x0008) ? 1:0)
+ (((balance4 + currentbet4) < (balance + currentbet)) && (playersseatedbits & 0x0010) ? 1:0)
+ (((balance5 + currentbet5) < (balance + currentbet)) && (playersseatedbits & 0x0020) ? 1:0)
+ (((balance6 + currentbet6) < (balance + currentbet)) && (playersseatedbits & 0x0040) ? 1:0)
+ (((balance7 + currentbet7) < (balance + currentbet)) && (playersseatedbits & 0x0080) ? 1:0)
+ (((balance8 + currentbet8) < (balance + currentbet)) && (playersseatedbits & 0x0100) ? 1:0)
+ (((balance9 + currentbet9) < (balance + currentbet)) && (playersseatedbits & 0x0200) ? 1:0)

##f$OpenPPL_StillToAct##
(dealposition > 2) ? (nchairsdealtleft + 2) :
(dealposition == 1) ? 1 :
0

//*****************************************************************************
//
// OpenPPL - Position Symbols
//
//*****************************************************************************

// Standard PPL accepts two spellings for the position symbols
// "In BigBlind" and "InBigBlind", "In Button" and "InButton", ...
// Our parser is able to ignore the fillerword "In ",
// but to be more user-friendly and to simplify the converter (less error-handling)
// we decided to provide both forms of naming in the library.

##f$OpenPPL_SmallBlind##
(dealposition == 1)

##f$OpenPPL_BigBlind##
(dealposition == 2)

##f$OpenPPL_Button##
// If the game in not 10-handed, some positions would be both "normal" and in the blinds.
// E.g. for a 9-handed game big-blind would also be counted as EarlyPosition1.
// Therefore we check for "Not InTheBlinds", except for button,
// because "InButton" makes sense even if the game is headsup.
(dealposition == nplayersdealt)

##f$OpenPPL_CutOff##
[(dealposition == nplayersdealt - 1) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition3##
[(dealposition == nplayersdealt - 2) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition2##
[(dealposition == nplayersdealt - 3) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition1##
[(dealposition == nplayersdealt - 4) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition3##
[(dealposition == nplayersdealt - 5) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition2##
[(dealposition == nplayersdealt - 6) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition1##
[(dealposition == nplayersdealt - 7) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_UTG##
// Under the gun - first to act preflop, 
// independent of the players at the table (at least 3).
// This symbols is especially useful to sitout 
// after the last hand of a session (before the next blind).
(dealposition == 3)

##f$OpenPPL_InSmallBlind##
f$OpenPPL_SmallBlind

##f$OpenPPL_InBigBlind##
f$OpenPPL_BigBlind

##f$OpenPPL_InTheBlinds##
(f$OpenPPL_InSmallBlind || f$OpenPPL_InBigBlind)

##f$OpenPPL_InButton##
f$OpenPPL_Button

##f$OpenPPL_InCutOff##
f$OpenPPL_CutOff

##f$OpenPPL_InMiddlePosition3##
f$OpenPPL_MiddlePosition3

##f$OpenPPL_InMiddlePosition2##
f$OpenPPL_MiddlePosition2

##f$OpenPPL_InMiddlePosition1##
f$OpenPPL_MiddlePosition1

##f$OpenPPL_InEarlyPosition3##
f$OpenPPL_EarlyPosition3

##f$OpenPPL_InEarlyPosition2##
f$OpenPPL_EarlyPosition2

##f$OpenPPL_InEarlyPosition1##
f$OpenPPL_EarlyPosition1

##f$OpenPPL_InUTG##
f$OpenPPL_UTG

##f$OpenPPL_BigBlindChair##
ac_dealpos0 == 2 ? 0 :
ac_dealpos1 == 2 ? 1 :
ac_dealpos2 == 2 ? 2 :
ac_dealpos3 == 2 ? 3 :
ac_dealpos4 == 2 ? 4 :
ac_dealpos5 == 2 ? 5 :
ac_dealpos6 == 2 ? 6 :
ac_dealpos7 == 2 ? 7 :
ac_dealpos8 == 2 ? 8 :
ac_dealpos9 == 2 ? 9 :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_SmallBlindChair##
ac_dealpos0 == 1 ? 0 :
ac_dealpos1 == 1 ? 1 :
ac_dealpos2 == 1 ? 2 :
ac_dealpos3 == 1 ? 3 :
ac_dealpos4 == 1 ? 4 :
ac_dealpos5 == 1 ? 5 :
ac_dealpos6 == 1 ? 6 :
ac_dealpos7 == 1 ? 7 :
ac_dealpos8 == 1 ? 8 :
ac_dealpos9 == 1 ? 9 :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_ButtonChair##
// We ignore the case of headsup,
// where button = small blind or button = big blind,
// as this seems to be different for each casino.
// For us: button = bigblind, if the game is headsup.
ac_dealpos0 == nplayersdealt ? 0 :
ac_dealpos1 == nplayersdealt ? 1 :
ac_dealpos2 == nplayersdealt ? 2 :
ac_dealpos3 == nplayersdealt ? 3 :
ac_dealpos4 == nplayersdealt ? 4 :
ac_dealpos5 == nplayersdealt ? 5 :
ac_dealpos6 == nplayersdealt ? 6 :
ac_dealpos7 == nplayersdealt ? 7 :
ac_dealpos8 == nplayersdealt ? 8 :
ac_dealpos9 == nplayersdealt ? 9 :
f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CutOffChair##
// We have to make sure, that the userchair in question is not a blind,
// which would be the case for CutOff, if the game was 3-handed.
// For 3-handed games "CutOff" = BigBlind, but blinds take priority.
// We could test for dealposition > 2, but counting players is more simple.
(nplayersdealt <= 3) ? f$OpenPPL_HINT_CutOff_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 1) ? 0 :
ac_dealpos1 == (nplayersdealt - 1) ? 1 :
ac_dealpos2 == (nplayersdealt - 1) ? 2 :
ac_dealpos3 == (nplayersdealt - 1) ? 3 :
ac_dealpos4 == (nplayersdealt - 1) ? 4 :
ac_dealpos5 == (nplayersdealt - 1) ? 5 :
ac_dealpos6 == (nplayersdealt - 1) ? 6 :
ac_dealpos7 == (nplayersdealt - 1) ? 7 :
ac_dealpos8 == (nplayersdealt - 1) ? 8 :
ac_dealpos9 == (nplayersdealt - 1) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition3Chair##
(nplayersdealt <= 4) ? f$OpenPPL_HINT_MiddlePosition3_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 2) ? 0 :
ac_dealpos1 == (nplayersdealt - 2) ? 1 :
ac_dealpos2 == (nplayersdealt - 2) ? 2 :
ac_dealpos3 == (nplayersdealt - 2) ? 3 :
ac_dealpos4 == (nplayersdealt - 2) ? 4 :
ac_dealpos5 == (nplayersdealt - 2) ? 5 :
ac_dealpos6 == (nplayersdealt - 2) ? 6 :
ac_dealpos7 == (nplayersdealt - 2) ? 7 :
ac_dealpos8 == (nplayersdealt - 2) ? 8 :
ac_dealpos9 == (nplayersdealt - 2) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition2Chair##
(nplayersdealt <= 5) ? f$OpenPPL_HINT_MiddlePosition2_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 3) ? 0 :
ac_dealpos1 == (nplayersdealt - 3) ? 1 :
ac_dealpos2 == (nplayersdealt - 3) ? 2 :
ac_dealpos3 == (nplayersdealt - 3) ? 3 :
ac_dealpos4 == (nplayersdealt - 3) ? 4 :
ac_dealpos5 == (nplayersdealt - 3) ? 5 :
ac_dealpos6 == (nplayersdealt - 3) ? 6 :
ac_dealpos7 == (nplayersdealt - 3) ? 7 :
ac_dealpos8 == (nplayersdealt - 3) ? 8 :
ac_dealpos9 == (nplayersdealt - 3) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition1Chair##
(nplayersdealt <= 6) ? f$OpenPPL_HINT_MiddlePosition1_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 4) ? 0 :
ac_dealpos1 == (nplayersdealt - 4) ? 1 :
ac_dealpos2 == (nplayersdealt - 4) ? 2 :
ac_dealpos3 == (nplayersdealt - 4) ? 3 :
ac_dealpos4 == (nplayersdealt - 4) ? 4 :
ac_dealpos5 == (nplayersdealt - 4) ? 5 :
ac_dealpos6 == (nplayersdealt - 4) ? 6 :
ac_dealpos7 == (nplayersdealt - 4) ? 7 :
ac_dealpos8 == (nplayersdealt - 4) ? 8 :
ac_dealpos9 == (nplayersdealt - 4) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition3Chair##
(nplayersdealt <= 7) ? f$OpenPPL_HINT_EarlyPosition3_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 5) ? 0 :
ac_dealpos1 == (nplayersdealt - 5) ? 1 :
ac_dealpos2 == (nplayersdealt - 5) ? 2 :
ac_dealpos3 == (nplayersdealt - 5) ? 3 :
ac_dealpos4 == (nplayersdealt - 5) ? 4 :
ac_dealpos5 == (nplayersdealt - 5) ? 5 :
ac_dealpos6 == (nplayersdealt - 5) ? 6 :
ac_dealpos7 == (nplayersdealt - 5) ? 7 :
ac_dealpos8 == (nplayersdealt - 5) ? 8 :
ac_dealpos9 == (nplayersdealt - 5) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition2Chair##
(nplayersdealt <= 8) ? f$OpenPPL_HINT_EarlyPosition2_Does_Not_Exist :
(ac_dealpos0 == (nplayersdealt - 6)) ? 0 :
(ac_dealpos1 == (nplayersdealt - 6)) ? 1 :
(ac_dealpos2 == (nplayersdealt - 6)) ? 2 :
(ac_dealpos3 == (nplayersdealt - 6)) ? 3 :
(ac_dealpos4 == (nplayersdealt - 6)) ? 4 :
(ac_dealpos5 == (nplayersdealt - 6)) ? 5 :
(ac_dealpos6 == (nplayersdealt - 6)) ? 6 :
(ac_dealpos7 == (nplayersdealt - 6)) ? 7 :
(ac_dealpos8 == (nplayersdealt - 6)) ? 8 :
(ac_dealpos9 == (nplayersdealt - 6)) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition1Chair##
(nplayersdealt <= 9) ? f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 7) ? 0 :
ac_dealpos1 == (nplayersdealt - 7) ? 1 :
ac_dealpos2 == (nplayersdealt - 7) ? 2 :
ac_dealpos3 == (nplayersdealt - 7) ? 3 :
ac_dealpos4 == (nplayersdealt - 7) ? 4 :
ac_dealpos5 == (nplayersdealt - 7) ? 5 :
ac_dealpos6 == (nplayersdealt - 7) ? 6 :
ac_dealpos7 == (nplayersdealt - 7) ? 7 :
ac_dealpos8 == (nplayersdealt - 7) ? 8 :
ac_dealpos9 == (nplayersdealt - 7) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_DealPositionLastRaiser##
// This function does also count blind-raisers.
(f$OpenPPL_AggressorChair == 0) ? ac_dealpos0 :
(f$OpenPPL_AggressorChair == 1) ? ac_dealpos1 :
(f$OpenPPL_AggressorChair == 2) ? ac_dealpos2 :
(f$OpenPPL_AggressorChair == 3) ? ac_dealpos3 :
(f$OpenPPL_AggressorChair == 4) ? ac_dealpos4 :
(f$OpenPPL_AggressorChair == 5) ? ac_dealpos5 :
(f$OpenPPL_AggressorChair == 6) ? ac_dealpos6 :
(f$OpenPPL_AggressorChair == 7) ? ac_dealpos7 :
(f$OpenPPL_AggressorChair == 8) ? ac_dealpos8 :
(f$OpenPPL_AggressorChair == 9) ? ac_dealpos9 :
f$OpenPPL_HINT_There_Are_No_True_Raisers

##f$OpenPPL_EarlyPosition1Calling##
(callbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1

##f$OpenPPL_EarlyPosition2Calling##
(callbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1

##f$OpenPPL_EarlyPosition3Calling##
(callbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1

##f$OpenPPL_MiddlePosition1Calling##
(callbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1

##f$OpenPPL_MiddlePosition2Calling##
(callbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1

##f$OpenPPL_MiddlePosition3Calling##
(callbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1

##f$OpenPPL_CutOffCalling##
(callbits1 >> f$OpenPPL_CutOffChair) & 1 == 1

##f$OpenPPL_ButtonCalling##
(callbits1 >> f$OpenPPL_ButtonChair) & 1 == 1

##f$OpenPPL_SmallBlindCalling##
(callbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1

##f$OpenPPL_BigBlindCalling##
(callbits1 >> f$OpenPPL_BigBlindChair) & 11 == 1

##f$OpenPPL_EarlyPosition1Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition2Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition3Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition1Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition2Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition3Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1]

##f$OpenPPL_CutOffRaising##
[(raisbits1 >> f$OpenPPL_CutOffChair) & 1 == 1]

##f$OpenPPL_ButtonRaising##
[(raisbits1 >> f$OpenPPL_ButtonChair) & 1 == 1]

##f$OpenPPL_SmallBlindRaising##
   [(raisbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1]
&& [f$OpenPPL_SmallBlindCurrentBet >= 0.51]

##f$OpenPPL_BigBlindRaising##
   [(raisbits1 >> f$OpenPPL_BigBlindChair) & 1 == 1]
&& [f$OpenPPL_BigBlindCurrentBet >= 1.01]

##f$OpenPPL_FirstCallerPosition##
// We have to search starting from early positions,
// as we want to detect the first one.
f$OpenPPL_EarlyPosition1Calling  ? 9 :
f$OpenPPL_EarlyPosition2Calling  ? 8 :
f$OpenPPL_EarlyPosition3Calling  ? 7 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_CutOffCalling          ? 3 :
f$OpenPPL_ButtonCalling          ? 2 :
f$OpenPPL_SmallBlindCalling      ? 1 :
// Can't be big blind (0), as it is for the first orbit preflop only
-1

##f$OpenPPL_FirstRaiserPosition##
// We have to search starting from early positions,
// as we want to detect the first one.
f$OpenPPL_EarlyPosition1Raising  ? 9 :
f$OpenPPL_EarlyPosition2Raising  ? 8 :
f$OpenPPL_EarlyPosition3Raising  ? 7 :
f$OpenPPL_MiddlePosition1Raising ? 6 :
f$OpenPPL_MiddlePosition2Raising ? 5 :
f$OpenPPL_MiddlePosition3Raising ? 4 :
f$OpenPPL_CutOffRaising          ? 3 :
f$OpenPPL_ButtonRaising          ? 2 :
f$OpenPPL_SmallBlindRaising ? 1 :
// Can't be big blind (0), as it is for the first orbit preflop only
-1

##f$OpenPPL_LastCallerPosition##
// Can't be big blind (0), as it is for the first orbit preflop only
f$OpenPPL_SmallBlindCalling      ? 1 :
f$OpenPPL_ButtonCalling          ? 2 :
f$OpenPPL_CutOffCalling          ? 3 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_EarlyPosition3Calling  ? 7 :
f$OpenPPL_EarlyPosition2Calling  ? 8 :
f$OpenPPL_EarlyPosition1Calling  ? 9 :
-1

##f$OpenPPL_LastRaiserPosition##
// Handling the case of blind-raisers only first
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets <= 1)] ? f$OpenPPL_HINT_There_Are_No_True_Raisers :
// Big blind = 0
f$OpenPPL_BigBlindRaising ? 0 :
// Small blind = 1
f$OpenPPL_SmallBlindRaising ? 1 :
// Normal players:
// Button = 2, CutOff = 3, ...
(nplayersdealt - f$OpenPPL_DealPositionLastRaiser + 2)

##f$OpenPPL_First##
0

##f$OpenPPL_Middle##
1

##f$OpenPPL_Last##
2

##f$OpenPPL_Position##
(betposition == 1) ? f$OpenPPL_First :
(betposition == nplayersplaying) ? f$OpenPPL_Last :
f$OpenPPL_Middle

//*****************************************************************************
//
// OpenPPL - Poker Tracker Symbols
//
//*****************************************************************************

##f$OpenPPL_PT_LastRaiser_PFR##
(raischair != -1) ? pt_rpfr : -1

##f$OpenPPL_PT_LastRaiser_VPIP##
(raischair != -1) ? pt_rvpip : -1

##f$OpenPPL_PT_LastRaiser_AttemptToStealBlinds##
(raischair != -1) ? pt_rpfats : -1

##f$OpenPPL_PT_BigBlind_FoldBBToSteal##
f$OpenPPL_BigBlindChair == 0 ? pt_fbbts0 :
f$OpenPPL_BigBlindChair == 1 ? pt_fbbts1 :
f$OpenPPL_BigBlindChair == 2 ? pt_fbbts2 :
f$OpenPPL_BigBlindChair == 3 ? pt_fbbts3 :
f$OpenPPL_BigBlindChair == 4 ? pt_fbbts4 :
f$OpenPPL_BigBlindChair == 5 ? pt_fbbts5 :
f$OpenPPL_BigBlindChair == 6 ? pt_fbbts6 :
f$OpenPPL_BigBlindChair == 7 ? pt_fbbts7 :
f$OpenPPL_BigBlindChair == 8 ? pt_fbbts8 :
f$OpenPPL_BigBlindChair == 9 ? pt_fbbts9 :
-1

##f$OpenPPL_PT_SmallBlind_VPIP##
f$OpenPPL_SmallBlindChair == 0 ? pt_vpip0 :
f$OpenPPL_SmallBlindChair == 1 ? pt_vpip1 :
f$OpenPPL_SmallBlindChair == 2 ? pt_vpip2 :
f$OpenPPL_SmallBlindChair == 3 ? pt_vpip3 :
f$OpenPPL_SmallBlindChair == 4 ? pt_vpip4 :
f$OpenPPL_SmallBlindChair == 5 ? pt_vpip5 :
f$OpenPPL_SmallBlindChair == 6 ? pt_vpip6 :
f$OpenPPL_SmallBlindChair == 7 ? pt_vpip7 :
f$OpenPPL_SmallBlindChair == 8 ? pt_vpip8 :
f$OpenPPL_SmallBlindChair == 9 ? pt_vpip9 :
-1


//*****************************************************************************
//
// OpenPPL - Initialization of memory symbols
//
// For history symbols and other information,
// that can't be retrieved from OH-symbols
// and from the current gamestate only.
//
//*****************************************************************************

##f$OpenPPL_TimeToInitMemorySymbols##
// Some advanced symbols depend on memory symbols.
// They are designed to update once per orbit on our turn.
// However: depending on user-settings OpenHoldem might evaluate
// the necessary function even when it is not our turn.
// And incorrect delay-settings might also lead to multiple actions
// on identical frames (OH acts faster as casino/bring can update)
// So we check for isfinalanswer and a changed gamestate.
[isfinalanswer && f$OpenPPL_GameStateChanged]

##f$OpenPPL_HandResetHappened##
[   (betround == f$OpenPPL_ConstBetRoundPreflop) 
 && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)]

##f$OpenPPL_ResetUserVariablesOnHandReset##
// f$OpenPPL_ResetUserVariables
// will be auto-generated by the translator.
f$OpenPPL_HandResetHappened ? f$OpenPPL_ResetUserVariables : f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_GameStateChanged##
// Change in dealerchair => new hand
   (dealerchair != me_re_MemOldGameStateEealerChair)
// Change in currentbet => we did act 
// and the autoplayer executed sucessfully   
|| (currentbet  != me_re_MemOldGameStateCurrentBet)
// Change in potsize: somebody else behind us acted, 
// so we checked or folded sucessfully
|| (pot			!= me_re_MemOldGameStatePotSize)

##f$OpenPPL_RememberCurrentGameState##
   (me_st_MemOldGameStateEealerChair_dealerchair * 0)
|| (me_st_MemOldGameStateCurrentBet_currentbet   * 0)
|| (me_re_MemOldGameStatePotSize_pot             * 0)

##f$OpenPPL_InitMemorySymbols##
(f$OpenPPL_TimeToInitMemorySymbols == f$OpenPPL_False) ? 0 :
// We can't use addition here to call the functions in correct sequential order,
// because OH doesn't add the operands in order:
// http://www.maxinmontreal.com/forums/viewtopic.php?f=111&t=14525&start=0
   [f$OpenPPL_InitBets * 0]
|| [f$OpenPPL_InitChecks * 0]
|| [f$OpenPPL_InitCalls * 0]
|| [f$OpenPPL_InitRaises * 0]
|| [f$OpenPPL_InitBotsLastPreflopAction * 0]
|| [f$OpenPPL_InitRaisesBeforeFlop * 0]
|| [f$OpenPPL_InitRaisesOnFlop * 0]
|| [f$OpenPPL_InitRaisesOnTurn * 0]
|| [f$OpenPPL_InitMaxOpponentStackSize * 0]
|| [f$OpenPPL_InitMinOpponentStackSize * 0]
|| [f$OpenPPL_InitStartingStackSize * 0]
|| [f$OpenPPL_RememberCurrentGameState * 0]
|| [f$OpenPPL_ResetUserVariablesOnHandReset * 0]
//
// InitBotsLastAction has to be the last init-function to be called
// because it will call the final f$Decision routine.
//
|| [f$OpenPPL_InitBotsLastAction * 0]

//*****************************************************************************
//
// OpenPPL - Various functions of minor importance or to do
//
//*****************************************************************************

##f$OpenPPL_NOT_YET_IMPLEMENTED_YOUR_HELP_IS_REQUIRED##
-1

##f$OpenPPL_HaveBackdoorStraightDraw##
f$OpenPPL_NOT_YET_IMPLEMENTED_YOUR_HELP_IS_REQUIRED

//*****************************************************************************
//
// OpenPPL - the glory end
//
//*****************************************************************************

##f$willplay##
30

##f$wontplay##
50

##f$topclip##
f$OpenPPL_RaisesBeforeFlop == 0 ? 5 : 0
//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 2.2.0 or later
//   Symbols not working with 2.1.x:
//     * isfinaltable
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
//  OpenPPL - Swag Functions
//  ========================
//
//  Swag-functions for OpenHoldem 2.1.x only.
//  Please delete this file once you use OpenHoldem 2.2.0 and later.
//
//  Swagging (swag = stated wager, a Ray-E.-Bornesian abbreviation)
//  was the old way to handle NL-betsizing.
//  It got replaced by a single f$betsize function in OH 2.2.0
//  and OpenHoldem handles now all adjustments of the betsize to the casino
//  and all other technical things automatically.
//
//*****************************************************************************

##f$OpenPPL_AbsoluteBetSize##
// OpenPPL uses raise-by semantics
// OpenHoldem and this function use raise-to.
// A positive f$Decision means the Raise-size in Dollars.
(f$OpenPPL_Decision > 0) ? [ncallbets + f$OpenPPL_Decision] : 0

##f$OpenPPL_BetSize_In_Dollars##
// f$OpenPPL_BetSize is measured in bets but we need it in dollars,
// as swag-adjustment / OH need it in dollars.
(f$OpenPPL_AbsoluteBetSize * bet)

##f$OpenPPL_MinimumRaiseAllowed##
// Final betsize if we raise by the minimum.
// Aamount in dollars.
(currentbet + call + sraimin)

##f$OpenPPL_BetSizeAdjustedToMinimumRaise##
// Aamount in dollars.
(f$OpenPPL_BetSize_In_Dollars < f$OpenPPL_MinimumRaiseAllowed) ? f$OpenPPL_MinimumRaiseAllowed :
f$OpenPPL_BetSize_In_Dollars

##f$OpenPPL_PotLimitPotSize##
// The pot for potsize calculations is the current pot plus the amount if we call
// Amount in dollars
(pot + call)

##f$OpenPPL_BetSizeAdjustedToGameType##
// In pot-limit we can only raise by pot-size ;-)
// Aamount in dollars.
[ispl && (f$OpenPPL_BetSizeAdjustedToMinimumRaise > 2 * f$OpenPPL_PotLimitPotSize)] ?
(2 * f$OpenPPL_PotLimitPotSize) : f$OpenPPL_BetSizeAdjustedToMinimumRaise

##f$OpenPPL_BetSizeAdjustedToUsersBalance##
// Aamount in dollars.
(f$OpenPPL_BetSizeAdjustedToGameType > (balance + currentbet)) ?
(balance + currentbet) : f$OpenPPL_BetSizeAdjustedToGameType

##f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements##
// There are 3 different ways, how casinos treat swagged input.
//
// Swag means, the casino will interpret the amount as
// 1) f$srai
// 2) f$srai+call
// 3) f$srai+call+currentbet
// As our f$betsize function treats case X as normal and not case 1,
// we have to do some small calculations in the other direction.
(swagtextmethod == 1) ? f$OpenPPL_BetSizeAdjustedToUsersBalance :
(swagtextmethod == 2) ? [f$OpenPPL_BetSizeAdjustedToUsersBalance - currentbet] :
(swagtextmethod == 3) ? [f$OpenPPL_BetSizeAdjustedToUsersBalance - call - currentbet] :
// This should not happen, but we default to 1)
f$OpenPPL_BetSizeAdjustedToUsersBalance

##f$OpenPPL_HINT_No_NL_BetSizing_In_A_FL_Game##
0

##f$swag##
// No swagging in a FL game
isfl ? f$OpenPPL_HINT_No_NL_BetSizing_In_A_FL_Game : 
// Only swag, if we really decided to swag
// and not because the betsize-adaption resulted in a positive betsize.
(f$OpenPPL_Decision > 0) ? f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements : 0

//*****************************************************************************
//
//  OpenPPL - f$play
//  ================
//
//  f$play will be replaced by f$sitin, f$sitout and f$leave in OH 2.2.0.
//  But for the moment we need it so make OpenPPLs sitout command work.
//  http://forum.winholdem.net/wbb/viewtopic.php?t=8095
//  -2 press the leave button this frame
//  -1 do absolutely nothing this frame
//  0 click the sitout action this frame
//  +1 click the sitin action this frame
//
//*****************************************************************************

##f$play##
f$sitout ? (-2 + me_st_GoBuddyTakeABreakAndABeer_0*0) : -1

##f$myfunc1##
[ (betround == 2) ]
##f$myfunc2##
[ (betround > 2) ]
##f$myfunc3##
[ f$OpenPPL_Others ]
##f$myfunc4##
[ ([($AA) || ($KK)]) ]
##f$myfunc5##
[ ([($QQ) || ($JJ) || ($TT) || ($99) || ($AK) || ($AQ) || ($AJ) || ($KQ)]) ]
##f$myfunc6##
[ ([($AT) || ($A9) || ($KJ) || ($KT) || ($K9) || ($QJ) || ($QT) || ($Q9) || ($JT) || ($T9s)]) ]
##f$myfunc7##
[ (f$OpenPPL_Others) ]
##f$myfunc8##
[ ([$AA]) ]
##f$myfunc9##
[ ([$KK]) ]
##f$myfunc10##
[ ([$QQ]) ]
##f$myfunc11##
[ ([$JJ]) ]
##f$myfunc12##
[ ([$TT]) ]
##f$myfunc13##
[ ([$AK]) ]
##f$myfunc14##
[ ([$AQ]) ]
##f$myfunc15##
[ ([$AJs]) ]
##f$myfunc16##
[ ([$AJ]) ]
##f$myfunc17##
[ ([$ATs]) ]
##f$myfunc18##
[ ([$AT]) ]
##f$myfunc19##
[ ([$A9s]) ]
##f$myfunc20##
[ ([$A9]) ]
##f$myfunc21##
[ ([($A8s) || ($A7s) || ($A6s) || ($A5s) || ($A4s) || ($A3s) || ($A2s)]) ]
##f$myfunc22##
[ ([$99]) ]
##f$myfunc23##
[ ([$88]) ]
##f$myfunc24##
[ ([$77]) ]
##f$myfunc25##
[ ([$66]) ]
##f$myfunc26##
[ ([$55]) ]
##f$myfunc27##
[ ([$44]) ]
##f$myfunc28##
[ ([$33]) ]
##f$myfunc29##
[ ([$22]) ]
##f$myfunc30##
[ ([$KQ]) ]
##f$myfunc31##
[ ([$KJs]) ]
##f$myfunc32##
[ ([($KJ) || ($KT)]) ]
##f$myfunc33##
[ ([$QJs]) ]
##f$myfunc34##
[ ([($QJ) || ($QT) || ($JT)]) ]
##f$myfunc35##
[ (f$OpenPPL_Others) ]
##f$myfunc36##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Opponents >= 3) ]
##f$myfunc37##
[ (f$OpenPPL_HaveOverPair) ]
##f$myfunc38##
[ (f$OpenPPL_HaveTopPair) ]
##f$myfunc39##
[ (f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)])] && f$OpenPPL_Opponents < 3) ]
##f$myfunc40##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ]
##f$myfunc41##
[ (f$OpenPPL_Opponents == 1 && [$AK] && f$OpenPPL_PairOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0))] && [ !([f$OpenPPL_Folds >= 1])]) ]
##f$myfunc42##
[ (f$OpenPPL_Opponents > 2 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)])] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]
##f$myfunc43##
[ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible)] && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker) ]
##f$myfunc44##
[ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw)] && f$OpenPPL_HaveNutFlushDraw && [f$OpenPPL_HavePair || f$OpenPPL_Overcards == 2]) ]
##f$myfunc45##
[ (f$OpenPPL_Opponents >= 3 && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw)]) ]
##f$myfunc46##
[ (f$OpenPPL_Opponents <= 2 && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && f$OpenPPL_RaisesBeforeFlop &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_BotRaisedBeforeFlop)]) ]
##f$myfunc47##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ]
##f$myfunc48##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)]) ]
##f$myfunc49##
[ (f$OpenPPL_FlushPossible && [$AA] && f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc50##
[ (f$OpenPPL_FlushPossible) ]
##f$myfunc51##
[ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 2 &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc52##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || f$OpenPPL_PairOnBoard || f$OpenPPL_HaveNutFlushDraw)]) ]
##f$myfunc53##
[ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] && [f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc54##
[ ([$AA] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Raises == 1 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]
##f$myfunc55##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0))] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc56##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveStraightDraw && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlushDraw || f$OpenPPL_StraightPossible)]) ]
##f$myfunc57##
[ (f$OpenPPL_HaveOverPair &&  ![([$AA] || [$KK] || [$QQ])] && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ]
##f$myfunc58##
[ (f$OpenPPL_HaveOverPair &&  ![([$AA] || [$KK] || [$QQ])] && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_Raises >= 1) ]
##f$myfunc59##
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0))] &&  ![(f$OpenPPL_TripsOnBoard || f$OpenPPL_Opponents >= 3)] && f$OpenPPL_HaveOverPair) ]
##f$myfunc60##
[ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]
##f$myfunc61##
[ (f$OpenPPL_HaveOverPair && [($99) || ($TT) || ($JJ)] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] && f$OpenPPL_Raises >= 1 && f$OpenPPL_StackSize > 45) ]
##f$myfunc62##
[ (f$OpenPPL_Bets == 1 && [f$OpenPPL_HavePair || f$OpenPPL_Overcards == 2 || ($A) || f$OpenPPL_HaveBackdoorNutFlushDraw] && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)] && f$OpenPPL_BetSize < 7) ]
##f$myfunc63##
[ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ)] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_HaveNutFlushDraw || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4) == 0)])]) ]
##f$myfunc64##
[ (f$OpenPPL_MoreThanOneStraightPossibleOnFlop && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0))] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc65##
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_AmountToCall < 20) ]
##f$myfunc66##
[ f$OpenPPL_Others ]
##f$myfunc67##
[ (f$OpenPPL_Position == f$OpenPPL_First && nopponentsplaying >= 3) ]
##f$myfunc68##
[ (f$OpenPPL_HaveOverPair) ]
##f$myfunc69##
[ (f$OpenPPL_HaveTopPair) ]
##f$myfunc70##
[ (f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)])] && nopponentsplaying < 3) ]
##f$myfunc71##
[ (f$OpenPPL_OpponentsOnFlop == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(me_re_userdead)]) ]
##f$myfunc72##
[ (nopponentsplaying == 1 && [$AK] && f$OpenPPL_PairOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0))] &&  ![(f$OpenPPL_Folds >= 1)]) ]
##f$myfunc73##
[ (nopponentsplaying > 2 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)])] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]
##f$myfunc74##
[ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible)] && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker) ]
##f$myfunc75##
[ ( ![(f$OpenPPL_PairOnBoard || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || [$AA] || f$OpenPPL_FlushPossible || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw)] && f$OpenPPL_HaveNutFlushDraw && [f$OpenPPL_HavePair || f$OpenPPL_Overcards == 2]) ]
##f$myfunc76##
[ (nopponentsplaying >= 3 && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw)]) ]
##f$myfunc77##
[ (nopponentsplaying <= 2 && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && f$OpenPPL_RaisesBeforeFlop &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_BotRaisedBeforeFlop)]) ]
##f$myfunc78##
[ (nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(me_re_userdead)]) ]
##f$myfunc79##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw || f$OpenPPL_TotalInvested > 90/100 * f$OpenPPL_StackSize)]) ]
##f$myfunc80##
[ (f$OpenPPL_FlushPossible && [$AA] && f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc81##
[ (f$OpenPPL_FlushPossible) ]
##f$myfunc82##
[ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 2 &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc83##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || f$OpenPPL_PairOnBoard || f$OpenPPL_HaveNutFlushDraw)]) ]
##f$myfunc84##
[ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] && [f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc85##
[ ([$AA] && nopponentsplaying == 1 && f$OpenPPL_Raises == 1 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]
##f$myfunc86##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0))] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc87##
[ (nopponentsplaying == 1 && f$OpenPPL_HaveStraightDraw && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlushDraw || f$OpenPPL_StraightPossible)]) ]
##f$myfunc88##
[ (f$OpenPPL_HaveOverPair &&  ![([$AA] || [$KK] || [$QQ])] && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ]
##f$myfunc89##
[ (f$OpenPPL_HaveOverPair &&  ![([$AA] || [$KK] || [$QQ])] && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_Raises >= 1) ]
##f$myfunc90##
[ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0))] &&  ![(f$OpenPPL_TripsOnBoard || nopponentsplaying >= 3)] && f$OpenPPL_HaveOverPair) ]
##f$myfunc91##
[ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]
##f$myfunc92##
[ (f$OpenPPL_HaveOverPair && [($99) || ($TT) || ($JJ)] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] && f$OpenPPL_Raises >= 1 && f$OpenPPL_StackSize > 45) ]
##f$myfunc93##
[ (f$OpenPPL_Bets == 1 && [f$OpenPPL_HavePair || f$OpenPPL_Overcards == 2 || ($A) || f$OpenPPL_HaveBackdoorNutFlushDraw] && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair)] && f$OpenPPL_BetSize < 7) ]
##f$myfunc94##
[ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ)] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_HaveNutFlushDraw || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_6 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4) == 0)])]) ]
##f$myfunc95##
[ (f$OpenPPL_MoreThanOneStraightPossibleOnFlop && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0))] &&  ![(f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc96##
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_Raises >= 2)] && f$OpenPPL_AmountToCall < 20) ]
##f$myfunc97##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard) ]
##f$myfunc98##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible) ]
##f$myfunc99##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_StraightPossible) ]
##f$myfunc100##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize) ]
##f$myfunc101##
[ ([f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc102##
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveQuads)]) ]
##f$myfunc103##
[ (f$OpenPPL_HaveStraightFlush) ]
##f$myfunc104##
[ (f$OpenPPL_HaveQuads) ]
##f$myfunc105##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind > 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 14] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc106##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc107##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 7] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc108##
[ (f$OpenPPL_HaveNutFlush) ]
##f$myfunc109##
[ (f$OpenPPL_HaveFlush) ]
##f$myfunc110##
[ (f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc111##
[ (f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc112##
[ (f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc113##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc114##
[ (f$OpenPPL_HaveSet && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents == 1) ]
##f$myfunc115##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc116##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible]) ]
##f$myfunc117##
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc118##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible]) ]
##f$myfunc119##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [($AK) || ($AQ) || ($AJ) || ($AT)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc120##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc121##
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips)]) ]
##f$myfunc122##
[ (f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc123##
[ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc124##
[ (f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc125##
[ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc126##
[ (f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents == 1 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99)]) ]
##f$myfunc127##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents == 1 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99)]) ]
##f$myfunc128##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] && f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))]) ]
##f$myfunc129##
[ (f$OpenPPL_HaveOverPair && [$Q] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))]) ]
##f$myfunc130##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc131##
[ (f$OpenPPL_HaveOverPair && [$Q] && f$OpenPPL_Opponents == 1 && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc132##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc133##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc134##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc135##
[ (f$OpenPPL_HaveOverPair && [($Q) || ($J)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc136##
[ (f$OpenPPL_HaveOverPair && [($T) || ($9) || ($8) || ($7)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc137##
[ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc138##
[ (f$OpenPPL_HaveOverPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc139##
[ (f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc140##
[ (f$OpenPPL_HaveTopPair &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents == 1 && [($AK) || ($AQ) || ($AJ)]) ]
##f$myfunc141##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents == 1 && [($AK) || ($AQ) || ($AJ)]) ]
##f$myfunc142##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc143##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc144##
[ (f$OpenPPL_Random <= 50 && f$OpenPPL_HaveTopPair && [$AK] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc145##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc146##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($QJ) || ($KT) || ($QT) || ($JT)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize <= 15) ]
##f$myfunc147##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($QJ) || ($KT) || ($QT) || ($JT)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize > 15) ]
##f$myfunc148##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc149##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc150##
[ (f$OpenPPL_HaveTopPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc151##
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveStraightDraw && [($TT) || ($JJ) || ($QQ) || ($KK)]) ]
##f$myfunc152##
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc153##
[ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc154##
[ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc155##
[ (f$OpenPPL_HaveNutFlushDraw &&  ![f$OpenPPL_FlushPossible] && [$AXs] && f$OpenPPL_Opponents == 1) ]
##f$myfunc156##
[ (f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc157##
[ (f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc158##
[ (f$OpenPPL_Have2ndNutFlushDraw) ]
##f$myfunc159##
[ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc160##
[ (f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible] && [($AK) || ($AQ) || ($AJ)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0))]) ]
##f$myfunc161##
[ (f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc162##
[ (f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [($AK) || ($AQ) || ($AJs) || ($KQs)]) ]
##f$myfunc163##
[ ([f$OpenPPL_BotRaisedBeforeFlop || f$OpenPPL_BotRaisedOnFlop] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [($AK) || ($AQ) || ($AJ) || ($KQ) || f$OpenPPL_PairInHand || f$OpenPPL_HavePair]) ]
##f$myfunc164##
[ (f$OpenPPL_BotRaisedBeforeFlop &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc165##
[ (f$OpenPPL_StillToAct == 0 &&  ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Overcards == 2 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc166##
[ (f$OpenPPL_PairInHand && f$OpenPPL_PairOnBoard && [($TT) || ($99) || ($88) || ($77) || ($66) || ($55)] && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Middle) ]
##f$myfunc167##
[ (f$OpenPPL_PairInHand && f$OpenPPL_PairOnBoard) ]
##f$myfunc168##
[ (f$OpenPPL_PairInHand && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [($TT) || ($99) || ($88) || ($77) || ($66) || ($55)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc169##
[ (f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || [$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)])] && f$OpenPPL_Opponents == 1 && f$OpenPPL_StillToAct == 0) ]
##f$myfunc170##
[ f$OpenPPL_Others ]
##f$myfunc171##
[ (f$OpenPPL_Opponents >= 3 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 75) ]
##f$myfunc172##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets >= 1) ]
##f$myfunc173##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 7 && f$OpenPPL_NoBettingOnFlop && [ !([f$OpenPPL_Folds >= 1])]) ]
##f$myfunc174##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 33/100 * f$OpenPPL_PotSize && f$OpenPPL_NoBettingOnFlop && [ !([f$OpenPPL_Folds >= 1])]) ]
##f$myfunc175##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [ !([f$OpenPPL_Folds >= 1])]) ]
##f$myfunc176##
[ (f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc177##
[ (f$OpenPPL_StraightPossible && f$OpenPPL_AcePresentOnFlop &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc178##
[ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc179##
[ (f$OpenPPL_PairOnBoard && [f$OpenPPL_OnlyOneStraightPossible ||  !(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || f$OpenPPL_RaisesOnFlop)] && f$OpenPPL_Opponents < 3) ]
##f$myfunc180##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin) ]
##f$myfunc181##
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveTrips)]) ]
##f$myfunc182##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ]
##f$myfunc183##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ]
##f$myfunc184##
[ (f$OpenPPL_FlushPossible && [$AA] && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc185##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_AcePresentOnFlop || f$OpenPPL_BotRaisedOnFlop] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw)] && [f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop]) ]
##f$myfunc186##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_CalledOnFlop && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc187##
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_CalledOnFlop || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)])]) ]
##f$myfunc188##
[ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc189##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_StackSize > 50 && [f$OpenPPL_BetSize == 1 || f$OpenPPL_BetSize < 17/100 * f$OpenPPL_PotSize] && [f$OpenPPL_HavePair || ($AK)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_RaisesOnFlop || f$OpenPPL_BotRaisedOnFlop || f$OpenPPL_HaveUnderPair || f$OpenPPL_Folds >= 1)]) ]
##f$myfunc190##
[ (f$OpenPPL_Opponents == 1 && [f$OpenPPL_HadTopPairOnFlop || f$OpenPPL_HadOverPairOnFlop] && f$OpenPPL_OvercardsOnBoard == 1 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc191##
[ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc192##
[ (f$OpenPPL_FlushPossible && f$OpenPPL_HaveTopPair && f$OpenPPL_StackSize > 20 &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc193##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_HadTopPairOnFlop || f$OpenPPL_RaisesOnFlop || f$OpenPPL_HaveSet)]) ]
##f$myfunc194##
[ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_StackSize > 35) ]
##f$myfunc195##
[ (f$OpenPPL_HaveSet && f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Opponents == 1) ]
##f$myfunc196##
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_AmountToCall < 25) ]
##f$myfunc197##
[ (f$OpenPPL_HavePair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_RaisesOnFlop &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]
##f$myfunc198##
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveUnderStraight || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_StackSize > 45) ]
##f$myfunc199##
[ (f$OpenPPL_Have2ndNutStraight && f$OpenPPL_PairInHand && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)])]) ]
##f$myfunc200##
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight && [ !(f$OpenPPL_FlushPossible)]) ]
##f$myfunc201##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_CalledOnFlop || f$OpenPPL_StackSize < 50)]) ]
##f$myfunc202##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_CalledOnFlop && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Checks == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [ !([f$OpenPPL_StackSize < 50])]) ]
##f$myfunc203##
[ (f$OpenPPL_Opponents <= 2 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [ !([f$OpenPPL_StackSize < 50])]) ]
##f$myfunc204##
[ (f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_CalledOnFlop || f$OpenPPL_StackSize < 50)]) ]
##f$myfunc205##
[ f$OpenPPL_Others ]
##f$myfunc206##
[ (nopponentsplaying >= 3 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 75) ]
##f$myfunc207##
[ (nopponentsplaying >= 2 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets >= 1) ]
##f$myfunc208##
[ (nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 7 && f$OpenPPL_NoBettingOnFlop &&  ![(f$OpenPPL_Folds >= 1)]) ]
##f$myfunc209##
[ (nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize < 33/100 * f$OpenPPL_PotSize && f$OpenPPL_NoBettingOnFlop &&  ![(f$OpenPPL_Folds >= 1)]) ]
##f$myfunc210##
[ (nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_Folds >= 1)]) ]
##f$myfunc211##
[ (nopponentsplaying == 1 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc212##
[ (f$OpenPPL_StraightPossible && f$OpenPPL_AcePresentOnFlop &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc213##
[ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc214##
[ (f$OpenPPL_PairOnBoard && [f$OpenPPL_OnlyOneStraightPossible ||  !(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || f$OpenPPL_RaisesOnFlop)] && nopponentsplaying < 3) ]
##f$myfunc215##
[ (nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(me_re_userdead || me_re_userdead2)]) ]
##f$myfunc216##
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveTrips)]) ]
##f$myfunc217##
[ (nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_HavePair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ]
##f$myfunc218##
[ (nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || me_re_userdead || me_re_userdead2)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ]
##f$myfunc219##
[ (f$OpenPPL_FlushPossible && [$AA] && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc220##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_AcePresentOnFlop || f$OpenPPL_BotRaisedOnFlop] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw)] && [f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_BotRaisedBeforeFlop]) ]
##f$myfunc221##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_CalledOnFlop && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc222##
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_CalledOnFlop || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)])]) ]
##f$myfunc223##
[ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc224##
[ (nopponentsplaying == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_StackSize > 50 && [f$OpenPPL_BetSize == 1 || f$OpenPPL_BetSize < 17/100 * f$OpenPPL_PotSize] && [f$OpenPPL_HavePair || ($AK)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_RaisesOnFlop || f$OpenPPL_BotRaisedOnFlop || f$OpenPPL_HaveUnderPair || f$OpenPPL_Folds >= 1)]) ]
##f$myfunc225##
[ (nopponentsplaying == 1 && [f$OpenPPL_HadTopPairOnFlop || f$OpenPPL_HadOverPairOnFlop] && f$OpenPPL_OvercardsOnBoard == 1 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc226##
[ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc227##
[ (f$OpenPPL_FlushPossible && f$OpenPPL_HaveTopPair && f$OpenPPL_StackSize > 20 &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc228##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_HadTopPairOnFlop || f$OpenPPL_RaisesOnFlop || f$OpenPPL_HaveSet)]) ]
##f$myfunc229##
[ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_StackSize > 35 &&  ![(f$OpenPPL_OneCardFlushPossible)]) ]
##f$myfunc230##
[ (f$OpenPPL_HaveSet && f$OpenPPL_OneCardStraightPossible && nopponentsplaying == 1) ]
##f$myfunc231##
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_AmountToCall < 25 && [nopponentsplaying < 3 || f$OpenPPL_BetSize < 12]) ]
##f$myfunc232##
[ (f$OpenPPL_HavePair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_RaisesOnFlop &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]
##f$myfunc233##
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveUnderStraight || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_StackSize > 45) ]
##f$myfunc234##
[ (f$OpenPPL_Have2ndNutStraight && f$OpenPPL_PairInHand && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)])]) ]
##f$myfunc235##
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_FlushPossible)]) ]
##f$myfunc236##
[ (nopponentsplaying == 1 && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_CalledOnFlop || f$OpenPPL_StackSize < 50)]) ]
##f$myfunc237##
[ (nopponentsplaying == 1 && f$OpenPPL_CalledOnFlop && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Checks == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_StackSize < 50)]) ]
##f$myfunc238##
[ (nopponentsplaying <= 2 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_StackSize < 50)]) ]
##f$myfunc239##
[ (nopponentsplaying == 1 &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_CalledOnFlop || f$OpenPPL_StackSize < 50)]) ]
##f$myfunc240##
[ (f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)]) ]
##f$myfunc241##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard) ]
##f$myfunc242##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize) ]
##f$myfunc243##
[ ([f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc244##
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveQuads)] &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc245##
[ (f$OpenPPL_TwoPairOnBoard && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFullHouse]) ]
##f$myfunc246##
[ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveQuads)]) ]
##f$myfunc247##
[ (f$OpenPPL_HaveSet && f$OpenPPL_TotalInvested >= 66/100 * f$OpenPPL_StackSize && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ]
##f$myfunc248##
[ (f$OpenPPL_HaveStraightFlush) ]
##f$myfunc249##
[ (f$OpenPPL_HaveQuads) ]
##f$myfunc250##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind > 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 14] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc251##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc252##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 7] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc253##
[ (f$OpenPPL_HaveNutFlush) ]
##f$myfunc254##
[ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc255##
[ (f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc256##
[ (f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc257##
[ (f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents <= 2) ]
##f$myfunc258##
[ (f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc259##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc260##
[ (f$OpenPPL_HaveSet && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossibleOnTurn || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc261##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc262##
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc263##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc264##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [($AK) || ($AQ) || ($AJ) || ($AT)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc265##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc266##
[ (f$OpenPPL_HaveTopTwoPair &&  ![f$OpenPPL_TwoPairOnBoard] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc267##
[ (f$OpenPPL_HaveTopTwoPair &&  ![f$OpenPPL_TwoPairOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc268##
[ (f$OpenPPL_HaveTwoPair &&  ![f$OpenPPL_TwoPairOnBoard] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc269##
[ (f$OpenPPL_HaveTwoPair &&  ![f$OpenPPL_TwoPairOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc270##
[ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents == 1 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99)]) ]
##f$myfunc271##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Opponents == 1 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99)]) ]
##f$myfunc272##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc273##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_PairOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))]) ]
##f$myfunc274##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc275##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc276##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc277##
[ (f$OpenPPL_HaveOverPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc278##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc279##
[ (f$OpenPPL_HaveOverPair && [($Q) || ($J)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc280##
[ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc281##
[ (f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc282##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents == 1 && [($AK) || ($AQ) || ($AJ)]) ]
##f$myfunc283##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Opponents == 1 && [($AK) || ($AQ) || ($AJ)]) ]
##f$myfunc284##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc285##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc286##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ) || ($AT) || ($KQ) || ($KJ) || ($KT) || ($QJ) || ($QT)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc287##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc288##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($QJ) || ($KT) || ($QT) || ($JT)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize <= 20) ]
##f$myfunc289##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($QJ) || ($KT) || ($QT) || ($JT)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize > 20) ]
##f$myfunc290##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($QJ) || ($KT) || ($QT)] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossibleOnTurn)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc291##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc292##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc293##
[ (f$OpenPPL_HaveTopPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc294##
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveStraightDraw && [($TT) || ($JJ) || ($QQ) || ($KK)]) ]
##f$myfunc295##
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc296##
[ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc297##
[ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc298##
[ (f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc299##
[ (f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc300##
[ (f$OpenPPL_Have2ndNutFlushDraw) ]
##f$myfunc301##
[ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc302##
[ (f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_Opponents == 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [($AK) || ($AQ) || ($AJ)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0))]) ]
##f$myfunc303##
[ (f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_StillToAct == 0 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [($AK) || ($AQ) || ($AJ)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0))]) ]
##f$myfunc304##
[ (f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc305##
[ (f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [($AK) || ($AQ) || ($AJs) || ($KQs)]) ]
##f$myfunc306##
[ (f$OpenPPL_Overcards == 2 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ]
##f$myfunc307##
[ (f$OpenPPL_BotRaisedOnFlop &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveNutStraightDraw] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc308##
[ (f$OpenPPL_StillToAct == 0 &&  ![f$OpenPPL_BotRaisedOnFlop] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Overcards == 1 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc309##
[ (f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossibleOnTurn] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossibleOnFlop || f$OpenPPL_FlushPossibleOnFlop)]) ]
##f$myfunc310##
[ (f$OpenPPL_Random <= 75 && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 20 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc311##
[ (f$OpenPPL_PairInHand && f$OpenPPL_PairOnBoard) ]
##f$myfunc312##
[ f$OpenPPL_Others ]
##f$myfunc313##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc314##
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse)] && f$OpenPPL_StackSize > 45) ]
##f$myfunc315##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PairOnBoard && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || f$OpenPPL_Folds >= 1)]) ]
##f$myfunc316##
[ (f$OpenPPL_PairOnBoard && [f$OpenPPL_OnlyOneStraightPossible ||  !(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || f$OpenPPL_CalledOnTurn || f$OpenPPL_RaisesOnFlop)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc317##
[ ([ !(f$OpenPPL_NoBettingOnFlop)] && [ !(f$OpenPPL_NoBettingOnTurn)] && [f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_MoreThanOneStraightPossibleOnTurn] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ]
##f$myfunc318##
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTrips)]) ]
##f$myfunc319##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ]
##f$myfunc320##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)]) ]
##f$myfunc321##
[ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc322##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_RaisesOnTurn || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc323##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_RaisesOnTurn || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc324##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_PairOnBoard && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_PairOnTurn || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || f$OpenPPL_Folds >= 1)]) ]
##f$myfunc325##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_TripsOnBoard)]) ]
##f$myfunc326##
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_StackSize < 55 || f$OpenPPL_TotalInvested > 85/100 * f$OpenPPL_StackSize || [$AK])]) ]
##f$myfunc327##
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] && f$OpenPPL_AmountToCall < 30) ]
##f$myfunc328##
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_TripsOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)]) ]
##f$myfunc329##
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_RaisesOnTurn)]) ]
##f$myfunc330##
[ (f$OpenPPL_FlushPossible && [ !(f$OpenPPL_OneCardFlushPossible)]) ]
##f$myfunc331##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [ !([f$OpenPPL_StackSize < 50])]) ]
##f$myfunc332##
[ f$OpenPPL_Others ]
##f$myfunc333##
[ (nopponentsplaying == 1 && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc334##
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse)] && f$OpenPPL_StackSize > 45) ]
##f$myfunc335##
[ (nopponentsplaying == 1 && f$OpenPPL_PairOnBoard && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || f$OpenPPL_Folds >= 1)]) ]
##f$myfunc336##
[ (f$OpenPPL_PairOnBoard && [f$OpenPPL_OnlyOneStraightPossible ||  !(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || f$OpenPPL_CalledOnTurn || f$OpenPPL_RaisesOnFlop)] && nopponentsplaying <= 2) ]
##f$myfunc337##
[ ( ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)] && [f$OpenPPL_FlushPossible || f$OpenPPL_MoreThanOneStraightPossibleOnFlop || f$OpenPPL_MoreThanOneStraightPossibleOnTurn] && nopponentsplaying == 1 && f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush)]) ]
##f$myfunc338##
[ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveTrips)]) ]
##f$myfunc339##
[ (nopponentsplaying == 1 && f$OpenPPL_OpponentIsAllin && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush] &&  ![(me_re_userdead || me_re_userdead2 || me_re_userdead3)]) ]
##f$myfunc340##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads)]) ]
##f$myfunc341##
[ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc342##
[ (nopponentsplaying == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_RaisesOnTurn || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc343##
[ (nopponentsplaying == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_RaisesOnTurn || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc344##
[ (nopponentsplaying == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_PairOnBoard && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_PairOnTurn || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)] || f$OpenPPL_Folds >= 1)]) ]
##f$myfunc345##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_TripsOnBoard)]) ]
##f$myfunc346##
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_StackSize < 55 || f$OpenPPL_TotalInvested > 85/100 * f$OpenPPL_StackSize || [$AK])]) ]
##f$myfunc347##
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_AmountToCall < 30 && [nopponentsplaying < 3 || f$OpenPPL_BetSize < 12]) ]
##f$myfunc348##
[ (f$OpenPPL_PairOnBoard && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_TripsOnBoard || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)]) ]
##f$myfunc349##
[ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_RaisesOnTurn)]) ]
##f$myfunc350##
[ (f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)]) ]
##f$myfunc351##
[ (nopponentsplaying == 1 && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_StackSize < 50)]) ]
##f$myfunc352##
[ (f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_HaveNuts || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)]) ]
##f$myfunc353##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_PairOnBoard) ]
##f$myfunc354##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_FlushPossible) ]
##f$myfunc355##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize && f$OpenPPL_StraightPossible) ]
##f$myfunc356##
[ (f$OpenPPL_TotalInvested > 115/100 * f$OpenPPL_StackSize) ]
##f$myfunc357##
[ (f$OpenPPL_TotalInvested > 300/100 * f$OpenPPL_StackSize) ]
##f$myfunc358##
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveQuads)]) ]
##f$myfunc359##
[ (f$OpenPPL_TwoPairOnBoard && [f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFullHouse]) ]
##f$myfunc360##
[ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveQuads)]) ]
##f$myfunc361##
[ (f$OpenPPL_HaveStraightFlush) ]
##f$myfunc362##
[ (f$OpenPPL_HaveQuads) ]
##f$myfunc363##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind > 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 14] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc364##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc365##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 7] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc366##
[ (f$OpenPPL_FlushOnBoard &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ]
##f$myfunc367##
[ (f$OpenPPL_HaveNutFlush &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc368##
[ (f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard) ]
##f$myfunc369##
[ (f$OpenPPL_FlushOnBoard &&  ![f$OpenPPL_HaveNutFlush]) ]
##f$myfunc370##
[ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc371##
[ (f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc372##
[ (f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc373##
[ (f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc374##
[ (f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc375##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc376##
[ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc377##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc378##
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc379##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc380##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc381##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [($AK) || ($AQ) || ($AJ)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc382##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc383##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc384##
[ (f$OpenPPL_HaveTwoPair &&  ![f$OpenPPL_TwoPairOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc385##
[ (f$OpenPPL_HaveTwoPair &&  ![f$OpenPPL_TwoPairOnBoard] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc386##
[ (f$OpenPPL_HaveOverPair && [$Q] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))]) ]
##f$myfunc387##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))]) ]
##f$myfunc388##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc389##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc390##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc391##
[ (f$OpenPPL_HaveOverPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc392##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q) || ($J)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc393##
[ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc394##
[ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc395##
[ (f$OpenPPL_HaveOverPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_FlushPossibleOnTurn)] && [($A) || ($K)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc396##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && [($AK) || ($AQ) || ($AJ)] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))]) ]
##f$myfunc397##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc398##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc399##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($QJ) || ($KT) || ($QT)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc400##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($QJ) || ($KT) || ($QT)] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc401##
[ (f$OpenPPL_HaveTopPair && [($A) || ($K) || ($Q)] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || [$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9])]) ]
##f$myfunc402##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker]) ]
##f$myfunc403##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc404##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_FlushPossibleOnTurn)] && [($AK) || ($AQ)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc405##
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc406##
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc407##
[ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc408##
[ (f$OpenPPL_HavePair &&  ![([$2] || [$3] || [$4] || [$5] || [$6])] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc409##
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc410##
[ f$OpenPPL_Others ]
