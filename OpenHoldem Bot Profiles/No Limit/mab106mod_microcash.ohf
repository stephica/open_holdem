//***********************************************************                                      
// Converted with OpenPPL 1.1.1                                             
//***********************************************************
//                                                           
//  Option settings                                          
//  ===============                                          
//                                                           
//  To be ignored,                                           
//  as nearly all of them are for the built-in default bot,  
//  which is not supported.                                  
//                                                           
//***********************************************************


//***********************************************************
//                                                           
//  Hand lists                                               
//  ==========                                               
//                                                           
//  Translated code for user-defined hand-lists.             
//  Note: hand-lists are not part of standard PPL.           
//  Please refer to the manual for details.                  
//                                                           
//  OpenPPL lists look like that                             
//                                                           
//  CUSTOM                                                   
//                                                           
//  LISTS                                                    
//                                                           
//  NEW LIST 007                                             
//      // Standard open-raising range for CutOff            
//      AA KK QQ                                             
//      AKs AQs                                              
//      AKo 72o                                              
//  END LIST                                                 
//                                                           
//***********************************************************


//***********************************************************
//                                                           
//  User defined functions                                   
//  ======================                                   
//                                                           
//  Translated code for user-defined functions.              
//  Note: UDFs are not part of standard PPL.                 
//  Please refer to the manual for details.                  
//                                                           
//  CUSTOM                                                   
//                                                           
//  SYMBOLS                                                  
//                                                           
//  NEW SYMBOL ThisIsAnExample                               
//      WHEN (OpponentsLeft > 3) RETURN 5 FORCE              
//      WHEN (Potsize >= 20) RETURN (Pi * R * R) FORCE       
//      WHEN Others RETURN 42 FORCE                          
//  END SYMBOL                                               
//                                                           
//***********************************************************


//***********************************************************
//                                                           
//  Main Code Sections                                       
//  ==================                                       
//                                                           
//  Preflop, Flop, Turn and River                            
//  are mandatory for every OpenPPL-profile.                 
//                                                           
//***********************************************************


##f$preflop##
[ (f$OpenPPL_OpponentsAtTable < 2 &&  ![([$AA] || [$KK] || [$QQ])]) ] ? f$OpenPPL_SitOut :
[ ( ![([$AA] || [$KK] || [$QQ] || [$JJ])] && f$OpenPPL_StackSize > 190 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Folds == 0) ] ? f$OpenPPL_SitOut :
[ ( ![([$AA] || [$KK] || [$QQ] || [$JJ] || [$AK])] && f$OpenPPL_StackSize > 190 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ] ? f$OpenPPL_Fold :
[ ( ![([$AA] || [$KK] || [$QQ] || [$JJ])] && f$OpenPPL_StackSize < 10 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ] ? f$OpenPPL_SitOut :
[ [ (f$OpenPPL_InBigBlind) ] ? me_st_userinbigblind_1 : 0] && 0 ? 0 :
[ (f$OpenPPL_TotalInvested > 75 * 0.01 * f$OpenPPL_StackSize && [($AA) || ($KK)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_TotalInvested > 100 * 0.01 * f$OpenPPL_StackSize && [($AK) || ($QQ) || ($JJ)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 150 * 0.01 * f$OpenPPL_StackSize && [($AQ)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 201 * 0.01 * f$OpenPPL_StackSize && [($AJ) || ($AXs) || f$OpenPPL_PairInHand || ($KQ) || ($QJs)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested > 330 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND OpponentsAtTable > 6 AND ((Hand = AA) OR (hand = KK)))
//
f$myfunc1  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc1  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc1  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc1  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc1  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_RaiseMax :
f$myfunc1  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize <= 6) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc1  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_BetSize > 5) ] ? f$OpenPPL_RaiseMax :
f$myfunc1  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_BetSize <= 5) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc1  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND OpponentsAtTable > 6 AND ((Hand = QQ) OR (hand = JJ) OR (hand = AK) OR (hand = AQ suited) OR (hand = AJ suited)))
//
f$myfunc2  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc2  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc2  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct > 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc2  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc2  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc2  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc2  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc2  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_RaiseMax :
f$myfunc2  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize <= 6) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc2  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_BetSize > 5) ] ? f$OpenPPL_RaiseMax :
f$myfunc2  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_BetSize <= 5) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc2  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND OpponentsAtTable > 6 AND ((Hand = TT) OR (hand = 99) OR (hand = 88)))
//
f$myfunc3  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises == 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc3  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct > 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc3  &&  [ (f$OpenPPL_InSmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc3  &&  [ (f$OpenPPL_InBigBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc3  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc3  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc3  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc3  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc3  &&  [ (f$OpenPPL_InSmallBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc3  &&  [ (f$OpenPPL_InBigBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc3  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 2 && f$OpenPPL_StillToAct <= 4) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND ((Hand = AA) OR (hand = KK)))
//
f$myfunc4  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc4  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_RaiseMax :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize <= 6) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_BetSize > 5) ] ? f$OpenPPL_RaiseMax :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_BetSize <= 5) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc4  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND ((Hand = QQ) OR (hand = JJ) OR (hand = AK)))
//
f$myfunc5  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc5  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct > 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc5  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? f$OpenPPL_RaiseMax :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_RaiseMax :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 6) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_BetSize > 5) ] ? f$OpenPPL_RaiseMax :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall <= 5) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc5  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 20 AND ((Hand = AJ suited) OR (hand = AQ suited)))
//
f$myfunc6  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc6  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct > 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc6  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? f$OpenPPL_RaiseMax :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_RaiseMax :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 6) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_BetSize > 5) ] ? f$OpenPPL_RaiseMax :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall <= 5) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc6  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND ((Hand = AJ suited) OR (hand = AQ suited)))
//
f$myfunc7  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc7  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc7  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct > 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc7  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? f$OpenPPL_RaiseMax :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_RaiseMax :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 6) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_BetSize > 5) ] ? f$OpenPPL_RaiseMax :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall <= 5) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND ((Hand = TT) OR (hand = 99) OR (hand = 88)))
//
f$myfunc8  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises == 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? f$OpenPPL_RaiseMax :
f$myfunc8  &&  [ (f$OpenPPL_InSmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_InBigBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc8  &&  [ (f$OpenPPL_InSmallBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc8  &&  [ (f$OpenPPL_InBigBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 2 && f$OpenPPL_StillToAct <= 4) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND ((Hand = AQ) OR (hand = AJ suited) OR (hand = AT suited) OR (hand = KQ suited)))
//
f$myfunc9  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc9  &&  [ (f$OpenPPL_StackSize <= 20 && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? f$OpenPPL_RaiseMax :
f$myfunc9  &&  [ (f$OpenPPL_InSmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc9  &&  [ (f$OpenPPL_InBigBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc9  &&  [ (f$OpenPPL_InSmallBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc9  &&  [ (f$OpenPPL_InBigBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc9  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 2 && f$OpenPPL_StillToAct <= 4) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 15 AND ((Hand = AJ) OR (hand = AT suited)))
//
f$myfunc10  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc10  &&  [ (f$OpenPPL_StackSize <= 10 && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? f$OpenPPL_RaiseMax :
f$myfunc10  &&  [ (f$OpenPPL_InSmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc10  &&  [ (f$OpenPPL_InBigBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc10  &&  [ (f$OpenPPL_InSmallBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc10  &&  [ (f$OpenPPL_InBigBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc10  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 2 && f$OpenPPL_StillToAct <= 4) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 10 AND ((Hand = A) OR (hand = AT) OR (hand = KQ) OR (hand = KJ) OR (hand = QJ) OR PairInHand))
//
f$myfunc11  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc11  &&  [ (f$OpenPPL_StackSize <= 5 && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? f$OpenPPL_RaiseMax :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_RaiseMax :
f$myfunc11  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct <= 3) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ suited) OR (hand = QQ) OR (hand = JJ) OR (hand = TT) OR (hand = 99) OR (hand = 88)) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc12  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_AmountToCall <= 30) ] ? f$OpenPPL_Call :
f$myfunc12  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_AmountToCall <= 20) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = A 4) OR (hand = A 3) OR (hand = A 2)))
//
f$myfunc13  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc13  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? f$OpenPPL_RaiseMin :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc13  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = K 6 suited) OR (hand = K 5 suited) OR (hand = K 4 suited) OR (hand = K 3 suited) OR (hand = K 2 suited)))
//
f$myfunc14  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc14  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? f$OpenPPL_RaiseMin :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc14  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = K 8) OR (hand = K 7)))
//
f$myfunc15  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc15  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? f$OpenPPL_RaiseMin :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc15  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = Q 6 suited) OR (hand = Q 5 suited) OR (hand = Q 4 suited) OR (hand = Q 3 suited) OR (hand = Q 2 suited)))
//
f$myfunc16  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc16  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? f$OpenPPL_RaiseMin :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc16  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = 6 5 suited) OR (hand = 5 4 suited)))
//
f$myfunc17  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc17  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? f$OpenPPL_RaiseMin :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc17  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = Q 9) OR (hand = Q 8) OR (hand = J 9) OR (hand = T 9) OR (hand = Q 7) OR (hand = J 8) OR (hand = J 7) OR (hand = 9 8)))
//
f$myfunc18  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc18  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? f$OpenPPL_RaiseMin :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc18  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = 9 7 suited) OR (hand = 9 6 suited) OR (hand = 8 6 suited) OR (hand = 8 5 suited) OR (hand = 7s 5s) OR (hand = 6h 4h)))
//
f$myfunc19  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc19  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? f$OpenPPL_RaiseMin :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc19  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = T 8) OR (hand = T 7) OR (hand = 9 7)))
//
f$myfunc20  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc20  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc20  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc20  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? f$OpenPPL_RaiseMin :
f$myfunc20  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc20  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = 7 5 suited) OR (hand = 6 4 suited)))
//
f$myfunc21  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc21  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc21  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc21  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? f$OpenPPL_RaiseMin :
f$myfunc21  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind] && f$OpenPPL_Random <= 15) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc21  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = J suited) OR (hand = T suited)))
//
f$myfunc22  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc22  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = 9 6) OR (hand = 8 6) OR (hand = 7 6) OR (hand = 6 5)))
//
f$myfunc23  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable = 1 AND ((hand = 9 5) OR (hand = 8 5) OR (hand = 7 5)))
//
f$myfunc24  &&  [ (f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = A T) OR (hand = KQ) OR (hand = K J) OR (hand = Q J)))
//
f$myfunc25  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc25  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc25  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc25  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = K T) OR (hand = Q T) OR (hand = J T)))
//
f$myfunc26  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc26  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc26  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc26  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = 6 6) OR (hand = 5 5) OR (hand = 4 4) OR (hand = 3 3) OR (hand = 2 2)))
//
f$myfunc27  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc27  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc27  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc27  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = A 9 suited) OR (hand = A 8 suited) OR (hand = A 7 suited)))
//
f$myfunc28  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc28  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc28  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc28  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = A 6 suited) OR (hand = A 5 suited) OR (hand = A 4 suited) OR (hand = A 3 suited) OR (hand = A 2 suited)))
//
f$myfunc29  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc29  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc29  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc29  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND (hand = A 9))
//
f$myfunc30  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc30  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = A 8) OR (hand = A 7) OR (hand = A 6) OR (hand = A 5)))
//
f$myfunc31  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc31  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc31  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc31  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = K 9 suited) OR (hand = K 8 suited) OR (hand = K 7 suited)))
//
f$myfunc32  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc32  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc32  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc32  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = Q 9 suited) OR (hand = Q 8 suited) OR (hand = Q 7 suited) OR (hand = J 9 suited)))
//
f$myfunc33  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc33  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc33  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc33  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = 8 7 suited) OR (hand = 7 6 suited)))
//
f$myfunc34  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc34  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc34  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc34  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND ((hand = J 8 suited) OR (hand = J 7 suited) OR (hand = T 8 suited) OR (hand = T 7 suited)))
//
f$myfunc35  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc35  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc35  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
f$myfunc35  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![f$OpenPPL_InBigBlind]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Hand = AA))
//
f$myfunc36  &&  [ (f$OpenPPL_TotalInvested > 40 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc36  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize > 3) ] ? f$OpenPPL_Call :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && [f$OpenPPL_StillToAct > 5 || f$OpenPPL_StillToAct <= 9]) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 2) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Random <= 25 && f$OpenPPL_StillToAct > 3) ] ? f$OpenPPL_RaiseMin :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Random <= 25) ] ? f$OpenPPL_RaisePot :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct > 3) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_BetSize > 1 && f$OpenPPL_Random <= 50) ] ? f$OpenPPL_Call :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 0) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc36  &&  [ (f$OpenPPL_Raises >= 2 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc36  &&  [ (f$OpenPPL_Others && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Hand = KK))
//
f$myfunc37  &&  [ (f$OpenPPL_TotalInvested > 40 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc37  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Raises >= 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_BetSize >= 80) ] ? f$OpenPPL_Fold :
f$myfunc37  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize > 3) ] ? f$OpenPPL_Call :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && [f$OpenPPL_StillToAct > 5 || f$OpenPPL_StillToAct <= 9]) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct > 3) ] ? f$OpenPPL_RaisePot :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 2) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Random <= 25) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 2) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_BetSize > 1 && f$OpenPPL_Random <= 50) ] ? f$OpenPPL_Call :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 0) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Raises >= 2 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc37  &&  [ (f$OpenPPL_Others && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Hand = QQ))
//
f$myfunc38  &&  [ (f$OpenPPL_TotalInvested > 40 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaiseMax :
f$myfunc38  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 1] && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_StackSize <= 55) ] ? f$OpenPPL_RaiseMax :
f$myfunc38  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc38  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc38  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 50) ] ? f$OpenPPL_Call :
f$myfunc38  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 30) ] ? f$OpenPPL_Call :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Random <= 75) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct > 3) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Random <= 25) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_AmountToCall <= 4 && f$OpenPPL_FirstRaiserPosition >= 4 && f$OpenPPL_Random <= 20) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct == 2 && f$OpenPPL_Calls >= 0 && f$OpenPPL_AmountToCall <= 2) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 2 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 2 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_StackSize <= 55) ] ? f$OpenPPL_RaiseMax :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 2 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_AmountToCall <= 4) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1 && [f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 3 || f$OpenPPL_StillToAct == 4]) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 0 && f$OpenPPL_AmountToCall <= 5) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc38  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 30) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Hand = AK suited))
//
f$myfunc39  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 40 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc39  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && [f$OpenPPL_Position == f$OpenPPL_Last || f$OpenPPL_StillToAct == 0] && f$OpenPPL_AmountToCall <= 30) ] ? f$OpenPPL_Call :
f$myfunc39  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 1] && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_StackSize <= 50) ] ? f$OpenPPL_RaiseMax :
f$myfunc39  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 1] && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_StackSize <= 55) ] ? f$OpenPPL_RaiseMax :
f$myfunc39  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc39  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc39  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 30) ] ? f$OpenPPL_Call :
f$myfunc39  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 30) ] ? f$OpenPPL_Call :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Random <= 75) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Random <= 25) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_AmountToCall <= 4 && f$OpenPPL_FirstRaiserPosition >= 4 && f$OpenPPL_Random <= 20) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct == 2 && f$OpenPPL_Calls >= 0 && f$OpenPPL_AmountToCall <= 2) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 2 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 2 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_StackSize <= 55) ] ? f$OpenPPL_RaiseMax :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 2 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_AmountToCall <= 4) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 1 && [f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 3 || f$OpenPPL_StillToAct == 4]) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc39  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 0) ] ? 6 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = AK) OR (hand = AQ suited) OR (hand = AJ suited)))
//
f$myfunc40  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 40 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 50) ] ? f$OpenPPL_RaiseMax :
f$myfunc40  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 45 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_RaiseMax :
f$myfunc40  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && [f$OpenPPL_Position == f$OpenPPL_Last || f$OpenPPL_StillToAct == 0] && f$OpenPPL_AmountToCall <= 20) ] ? f$OpenPPL_Call :
f$myfunc40  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 1] && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_StackSize <= 50) ] ? f$OpenPPL_RaiseMax :
f$myfunc40  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 1] && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_StackSize <= 55 &&  ![($AJs)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc40  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc40  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc40  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 20) ] ? f$OpenPPL_Call :
f$myfunc40  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 10) ] ? f$OpenPPL_Call :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Random <= 75) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Random <= 25) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_InBigBlind || f$OpenPPL_InSmallBlind] && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 4) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct == 2 && f$OpenPPL_Calls >= 0 && f$OpenPPL_AmountToCall <= 2) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 3 || f$OpenPPL_StillToAct == 4] && f$OpenPPL_AmountToCall <= 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_AmountToCall <= 10) ] ? f$OpenPPL_Call :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_AmountToCall <= 10) ] ? 6 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = AK) OR (hand = JJ)))
//
f$myfunc41  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && [f$OpenPPL_Position == f$OpenPPL_Last || f$OpenPPL_StillToAct == 0] && f$OpenPPL_AmountToCall <= 30) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Hand = JJ))
//
f$myfunc42  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 40 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 50) ] ? f$OpenPPL_RaiseMax :
f$myfunc42  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 45 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_RaiseMax :
f$myfunc42  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && [f$OpenPPL_Position == f$OpenPPL_Last || f$OpenPPL_StillToAct == 0] && f$OpenPPL_AmountToCall <= 20) ] ? f$OpenPPL_Call :
f$myfunc42  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 1] && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_StackSize <= 50) ] ? f$OpenPPL_RaiseMax :
f$myfunc42  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 1] && f$OpenPPL_Calls == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_StackSize <= 55) ] ? f$OpenPPL_RaiseMax :
f$myfunc42  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc42  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc42  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 20) ] ? f$OpenPPL_Call :
f$myfunc42  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 10) ] ? f$OpenPPL_Call :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Random <= 75) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Random <= 25) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_AmountToCall <= 4 && f$OpenPPL_FirstRaiserPosition >= 4 && f$OpenPPL_Random <= 20) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_InBigBlind || f$OpenPPL_InSmallBlind] && f$OpenPPL_FirstRaiserPosition <= 3 && f$OpenPPL_AmountToCall <= 4) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct == 2 && f$OpenPPL_Calls >= 0 && f$OpenPPL_AmountToCall <= 2) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_StillToAct == 2 || f$OpenPPL_StillToAct == 3 || f$OpenPPL_StillToAct == 4] && f$OpenPPL_AmountToCall <= 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_AmountToCall <= 10) ] ? f$OpenPPL_Call :
f$myfunc42  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_AmountToCall <= 10) ] ? 6 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Hand = AQ))
//
f$myfunc43  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 45 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_RaiseMax :
f$myfunc43  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 35 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc43  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_Position == f$OpenPPL_Middle && [$AQ]) ] ? f$OpenPPL_Fold :
f$myfunc43  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc43  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc43  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 8) ] ? f$OpenPPL_Call :
f$myfunc43  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc43  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Random <= 75 && f$OpenPPL_StillToAct <= 5) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc43  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc43  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc43  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc43  &&  [ (f$OpenPPL_Raises == 1 && [f$OpenPPL_InBigBlind || f$OpenPPL_InSmallBlind] && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition <= 3) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc43  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_AmountToCall <= 10) ] ? f$OpenPPL_Call :
f$myfunc43  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_AmountToCall <= 1) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc43  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Hand = AJ))
//
f$myfunc44  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 45 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_RaiseMax :
f$myfunc44  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 35 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc44  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_Position == f$OpenPPL_Middle && [$AJ]) ] ? f$OpenPPL_Fold :
f$myfunc44  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc44  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc44  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
f$myfunc44  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc44  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc44  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc44  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc44  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc44  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 1) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc44  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_AmountToCall <= 8) ] ? f$OpenPPL_Call :
f$myfunc44  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_StillToAct == 0 && f$OpenPPL_AmountToCall <= 1) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc44  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Hand = A suited))
//
f$myfunc45  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc45  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc45  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc45  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc45  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc45  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc45  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc45  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc45  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc45  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 1) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc45  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc45  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = AT) OR (hand = A9) OR (hand = A8)))
//
f$myfunc46  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc46  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc46  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc46  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc46  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![(f$OpenPPL_StackSize <= 15)]) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc46  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_OpponentsAtTable <= 6 &&  ![(f$OpenPPL_StackSize <= 15)] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc46  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![(f$OpenPPL_OpponentsAtTable > 6)]) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc46  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 1) ] ? 7 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Hand = A))
//
f$myfunc47  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![(f$OpenPPL_OpponentsAtTable > 6)]) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Hand = KQ suited))
//
f$myfunc48  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Calls == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 60 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_RaiseMax :
f$myfunc48  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Calls == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 45 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_RaiseMax :
f$myfunc48  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc48  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc48  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 10) ] ? f$OpenPPL_Call :
f$myfunc48  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc48  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 35 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc48  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Random <= 75 && f$OpenPPL_StillToAct <= 5) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc48  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Random <= 25) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc48  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc48  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc48  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc48  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc48  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc48  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc48  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc48  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 1) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc48  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc48  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = KQ) OR (hand = QJ suited)))
//
f$myfunc49  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Calls == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_TotalInvested > 60 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_RaiseMax :
f$myfunc49  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc49  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc49  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc49  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc49  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_StillToAct <= 4) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc49  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable <= 6) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc49  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc49  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc49  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc49  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = KJ) OR (hand = KT) OR (hand = QJ) OR (hand = QT suited) OR (hand = JT) OR (hand = J9 suited)))
//
f$myfunc50  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc50  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc50  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc50  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc50  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc50  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc50  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc50  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc50  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 1 &&  ![(f$OpenPPL_StackSize <= 40)]) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc50  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = KJ) OR (hand = KT suited) OR (hand = QJ suited) OR (hand = QT suited) OR (hand = J T suited) OR (hand = J 9 suited)))
//
f$myfunc51  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc51  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = K9) OR (hand = K8) OR (hand = QT) OR (hand = Q9) OR (hand = J9) OR (hand = J8)) AND NOT (StackSize <= 40))
//
f$myfunc52  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc52  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc52  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc52  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc52  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc52  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = T9 suited) OR (hand = T8 suited) OR (hand = 98 suited) OR (hand = 97 suited)))
//
f$myfunc53  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc53  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc53  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc53  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc53  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc53  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc53  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc53  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc53  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc53  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = T9 suited) OR (hand = 87 suited) OR (hand = 76 suited) OR (hand = 65 suited) OR (hand = 54 suited)))
//
f$myfunc54  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc54  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc54  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc54  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc54  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc54  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc54  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_AmountToCall <= 4 && f$OpenPPL_FirstRaiserPosition == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc54  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 4 && f$OpenPPL_FirstRaiserPosition == 1 &&  ![(f$OpenPPL_StackSize <= 40)]) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc54  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc54  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = T8 suited) OR (hand = 86 suited) OR (hand = 75 suited) OR (hand = 64 suited) OR (hand = 53 suited)))
//
f$myfunc55  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc55  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc55  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc55  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc55  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc55  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = T T) OR (hand = 99)))
//
f$myfunc56  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc56  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 7) ] ? f$OpenPPL_Fold :
f$myfunc56  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 15) ] ? f$OpenPPL_Call :
f$myfunc56  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc56  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 35 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc56  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_Random <= 75) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc56  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1 && f$OpenPPL_StillToAct <= 3) ] ? f$OpenPPL_Call :
f$myfunc56  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc56  &&  [ (f$OpenPPL_Raises == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc56  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind && f$OpenPPL_FirstRaiserPosition <= 2 && f$OpenPPL_AmountToCall <= 3) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc56  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = 88) OR (hand = 77)))
//
f$myfunc57  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_Fold :
f$myfunc57  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 6) ] ? f$OpenPPL_Fold :
f$myfunc57  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
f$myfunc57  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
f$myfunc57  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 35 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc57  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1 && f$OpenPPL_StillToAct <= 3) ] ? f$OpenPPL_Call :
f$myfunc57  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc57  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc57  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_InBigBlind && f$OpenPPL_FirstRaiserPosition <= 2 && f$OpenPPL_AmountToCall <= 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc57  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = 66) OR (hand = 55)))
//
f$myfunc58  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 1 && f$OpenPPL_Calls > 0 && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1 && f$OpenPPL_StillToAct <= 3) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![(f$OpenPPL_InBigBlind || f$OpenPPL_StackSize <= 10)]) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0 &&  ![(f$OpenPPL_InBigBlind || f$OpenPPL_StackSize <= 10)]) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 1) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 2 && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 0 && f$OpenPPL_AmountToCall <= 4 &&  ![(f$OpenPPL_StackSize <= 40)]) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 2 &&  ![(f$OpenPPL_StackSize <= 40)]) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 1 && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_Call :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 2 && f$OpenPPL_AmountToCall <= 4 && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = 44) OR (hand = 33) OR (hand = 22)))
//
f$myfunc59  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 1 && f$OpenPPL_Calls > 0 && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1 && f$OpenPPL_StillToAct <= 3) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![(f$OpenPPL_InBigBlind || f$OpenPPL_StackSize <= 10)]) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0 &&  ![(f$OpenPPL_InBigBlind || f$OpenPPL_StackSize <= 10)]) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc59  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc59  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc59  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_StillToAct <= 2 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_InBigBlind && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_FirstRaiserPosition == 1) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 2 && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls > 0 && f$OpenPPL_AmountToCall <= 4 &&  ![(f$OpenPPL_StackSize <= 40)]) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 2 &&  ![(f$OpenPPL_StackSize <= 40)]) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 1 && f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_Call :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 2 && f$OpenPPL_AmountToCall <= 4 && f$OpenPPL_StackSize <= 40) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Others)
//
f$myfunc60  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc60  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (OpponentsAtTable > 6 AND (hand = KQ suited))
//
f$myfunc61  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc61  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
f$myfunc61  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 10) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1 && f$OpenPPL_Random <= 25) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc61  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc61  &&  [ (f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc61  &&  [ (f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (OpponentsAtTable > 6 AND (hand = KQ))
//
f$myfunc62  &&  [ (f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc62  &&  [ (f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc62  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc62  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc62  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc62  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc62  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc62  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (OpponentsAtTable > 6 AND ((Hand = KJ) OR (hand = KT suited) OR (hand = QT suited)))
//
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc63  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (OpponentsAtTable > 6 AND ((Hand = KT suited) OR (hand = QJ suited) OR (hand = QT suited) OR (hand = JT suited) OR (hand = T9 suited) OR (hand = T8 suited) OR (hand = 98 suited) OR (hand = 97 suited)))
//
f$myfunc64  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc64  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall < 30 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc64  &&  [ (f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc64  &&  [ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc64  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls <= 1) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc64  &&  [ (f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 1) ] ? f$OpenPPL_Call :
f$myfunc64  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 2 * f$RaiseByBigBlinds :
f$myfunc64  &&  [ (f$OpenPPL_StillToAct == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
f$myfunc64  &&  [ (f$OpenPPL_StillToAct == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (OpponentsAtTable > 6 AND PairInHand)
//
f$myfunc65  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc65  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls > 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Others)
//
f$myfunc66  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


##f$flop##
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND StackSize <= 110 AND TripsOnBoard AND (NOT (NutFullHouseOrFourOfAKind = 1)) AND HaveFullHouse)
//
f$myfunc67  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND StackSize <= 110 AND PairOnBoard AND NOT (NutFullHouseOrFourOfAKind = 2 OR NutFullHouseOrFourOfAKind = 1 OR NutFullHouseOrFourOfAKind = 3 OR NutFullHouseOrFourOfAKind = 4 OR HaveQuads OR HaveStraightFlush) AND (HaveOverPair OR Have2ndOverPair OR HaveUnderPair OR HaveTopPair OR Have2ndTopPair OR HaveTrips OR HaveStraight OR HaveFlush OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc68  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND StackSize <= 110 AND FlushPossible AND (NOT HaveFlush) AND (HavePair OR HaveStraight OR HaveNutFlushDraw))
//
f$myfunc69  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND StackSize <= 110 AND StraightPossible AND (NOT HaveStraight) AND (HavePair OR HaveFlushDraw))
//
f$myfunc70  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 115% StackSize AND StackSize <= 110 AND NOT (HaveSet OR HaveTopTwoPair) AND (HavePair OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc71  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested > 300% StackSize AND StackSize <= 110)
//
f$myfunc72  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (TotalInvested > 100% StackSize AND (BotRaisedBeforeFlop OR BotRaisedOnFlop))
//
f$myfunc73  &&  [ (f$OpenPPL_StackSize <= 5) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveSet AND SuitsOnBoard = 3)
//
f$myfunc74  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND NOT FlushPossible AND HaveStraightDraw AND HaveFlushDraw)
//
f$myfunc75  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND NOT FlushPossible AND HaveStraightDraw AND HaveFlushDraw)
//
f$myfunc75  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTwoPair OR HaveSet OR HaveTrips OR HaveFlush OR HaveStraight OR HaveStraightFlush OR HaveQuads OR HaveFullHouse))
//
f$myfunc76  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTwoPair OR HaveSet OR HaveTrips OR HaveFlush OR HaveStraight OR HaveStraightFlush OR HaveQuads OR HaveFullHouse))
//
f$myfunc76  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTwoPair OR HaveSet OR HaveTrips OR HaveFlush OR HaveStraight OR HaveStraightFlush OR HaveQuads OR HaveFullHouse))
//
f$myfunc76  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND Opponents > 2 AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc77  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc78  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc78  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc78  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND Opponents > 2 AND HaveFlushDraw)
//
f$myfunc79  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND HaveFlushDraw)
//
f$myfunc80  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND HaveFlushDraw)
//
f$myfunc80  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND HaveFlushDraw)
//
f$myfunc80  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND Opponents > 2 AND HaveStraightDraw)
//
f$myfunc81  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND HaveStraightDraw)
//
f$myfunc82  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND HaveStraightDraw)
//
f$myfunc82  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND HaveOverPair AND HaveStraightDraw)
//
f$myfunc82  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND Opponents > 2 AND NOT FlushPossible)
//
f$myfunc83  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND NOT FlushPossible)
//
f$myfunc84  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND NOT FlushPossible)
//
f$myfunc84  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND NOT FlushPossible)
//
f$myfunc84  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND Opponents > 2 AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc85  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc86  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc86  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc86  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND Opponents > 2 AND HaveFlushDraw)
//
f$myfunc87  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND HaveFlushDraw)
//
f$myfunc88  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND HaveFlushDraw)
//
f$myfunc88  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND HaveFlushDraw)
//
f$myfunc88  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND Opponents > 2 AND HaveStraightDraw)
//
f$myfunc89  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND HaveStraightDraw)
//
f$myfunc90  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND HaveStraightDraw)
//
f$myfunc90  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveTopPair AND Have2ndBestKickerOrBetter) AND HaveStraightDraw)
//
f$myfunc90  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKicker) AND Opponents > 2 AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc91  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc92  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc92  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc92  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKicker) AND Opponents > 2 AND HaveFlushDraw)
//
f$myfunc93  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKicker) AND HaveFlushDraw)
//
f$myfunc94  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKicker) AND HaveFlushDraw)
//
f$myfunc94  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKicker) AND HaveFlushDraw)
//
f$myfunc94  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND Opponents > 2 AND HaveStraightDraw)
//
f$myfunc95  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND HaveStraightDraw)
//
f$myfunc96  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND HaveStraightDraw)
//
f$myfunc96  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND HaveStraightDraw)
//
f$myfunc96  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND Opponents > 2 AND NOT FlushPossible)
//
f$myfunc97  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND HaveStraightDraw AND NOT FlushPossible)
//
f$myfunc98  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND HaveStraightDraw AND NOT FlushPossible)
//
f$myfunc98  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND HaveStraightDraw AND NOT FlushPossible)
//
f$myfunc98  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND HaveTopPair AND Opponents <= 2 AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc99  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND HaveTopPair AND Opponents = 1 AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc100  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND HaveTopPair AND Opponents <= 2 AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc101  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND HaveTopPair AND BetSize <= 2 AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc102  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveTopPair AND Opponents <= 2 AND HaveFlushDraw)
//
f$myfunc103  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveTopPair AND Opponents = 1 AND HaveFlushDraw)
//
f$myfunc104  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveTopPair AND Opponents <= 2 AND HaveFlushDraw)
//
f$myfunc105  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveTopPair AND BetSize <= 2 AND HaveFlushDraw)
//
f$myfunc106  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveTopPair AND Opponents <= 2 AND HaveStraightDraw AND NOT FlushPossible)
//
f$myfunc107  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveTopPair AND Opponents = 1 AND HaveStraightDraw AND NOT FlushPossible)
//
f$myfunc108  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveTopPair AND Opponents <= 2 AND HaveStraightDraw AND NOT FlushPossible)
//
f$myfunc109  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveTopPair AND BetSize <= 2 AND HaveStraightDraw AND NOT FlushPossible)
//
f$myfunc110  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveFlushDraw OR HaveStraightDraw) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = KQ) OR (hand = KJ)))
//
f$myfunc111  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveFlushDraw OR HaveStraightDraw) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = KQ) OR (hand = KJ)))
//
f$myfunc111  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 60 AND (HaveFlushDraw OR HaveStraightDraw) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = KQ) OR (hand = KJ)))
//
f$myfunc111  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 30 AND BotCalledBeforeFlop AND PairOnBoard AND Overcards = 2 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND NOT ((Board = J) OR (board = T) OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair OR Have2ndTopPair OR HavePair OR HaveStraightDraw OR HaveFlushDraw OR HaveInsideStraightDraw))
//
f$myfunc112  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc112  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 4 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaisePot :
f$myfunc112  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize > 4 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaiseMax :
f$myfunc112  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 4) ] ? f$OpenPPL_RaisePot :
f$myfunc112  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 4) ] ? f$OpenPPL_RaiseMax :
f$myfunc112  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 30 AND BotRaisedBeforeFlop AND PairOnBoard AND Overcards = 2 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND NOT ((Board = J) OR (board = T) OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair OR Have2ndTopPair OR HavePair OR HaveStraightDraw OR HaveFlushDraw OR HaveInsideStraightDraw))
//
f$myfunc113  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_Call :
f$myfunc113  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 4 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaisePot :
f$myfunc113  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 4 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaiseMax :
f$myfunc113  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 4) ] ? f$OpenPPL_RaisePot :
f$myfunc113  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 4) ] ? f$OpenPPL_RaiseMax :
f$myfunc113  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Calls == 0 && f$OpenPPL_BetSize <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND StackSize <= 40 AND PotSize >= 10 AND NOT (HaveStraightDraw OR HaveFlushDraw OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair))
//
f$myfunc114  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND StackSize <= 40 AND PotSize >= 10 AND (Overcards = 1 OR Overcards = 2) AND NOT (HaveStraightDraw OR HaveFlushDraw OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair))
//
f$myfunc115  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NOT (HaveStraightDraw OR HaveFlushDraw OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair) AND (StraightPossible OR FlushPossible) AND Overcards = 1)
//
f$myfunc116  &&  [ (f$OpenPPL_Opponents > 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NOT (Position = Last OR Position = Middle OR HaveStraightDraw OR HaveFlushDraw OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair) AND (StraightPossible OR FlushPossible) AND Overcards = 2)
//
f$myfunc117  &&  [ (f$OpenPPL_Opponents > 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND Opponents >= 2 AND (SuitsOnBoard = 2 OR StraightPossible) AND Overcards = 2 AND (Position = First OR Position = Middle) AND NOT (RaisesBeforeFlop OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveFlushDraw OR HaveStraightDraw OR HaveInsideStraightDraw OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair))
//
f$myfunc118  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND (SuitsOnBoard = 2 OR PairOnBoard) AND Opponents > 1 AND NOT (Overcards = 2 OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair OR Have2ndTopPair OR HavePair OR HaveStraightDraw OR HaveFlushDraw OR HaveInsideStraightDraw OR UncoordinatedFlop))
//
f$myfunc119  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NOT (SuitsOnBoard = 1 OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair) AND Opponents <= 2 AND HaveInsideStraightDraw AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = KQ) OR (hand = KJ) OR (hand = QJ) OR (hand = KT) OR (hand = QT) OR (hand = JT)))
//
f$myfunc120  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND OpponentsAtTable <= 6 AND NOT (RaisesBeforeFlop OR SuitsOnBoard = 1 OR (board = JT9) OR (board = T98) OR (board = 987) OR (board = 876) OR (board = 765) OR (board = 654) OR (board = 543)) AND Opponents = 1)
//
f$myfunc121  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 30) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND OpponentsAtTable <= 6 AND NOT (RaisesBeforeFlop OR SuitsOnBoard = 1 OR (board = JT9) OR (board = T98) OR (board = 987) OR (board = 876) OR (board = 765) OR (board = 654) OR (board = 543)) AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc122  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc122  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc122  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND OpponentsAtTable <= 6 AND NOT (RaisesBeforeFlop OR SuitsOnBoard = 1 OR (board = JT9) OR (board = T98) OR (board = 987) OR (board = 876) OR (board = 765) OR (board = 654) OR (board = 543)) AND Opponents = 2 AND (Position = Middle OR Position = Last))
//
f$myfunc123  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 30) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND OpponentsAtTable <= 6 AND NOT (RaisesBeforeFlop OR SuitsOnBoard = 1 OR (board = JT9) OR (board = T98) OR (board = 987) OR (board = 876) OR (board = 765) OR (board = 654) OR (board = 543)) AND Opponents = 2 AND (Position = Middle OR Position = Last) AND Bets = 0 AND Raises = 0)
//
f$myfunc124  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc124  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc124  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc124  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND OpponentsAtTable <= 6 AND Overcards = 2 AND NOT (RaisesBeforeFlop OR SuitsOnBoard = 1 OR (board = JT9) OR (board = T98) OR (board = 987) OR (board = 876) OR (board = 765) OR (board = 654) OR (board = 543)) AND Opponents = 2)
//
f$myfunc125  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 30) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND OpponentsAtTable <= 6 AND Overcards = 2 AND NOT (RaisesBeforeFlop OR SuitsOnBoard = 1 OR (board = JT9) OR (board = T98) OR (board = 987) OR (board = 876) OR (board = 765) OR (board = 654) OR (board = 543)) AND Opponents = 2 AND Bets = 0 AND Raises = 0)
//
f$myfunc126  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc126  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc126  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc126  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND OpponentsAtTable > 6 AND NOT (RaisesBeforeFlop OR SuitsOnBoard = 1 OR StraightPossible) AND (HavePair OR HaveStraightDraw OR HaveFlushDraw OR Overcards = 2) AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc127  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc127  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc127  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc127  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND OpponentsAtTable > 6 AND NOT (RaisesBeforeFlop OR SuitsOnBoard = 1 OR StraightPossible) AND Opponents = 2 AND (Position = Middle OR Position = Last) AND Bets = 0 AND Raises = 0)
//
f$myfunc128  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc128  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc128  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc128  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (RaisesBeforeFlop AND BotCalledBeforeFlop AND StackSize >= 14 AND Opponents = 1 AND NOT ((Board = A) OR (board = K) OR (board = Q) OR (board = J)) AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair OR Have2ndTopPair OR HavePair OR HaveStraightDraw OR HaveFlushDraw OR HaveInsideStraightDraw))
//
f$myfunc129  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 5) ] ? f$OpenPPL_RaisePot :
f$myfunc129  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 20) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair OR Have2ndTopPair OR HavePair OR HaveStraightDraw OR HaveFlushDraw OR HaveInsideStraightDraw OR Overcards = 2))
//
f$myfunc130  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind > 4 AND NutFullHouseOrFourOfAKind <= 14) AND TripsOnBoard AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc131  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc131  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc131  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND TripsOnBoard AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc132  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc132  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc132  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 7) AND NOT TripsOnBoard AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc133  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 5) ] ? f$OpenPPL_RaisePot :
f$myfunc133  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc133  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveStraight AND FlushPossible AND HaveFlushDraw AND ((Hand = A) OR (hand = K)))
//
f$myfunc134  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc134  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc134  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc134  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_StackSize <= 20) ] ? f$OpenPPL_RaiseMax :
f$myfunc134  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND FlushPossible AND HaveFlushDraw AND ((Hand = Q) OR (hand = J)) AND Opponents = 1)
//
f$myfunc135  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc135  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc135  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc135  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_StackSize <= 20) ] ? f$OpenPPL_RaiseMax :
f$myfunc135  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND FlushPossible AND HaveFlushDraw AND StackSize <= 15)
//
f$myfunc136  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc136  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc136  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveSet AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc137  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 20) ] ? f$OpenPPL_Call :
f$myfunc137  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
f$myfunc137  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc137  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc137  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc137  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_Random <= 50 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 15) ] ? f$OpenPPL_Call :
f$myfunc137  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Random <= 50 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize > 10) ] ? f$OpenPPL_RaiseMin :
f$myfunc137  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc137  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_Calls == 0) ] ? f$OpenPPL_Call :
f$myfunc137  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveSet AND NOT (FlushPossible OR StraightPossible) AND Random <= 70 AND Bets = 0 AND Raises = 0)
//
f$myfunc138  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc138  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc138  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc138  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTrips AND SuitsOnBoard = 3 AND Bets = 0 AND Raises = 0)
//
f$myfunc139  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 20) ] ? f$OpenPPL_Call :
f$myfunc139  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
f$myfunc139  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc139  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc139  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc139  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_Random <= 50 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 15) ] ? f$OpenPPL_Call :
f$myfunc139  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Random <= 50 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize > 10) ] ? f$OpenPPL_RaiseMin :
f$myfunc139  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc139  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_Calls == 0) ] ? f$OpenPPL_Call :
f$myfunc139  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTrips AND Bets = 1 AND Raises = 0 AND BetSize <= 7)
//
f$myfunc140  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc140  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc140  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc140  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT (SuitsOnBoard = 1) AND Bets = 0 AND Raises = 0 AND Random <= 70 AND Bets = 0 AND Raises = 0)
//
f$myfunc141  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc141  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc141  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc141  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTwoPair AND NOT (FlushPossible OR StraightPossible) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc142  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Opponents == 1 && f$OpenPPL_Random <= 60) ] ? f$OpenPPL_Call :
f$myfunc142  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc142  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc142  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc142  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTwoPair AND StraightPossible AND NOT (SuitsOnBoard = 1) AND (Position = First OR Position = Middle OR Position = Last) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc143  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc143  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Check || f$OpenPPL_BotsLastAction == f$OpenPPL_Call] && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc143  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc143  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Check || f$OpenPPL_BotsLastAction == f$OpenPPL_Call] && f$OpenPPL_StackSize <= 110 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTwoPair AND NOT (FlushPossible OR StraightPossible) AND Random <= 70 AND Bets = 0 AND Raises = 0)
//
f$myfunc144  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc144  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc144  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc144  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND BotRaisedBeforeFlop AND PairOnBoard AND (Position = First OR Position = Middle OR Position = Last) AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND NOT ((Board = AA) OR (board = kk) OR (board = QQ) OR (board = JJ) OR (board = TT)))
//
f$myfunc145  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 30) ] ? f$OpenPPL_RaisePot :
f$myfunc145  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 30) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveOverPair AND BotRaisedBeforeFlop AND ((Hand = AA) OR (hand = KK) OR (hand = QQ)) AND (Position = First OR Position = Middle OR Position = Last) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc146  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 30) ] ? f$OpenPPL_RaisePot :
f$myfunc146  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 30) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = AA) OR (hand = KK) OR (hand = QQ)) AND StraightPossible AND NOT (SuitsOnBoard = 1) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc147  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_StackSize <= 110 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc147  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Check || f$OpenPPL_BotsLastAction == f$OpenPPL_Call] && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc147  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_StackSize <= 110 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc147  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Check || f$OpenPPL_BotsLastAction == f$OpenPPL_Call] && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ)) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc148  &&  [ (f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
f$myfunc148  &&  [ (f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc148  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_BotCalledBeforeFlop && [$AQ] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 69 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc148  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_BotCalledBeforeFlop && [$AQ] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall > 69 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc148  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_BotCalledBeforeFlop && [$AQ] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents == 2 && f$OpenPPL_AmountToCall <= 44 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc148  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_BotCalledBeforeFlop && [$AQ] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents == 2 && f$OpenPPL_AmountToCall > 44 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc148  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_BotCalledBeforeFlop && [$AQ] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_BetSize > 3) ] ? f$OpenPPL_Fold :
f$myfunc148  &&  [ (f$OpenPPL_BotCalledBeforeFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_RaisePot :
f$myfunc148  &&  [ (f$OpenPPL_BotCalledBeforeFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ)) AND StraightPossible AND NOT (SuitsOnBoard = 1) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc149  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_StackSize <= 110 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc149  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Check || f$OpenPPL_BotsLastAction == f$OpenPPL_Call] && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc149  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_StackSize <= 110 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc149  &&  [ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Check || f$OpenPPL_BotsLastAction == f$OpenPPL_Call] && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc150  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [($AK) || ($AQ)] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_BetSize <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc150  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [($AK) || ($AQ) || ($AJ)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_StackSize <= 55 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_BetSize <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? 150 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Random <= 70 AND Bets = 0 AND Raises = 0)
//
f$myfunc151  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc151  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc151  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc151  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NOT (BotsLastAction = call OR RaisesBeforeFlop) AND Bets = 0 AND Raises = 0 AND (HaveStraightDraw OR HaveFlushDraw) AND Opponents <= 2)
//
f$myfunc152  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc152  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc152  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc152  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc152  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc152  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc152  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc152  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc152  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NOT (BotsLastAction = call OR RaisesBeforeFlop) AND Bets = 0 AND Raises = 0 AND HavePair AND NOT (Position = First) AND Opponents <= 2)
//
f$myfunc153  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc153  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc153  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc153  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc153  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc153  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc153  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc153  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc153  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((HaveTopPair OR Have2ndOverPair OR Have2ndTopPair) AND NOT FlushPossible)
//
f$myfunc154  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_Calls == 0 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TripsOnBoard AND NOT (HaveFullHouse OR HaveSet OR HaveTrips OR HaveQuads))
//
f$myfunc155  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc155  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveStraightFlush)
//
f$myfunc156  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Random <= 40) ] ? f$OpenPPL_Call :
f$myfunc156  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraightFlush AND Bets = 0 AND Raises = 0)
//
f$myfunc157  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc157  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc157  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc157  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc157  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc157  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc157  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc157  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc157  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveQuads)
//
f$myfunc158  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Random <= 60) ] ? f$OpenPPL_Call :
f$myfunc158  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveQuads AND Bets = 0 AND Raises = 0)
//
f$myfunc159  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc159  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc159  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc159  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc159  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc159  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc159  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc159  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc159  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind > 4 AND NutFullHouseOrFourOfAKind <= 14) AND TripsOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc160  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc160  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 3) AND TripsOnBoard)
//
f$myfunc161  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Random <= 60) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc161  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc161  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND NOT TripsOnBoard)
//
f$myfunc162  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Random <= 60) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 5) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc162  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc162  &&  [ (f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 4 AND NutFullHouseOrFourOfAKind <= 7) AND NOT TripsOnBoard)
//
f$myfunc163  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 5) ] ? f$OpenPPL_RaisePot :
f$myfunc163  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_PotSize <= 10 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveNutFlush)
//
f$myfunc164  &&  [ (f$OpenPPL_BotRaisedBeforeFlop &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc164  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Random <= 40) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveNutFlush AND Bets = 0 AND Raises = 0)
//
f$myfunc165  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc165  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc165  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc165  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc165  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc165  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc165  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc165  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc165  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveFlush)
//
f$myfunc166  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveFlush AND Bets = 0 AND Raises = 0)
//
f$myfunc167  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc167  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc167  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc167  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc167  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc167  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc167  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc167  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc167  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveNutStraight AND NOT FlushPossible)
//
f$myfunc168  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc168  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveNutStraight AND NOT FlushPossible AND Bets = 0 AND Raises = 0)
//
f$myfunc169  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc169  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc169  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc169  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc169  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc169  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc169  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc169  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc169  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveNutStraight AND FlushPossible)
//
f$myfunc170  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveNutStraight AND FlushPossible AND Bets = 0 AND Raises = 0)
//
f$myfunc171  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc171  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc171  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc171  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveStraight AND NOT FlushPossible)
//
f$myfunc172  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_PotSize <= 30 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveStraight AND NOT FlushPossible AND Bets = 0 AND Raises = 0)
//
f$myfunc173  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc173  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc173  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc173  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc173  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc173  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc173  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc173  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc173  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveStraight AND FlushPossible)
//
f$myfunc174  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND FlushPossible)
//
f$myfunc174  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND StraightPossible AND NOT FlushPossible AND Opponents = 1)
//
f$myfunc175  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Random <= 50 && f$OpenPPL_PotSize > 10) ] ? f$OpenPPL_RaiseMin :
f$myfunc175  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc175  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveSet AND StraightPossible AND NOT FlushPossible AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc176  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc176  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc176  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc176  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveSet AND (FlushPossible OR StraightPossible) AND Opponents <= 2)
//
f$myfunc177  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc177  &&  [ (f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveSet AND (FlushPossible OR StraightPossible) AND Opponents <= 2 AND Bets = 0 AND Raises = 0)
//
f$myfunc178  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc178  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc178  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc178  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveSet AND (FlushPossible OR StraightPossible))
//
f$myfunc179  &&  [ (f$OpenPPL_TotalInvested > 66 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc179  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 3 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND (FlushPossible OR StraightPossible) AND Bets = 0 AND Raises = 0)
//
f$myfunc180  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc180  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc180  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc180  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveSet AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc181  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First) ] ? f$OpenPPL_Call :
f$myfunc181  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_Random <= 50 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 15) ] ? f$OpenPPL_Call :
f$myfunc181  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Random <= 50 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize > 10) ] ? f$OpenPPL_RaiseMin :
f$myfunc181  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc181  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveSet AND NOT (FlushPossible OR StraightPossible) AND Bets = 0 AND Raises = 0)
//
f$myfunc182  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc182  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc182  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc182  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc182  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc182  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc182  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc182  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc182  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND (FlushPossible OR StraightPossible))
//
f$myfunc183  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc183  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc183  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 3 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND (FlushPossible OR StraightPossible) AND Bets = 0 AND Raises = 0)
//
f$myfunc184  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc184  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc184  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc184  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT)) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc185  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc185  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT)) AND NOT (FlushPossible OR StraightPossible) AND Bets = 0 AND Raises = 0)
//
f$myfunc186  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc186  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc186  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc186  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc186  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc186  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc186  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc186  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc186  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc187  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc187  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc187  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTrips AND NOT TripsOnBoard AND NOT (FlushPossible OR StraightPossible) AND Bets = 0 AND Raises = 0)
//
f$myfunc188  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc188  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc188  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc188  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc188  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc188  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc188  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc188  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc188  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (TripsOnBoard AND NOT (HaveFullHouse OR HaveSet OR HaveTrips))
//
f$myfunc189  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc189  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopTwoPair AND (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc190  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc190  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopTwoPair AND (FlushPossible OR StraightPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0)
//
f$myfunc191  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc191  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc191  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc191  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc192  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc192  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTopTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0)
//
f$myfunc193  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc193  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc193  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc193  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc193  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc193  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc193  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc193  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc193  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTwoPair AND (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc194  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_Opponents >= 2 && f$OpenPPL_BetSize >= 5) ] ? f$OpenPPL_Fold :
f$myfunc194  &&  [ (f$OpenPPL_BigBlind && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize >= 5) ] ? f$OpenPPL_Fold :
f$myfunc194  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc194  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTwoPair AND (FlushPossible OR StraightPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0)
//
f$myfunc195  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc195  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc195  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc195  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT HaveTopTwoPair)
//
f$myfunc196  &&  [ (f$OpenPPL_Raises >= 2 && f$OpenPPL_Opponents >= 2 && f$OpenPPL_BetSize >= 5) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_BigBlind && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize >= 5) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc196  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT HaveTopTwoPair AND Bets = 0 AND Raises = 0)
//
f$myfunc197  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc197  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc197  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc197  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT FlushPossible AND StraightPossible AND Opponents = 1 AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ) OR (hand = TT) OR (hand = 99)))
//
f$myfunc198  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_BetSize <= 200 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND HaveFlushDraw AND FlushPossible AND NOT StraightPossible AND Opponents = 1 AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ) OR (hand = TT) OR (hand = 99)))
//
f$myfunc199  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_BetSize <= 200 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND Opponents <= 2 AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard AND ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)))
//
f$myfunc200  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc200  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND Opponents <= 2 AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard AND ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)) AND Bets = 0 AND Raises = 0)
//
f$myfunc201  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc201  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc201  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc201  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND (hand = Q) AND Opponents = 1 AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard AND ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)))
//
f$myfunc202  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc202  &&  [ (f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc202  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND (hand = Q) AND Opponents = 1 AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard AND ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = TT)) AND Bets = 0 AND Raises = 0)
//
f$myfunc203  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc203  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc203  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc203  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND Opponents <= 2 AND (StraightPossible OR PairOnBoard) AND NOT FlushPossible)
//
f$myfunc204  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc204  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND Opponents <= 3 AND (StraightPossible OR PairOnBoard) AND NOT FlushPossible AND Bets = 0 AND Raises = 0)
//
f$myfunc205  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc205  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc205  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc205  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND (hand = Q) AND Opponents = 1 AND (StraightPossible OR PairOnBoard) AND NOT FlushPossible)
//
f$myfunc206  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
f$myfunc206  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_BetSize == 1) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc206  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc206  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND (hand = Q) AND Opponents = 1 AND (StraightPossible OR PairOnBoard) AND NOT FlushPossible AND Bets = 0 AND Raises = 0)
//
f$myfunc207  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc207  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc207  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc207  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND FlushPossible AND HaveNutFlushDraw)
//
f$myfunc208  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc208  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
f$myfunc208  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveOverPair AND FlushPossible AND HaveNutFlushDraw AND Bets = 0 AND Raises = 0)
//
f$myfunc209  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc209  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc209  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc209  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc210  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc210  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)])] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K) OR (hand = Q)) AND (StraightPossible OR FlushPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0)
//
f$myfunc211  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc211  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc211  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc211  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc212  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc212  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = A) OR (hand = K)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0)
//
f$myfunc213  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc213  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc213  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc213  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = Q) OR (hand = J)) AND NOT (StraightPossible OR FlushPossible) AND Opponents = 1)
//
f$myfunc214  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = Q) OR (hand = J)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND Opponents = 2)
//
f$myfunc215  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 20 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = T) OR (hand = 9) OR (hand = 8) OR (hand = 7)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND Opponents = 1)
//
f$myfunc216  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = Q) OR (hand = J)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc217  &&  [ (f$OpenPPL_PotSize <= 20 && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 25) ] ? f$OpenPPL_Fold :
f$myfunc217  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_BetSize == 1) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc217  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc217  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = Q) OR (hand = J)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0)
//
f$myfunc218  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc218  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc218  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc218  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc219  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc219  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 10 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc219  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc219  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0)
//
f$myfunc220  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc220  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc220  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc220  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND (StraightPossible OR FlushPossible))
//
f$myfunc221  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc221  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND (StraightPossible OR FlushPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0 AND Opponents = 1)
//
f$myfunc222  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc222  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc222  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc222  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT FlushPossible)
//
f$myfunc223  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc223  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND NOT (StraightPossible OR FlushPossible) AND Opponents = 1)
//
f$myfunc224  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 18) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND Opponents = 2)
//
f$myfunc225  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 18 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = A9)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND Opponents = 1)
//
f$myfunc226  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 10) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT FlushPossible AND StraightPossible AND Opponents = 1 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)))
//
f$myfunc227  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize <= 20 && f$OpenPPL_BetSize <= 200 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND HaveFlushDraw AND FlushPossible AND NOT StraightPossible AND Opponents = 1 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)))
//
f$myfunc228  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize <= 20 && f$OpenPPL_BetSize <= 200 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND FlushPossible AND HaveNutFlushDraw)
//
f$myfunc229  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc229  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND (hand = AK) AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents = 1)
//
f$myfunc230  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc230  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First) ] ? f$OpenPPL_Call :
f$myfunc230  &&  [ (f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND (hand = AK) AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc231  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc231  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc231  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc231  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND FlushPossible AND HaveNutFlushDraw AND Bets = 0 AND Raises = 0)
//
f$myfunc232  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc232  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc232  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc232  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents <= 3 AND Bets = 0 AND Raises = 0)
//
f$myfunc233  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc233  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc233  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc233  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND (hand = AK) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND (Bets = 1 OR Raises >= 1) AND Opponents <= 2 AND BotsLastAction = call)
//
f$myfunc234  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc234  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc234  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc234  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND (hand = AQ) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Bets = 1 AND Raises = 0 AND Opponents = 1 AND BotsLastAction = call)
//
f$myfunc235  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc235  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc235  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc235  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND (hand = AK) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc236  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc236  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc236  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_BetSize == 1) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc236  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc236  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc237  &&  [ (f$OpenPPL_PotSize <= 40 && f$OpenPPL_Raises >= 2 && f$OpenPPL_BetSize > 25) ] ? f$OpenPPL_Fold :
f$myfunc237  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc237  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc237  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_BetSize == 1) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc237  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_PotSize <= 40) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc237  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_PotSize > 40) ] ? f$OpenPPL_RaiseMax :
f$myfunc237  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc237  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0)
//
f$myfunc238  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc238  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc238  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc238  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Random <= 60 AND HaveTopPair AND (hand = AK) AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents = 1)
//
f$myfunc239  &&  [ (f$OpenPPL_PotSize <= 20 && f$OpenPPL_Raises >= 1 && f$OpenPPL_BetSize > 25) ] ? f$OpenPPL_Fold :
f$myfunc239  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc239  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Position == f$OpenPPL_First) ] ? f$OpenPPL_Call :
f$myfunc239  &&  [ (f$OpenPPL_Bets == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Random <= 60 AND HaveTopPair AND (hand = AK) AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc240  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc240  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc240  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc240  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents <= 2)
//
f$myfunc241  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 2 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc241  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc241  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc241  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_First) ] ? f$OpenPPL_Call :
f$myfunc241  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = KJ) OR (hand = QJ) OR (hand = KT) OR (hand = QT) OR (hand = JT)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND PotSize <= 15)
//
f$myfunc242  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc242  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && [$AXs] &&  ![([$6] || [$7] || [$8] || [$9])] && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaisePot :
f$myfunc242  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Position == f$OpenPPL_Last && [($ATs) || ($KQs) || ($QJs) || ($KTs) || ($QTs) || ($JTs)] && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaisePot :
f$myfunc242  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc242  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = KJ) OR (hand = QJ) OR (hand = KT) OR (hand = QT) OR (hand = JT)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND PotSize <= 15 AND Bets = 0 AND Raises = 0)
//
f$myfunc243  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc243  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc243  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc243  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = KJ) OR (hand = QJ) OR (hand = KT) OR (hand = QT) OR (hand = JT)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND PotSize > 15)
//
f$myfunc244  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 3) ] ? f$OpenPPL_Fold :
f$myfunc244  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc244  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc244  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AT) OR (hand = KQ) OR (hand = KJ) OR (hand = QJ) OR (hand = KT) OR (hand = QT) OR (hand = JT)) AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND PotSize > 15 AND Bets = 0 AND Raises = 0)
//
f$myfunc245  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc245  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc245  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc245  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc246  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc246  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9] || f$OpenPPL_Opponents > 2)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc246  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents <= 2)
//
f$myfunc247  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc247  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Opponents <= 2 AND Bets = 0 AND Raises = 0)
//
f$myfunc248  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc248  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc248  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc248  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc249  &&  [ (f$OpenPPL_Bets == 1 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9])] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 20) ] ? f$OpenPPL_RaiseMin :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0 AND NOT ((Hand = 2) OR (hand = 3) OR (hand = 4) OR (hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9)))
//
f$myfunc250  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc250  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc250  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc250  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND Bets = 0 AND Raises = 0 AND Opponents = 1)
//
f$myfunc251  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc251  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc251  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc251  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc252  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Fold :
f$myfunc252  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8])]) ] ? f$OpenPPL_RaisePot :
f$myfunc252  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8])]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc252  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT FlushPossible)
//
f$myfunc253  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc253  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND NOT (BotCalledBeforeFlop OR FlushPossible OR PairOnBoard) AND HaveStraightDraw AND ((Hand = TT) OR (hand = JJ) OR (hand = QQ) OR (hand = KK)))
//
f$myfunc254  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc254  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc254  &&  [ (f$OpenPPL_Opponents == 2 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaisePot :
f$myfunc254  &&  [ (f$OpenPPL_Opponents == 2 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc254  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND BotCalledBeforeFlop AND NOT (FlushPossible OR PairOnBoard) AND HaveStraightDraw AND ((Hand = TT) OR (hand = JJ) OR (hand = QQ) OR (hand = KK)))
//
f$myfunc255  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc255  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 40 * f$RaiseByPercentagedPotsize :
f$myfunc255  &&  [ (f$OpenPPL_Opponents == 2 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? f$OpenPPL_RaisePot :
f$myfunc255  &&  [ (f$OpenPPL_Opponents == 2 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc255  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND NOT (BotCalledBeforeFlop OR FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc256  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc256  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc256  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND BotCalledBeforeFlop AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc257  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc257  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 40 * f$RaiseByPercentagedPotsize :
f$myfunc257  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HavePair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard OR (hand = 23)))
//
f$myfunc258  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveNutFlushDraw AND NOT FlushPossible AND (hand = A suited) AND Opponents = 1)
//
f$myfunc259  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc259  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (HaveNutFlushDraw)
//
f$myfunc260  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc260  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 10) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc260  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc260  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc260  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc260  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BetSize <= 10) ] ? f$OpenPPL_Call :
f$myfunc260  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 7) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFlushDraw AND NOT FlushPossible)
//
f$myfunc261  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc261  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc261  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 15 && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc261  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
f$myfunc261  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Have2ndNutFlushDraw)
//
f$myfunc262  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc262  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 20 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraightDraw AND Bets = 0 AND Raises = 0 AND Opponents <= 2 AND NOT FlushPossible AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = KQ) OR (hand = KJ) OR (hand = QJ) OR (hand = T9) OR (hand = 98) OR (hand = 87)))
//
f$myfunc263  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc263  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc263  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc263  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc263  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc263  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc263  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc263  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc263  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveStraightDraw AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc264  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc264  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PairOnBoard && f$OpenPPL_PotSize <= 5 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc264  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PairOnBoard && f$OpenPPL_PotSize > 5 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc264  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10 &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc264  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize > 10 &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc264  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND NOT FlushPossible AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ)) AND ((Board = AKT) OR (board = AQT) OR (board = AJT)))
//
f$myfunc265  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_PotSize <= 15) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc265  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
f$myfunc265  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_PotSize >= 4 && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND NOT FlushPossible)
//
f$myfunc266  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND NOT FlushPossible AND ((Hand = TT) OR (hand = JJ) OR (hand = QQ) OR (hand = KK)))
//
f$myfunc267  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND NOT FlushPossible AND ((Hand = TT) OR (hand = JJ) OR (hand = QQ) OR (hand = KK)) AND Bets = 0 AND Raises = 0 AND NOT (BotsLastAction = call) AND Opponents = 1)
//
f$myfunc268  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc268  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc268  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc268  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc268  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc268  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc268  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc268  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc268  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Overcards = 2 AND NOT (FlushPossible OR StraightPossible) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ suited) OR (hand = KQ suited)))
//
f$myfunc269  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotRaisedBeforeFlop OR BotRaisedOnFlop) AND Opponents = 1 AND OpponentIsAllin and ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = KQ) OR PairInHand OR HavePair))
//
f$myfunc270  &&  [ (f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND NOT BotRaisedBeforeFlop AND BotsLastAction = call AND Overcards = 2 AND Opponents = 1 AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc271  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 4 &&  ![(f$OpenPPL_BigBlind || f$OpenPPL_SmallBlind)]) ] ? 80 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (PairInHand AND PairOnBoard AND ((Hand = TT) OR (hand = 99) OR (hand = 88) OR (hand = 77) OR (hand = 66) OR (hand = 55)) AND Opponents = 2 AND Position = Middle AND Bets = 0 AND Raises = 0)
//
f$myfunc272  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc272  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc272  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc272  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (PairInHand AND PairOnBoard)
//
f$myfunc273  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairInHand AND SuitsOnBoard = 3 AND NOT (FlushPossible OR StraightPossible) AND ((Hand = TT) OR (hand = 99) OR (hand = 88) OR (hand = 77) OR (hand = 66) OR (hand = 55)) AND Opponents = 1 AND Position = Last AND Bets = 0 AND Raises = 0)
//
f$myfunc274  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc274  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc274  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc274  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (PairInHand AND NOT (FlushPossible OR StraightPossible) AND NOT ((Hand = 22) OR (hand = 33) OR (hand = 44)))
//
f$myfunc275  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (PairInHand AND Bets = 0 AND Raises = 0 AND Opponents = 1 AND Position = Last AND NOT (FlushPossible OR StraightPossible) AND NOT ((Hand = 22) OR (hand = 33) OR (hand = 44)))
//
f$myfunc276  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc276  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc276  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc276  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StraightPossible AND NOT (FlushPossible OR (hand = 2) OR (hand = 3) OR (hand = 4) OR (hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9) OR (board = 2) OR (board = 3) OR (board = 4) OR (board = 5) OR (board = 6) OR (board = 7) OR (board = 8) OR (board = 9)) AND Opponents = 1 AND Position = Last AND Bets = 0 AND Raises = 0)
//
f$myfunc277  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc277  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc277  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc277  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc277  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc277  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc277  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc277  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc277  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((HavePair OR HaveFlushDraw OR HaveStraightDraw) AND NOT (PairOnBoard OR (hand = 22) OR (hand = 33) OR (hand = 44) OR (hand = 23)) AND Opponents = 1 AND Bets = 0 AND Raises = 0 AND Position = Last)
//
f$myfunc278  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc278  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc278  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc278  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc278  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc278  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc278  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc278  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
f$myfunc278  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Opponents = 1 AND PotSize >= 10)
//
f$myfunc279  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (StackSize <= 10 AND (HavePair OR HaveStraightDraw OR HaveFlushDraw) AND TotalInvested > 66% StackSize)
//
f$myfunc280  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Others)
//
f$myfunc281  &&  [ (f$OpenPPL_OpponentsAtTable <= 2 && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw] && f$OpenPPL_BotRaisedBeforeFlop &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc281  &&  [ (f$OpenPPL_OpponentsAtTable <= 2 && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw] &&  ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND (HavePair OR HaveStraightDraw) AND StraightPossible AND SuitsOnBoard = 3 AND NOT (board = J))
//
f$myfunc282  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 25) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (NOT BotRaisedBeforeFlop AND Opponents = 1 AND Bets = 0 AND Raises = 0 AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR HaveOverPair OR Have2ndTopPair OR HavePair) AND Position = Last AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc283  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StackSize <= 75) ] ? f$OpenPPL_RaiseMin :
//
// Starting open-ended when-condition
// (NOT BotRaisedBeforeFlop AND Opponents = 1 AND Bets = 0 AND Raises = 0 AND Position = Last AND NOT (FlushPossible OR PairOnBoard) AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR HaveOverPair OR Have2ndTopPair OR HavePair))
//
f$myfunc284  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc284  &&  [ (f$OpenPPL_PotSize < 4) ] ? f$OpenPPL_RaisePot :
f$myfunc284  &&  [ (f$OpenPPL_Random <= 50 && f$OpenPPL_PotSize >= 4 && f$OpenPPL_PotSize < 20) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc284  &&  [ (f$OpenPPL_PotSize >= 4 && f$OpenPPL_PotSize < 20) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc284  &&  [ (f$OpenPPL_Random <= 50 && f$OpenPPL_PotSize >= 20) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc284  &&  [ (f$OpenPPL_PotSize >= 20) ] ? 10 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (NOT BotRaisedBeforeFlop AND Opponents = 2 AND Position = Last AND NOT (FlushPossible OR PairOnBoard) AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR HaveOverPair OR Have2ndTopPair OR HavePair))
//
f$myfunc285  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_StackSize <= 75) ] ? f$OpenPPL_RaiseMin :
f$myfunc285  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 && f$OpenPPL_Random <= 70) ] ? f$OpenPPL_RaiseMin :
f$myfunc285  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NOT (BotsLastAction = call) AND (Bets = 1 OR Raises = 1) AND (HaveStraightDraw OR HaveFlushDraw OR HavePair OR Overcards = 1) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc286  &&  [ (f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Check)] && f$OpenPPL_BetSize <= 2 && f$OpenPPL_PotSize >= 4) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (inBigBlind AND CalledOnFlop AND PairOnBoard AND (PairInHand OR Overcards =2) AND NOT ((Board = A) OR (board = K) OR (board = Q) OR (board = J)) AND Position = Last)
//
f$myfunc287  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 15) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Have2ndTopPair AND NOT (FlushPossible OR StraightPossible) AND NOT RaisesBeforeFlop AND Opponents <= 2)
//
f$myfunc288  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_PotSize <= 2) ] ? f$OpenPPL_RaiseMin :
f$myfunc288  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_PotSize == 3) ] ? 2 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (NOT (UncoordinatedFlop OR BotRaisedBeforeFlop OR (board = A) OR (board = K) OR (board = Q) OR (board = J)) AND BotCalledBeforeFlop AND Opponents = 1 AND Position = First AND (HavePair OR HaveStraightDraw OR HaveFlushDraw) AND Random <= 50)
//
f$myfunc289  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (NOT (UncoordinatedFlop OR BotRaisedBeforeFlop OR (board = A) OR (board = K) OR (board = Q) OR (board = J)) AND BotCalledBeforeFlop AND Opponents = 1 AND BotsLastAction = check AND (HavePair OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc290  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (NOT (UncoordinatedFlop OR BotRaisedBeforeFlop OR (board = A) OR (board = K) OR (board = Q) OR (board = J)) AND BotCalledBeforeFlop AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc291  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc291  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc291  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc291  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc291  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc291  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc291  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw OR HaveFlush OR HaveStraight OR HaveFullHouse OR StackSize <= 55 OR TotalInvested > 300% StackSize) AND OpponentsOnFlop > 1 AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc292  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize > 50) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw OR HaveFlush OR HaveStraight OR HaveFullHouse OR StackSize <= 55 OR TotalInvested > 300% StackSize) AND OpponentsOnFlop > 1 AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc293  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize > 50) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND NOT (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw OR HaveFullHouse OR StackSize <= 35 OR TotalInvested > 300% StackSize) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc294  &&  [ (f$OpenPPL_BetSize > 10) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


##f$turn##
//
// Starting open-ended when-condition
// (TotalInvested > 100% StackSize)
//
f$myfunc295  &&  [ (f$OpenPPL_StackSize <= 5) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTwoPair OR HaveSet OR HaveTrips OR HaveStraight OR HaveStraightFlush OR HaveQuads OR HaveFullHouse))
//
f$myfunc296  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTwoPair OR HaveSet OR HaveTrips OR HaveStraight OR HaveStraightFlush OR HaveQuads OR HaveFullHouse))
//
f$myfunc296  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTwoPair OR HaveSet OR HaveTrips OR HaveStraight OR HaveStraightFlush OR HaveQuads OR HaveFullHouse))
//
f$myfunc296  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveFlush AND NOT OneCardFlushPossible)
//
f$myfunc297  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveFlush AND NOT OneCardFlushPossible)
//
f$myfunc297  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveFlush AND NOT OneCardFlushPossible)
//
f$myfunc297  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND Opponents > 2 AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc298  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc299  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc299  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc299  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND Opponents > 2 AND FlushPossible AND HaveFlushDraw AND ((Hand = A) OR (hand = K) OR (hand = Q) OR (hand = J)))
//
f$myfunc300  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND FlushPossible AND HaveFlushDraw AND ((Hand = A) OR (hand = K) OR (hand = Q) OR (hand = J)))
//
f$myfunc301  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND FlushPossible AND HaveFlushDraw AND ((Hand = A) OR (hand = K) OR (hand = Q) OR (hand = J)))
//
f$myfunc301  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND FlushPossible AND HaveFlushDraw AND ((Hand = A) OR (hand = K) OR (hand = Q) OR (hand = J)))
//
f$myfunc301  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND Opponents > 2 AND StraightPossible AND HaveStraightDraw AND NOT OneCardFlushPossible)
//
f$myfunc302  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND StraightPossible AND HaveStraightDraw AND NOT OneCardFlushPossible)
//
f$myfunc303  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND StraightPossible AND HaveStraightDraw AND NOT OneCardFlushPossible)
//
f$myfunc303  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND FlushPossible AND StraightPossible AND HaveStraightDraw AND NOT OneCardFlushPossible)
//
f$myfunc304  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND Opponents > 2 AND StraightPossible AND HaveStraightDraw AND HaveFlushDraw AND NOT OneCardFlushPossible)
//
f$myfunc305  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND StraightPossible AND HaveStraightDraw AND HaveFlushDraw AND NOT OneCardFlushPossible)
//
f$myfunc306  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND StraightPossible AND HaveStraightDraw AND HaveFlushDraw AND NOT OneCardFlushPossible)
//
f$myfunc306  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveOverPair AND FlushPossible AND StraightPossible AND HaveStraightDraw AND HaveFlushDraw AND NOT OneCardFlushPossible)
//
f$myfunc307  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND Opponents > 2 AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc308  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc309  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc309  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc309  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND Opponents > 2 AND FlushPossible AND HaveFlushDraw AND NOT OneCardStraightPossible)
//
f$myfunc310  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND FlushPossible AND HaveFlushDraw AND NOT OneCardStraightPossible)
//
f$myfunc311  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND FlushPossible AND HaveFlushDraw AND NOT OneCardStraightPossible)
//
f$myfunc311  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter))
//
f$myfunc312  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND Opponents > 2 AND StraightPossible AND HaveStraightDraw AND NOT OneCardFlushPossible)
//
f$myfunc313  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND StraightPossible AND HaveStraightDraw AND NOT OneCardFlushPossible)
//
f$myfunc314  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND StraightPossible AND HaveStraightDraw AND NOT OneCardFlushPossible)
//
f$myfunc314  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND StraightPossible AND HaveStraightDraw AND NOT OneCardFlushPossible)
//
f$myfunc314  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND Opponents > 2 AND StraightPossible AND HaveStraightDraw AND HaveFlushDraw AND NOT OneCardFlushPossible)
//
f$myfunc315  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND StraightPossible AND HaveStraightDraw AND HaveFlushDraw AND NOT OneCardFlushPossible)
//
f$myfunc316  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND StraightPossible AND HaveStraightDraw AND HaveFlushDraw AND NOT OneCardFlushPossible)
//
f$myfunc316  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveTopPair AND Have3rdBestKickerOrBetter) AND StraightPossible AND HaveStraightDraw AND HaveFlushDraw AND NOT OneCardFlushPossible)
//
f$myfunc316  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND HaveTopPair AND NOT (FlushPossible OR StraightPossible) AND Opponents <= 2)
//
f$myfunc317  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND PotSize >= 20 AND HaveTopPair AND NOT (FlushPossible OR StraightPossible) AND Opponents = 1)
//
f$myfunc318  &&  [ (f$OpenPPL_BotRaisedOnFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveFlushDraw OR HaveStraightDraw) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = KQ) OR (hand = KJ)))
//
f$myfunc319  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 20) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveFlushDraw OR HaveStraightDraw) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = KQ) OR (hand = KJ)))
//
f$myfunc319  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 35 AND (HaveFlushDraw OR HaveStraightDraw) AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = KQ) OR (hand = KJ)))
//
f$myfunc319  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize >= 20) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A Q J) OR (board = Q J T) OR (board = A J T) OR (board = K J T) OR (board = A K T) OR (board = A Q T) OR (board = K Q J) OR (board = K Q T)) AND StackSize > 35 AND PotSize <= 5)
//
f$myfunc320  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A Q J) OR (board = Q J T) OR (board = A J T) OR (board = K J T) OR (board = A K T) OR (board = A Q T) OR (board = K Q J) OR (board = K Q T)) AND StackSize > 35)
//
f$myfunc321  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10) ] ? 65 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND NoBettingOnFlop AND Bets = 0 AND Raises = 0 AND PotSize < 10 AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A Q J) OR (board = Q J T) OR (board = A J T) OR (board = K J T) OR (board = A K T) OR (board = A Q T) OR (board = K Q J) OR (board = K Q T)) AND StackSize > 35 AND PotSize <= 5)
//
f$myfunc322  &&  [ (f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (StackSize <= 40 AND NoBettingOnFlop AND Bets = 0 AND Raises = 0 AND PotSize < 10 AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A Q J) OR (board = Q J T) OR (board = A J T) OR (board = K J T) OR (board = A K T) OR (board = A Q T) OR (board = K Q J) OR (board = K Q T)) AND StackSize > 35)
//
f$myfunc323  &&  [ (f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? 65 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (HaveOverPair AND NOT (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw OR HaveFlush OR HaveStraight OR HaveFullHouse OR StackSize <= 55 OR TotalInvested > 300% StackSize) AND OpponentsOnFlop > 1 AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc324  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize > 50) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopPair AND NOT (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw OR HaveFlush OR HaveStraight OR HaveFullHouse OR StackSize <= 55 OR TotalInvested > 300% StackSize) AND OpponentsOnFlop > 1 AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc325  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize > 50) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind > 4 AND NutFullHouseOrFourOfAKind <= 14) AND TripsOnBoard AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc326  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc326  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc326  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND TripsOnBoard AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc327  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc327  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc327  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND NOT TripsOnBoard AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc328  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc328  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc328  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind >= 5 AND NutFullHouseOrFourOfAKind <= 7) AND NOT TripsOnBoard AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc329  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND NoBettingOnFlop AND (HavePair OR HaveFlushDraw OR HaveStraightDraw) AND Bets = 0 AND Raises = 0 AND PotSize < 10 AND NOT (TopFlopCardPairedonTurn OR OneCardStraightPossible OR OneCardFlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A Q J) OR (board = Q J T) OR (board = A J T) OR (board = K J T) OR (board = A K T) OR (board = A Q T) OR (board = K Q J) OR (board = K Q T)) AND StackSize > 35)
//
f$myfunc330  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc330  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc330  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc330  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc330  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc330  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc330  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Opponents = 2 AND (Position = Middle OR Position = Last) AND (HavePair OR HaveFlushDraw OR HaveStraightDraw) AND NoBettingOnFlop AND Bets = 0 AND Raises = 0 AND PotSize < 10 AND NOT (TopFlopCardPairedonTurn OR OneCardStraightPossible OR OneCardFlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A Q J) OR (board = Q J T) OR (board = A J T) OR (board = K J T) OR (board = A K T) OR (board = A Q T) OR (board = K Q J) OR (board = K Q T)) AND StackSize > 35)
//
f$myfunc331  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc331  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc331  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc331  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc331  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc331  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc331  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Opponents = 1 AND NoBettingOnFlop AND StackSize <= 110 AND Bets = 0 AND Raises = 0 AND PotSize < 10 AND NOT (TopFlopCardPairedonTurn OR OneCardStraightPossible OR OneCardFlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A Q J) OR (board = Q J T) OR (board = A J T) OR (board = K J T) OR (board = A K T) OR (board = A Q T) OR (board = K Q J) OR (board = K Q T)) AND StackSize > 35)
//
f$myfunc332  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc332  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc332  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc332  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc332  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc332  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc332  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Opponents = 2 AND (Position = Middle OR Position = Last) AND StackSize <= 110 AND NoBettingOnFlop AND Bets = 0 AND Raises = 0 AND PotSize < 10 AND NOT (TopFlopCardPairedonTurn OR OneCardStraightPossible OR OneCardFlushPossible OR (board = A K Q) OR (board = A K J) OR (board = A Q J) OR (board = Q J T) OR (board = A J T) OR (board = K J T) OR (board = A K T) OR (board = A Q T) OR (board = K Q J) OR (board = K Q T)) AND StackSize > 35)
//
f$myfunc333  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc333  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc333  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc333  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc333  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc333  &&  [ (f$OpenPPL_PotSize >= 20 && f$OpenPPL_PotSize < 35) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc333  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 35) ] ? 35 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OneCardFlushPossible AND CalledOnFlop AND NOT (HaveQuads OR HaveFullHouse OR HaveFlush OR HaveSet OR HaveTrips))
//
f$myfunc334  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveStraight AND PairInHand AND OneCardStraightPossible AND NOT (FlushPossible OR HaveNutStraight))
//
f$myfunc335  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND NOT (FlushPossible OR OneCardStraightPossible) AND (Position = First OR Position = Middle OR Position = Last))
//
f$myfunc336  &&  [ (f$OpenPPL_BotRaisedOnFlop &&  ![f$OpenPPL_CalledOnFlop] && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
f$myfunc336  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_CalledOnFlop && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_StackSize <= 55) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveOverPair AND BotRaisedBeforeFlop AND PairOnTurn AND ((Hand = AA) OR (hand = KK) OR (hand = QQ)) AND NOT (FlushPossible OR StraightPossible OR TopFlopCardPairedonTurn))
//
f$myfunc337  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 30) ] ? f$OpenPPL_RaisePot :
f$myfunc337  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 30) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = AA) OR (hand = KK) OR (hand = QQ)) AND BotRaisedOnFlop AND (FlushPossibleOnTurn OR StraightPossibleOnTurn))
//
f$myfunc338  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc338  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc338  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = AA) OR (hand = KK) OR (hand = QQ)) AND BotRaisedOnFlop AND (FlushPossibleOnTurn OR StraightPossible OR PairOnBoard))
//
f$myfunc339  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc339  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc339  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND BotRaisedBeforeFlop AND PairOnTurn AND ((Hand = AA) OR (hand = KK) OR (hand = QQ)) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc340  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 30) ] ? f$OpenPPL_RaisePot :
f$myfunc340  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize > 30) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = JJ) OR (Hand = TT) OR (hand = 99) OR (hand = 88) OR (hand = 77)) AND OneCardStraightPossible AND NOT HaveStraightDraw)
//
f$myfunc341  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc341  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ)) AND (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw) AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair))
//
f$myfunc342  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc342  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ)) AND (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw) AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair OR CalledOnFlop))
//
f$myfunc343  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotRaisedOnFlop) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ)) AND (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw) AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair))
//
f$myfunc344  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw) AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair))
//
f$myfunc345  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveOverPair AND OneCardStraightPossible AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair OR TotalInvested > 233% StackSize))
//
f$myfunc346  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1 && f$OpenPPL_AmountToCall > 12 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc346  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND BotRaisedOnFlop AND (FlushPossibleOnTurn OR StraightPossibleOnTurn))
//
f$myfunc347  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc347  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc347  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ)) AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc348  &&  [ (f$OpenPPL_BotRaisedOnFlop &&  ![f$OpenPPL_CalledOnFlop] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_PotSize <= 10 || f$OpenPPL_BetSize <= 4]) ] ? f$OpenPPL_RaisePot :
f$myfunc348  &&  [ (f$OpenPPL_BotRaisedOnFlop &&  ![f$OpenPPL_CalledOnFlop] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_StackSize > 35 || f$OpenPPL_BetSize <= 10]) ] ? f$OpenPPL_RaisePot :
f$myfunc348  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_PotSize <= 20) ] ? f$OpenPPL_RaisePot :
f$myfunc348  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (HaveTopPair AND ((Hand = AK) OR (hand = AQ)) AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc348  &&  [ (f$OpenPPL_BotRaisedOnFlop &&  ![f$OpenPPL_CalledOnFlop] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_PotSize <= 10 || f$OpenPPL_BetSize <= 4]) ] ? f$OpenPPL_RaisePot :
f$myfunc348  &&  [ (f$OpenPPL_BotRaisedOnFlop &&  ![f$OpenPPL_CalledOnFlop] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_StackSize > 35 || f$OpenPPL_BetSize <= 10]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND StraightPossibleOnTurn)
//
f$myfunc349  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_CalledOnFlop && f$OpenPPL_Position == f$OpenPPL_First) ] ? 40 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND PairOnBoard AND NoBettingOnFlop)
//
f$myfunc350  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 5) ] ? f$OpenPPL_RaisePot :
f$myfunc350  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc350  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_PotSize <= 5) ] ? f$OpenPPL_RaisePot :
f$myfunc350  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc350  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents > 2 && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_PotSize <= 20 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 60 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// ((NoBettingOnFlop OR CalledOnFlop) AND StackSize >= 14 AND (HavePair OR HaveFlushDraw OR HaveStraightDraw) AND (PairOnBoard OR FlushPossible OR StraightPossible) AND NOT (TopFlopCardPairedonTurn OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair OR Have2ndTopPair))
//
f$myfunc351  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 5) ] ? f$OpenPPL_RaisePot :
f$myfunc351  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 20) ] ? 40 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND (HadTopPairOnFlop OR HadOverpairOnFlop) AND OvercardsOnBoard = 1 AND ((board = A) OR (board = K) OR (board = Q) OR (board = J)) AND NOT (HaveTwoPair OR HaveTrips OR HaveSet OR HaveFullHouse OR HaveQuads OR HaveFlush OR HaveStraight OR HaveStraightDraw OR HaveFlushDraw))
//
f$myfunc352  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (BotRaisedOnFlop AND FlushPossible AND PotSize > 20 AND NOT (HaveTopPair OR HaveTwoPair OR HaveSet OR HaveTrips OR HaveFlush OR HaveStraight OR HaveStraightFlush OR HaveQuads OR HaveFullHouse))
//
f$myfunc353  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HavePair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveStraightDraw OR HaveFlushDraw) AND OneCardFlushPossible)
//
f$myfunc354  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((HaveFlushDraw OR HaveTopPair OR HaveStraightDraw) AND NOT (HaveStraight OR HaveInsideStraightDraw))
//
f$myfunc355  &&  [ (f$OpenPPL_StackSize <= 10) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (TotalInvested >= 100% StackSize)
//
f$myfunc356  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc357  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc358  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize == 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NoBettingOnFlop AND Position = Last AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc359  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc359  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc359  &&  [ (f$OpenPPL_Random <= 50 && f$OpenPPL_PotSize >= 5) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc359  &&  [ (f$OpenPPL_PotSize >= 5) ] ? 5 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check))
//
f$myfunc360  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND HaveOverPair AND (PairOnBoard OR FlushPossible) AND NOT (HaveQuads OR HaveFullHouse OR HaveNutStraight OR HaveNutFlush OR Have2ndNutFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair))
//
f$myfunc361  &&  [ (f$OpenPPL_BetSize >= 70 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveQuads AND (Bets = 0 AND Raises = 0))
//
f$myfunc362  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc362  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc362  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc362  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveQuads AND (Bets = 1 OR Raises >= 1))
//
f$myfunc363  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc363  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc363  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc363  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraightFlush AND (Bets = 0 AND Raises = 0))
//
f$myfunc364  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc364  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc364  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc364  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraightFlush AND (Bets = 1 OR Raises >= 1))
//
f$myfunc365  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc365  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc365  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc365  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 1 AND Position = First)
//
f$myfunc366  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc366  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc366  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc366  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc366  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc366  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc366  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc366  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 1 AND (NOT (Position = First)))
//
f$myfunc367  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc367  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc367  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc367  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc367  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc367  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc367  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc367  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 2 AND Position = First)
//
f$myfunc368  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc368  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc368  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc368  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc368  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc368  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc368  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc368  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 2 AND Position = Middle)
//
f$myfunc369  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc369  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc369  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc369  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc369  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc369  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc369  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc369  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 2 AND Position = Last)
//
f$myfunc370  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc370  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc370  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc370  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc370  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc370  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc370  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc370  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents > 2 AND (NOT (Position = Last)))
//
f$myfunc371  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc371  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc371  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc371  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc371  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc371  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc371  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents > 2 AND Position = Last)
//
f$myfunc372  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc372  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc372  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc372  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc372  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc372  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc372  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 1 AND (NOT TripsOnBoard) AND Position = First)
//
f$myfunc373  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc373  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc373  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 1 AND (NOT TripsOnBoard) AND (NOT (Position = First)))
//
f$myfunc374  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc374  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc374  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 2 AND (NOT TripsOnBoard) AND Position = First)
//
f$myfunc375  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc375  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc375  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 2 AND (NOT TripsOnBoard) AND Position = Middle)
//
f$myfunc376  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc376  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc376  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc376  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 2 AND (NOT TripsOnBoard) AND Position = Last)
//
f$myfunc377  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc377  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc377  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents > 2 AND (NOT TripsOnBoard) AND (NOT (Position = Last)))
//
f$myfunc378  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc378  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc378  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc378  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents > 2 AND (NOT TripsOnBoard) AND Position = Last)
//
f$myfunc379  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc379  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc379  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested >= 66% StackSize)
//
f$myfunc380  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_HaveSet) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TripsOnBoard AND NOT (NutFullHouseOrFourOfAKind = 1 OR NutFullHouseOrFourOfAKind = 2 OR HaveQuads OR HaveStraightFlush OR HaveQuads OR HaveSet OR HaveTrips OR HaveTwoPair))
//
f$myfunc381  &&  [ (f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TwoPairOnBoard AND NOT (NutFullHouseOrFourOfAKind = 1 OR NutFullHouseOrFourOfAKind = 2 OR NutFullHouseOrFourOfAKind = 3 OR HaveQuads OR HaveStraightFlush OR HaveQuads OR HaveSet OR HaveTrips OR HaveTwoPair))
//
f$myfunc382  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutFlush AND (Bets = 0 AND Raises = 0))
//
f$myfunc383  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc383  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc383  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc383  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutFlush)
//
f$myfunc384  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutStraight AND FlushPossible AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc385  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc385  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc385  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc385  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutStraight AND FlushPossible)
//
f$myfunc386  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc386  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 5 &&  ![f$OpenPPL_OneCardFlushPossible]) ] ? f$OpenPPL_Call :
f$myfunc386  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc386  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutStraight AND FlushPossible AND Opponents > 2)
//
f$myfunc387  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutStraight AND FlushPossible)
//
f$myfunc388  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc388  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutStraight AND NOT FlushPossible AND (Bets = 0 AND Raises = 0))
//
f$myfunc389  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc389  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc389  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc389  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutStraight AND NOT FlushPossible)
//
f$myfunc390  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND NOT FlushPossible AND NOT HaveFlushDraw AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc391  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND NOT FlushPossible AND NOT HaveFlushDraw AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc391  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND NOT FlushPossible AND HaveFlushDraw)
//
f$myfunc392  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND NOT FlushPossible AND HaveFlushDraw)
//
f$myfunc392  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc393  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND NOT FlushPossible)
//
f$myfunc394  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize <= 110 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND NOT (OneCardStraightPossible OR FlushPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc395  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc395  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc395  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc395  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND NOT (OneCardStraightPossible OR FlushPossible))
//
f$myfunc396  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND OneCardStraightPossible AND NOT FlushPossible AND Opponents = 1 AND (Bets = 0 AND Raises = 0))
//
f$myfunc397  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc397  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc397  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc397  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND OneCardStraightPossible AND NOT FlushPossible AND Opponents = 1)
//
f$myfunc398  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 80 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND OneCardStraightPossible AND NOT FlushPossible AND Opponents > 1)
//
f$myfunc399  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND FlushPossible AND Opponents <= 2)
//
f$myfunc400  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND Opponents <= 2)
//
f$myfunc401  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraight AND Opponents > 2)
//
f$myfunc402  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlush AND NOT OneCardFlushPossible AND (Bets = 0 AND Raises = 0))
//
f$myfunc403  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc403  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc403  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc403  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc404  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlush AND NOT OneCardFlushPossible)
//
f$myfunc405  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlush AND OneCardFlushPossible)
//
f$myfunc406  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlush AND OneCardFlushPossible AND NOT (HaveNutFlush OR Have2ndNutFlush))
//
f$myfunc407  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc407  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc408  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc408  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND BotsLastAction = Call AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc409  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible AND OneCardStraightPossible))
//
f$myfunc410  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible AND OneCardStraightPossible))
//
f$myfunc410  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc410  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible))
//
f$myfunc411  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible))
//
f$myfunc411  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc411  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (OneCardStraightPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc412  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (OneCardStraightPossible))
//
f$myfunc413  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc413  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (FlushPossible AND StraightPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc414  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc414  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc414  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc414  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (FlushPossible AND StraightPossible))
//
f$myfunc415  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 34 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc415  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 2 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc415  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc415  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (FlushPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc416  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc416  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc416  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc416  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (FlushPossible))
//
f$myfunc417  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc417  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (StraightPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc418  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc418  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc418  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc418  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveSet AND StraightPossible AND NOT OneCardStraightPossible AND Opponents = 1)
//
f$myfunc419  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 115 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (StraightPossible) AND Opponents <= 3)
//
f$myfunc420  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc420  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (StraightPossible) AND Opponents > 3)
//
f$myfunc421  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc421  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips) AND (Bets = 0 AND Raises = 0))
//
f$myfunc422  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc422  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc422  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc422  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTrips AND NOT (FlushPossible OR StraightPossible) AND Opponents <= 2)
//
f$myfunc423  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (HaveSet OR HaveTrips))
//
f$myfunc424  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc425  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc425  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc425  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc425  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc426  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND SuitsOnBoard >= 3 AND (StraightPossible OR PairOnBoard) AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc427  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc427  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc427  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc427  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND SuitsOnBoard >= 3 AND (StraightPossible OR PairOnBoard) AND Opponents <= 2)
//
f$myfunc428  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND SuitsOnBoard >= 3 AND NOT (StraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc429  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc429  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc429  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc429  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND Opponents = 1 AND (Bets = 0 AND Raises = 0))
//
f$myfunc430  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc430  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc430  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc430  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND (StraightPossible OR FlushPossible))
//
f$myfunc431  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc432  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1 && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND SuitsOnBoard >= 3 AND NOT (StraightPossible OR PairOnBoard))
//
f$myfunc433  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND (PairOnBoard OR StraightPossible) AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc434  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 50) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND (PairOnBoard OR StraightPossible) AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc434  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND SuitsOnBoard = 2 AND (StraightPossible OR FlushPossible))
//
f$myfunc435  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND SuitsOnBoard = 2 AND (StraightPossible OR FlushPossible))
//
f$myfunc435  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc436  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible AND Opponents = 1)
//
f$myfunc437  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible AND Opponents <= 2)
//
f$myfunc438  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc439  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc439  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc439  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc439  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc440  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc440  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc440  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc440  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc441  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND SuitsOnBoard >= 3 AND StraightPossible AND NOT PairOnBoard AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc442  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc442  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc442  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc442  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND SuitsOnBoard >= 3 AND StraightPossible AND NOT PairOnBoard AND Opponents <= 2)
//
f$myfunc443  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND SuitsOnBoard >= 3 AND NOT StraightPossible AND NOT PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc444  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc444  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc444  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc444  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND Opponents = 1 AND (Bets = 0 AND Raises = 0))
//
f$myfunc445  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc445  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc445  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc445  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND (StraightPossible OR FlushPossible) AND NOT PairOnBoard)
//
f$myfunc446  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc447  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1 && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND SuitsOnBoard >= 3 AND NOT (StraightPossible OR PairOnBoard))
//
f$myfunc448  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND StraightPossible AND NOT PairOnBoard AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc449  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 50) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND StraightPossible AND NOT PairOnBoard AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc449  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND SuitsOnBoard = 2 AND (StraightPossible OR FlushPossible) AND NOT PairOnBoard)
//
f$myfunc450  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND StraightPossible AND NOT (PairOnBoard OR FlushPossible OR PairOnBoard))
//
f$myfunc451  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND StraightPossible AND NOT (PairOnBoard OR FlushPossible OR PairOnBoard))
//
f$myfunc451  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 34 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND StraightPossible AND NOT (PairOnBoard OR FlushPossible OR PairOnBoard))
//
f$myfunc451  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND SuitsOnBoard = 2 AND (StraightPossible OR FlushPossible) AND NOT PairOnBoard)
//
f$myfunc452  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc453  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((HaveTopPair OR HaveOverPair) AND ((Hand = 8) OR (hand = 9) OR (hand = t)) AND NOT (OneCardStraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc454  &&  [ ([f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0] && f$OpenPPL_BetSize <= 3 && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((HaveTopPair OR HaveOverPair) AND ((Hand = 8) OR (hand = 9) OR (hand = t)) AND NOT (OneCardStraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc454  &&  [ ([f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveOverPair AND ((Hand =a) OR (hand =k) OR (hand =q)) AND NOT (FlushPossible OR StraightPossible) AND ((Board = 22) OR (board = 33) OR (board = 44) OR (board = 55) OR (board = 66) OR (board = 77) OR (board = 88) OR (board = 99) OR (board = tt)))
//
f$myfunc455  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND (Bets = 0 AND Raises = 0))
//
f$myfunc456  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc456  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc456  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc456  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND (Bets = 0 AND Raises = 0))
//
f$myfunc457  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc457  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc457  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc457  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc458  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc458  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc458  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc458  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc459  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc459  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc459  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc459  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc460  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc461  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND Opponents = 1)
//
f$myfunc462  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 25) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND NOT (PairOnFlop OR FlushPossible OR StraightPossible) AND PairOnTurn AND ((Board = KK) OR (board = QQ) OR (board = JJ)) AND (Bets = 0 AND Raises = 0))
//
f$myfunc463  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc463  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc463  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc463  &&  [ (f$OpenPPL_PotSize >= 20) ] ? 15 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND NOT (PairOnFlop OR FlushPossible OR StraightPossible) AND PairOnTurn AND ((Board = KK) OR (board = QQ) OR (board = JJ)))
//
f$myfunc464  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K)) AND Opponents = 1)
//
f$myfunc465  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K)) AND Opponents <= 3)
//
f$myfunc466  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw) AND NOT HaveStraight)
//
f$myfunc467  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc468  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc469  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc470  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND HaveFlushDraw AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc471  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc472  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND NOT (FlushPossible OR StraightPossible) AND PairOnBoard AND Opponents = 1 AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc473  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible) AND PairOnBoard AND Opponents = 1)
//
f$myfunc474  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveOverPair)
//
f$myfunc475  &&  [ (f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveTopPair AND userinBigBlind AND NOT (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker OR HaveStraightDraw OR HaveNutFlushDraw OR BetSize <= 5))
//
f$myfunc476  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize > 5) ] ? f$OpenPPL_Call :
f$myfunc476  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (FlushPossibleOnTurn OR StraightPossibleOnTurn) AND NOT (HaveFlush OR HaveStraight OR HaveFlushDraw OR HaveStraightDraw) AND PotSize > 20)
//
f$myfunc477  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND BotRaisedOnFlop AND BotsLastAction = call)
//
f$myfunc478  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND BotRaisedOnFlop AND BotsLastAction = call AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (HaveNutFlushDraw OR HaveNutFlushDraw))
//
f$myfunc479  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND BotRaisedOnFlop AND BotsLastAction = call AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (HaveNutFlushDraw OR HaveNutFlushDraw OR HaveFullHouse OR HaveTopTwoPair OR HaveTwoPair))
//
f$myfunc480  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND BotRaisedOnFlop AND BotsLastAction = call AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (HaveNutFlushDraw OR HaveNutFlushDraw OR HaveFullHouse OR HaveTopTwoPair OR HaveTwoPair))
//
f$myfunc480  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc481  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4 && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND BotsLastAction = Call)
//
f$myfunc482  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT FlushPossible AND NOT (OneCardStraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc483  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc483  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc483  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc483  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND HaveNutFlushDraw AND NOT OneCardStraightPossible AND (Bets = 0 AND Raises = 0))
//
f$myfunc484  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc484  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc484  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc484  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND HaveNutFlushDraw AND NOT OneCardStraightPossible)
//
f$myfunc485  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT OneCardFlushPossible AND HaveFlushDraw)
//
f$myfunc486  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (StraightPossible OR FlushPossible) AND NOT HaveFlushDraw)
//
f$myfunc487  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND PairOnBoard AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc488  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND PairOnBoard AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc488  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible)
//
f$myfunc489  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 80 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents > 1 AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible)
//
f$myfunc490  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Random <= 70 AND (Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents >= 2 AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible)
//
f$myfunc491  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND Opponents <= 2)
//
f$myfunc492  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc493  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND Opponents = 1 AND (FlushPossible OR OneCardStraightPossible))
//
f$myfunc494  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 50) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND (FlushPossible OR OneCardStraightPossible) AND NOT PairOnBoard)
//
f$myfunc495  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND (FlushPossible OR OneCardStraightPossible) AND NOT PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc496  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc496  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc496  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc496  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc497  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 115 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR (hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = A9) OR (hand = A8)) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc498  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_AcePresentOnFlop) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = A9) OR (hand = A8)) AND NOT (CalledOnFlop OR HaveBestKicker OR Have2ndBestKicker OR FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0) AND Opponents <= 2 AND AcePresentOnFlop)
//
f$myfunc499  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc499  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc499  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc499  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0) AND NOT AcePresentOnFlop)
//
f$myfunc500  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc500  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc500  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc500  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible) AND PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc501  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc501  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc501  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc501  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible) AND PairOnBoard AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc502  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 50) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible) AND PairOnBoard AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc502  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND Opponents = 1 AND NOT (HaveBestKicker OR Have2ndBestKicker OR FlushPossible OR OneCardStraightPossible OR PairOnBoard OR userinBigBlind))
//
f$myfunc503  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND Opponents = 1 AND NOT (HaveBestKicker OR Have2ndBestKicker OR FlushPossible OR OneCardStraightPossible OR PairOnBoard OR userinBigBlind))
//
f$myfunc503  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR FlushPossible OR OneCardStraightPossible OR PairOnBoard OR userinBigBlind) AND HaveStraightDraw)
//
f$myfunc504  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND HaveStraightDraw)
//
f$myfunc505  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND HaveStraightDraw)
//
f$myfunc506  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc507  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc508  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc509  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc510  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc510  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT FlushPossible AND PairOnBoard AND Opponents <= 2)
//
f$myfunc511  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveTopPair)
//
f$myfunc512  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (Have2ndTopPair OR Have2ndOverPair) AND NOT (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveNutStraightDraw OR HaveFullHouse OR HaveTopTwoPair OR HaveTwoPair))
//
f$myfunc513  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard)
//
f$myfunc514  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc515  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard)
//
f$myfunc516  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc517  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND ((Board = 9) OR (board = t) OR (board = j)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc518  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (Have2ndTopPair OR Have2ndOverPair) AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard)
//
f$myfunc519  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND (Have2ndTopPair OR Have2ndOverPair) AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc520  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND Opponents > 1 AND NOT (HaveNutFlushDraw OR HaveNutStraightDraw OR HaveFullHouse OR HaveTopTwoPair OR HaveTwoPair))
//
f$myfunc521  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair)
//
f$myfunc522  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR (Board = A)))
//
f$myfunc523  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 23 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible) AND HaveFlushDraw)
//
f$myfunc524  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible) AND HaveStraightDraw)
//
f$myfunc525  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 39 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR (Board = A)))
//
f$myfunc526  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair AND (Bets = 0 OR Raises = 0))
//
f$myfunc527  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR (Board = A)) AND Opponents <= 2 AND (Bets = 0 OR Raises = 0))
//
f$myfunc528  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR (Board = A)) AND Opponents = 1 AND (Bets = 0 OR Raises = 0))
//
f$myfunc529  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc529  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc529  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc529  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR (Board = A) OR Position = First) AND Opponents = 2 AND (Bets = 0 OR Raises = 0))
//
f$myfunc530  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc530  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc530  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc530  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndTopPair AND NOT FlushPossible AND Opponents > 2 AND NOT (OneCardStraightPossible OR (Board = A)))
//
f$myfunc531  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND (Bets = 0 OR Raises = 0))
//
f$myfunc532  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair)
//
f$myfunc533  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND PairOnBoard AND (Bets = 0 AND Raises = 0) AND NOT AcePresentOnFlop)
//
f$myfunc534  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND PairOnBoard AND (Bets = 0 AND Raises = 0) AND NOT AcePresentOnFlop AND Opponents = 1)
//
f$myfunc535  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc535  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc535  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc535  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND PairOnBoard)
//
f$myfunc536  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_AcePresentOnFlop) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT FlushPossible AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)))
//
f$myfunc537  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND FlushPossible AND HaveFlushDraw AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)))
//
f$myfunc538  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT FlushPossible AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)))
//
f$myfunc539  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT FlushPossible AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)))
//
f$myfunc539  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT FlushPossible AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)) AND (Bets = 0 AND Raises = 0) AND Opponents = 1)
//
f$myfunc540  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc540  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc540  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc540  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT FlushPossible AND (Bets = 0 AND Raises = 0) AND NOT (BotsLastAction = call) AND Opponents = 1)
//
f$myfunc541  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc541  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc541  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc541  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT FlushPossible)
//
f$myfunc542  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT FlushPossible)
//
f$myfunc542  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))] && [f$OpenPPL_BetSize <= 4 || f$OpenPPL_TotalInvested >= 50 * 0.01 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3)
//
f$myfunc543  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3)
//
f$myfunc543  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND PairOnBoard AND Opponents <= 3)
//
f$myfunc544  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3)
//
f$myfunc545  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents = 1 AND (Bets = 1 OR Raises >= 1) AND BetSize <= 2)
//
f$myfunc546  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc546  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc546  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc546  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlushDraw AND Overcards = 2 AND Opponents = 1 AND (Bets = 0 AND Raises = 0) AND NOT (BotsLastAction = call))
//
f$myfunc547  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc547  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc547  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc547  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlushDraw AND NOT (FlushPossible OR TripsOnBoard))
//
f$myfunc548  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutFlushDraw AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc549  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutFlushDraw AND FlushPossible AND NOT TripsOnBoard)
//
f$myfunc550  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveNutFlushDraw AND (FlushPossible OR PairOnBoard) AND NOT TripsOnBoard)
//
f$myfunc551  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlushDraw AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc552  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Have2ndNutFlushDraw AND (FlushPossible OR PairOnBoard) AND NOT TripsOnBoard)
//
f$myfunc553  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlushDraw AND HaveStraightDraw AND NOT (HaveStraight OR FlushPossible))
//
f$myfunc554  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 69 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlushDraw AND FlushPossible AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ) OR (hand = TT) OR (hand = 99) OR (hand = 88) OR (hand = 77) OR (hand = 66) OR (hand = 55)))
//
f$myfunc555  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlushDraw AND FlushPossible)
//
f$myfunc556  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveFlushDraw AND NOT FlushPossible AND NOT TripsOnBoard)
//
f$myfunc557  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 12 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraightDraw AND NOT HaveStraight AND Overcards = 2 AND NOT (FlushPossible OR StraightOnBoard OR OneCardStraightPossible OR TripsOnBoard))
//
f$myfunc558  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveStraightDraw AND NOT HaveStraight AND NOT (FlushPossible OR StraightOnBoard OR OneCardStraightPossible OR TripsOnBoard))
//
f$myfunc559  &&  [ (f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveInsideStraightDraw AND NOT FlushPossible AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND ((Hand = A K) OR (Hand = A Q) OR (Hand = A J)) AND OpponentIsAllin)
//
f$myfunc560  &&  [ (f$OpenPPL_BetSize <= 6 && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveInsideStraightDraw AND NOT FlushPossible AND ((Hand = A K) OR (Hand = A Q) OR (Hand = A J)))
//
f$myfunc561  &&  [ (f$OpenPPL_BetSize == 1 && f$OpenPPL_Opponents == 1) ] ? 5 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HaveInsideStraightDraw AND NOT FlushPossible)
//
f$myfunc562  &&  [ (f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HavePair AND SuitsOnBoard = 2 AND (HaveFlushDraw OR HaveStraightDraw) AND NOT HaveStraight)
//
f$myfunc563  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HavePair AND SuitsOnBoard = 2 AND (HaveFlushDraw OR HaveStraightDraw) AND NOT HaveStraight)
//
f$myfunc563  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HavePair AND SuitsOnBoard = 2 AND (HaveFlushDraw OR HaveStraightDraw) AND NOT HaveStraight)
//
f$myfunc563  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND HavePair AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND (HaveFlushDraw OR HaveInsideStraightDraw))
//
f$myfunc564  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND OpponentsAtTable <= 4 AND Opponents = 1 AND (HadTopPairOnFlop OR HadOverpairOnFlop) AND OvercardsOnBoard = 1 AND ((Board = A) OR (Board = K) OR (Board = Q) OR (Board = J)) AND NOT (HaveTwoPair OR HaveTrips OR HaveSet OR HaveFullHouse OR HaveQuads OR HaveFlush OR HaveStraight OR HaveStraightDraw OR HaveFlushDraw) AND Bets = 0 AND Raises = 0)
//
f$myfunc565  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc565  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc565  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc565  &&  [ (f$OpenPPL_PotSize >= 20) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc565  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
f$myfunc565  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 40 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Overcards = 2 AND Opponents = 1 AND (BotsLastAction = BET OR BotsLastAction = Raise))
//
f$myfunc566  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 6) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle) AND Overcards = 2 AND Opponents <= 2 AND NOT (FlushPossible OR StraightPossible) AND ((Hand = AK) OR (Hand = AQ) OR (Hand = AJ suited) OR (Hand = KQ suited) OR (Hand = KJ suited) OR (Hand = QJ suited)))
//
f$myfunc567  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check))
//
f$myfunc568  &&  [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND HaveOverPair AND (PairOnBoard OR FlushPossible) AND NOT (HaveQuads OR HaveFullHouse OR HaveNutStraight OR HaveNutFlush OR Have2ndNutFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair))
//
f$myfunc569  &&  [ (f$OpenPPL_BetSize >= 70 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveQuads AND (Bets = 0 AND Raises = 0))
//
f$myfunc570  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc570  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc570  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc570  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveQuads AND (Bets = 1 OR Raises >= 1))
//
f$myfunc571  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc571  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc571  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc571  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraightFlush AND (Bets = 0 AND Raises = 0))
//
f$myfunc572  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc572  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc572  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc572  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraightFlush)
//
f$myfunc573  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 1 AND Position = First)
//
f$myfunc574  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc574  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc574  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc574  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc574  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc574  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc574  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc574  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 1 AND (NOT (Position = First)))
//
f$myfunc575  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc575  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc575  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc575  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc575  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc575  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc575  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc575  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 2 AND Position = First)
//
f$myfunc576  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc576  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc576  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc576  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc576  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc576  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc576  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc576  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 2 AND Position = Middle)
//
f$myfunc577  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc577  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc577  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc577  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc577  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc577  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc577  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc577  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents = 2 AND Position = Last)
//
f$myfunc578  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc578  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc578  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc578  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc578  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc578  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc578  &&  [ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc578  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents > 2 AND (NOT (Position = Last)))
//
f$myfunc579  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc579  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc579  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc579  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc579  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc579  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc579  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TripsOnBoard AND Opponents > 2 AND Position = Last)
//
f$myfunc580  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc580  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($QQ)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($QQ)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc580  &&  [ ([($JJ) || ($TT) || ($99)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc580  &&  [ ([($JJ) || ($TT)] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc580  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc580  &&  [ ([($99) || ($88) || ($77) || ($66)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc580  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 1 AND (NOT TripsOnBoard) AND Position = First)
//
f$myfunc581  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc581  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc581  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 1 AND (NOT TripsOnBoard) AND (NOT (Position = First)))
//
f$myfunc582  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc582  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc582  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 2 AND (NOT TripsOnBoard) AND Position = First)
//
f$myfunc583  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc583  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc583  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 2 AND (NOT TripsOnBoard) AND Position = Middle)
//
f$myfunc584  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc584  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc584  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc584  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents = 2 AND (NOT TripsOnBoard) AND Position = Last)
//
f$myfunc585  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc585  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc585  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents > 2 AND (NOT TripsOnBoard) AND (NOT (Position = Last)))
//
f$myfunc586  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc586  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc586  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc586  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveFullHouse AND Opponents > 2 AND (NOT TripsOnBoard) AND Position = Last)
//
f$myfunc587  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 66 * f$RaiseByPercentagedPotsize :
f$myfunc587  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc587  &&  [ (f$OpenPPL_Others) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutFlush AND (Bets = 0 AND Raises = 0))
//
f$myfunc588  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc588  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc588  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc588  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutFlush)
//
f$myfunc589  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND NOT FlushPossible AND (Bets = 0 AND Raises = 0))
//
f$myfunc590  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc590  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc590  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc590  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND NOT FlushPossible)
//
f$myfunc591  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND FlushPossible AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc592  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc592  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc592  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc592  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND FlushPossible)
//
f$myfunc593  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc593  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 5 &&  ![f$OpenPPL_OneCardFlushPossible]) ] ? f$OpenPPL_Call :
f$myfunc593  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc593  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND FlushPossible AND Opponents > 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc594  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc594  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc594  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc594  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND FlushPossible)
//
f$myfunc595  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc595  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT FlushPossible AND NOT HaveFlushDraw AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc596  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT FlushPossible AND NOT HaveFlushDraw AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc596  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT FlushPossible AND HaveFlushDraw)
//
f$myfunc597  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT FlushPossible AND HaveFlushDraw)
//
f$myfunc597  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc598  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT FlushPossible)
//
f$myfunc599  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BetSize <= 110 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (OneCardStraightPossible OR FlushPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc600  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc600  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc600  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc600  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (OneCardStraightPossible OR FlushPossible))
//
f$myfunc601  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND OneCardStraightPossible AND NOT FlushPossible AND Opponents = 1 AND (Bets = 0 AND Raises = 0))
//
f$myfunc602  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc602  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc602  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc602  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND OneCardStraightPossible AND NOT FlushPossible AND Opponents = 1)
//
f$myfunc603  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 80 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND OneCardStraightPossible AND NOT FlushPossible AND Opponents > 1)
//
f$myfunc604  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND FlushPossible AND Opponents <= 2)
//
f$myfunc605  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND Opponents <= 2)
//
f$myfunc606  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND Opponents > 2)
//
f$myfunc607  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT OneCardFlushPossible AND (Bets = 0 AND Raises = 0))
//
f$myfunc608  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc608  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc608  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc608  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc609  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT OneCardFlushPossible)
//
f$myfunc610  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND OneCardFlushPossible)
//
f$myfunc611  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND OneCardFlushPossible AND NOT (HaveNutFlush OR Have2ndNutFlush))
//
f$myfunc612  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc612  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc613  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc613  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND BotsLastAction = Call AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc614  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible AND OneCardStraightPossible))
//
f$myfunc615  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible AND OneCardStraightPossible))
//
f$myfunc615  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc615  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible))
//
f$myfunc616  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible))
//
f$myfunc616  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc616  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (OneCardStraightPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc617  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (OneCardStraightPossible))
//
f$myfunc618  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc618  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (FlushPossible AND StraightPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc619  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc619  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc619  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc619  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (FlushPossible AND StraightPossible))
//
f$myfunc620  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 34 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc620  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents == 2 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_Call :
f$myfunc620  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc620  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (FlushPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc621  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc621  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc621  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc621  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (FlushPossible))
//
f$myfunc622  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc622  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (StraightPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc623  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc623  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc623  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc623  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveSet AND StraightPossible AND NOT OneCardStraightPossible AND Opponents = 1)
//
f$myfunc624  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 115 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (StraightPossible) AND Opponents <= 3)
//
f$myfunc625  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc625  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (StraightPossible) AND Opponents > 3)
//
f$myfunc626  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc626  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (Bets = 0 AND Raises = 0))
//
f$myfunc627  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc627  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc627  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc627  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTrips AND NOT (FlushPossible OR StraightPossible) AND Opponents <= 2)
//
f$myfunc628  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips))
//
f$myfunc629  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc630  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc630  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc630  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc630  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc631  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND SuitsOnBoard >= 3 AND (StraightPossible OR PairOnBoard) AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc632  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc632  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc632  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc632  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND SuitsOnBoard >= 3 AND (StraightPossible OR PairOnBoard) AND Opponents <= 2)
//
f$myfunc633  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND SuitsOnBoard >= 3 AND NOT (StraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc634  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc634  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc634  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc634  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND Opponents = 1 AND (Bets = 0 AND Raises = 0))
//
f$myfunc635  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc635  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc635  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc635  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND (StraightPossible OR FlushPossible))
//
f$myfunc636  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc637  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1 && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND SuitsOnBoard >= 3 AND NOT (StraightPossible OR PairOnBoard))
//
f$myfunc638  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND (PairOnBoard OR StraightPossible) AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc639  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 50) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible AND Opponents = 1)
//
f$myfunc640  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible AND Opponents <= 2)
//
f$myfunc641  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc642  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc642  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc642  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc642  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc643  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc643  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc643  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc643  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc644  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND (PairOnBoard OR StraightPossible) AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc645  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND SuitsOnBoard = 2 AND (StraightPossible OR FlushPossible))
//
f$myfunc646  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND SuitsOnBoard = 2 AND (StraightPossible OR FlushPossible))
//
f$myfunc646  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc647  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND SuitsOnBoard >= 3 AND StraightPossible AND NOT PairOnBoard AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc648  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc648  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc648  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc648  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND SuitsOnBoard >= 3 AND StraightPossible AND NOT PairOnBoard AND Opponents <= 2)
//
f$myfunc649  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND SuitsOnBoard >= 3 AND NOT StraightPossible AND NOT PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc650  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc650  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc650  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc650  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND Opponents = 1 AND (Bets = 0 AND Raises = 0))
//
f$myfunc651  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc651  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc651  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc651  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND (StraightPossible OR FlushPossible) AND NOT PairOnBoard)
//
f$myfunc652  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc653  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1 && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND SuitsOnBoard >= 3 AND NOT (StraightPossible OR PairOnBoard))
//
f$myfunc654  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND StraightPossible AND NOT PairOnBoard AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc655  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 50) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND StraightPossible AND NOT PairOnBoard AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc655  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND SuitsOnBoard = 2 AND (StraightPossible OR FlushPossible) AND NOT PairOnBoard)
//
f$myfunc656  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND StraightPossible AND NOT (PairOnBoard OR FlushPossible OR PairOnBoard))
//
f$myfunc657  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND StraightPossible AND NOT (PairOnBoard OR FlushPossible OR PairOnBoard))
//
f$myfunc657  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 34 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND StraightPossible AND NOT (PairOnBoard OR FlushPossible OR PairOnBoard))
//
f$myfunc657  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND SuitsOnBoard = 2 AND (StraightPossible OR FlushPossible) AND NOT PairOnBoard)
//
f$myfunc658  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND (StraightPossible OR FlushPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc659  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND SuitsOnBoard >= 3 AND NOT (OneCardStraightPossible OR PairOnBoard))
//
f$myfunc660  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc660  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc660  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc660  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND (Bets = 0 AND Raises = 0))
//
f$myfunc661  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc661  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc661  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc661  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND (Bets = 0 AND Raises = 0))
//
f$myfunc662  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc662  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc662  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc662  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc663  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc663  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc663  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc663  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND Opponents <= 2 AND (Bets = 0 AND Raises = 0))
//
f$myfunc664  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc664  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc664  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc664  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc665  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc666  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND Opponents = 1)
//
f$myfunc667  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 25) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND NOT (PairOnFlop OR FlushPossible OR StraightPossible) AND PairOnTurn AND ((Board = KK) OR (board = QQ) OR (board = JJ)) AND (Bets = 0 AND Raises = 0))
//
f$myfunc668  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc668  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc668  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc668  &&  [ (f$OpenPPL_PotSize >= 20) ] ? 15 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)) AND NOT (PairOnFlop OR FlushPossible OR StraightPossible) AND PairOnTurn AND ((Board = KK) OR (board = QQ) OR (board = JJ)))
//
f$myfunc669  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveStraightDraw) AND NOT HaveStraight)
//
f$myfunc670  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc671  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K)) AND Opponents = 1)
//
f$myfunc672  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K)) AND Opponents <= 3)
//
f$myfunc673  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc674  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc675  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND HaveFlushDraw AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc676  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard) AND NOT ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc677  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (FlushPossible OR StraightPossible) AND PairOnBoard AND Opponents = 1 AND ((Hand = A) OR (Hand = K) OR (Hand = Q) OR (Hand = J)))
//
f$myfunc678  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible) AND PairOnBoard AND Opponents = 1)
//
f$myfunc679  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair)
//
f$myfunc680  &&  [ (f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (FlushPossibleOnTurn OR StraightPossibleOnTurn) AND NOT (HaveFlush OR HaveStraight OR HaveFlushDraw OR HaveStraightDraw) AND PotSize > 20)
//
f$myfunc681  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND (FlushPossible OR StraightPossible))
//
f$myfunc682  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND BotRaisedOnFlop AND BotsLastAction = call)
//
f$myfunc683  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND BotRaisedOnFlop AND BotsLastAction = call AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (HaveNutFlushDraw OR HaveNutFlushDraw))
//
f$myfunc684  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND BotRaisedOnFlop AND BotsLastAction = call AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (HaveNutFlushDraw OR HaveNutFlushDraw OR HaveFullHouse OR HaveTopTwoPair OR HaveTwoPair))
//
f$myfunc685  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND BotRaisedOnFlop AND BotsLastAction = call AND (FlushPossible OR StraightPossible OR PairOnBoard) AND NOT (HaveNutFlushDraw OR HaveNutFlushDraw OR HaveFullHouse OR HaveTopTwoPair OR HaveTwoPair))
//
f$myfunc685  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc686  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4 && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND HaveNutFlushDraw)
//
f$myfunc687  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc687  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc687  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc687  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc688  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc688  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc688  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc688  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible) AND PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc689  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc689  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc689  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc689  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible) AND PairOnBoard)
//
f$myfunc690  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc691  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_BetSize <= 90 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc691  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_BetSize > 90 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT OneCardFlushPossible AND HaveFlushDraw)
//
f$myfunc692  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible) AND PairOnBoard AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc693  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 50) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible) AND PairOnBoard AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc693  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (StraightPossible OR FlushPossible) AND NOT HaveFlushDraw)
//
f$myfunc694  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND PairOnBoard AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc695  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND HaveStraightDraw)
//
f$myfunc696  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND HaveStraightDraw)
//
f$myfunc697  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND HaveStraightDraw)
//
f$myfunc697  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND PairOnBoard AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc698  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents >= 1 AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible)
//
f$myfunc699  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND Opponents >= 2 AND NOT (FlushPossible OR PairOnBoard) AND StraightPossible)
//
f$myfunc700  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT FlushPossible AND PairOnBoard AND Opponents <= 2)
//
f$myfunc701  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND Opponents <= 2)
//
f$myfunc702  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc703  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND Opponents = 1 AND (FlushPossible OR OneCardStraightPossible))
//
f$myfunc704  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 50) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND (FlushPossible OR OneCardStraightPossible) AND NOT PairOnBoard)
//
f$myfunc705  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND (FlushPossible OR OneCardStraightPossible) AND NOT PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc706  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc706  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc706  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc706  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc706  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc706  &&  [ (f$OpenPPL_PotSize >= 10) ] ? 10 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND Opponents = 1 AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc707  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 115 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc708  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR (hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = A9) OR (hand = A8)) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc709  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_AcePresentOnFlop) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR (hand = AT) OR (hand = A9) OR (hand = A8)) AND NOT (CalledOnFlop OR HaveBestKicker OR Have2ndBestKicker OR FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0) AND Opponents <= 2 AND AcePresentOnFlop)
//
f$myfunc710  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc710  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc710  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc710  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0) AND NOT AcePresentOnFlop)
//
f$myfunc711  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc711  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc711  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc711  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc712  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc713  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc714  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc714  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair)
//
f$myfunc715  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (Have2ndTopPair OR Have2ndOverPair) AND NOT (HaveNutFlushDraw OR Have2ndNutFlushDraw OR HaveNutStraightDraw OR HaveFullHouse OR HaveTopTwoPair OR HaveTwoPair))
//
f$myfunc716  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard)
//
f$myfunc717  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc718  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard)
//
f$myfunc719  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc720  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (Have2ndTopPair OR Have2ndOverPair) AND BotRaisedOnFlop AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND ((Board = 9) OR (board = t) OR (board = j)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc721  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (Have2ndTopPair OR Have2ndOverPair) AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard)
//
f$myfunc722  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (Have2ndTopPair OR Have2ndOverPair) AND ((Hand = 8) OR (hand = 9) OR (hand = t) OR (hand = j) OR (hand = q) OR (hand = k)) AND NOT (HaveTopTwoPair OR HaveTwoPair OR HaveTopPair) AND ((Board = 9) OR (board = t) OR (board = j) OR (hand = q) OR (hand = a)) AND NOT (StraightPossible OR FlushPossible OR PairOnBoard))
//
f$myfunc723  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND Opponents > 1 AND NOT (HaveNutFlushDraw OR HaveNutStraightDraw OR HaveFullHouse OR HaveTopTwoPair OR HaveTwoPair))
//
f$myfunc724  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndTopPair)
//
f$myfunc725  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible) AND HaveFlushDraw)
//
f$myfunc726  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible) AND HaveStraightDraw)
//
f$myfunc727  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 39 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR (Board = A)))
//
f$myfunc728  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR (Board = A)))
//
f$myfunc728  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 14 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndTopPair AND (Bets = 0 OR Raises = 0))
//
f$myfunc729  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndTopPair AND NOT (FlushPossible OR OneCardStraightPossible OR (Board = A)) AND Opponents = 1 AND (Bets = 0 OR Raises = 0))
//
f$myfunc730  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc730  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc730  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc730  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndTopPair AND NOT FlushPossible AND NOT OneCardStraightPossible AND NOT (Board = A) AND Opponents > 2)
//
f$myfunc731  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair)
//
f$myfunc732  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND (Bets = 0 OR Raises = 0))
//
f$myfunc733  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT FlushPossible AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)) AND (Bets = 0 AND Raises = 0) AND Opponents = 1)
//
f$myfunc734  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc734  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc734  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc734  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT FlushPossible AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)) AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc735  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND FlushPossible AND HaveFlushDraw AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)) AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc736  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT FlushPossible AND (Bets = 0 AND Raises = 0) AND Opponents = 1)
//
f$myfunc737  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc737  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc737  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc737  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT FlushPossible)
//
f$myfunc738  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT FlushPossible)
//
f$myfunc738  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))] && [f$OpenPPL_BetSize <= 4 || f$OpenPPL_TotalInvested >= 50 * 0.01 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3 AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc739  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3 AND (BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc739  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT FlushPossible AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)))
//
f$myfunc740  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT FlushPossible AND ((Hand = KK) OR (Hand = QQ) OR (Hand = JJ)))
//
f$myfunc740  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND PairOnBoard AND (Bets = 0 AND Raises = 0) AND Opponents = 1)
//
f$myfunc741  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc741  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc741  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc741  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND PairOnBoard AND Opponents <= 3)
//
f$myfunc742  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3)
//
f$myfunc743  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlushDraw AND NOT (FlushPossible OR TripsOnBoard))
//
f$myfunc744  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutFlushDraw AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc745  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutFlushDraw AND FlushPossible AND NOT TripsOnBoard)
//
f$myfunc746  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 5) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutFlushDraw AND (FlushPossible OR PairOnBoard) AND NOT TripsOnBoard)
//
f$myfunc747  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlushDraw AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc748  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndNutFlushDraw AND (FlushPossible OR PairOnBoard) AND NOT TripsOnBoard)
//
f$myfunc749  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlushDraw AND HaveStraightDraw AND NOT (HaveStraight OR FlushPossible))
//
f$myfunc750  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 69 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlushDraw AND FlushPossible AND ((Hand = AA) OR (hand = KK) OR (hand = QQ) OR (hand = JJ) or (hand = TT) OR (hand = 99) OR (hand = 88) OR (hand = 77) OR (hand = 66) OR (hand = 55)))
//
f$myfunc751  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlushDraw AND FlushPossible)
//
f$myfunc752  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlushDraw AND NOT FlushPossible AND NOT TripsOnBoard)
//
f$myfunc753  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 12 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlushDraw AND Overcards = 2 AND NOT (TripsOnBoard OR OneCardFlushPossible) AND (Bets = 0 AND Raises = 0))
//
f$myfunc754  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc754  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc754  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc754  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraightDraw AND NOT HaveStraight AND NOT TripsOnBoard AND Overcards = 2 AND NOT FlushPossible AND (Bets = 0 AND Raises = 0))
//
f$myfunc755  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc755  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc755  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc755  &&  [ (f$OpenPPL_PotSize >= 5) ] ? 5 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraightDraw AND NOT (HaveStraight OR OneCardFlushPossible OR TripsOnBoard))
//
f$myfunc756  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraightDraw AND NOT HaveStraight AND Overcards = 2 AND NOT (FlushPossible OR StraightOnBoard OR OneCardStraightPossible OR TripsOnBoard))
//
f$myfunc757  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraightDraw AND NOT HaveStraight AND Overcards = 2 AND NOT (FlushPossible OR StraightOnBoard OR OneCardStraightPossible OR TripsOnBoard))
//
f$myfunc757  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraightDraw AND NOT (HaveStraight OR OneCardFlushPossible OR StraightPossible OR TripsOnBoard))
//
f$myfunc758  &&  [ (f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveInsideStraightDraw AND NOT FlushPossible AND (BotsLastAction = RAISE OR BotsLastAction = Bet) AND ((Hand = A K) OR (Hand = A Q) OR (Hand = A J)) AND OpponentIsAllin)
//
f$myfunc759  &&  [ (f$OpenPPL_BetSize <= 6 && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveInsideStraightDraw AND NOT FlushPossible AND ((Hand = A K) OR (Hand = A Q) OR (Hand = A J)))
//
f$myfunc760  &&  [ (f$OpenPPL_BetSize == 1 && f$OpenPPL_Opponents == 1) ] ? 5 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveInsideStraightDraw AND NOT FlushPossible)
//
f$myfunc761  &&  [ (f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HavePair AND SuitsOnBoard = 2 AND (HaveFlushDraw OR HaveStraightDraw))
//
f$myfunc762  &&  [ ( ![f$OpenPPL_HaveStraight] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HavePair AND SuitsOnBoard = 2 AND (HaveFlushDraw OR HaveStraightDraw) AND NOT HaveStraight)
//
f$myfunc763  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 24 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HavePair AND SuitsOnBoard = 2 AND (HaveFlushDraw OR HaveStraightDraw) AND NOT HaveStraight)
//
f$myfunc763  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HavePair AND (HaveFlushDraw OR HaveInsideStraightDraw) AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND (Bets = 1 OR Raises >= 1))
//
f$myfunc764  &&  [ (f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND BotRaisedBeforeFlop AND (NoBettingOnFlop AND BetSize = 0) AND Opponents = 1 AND PotSize <= 10)
//
f$myfunc765  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc765  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc765  &&  [ (f$OpenPPL_PotSize >= 10) ] ? 10 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND OpponentsAtTable <= 4 AND Opponents = 1 AND (HadTopPairOnFlop OR HadOverpairOnFlop) AND OvercardsOnBoard = 1 AND ((Board = A) OR (Board = K) OR (Board = Q) OR (Board = J)) AND NOT (HaveTwoPair OR HaveTrips OR HaveSet OR HaveFullHouse OR HaveQuads OR HaveFlush OR HaveStraight OR HaveStraightDraw OR HaveFlushDraw) AND Bets = 0 AND Raises = 0)
//
f$myfunc766  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc766  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc766  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc766  &&  [ (f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Fold :
f$myfunc766  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_BetSize > 40 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND Overcards = 2 AND Opponents <= 2 AND NOT (FlushPossible OR StraightPossible) AND ((Hand = AK) OR (Hand = AQ) OR (Hand = AJ suited) OR (Hand = KQ suited) OR (Hand = KJ suited) OR (Hand = QJ suited)))
//
f$myfunc767  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Overcards = 2 AND Opponents = 1 AND (BotsLastAction = BET OR BotsLastAction = Raise))
//
f$myfunc768  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 6) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc769  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND BotRaisedOnFlop AND NOT (HaveStraightDraw OR HaveFlushDraw OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair) AND (StraightPossible OR FlushPossible) AND (Overcards = 1 OR Overcards = 2))
//
f$myfunc770  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotCalledBeforeFlop AND BotRaisedOnFlop AND NOT (HaveStraightDraw OR HaveFlushDraw OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair) AND (StraightPossible OR FlushPossible) AND (Overcards = 1 OR Overcards = 2))
//
f$myfunc771  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Others)
//
f$myfunc772  &&  [ (f$OpenPPL_OpponentsAtTable <= 2 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// ((OpponentsAtTable <= 2 OR StackSize <= 70) AND Opponents = 1 AND (HaveFlushDraw OR HaveStraightDraw) AND (FlushPossible OR OneCardStraightPossible) AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair OR BotsLastAction = call))
//
f$myfunc773  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (BotRaisedOnFlop AND NOT CalledOnFlop AND TopFlopCardPairedonTurn AND Opponents = 1 AND NOT (StraightPossible OR FlushPossible))
//
f$myfunc774  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


##f$river##
//
// Starting open-ended when-condition
// (HaveNutFlush AND CalledOnTurn AND Bets = 0 AND Raises = 0)
//
f$myfunc775  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc775  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc775  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc775  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HaveStraight AND PairInHand AND OneCardStraightPossible AND NOT (FlushPossible OR HaveNutStraight))
//
f$myfunc776  &&  [ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Board = AKQJT) AND NOT FlushPossible)
//
f$myfunc777  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc777  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Board = AKQJT) AND NOT OneCardFlushPossible)
//
f$myfunc778  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc778  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 6) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TripsOnBoard AND NOT (NutFullHouseOrFourOfAKind = 1 OR NutFullHouseOrFourOfAKind = 2 OR HaveQuads OR HaveStraightFlush OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTwoPair))
//
f$myfunc779  &&  [ (f$OpenPPL_AmountToCall > 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (TwoPairOnBoard AND NOT (NutFullHouseOrFourOfAKind = 1 OR NutFullHouseOrFourOfAKind = 2 OR NutFullHouseOrFourOfAKind = 3 OR HaveQuads OR HaveStraightFlush OR HaveQuads OR HaveSet OR HaveTrips OR HaveTwoPair))
//
f$myfunc780  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveQuads AND (Bets = 0 AND Raises = 0))
//
f$myfunc781  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc781  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc781  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc781  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveQuads)
//
f$myfunc782  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveFullHouse AND NutFullHouseOrFourOfAKind >= 4 AND NutFullHouseOrFourOfAKind <= 6 AND TripsOnBoard)
//
f$myfunc783  &&  [ (f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 80) ] ? f$OpenPPL_Call :
f$myfunc783  &&  [ (f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (NutFullHouseOrFourOfAKind > 4 AND NutFullHouseOrFourOfAKind <= 14) AND TripsOnBoard)
//
f$myfunc784  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![f$OpenPPL_CalledOnTurn] && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc784  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_CalledOnTurn] && f$OpenPPL_StillToAct == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc784  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND TripsOnBoard)
//
f$myfunc785  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc785  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc785  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND (NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND NOT TripsOnBoard)
//
f$myfunc786  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc786  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc786  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND NutFullHouseOrFourOfAKind >= 5 AND NOT TripsOnBoard)
//
f$myfunc787  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (NutFullHouseOrFourOfAKind >= 6 AND NutFullHouseOrFourOfAKind <= 7) AND NOT TripsOnBoard)
//
f$myfunc788  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc788  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 80) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (HaveNutFlush OR HaveFlush) AND TripsOnBoard)
//
f$myfunc789  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (HaveNutFlush OR HaveFlush) AND TripsOnBoard)
//
f$myfunc789  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 4) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutFlush AND PairOnBoard AND Opponents = 1)
//
f$myfunc790  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc790  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc790  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc790  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc790  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc790  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc790  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc790  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc790  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc790  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc790  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc790  &&  [ (f$OpenPPL_PotSize >= 24) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutFlush AND NOT HaveStraightFlush)
//
f$myfunc791  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutFlush AND PairOnBoard AND Opponents >= 2 AND NOT HaveStraightFlush)
//
f$myfunc792  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutFlush AND PairOnBoard AND NOT HaveStraightFlush)
//
f$myfunc793  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (HaveNutFlush OR HaveStraightFlush) AND (Bets = 0 AND Raises = 0))
//
f$myfunc794  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc794  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc794  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc794  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND (HaveNutFlush OR HaveStraightFlush) AND (Bets = 1 OR Raises >= 1))
//
f$myfunc795  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc795  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc795  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc795  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND FlushOnBoard AND NOT (HaveNutFlush OR Have2ndNutFlush))
//
f$myfunc796  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveFlush AND NOT OneCardFlushPossible)
//
f$myfunc797  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc798  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveFlush AND NOT (OneCardFlushPossible OR (hand = A) OR (hand = K)))
//
f$myfunc799  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveFlush AND NOT OneCardFlushPossible)
//
f$myfunc800  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc800  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc800  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc800  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc800  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc800  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc800  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc800  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc800  &&  [ (f$OpenPPL_PotSize >= 17) ] ? 15 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = First AND HaveFlush AND NOT (OneCardFlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc801  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc801  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc801  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc801  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveFlush AND NOT (OneCardFlushPossible OR PairOnBoard))
//
f$myfunc802  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc803  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc803  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc803  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc803  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = First AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc804  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveFlush AND OneCardFlushPossible AND NOT (HaveNutFlush OR Have2ndNutFlush))
//
f$myfunc805  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND FlushPossible)
//
f$myfunc806  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND OneCardFlushPossible)
//
f$myfunc807  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (HaveNutStraight OR HaveStraight) AND TripsOnBoard)
//
f$myfunc808  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (HaveNutStraight OR HaveStraight) AND TripsOnBoard)
//
f$myfunc808  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 4) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND (Bets = 0 OR Raises = 0))
//
f$myfunc809  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc809  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc809  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc809  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND NOT (FlushPossible OR PairOnBoard) AND (Bets = 1 OR Raises >= 1 OR BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call))
//
f$myfunc810  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc810  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc810  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc810  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND NOT FlushPossible AND PairOnBoard)
//
f$myfunc811  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND NOT FlushPossible AND PairOnBoard)
//
f$myfunc811  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND OneCardFlushPossible)
//
f$myfunc812  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND OneCardFlushPossible)
//
f$myfunc812  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND FlushPossible)
//
f$myfunc813  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND FlushPossible)
//
f$myfunc813  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc814  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (FlushPossible OR PairOnBoard) AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc815  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 39 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (FlushPossible OR PairOnBoard) AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc815  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 39 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveNutStraight AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc816  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (FlushPossible OR PairOnBoard OR HaveNutStraight))
//
f$myfunc817  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ] ? f$OpenPPL_Call :
f$myfunc817  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (HaveNutStraight OR FlushPossible) AND Opponents <= 2 AND Bets = 0 AND Raises = 0)
//
f$myfunc818  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc818  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc818  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc818  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc818  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc818  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc818  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc818  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc818  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc818  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc818  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc818  &&  [ (f$OpenPPL_PotSize >= 24) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT OneCardFlushPossible AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc819  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc819  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc819  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc819  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc819  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc819  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc819  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc819  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc819  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc819  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc819  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc819  &&  [ (f$OpenPPL_PotSize >= 24) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc820  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc820  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc820  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc820  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND PairInHand AND NOT FlushPossible AND (Bets = 0 AND Raises = 0) AND Opponents <= 2)
//
f$myfunc821  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc821  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc821  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc821  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (HaveNutStraight OR FlushPossible OR (hand = A) OR (hand = 2) OR (hand = 3) OR (hand = 4)) AND ((Hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9) OR (hand = T)) AND (Bets = 0 AND Raises = 0))
//
f$myfunc822  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc822  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc822  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc822  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (HaveNutStraight OR FlushPossible OR (hand = A) OR (hand = 2) OR (hand = 3) OR (hand = 4)) AND ((Hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9) OR (hand = T)))
//
f$myfunc823  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10) ] ? f$OpenPPL_RaisePot :
f$myfunc823  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND FlushPossible)
//
f$myfunc824  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND FlushPossible)
//
f$myfunc824  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR PairOnBoard))
//
f$myfunc825  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible) AND PairOnBoard)
//
f$myfunc826  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND (FlushPossible OR OneCardStraightPossible) AND NOT HaveNutStraight)
//
f$myfunc827  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND (FlushPossible OR OneCardStraightPossible) AND NOT HaveNutStraight)
//
f$myfunc827  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND OneCardStraightPossible AND NOT OneCardFlushPossible AND Have2ndNutStraight)
//
f$myfunc828  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND OneCardStraightPossible AND NOT OneCardFlushPossible)
//
f$myfunc829  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveStraight AND NOT FlushPossible)
//
f$myfunc830  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveSet AND CalledOnTurn AND Position = First)
//
f$myfunc831  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible OR OneCardStraightPossible) AND NOT HaveNutFlush)
//
f$myfunc832  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (HaveSet OR HaveTrips) AND NOT (FlushPossible OR HaveFullHouse) AND (Bets = 0 AND Raises = 0))
//
f$myfunc833  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc833  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc833  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc833  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND (HaveSet OR HaveTrips) AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR FlushPossibleOnTurn OR HaveFullHouse) AND (Bets = 0 AND Raises = 0) AND Opponents = 1)
//
f$myfunc834  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc834  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc834  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc834  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND (HaveSet OR HaveTrips) AND FlushPossible)
//
f$myfunc835  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveSet AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc836  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveSet AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc837  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveSet AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND StraightPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc838  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTrips AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc839  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTrips AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc840  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTrips AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND StraightPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc841  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (HaveSet OR HaveTrips) AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible OR OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc842  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (HaveSet OR HaveTrips) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc843  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND OneCardStraightPossible)
//
f$myfunc844  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR FlushPossibleOnTurn OR StraightPossibleOnTurn) AND (Bets = 0 AND Raises = 0) AND Opponents = 1)
//
f$myfunc845  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc845  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc845  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 55) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc845  &&  [ (f$OpenPPL_PotSize >= 55) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND (FlushPossible OR StraightPossible) AND (Bets = 0 AND Raises = 0) AND Opponents = 1 AND NOT CalledOnTurn)
//
f$myfunc846  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc846  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc846  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 55) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc846  &&  [ (f$OpenPPL_PotSize >= 55) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND (FlushPossible OR StraightPossible))
//
f$myfunc847  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc848  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc848  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc848  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc848  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc849  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopTwoPair AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard AND Opponents = 1)
//
f$myfunc850  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND FlushPossible AND Opponents = 1 AND NOT OneCardStraightPossible)
//
f$myfunc851  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND FlushPossible)
//
f$myfunc852  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND StraightPossible AND Opponents = 1 AND NOT OneCardFlushPossible)
//
f$myfunc853  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTwoPair AND StraightPossible)
//
f$myfunc854  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc855  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall > 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc855  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall > 12 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc855  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc855  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 0 OR Raises = 0))
//
f$myfunc856  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc856  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc856  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc856  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 1 OR Raises >= 1))
//
f$myfunc857  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc857  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc857  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc857  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = First AND HaveOverPair AND NOT HaveFlush AND OneCardFlushPossible)
//
f$myfunc858  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveOverPair AND NOT FlushPossible AND Opponents <= 1)
//
f$myfunc859  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveOverPair)
//
f$myfunc860  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible) AND NOT (HaveFlush OR HaveStraight))
//
f$myfunc861  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_CalledOnTurn) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible) AND NOT (HaveFlush OR HaveStraight OR CalledOnTurn) AND (Bets = 0 AND Raises = 0))
//
f$myfunc862  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc862  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc862  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc862  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc862  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc862  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc862  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 20) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc862  &&  [ (f$OpenPPL_PotSize >= 20) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc863  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc864  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard OR HaveFlush))
//
f$myfunc865  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight OR CalledOnTurn))
//
f$myfunc866  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight OR CalledOnTurn))
//
f$myfunc867  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight))
//
f$myfunc868  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight))
//
f$myfunc869  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND Opponents = 1 AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR OneCardFlushPossible) AND PairOnBoard)
//
f$myfunc870  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible) AND Opponents <= 3)
//
f$myfunc871  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND (FlushPossible OR OneCardStraightPossible) AND Opponents <= 2)
//
f$myfunc872  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveTopPair)
//
f$myfunc873  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 12 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND Have2ndOverPair AND NOT FlushPossible)
//
f$myfunc874  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))] && [f$OpenPPL_BetSize <= 4 || f$OpenPPL_TotalInvested >= 50 * 0.01 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3)
//
f$myfunc875  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3)
//
f$myfunc875  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 23 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND Have2ndOverPair AND PairOnBoard AND Opponents <= 2)
//
f$myfunc876  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 23 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 2)
//
f$myfunc877  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HavePair AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND Opponents <= 2)
//
f$myfunc878  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HavePair AND Opponents <= 2)
//
f$myfunc879  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND HaveBestKickerOrBetter AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc880  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (TwoPairOnBoard OR TripsOnBoard) AND (Hand = A))
//
f$myfunc881  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First AND (Hand = A) AND Opponents = 1)
//
f$myfunc882  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveQuads AND (Bets = 0 AND Raises = 0))
//
f$myfunc883  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc883  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc883  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc883  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveQuads)
//
f$myfunc884  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveFullHouse AND NutFullHouseOrFourOfAKind >= 4 AND NutFullHouseOrFourOfAKind <= 6 AND TripsOnBoard)
//
f$myfunc885  &&  [ (f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 80) ] ? f$OpenPPL_Call :
f$myfunc885  &&  [ (f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (NutFullHouseOrFourOfAKind > 4 AND NutFullHouseOrFourOfAKind <= 14) AND TripsOnBoard)
//
f$myfunc886  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![f$OpenPPL_CalledOnTurn] && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc886  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_CalledOnTurn] && f$OpenPPL_StillToAct == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc886  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND TripsOnBoard)
//
f$myfunc887  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc887  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc887  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND (NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND NOT TripsOnBoard)
//
f$myfunc888  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc888  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc888  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND NutFullHouseOrFourOfAKind >= 5 AND NOT TripsOnBoard)
//
f$myfunc889  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (NutFullHouseOrFourOfAKind >= 6 AND NutFullHouseOrFourOfAKind <= 7) AND NOT TripsOnBoard)
//
f$myfunc890  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc890  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 80) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveNutFlush OR HaveFlush) AND TripsOnBoard AND NOT HaveStraightFlush)
//
f$myfunc891  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveNutFlush OR HaveFlush) AND TripsOnBoard AND NOT HaveStraightFlush)
//
f$myfunc891  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 4) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutFlush AND PairOnBoard AND Opponents >= 2 AND NOT HaveStraightFlush)
//
f$myfunc892  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutFlush AND PairOnBoard AND Opponents = 1)
//
f$myfunc893  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc893  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc893  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc893  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc893  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc893  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc893  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc893  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc893  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc893  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc893  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc893  &&  [ (f$OpenPPL_PotSize >= 24) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutFlush AND PairOnBoard AND NOT HaveStraightFlush)
//
f$myfunc894  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveNutFlush OR HaveStraightFlush))
//
f$myfunc895  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveNutFlush OR HaveStraightFlush) AND (Bets = 1 OR Raises >= 1))
//
f$myfunc896  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc896  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc896  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc896  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND FlushOnBoard AND NOT (HaveNutFlush OR Have2ndNutFlush))
//
f$myfunc897  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc898  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveFlush AND NOT (OneCardFlushPossible OR (hand = A) OR (hand = K)))
//
f$myfunc899  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveFlush AND NOT OneCardFlushPossible)
//
f$myfunc900  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc900  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc900  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc900  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc900  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc900  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc900  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc900  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc900  &&  [ (f$OpenPPL_PotSize >= 17) ] ? 15 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveFlush AND NOT (OneCardFlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc901  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc901  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc901  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc901  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveFlush AND NOT (OneCardFlushPossible OR PairOnBoard))
//
f$myfunc902  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc903  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc903  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc903  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc903  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc903  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc903  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc903  &&  [ (f$OpenPPL_PotSize >= 20) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc904  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveFlush AND OneCardFlushPossible AND NOT (HaveNutFlush OR Have2ndNutFlush))
//
f$myfunc905  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND FlushPossible)
//
f$myfunc906  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveNutStraight OR HaveStraight) AND TripsOnBoard)
//
f$myfunc907  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveNutStraight OR HaveStraight) AND TripsOnBoard)
//
f$myfunc907  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 4) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND OneCardFlushPossible)
//
f$myfunc908  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND (Bets = 0 OR Raises = 0))
//
f$myfunc909  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc909  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc909  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc909  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND NOT (FlushPossible OR PairOnBoard) AND (Bets = 1 OR Raises >= 1 OR BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc910  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc910  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc910  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc910  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND NOT FlushPossible AND PairOnBoard)
//
f$myfunc911  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND NOT FlushPossible AND PairOnBoard)
//
f$myfunc911  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND OneCardFlushPossible)
//
f$myfunc912  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND OneCardFlushPossible)
//
f$myfunc912  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND FlushPossible)
//
f$myfunc913  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND FlushPossible)
//
f$myfunc913  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc914  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (FlushPossible OR PairOnBoard) AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc915  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 39 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (FlushPossible OR PairOnBoard) AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc915  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 39 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveNutStraight AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc916  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (FlushPossible OR PairOnBoard OR HaveNutStraight))
//
f$myfunc917  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ] ? f$OpenPPL_Call :
f$myfunc917  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (HaveNutStraight OR FlushPossible) AND Opponents <= 2 AND Bets = 0 AND Raises = 0)
//
f$myfunc918  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc918  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc918  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc918  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc918  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc918  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc918  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc918  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc918  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc918  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc918  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc918  &&  [ (f$OpenPPL_PotSize >= 24) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT OneCardFlushPossible AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc919  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc919  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc919  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc919  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc919  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc919  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc919  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc919  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc919  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc919  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc919  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc919  &&  [ (f$OpenPPL_PotSize >= 24) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc920  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc920  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc920  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc920  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND PairInHand AND NOT FlushPossible AND (Bets = 0 AND Raises = 0) AND Opponents <= 2)
//
f$myfunc921  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc921  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc921  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc921  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (HaveNutStraight OR FlushPossible OR (hand = A) OR (hand = 2) OR (hand = 3) OR (hand = 4)) AND ((Hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9) OR (hand = T)) AND (Bets = 0 AND Raises = 0))
//
f$myfunc922  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc922  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc922  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc922  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (HaveNutStraight OR FlushPossible OR (hand = A) OR (hand = 2) OR (hand = 3) OR (hand = 4)) AND ((Hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9) OR (hand = T)))
//
f$myfunc923  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10) ] ? f$OpenPPL_RaisePot :
f$myfunc923  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND FlushPossible)
//
f$myfunc924  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND FlushPossible)
//
f$myfunc924  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR PairOnBoard))
//
f$myfunc925  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible) AND PairOnBoard)
//
f$myfunc926  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND (FlushPossible OR OneCardStraightPossible) AND NOT HaveNutStraight)
//
f$myfunc927  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND (FlushPossible OR OneCardStraightPossible) AND NOT HaveNutStraight)
//
f$myfunc927  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND OneCardStraightPossible AND NOT OneCardFlushPossible AND Have2ndNutStraight)
//
f$myfunc928  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND OneCardStraightPossible AND NOT OneCardFlushPossible)
//
f$myfunc929  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveStraight AND NOT FlushPossible)
//
f$myfunc930  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible OR OneCardStraightPossible) AND NOT HaveNutFlush)
//
f$myfunc931  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveSet OR HaveTrips) AND NOT (FlushPossible OR HaveFullHouse) AND (Bets = 0 AND Raises = 0))
//
f$myfunc932  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc932  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc932  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc932  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveSet OR HaveTrips) AND FlushPossible)
//
f$myfunc933  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveSet AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc934  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveSet AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc935  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveSet AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND StraightPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc936  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTrips AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc937  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTrips AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND StraightPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc938  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTrips AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc939  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveSet OR HaveTrips) AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible OR OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc940  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (HaveSet OR HaveTrips) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc941  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND OneCardStraightPossible)
//
f$myfunc942  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR FlushPossibleOnTurn OR StraightPossibleOnTurn OR BotsLastAction = call) AND (Bets = 0 AND Raises = 0) AND Opponents <= 2)
//
f$myfunc943  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc943  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc943  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 55) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc943  &&  [ (f$OpenPPL_PotSize >= 55) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND (FlushPossible OR StraightPossible) AND (Bets = 0 AND Raises = 0) AND Opponents = 1 AND NOT CalledOnTurn)
//
f$myfunc944  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc944  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc944  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 55) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc944  &&  [ (f$OpenPPL_PotSize >= 55) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND (FlushPossible OR StraightPossible))
//
f$myfunc945  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc946  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc946  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc946  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc946  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc947  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopTwoPair AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard AND Opponents = 1)
//
f$myfunc948  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND FlushPossible AND Opponents = 1 AND NOT OneCardStraightPossible)
//
f$myfunc949  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND FlushPossible)
//
f$myfunc950  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND StraightPossible AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc951  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND StraightPossible)
//
f$myfunc952  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTwoPair AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc953  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc954  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall > 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc954  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall > 12 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc954  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc954  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc955  &&  [ ([f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc955  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveOverPair AND NOT HaveFlush AND OneCardFlushPossible)
//
f$myfunc956  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveOverPair AND NOT FlushPossible AND Opponents <= 1)
//
f$myfunc957  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveOverPair)
//
f$myfunc958  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc959  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc959  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight OR CalledOnTurn))
//
f$myfunc960  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight OR CalledOnTurn))
//
f$myfunc961  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight))
//
f$myfunc962  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight))
//
f$myfunc963  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND Opponents = 1 AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR OneCardFlushPossible) AND PairOnBoard)
//
f$myfunc964  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc965  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible) AND Opponents <= 3)
//
f$myfunc966  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND (FlushPossible OR OneCardStraightPossible) AND Opponents <= 2)
//
f$myfunc967  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveTopPair)
//
f$myfunc968  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 12 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND Have2ndOverPair AND NOT FlushPossible)
//
f$myfunc969  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))] && [f$OpenPPL_BetSize <= 4 || f$OpenPPL_TotalInvested >= 50 * 0.01 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3)
//
f$myfunc970  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 3)
//
f$myfunc970  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 23 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND Have2ndOverPair AND PairOnBoard AND Opponents <= 2)
//
f$myfunc971  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 23 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 2)
//
f$myfunc972  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HavePair AND NOT (OneCardFlushPossible OR OneCardStraightPossible) AND Opponents <= 2)
//
f$myfunc973  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HavePair AND Opponents <= 2)
//
f$myfunc974  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND HaveBestKickerOrBetter AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc975  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (TwoPairOnBoard OR TripsOnBoard) AND (Hand = A))
//
f$myfunc976  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle AND (Hand = A) AND Opponents = 1)
//
f$myfunc977  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveQuads AND (Bets = 0 AND Raises = 0))
//
f$myfunc978  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc978  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc978  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc978  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveQuads)
//
f$myfunc979  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFullHouse AND NutFullHouseOrFourOfAKind >= 4 AND NutFullHouseOrFourOfAKind <= 6 AND TripsOnBoard)
//
f$myfunc980  &&  [ (f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 80) ] ? f$OpenPPL_Call :
f$myfunc980  &&  [ (f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (NutFullHouseOrFourOfAKind > 4 AND NutFullHouseOrFourOfAKind <= 14) AND TripsOnBoard)
//
f$myfunc981  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3 &&  ![f$OpenPPL_CalledOnTurn] && f$OpenPPL_StillToAct == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc981  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![f$OpenPPL_CalledOnTurn] && f$OpenPPL_StillToAct == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc981  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND TripsOnBoard)
//
f$myfunc982  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc982  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc982  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (NutFullHouseOrFourOfAKind >= 1 AND NutFullHouseOrFourOfAKind <= 4) AND NOT TripsOnBoard)
//
f$myfunc983  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize <= 3) ] ? f$OpenPPL_RaisePot :
f$myfunc983  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc983  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND NutFullHouseOrFourOfAKind = 5 AND NOT TripsOnBoard)
//
f$myfunc984  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (NutFullHouseOrFourOfAKind >= 6 AND NutFullHouseOrFourOfAKind <= 7) AND NOT TripsOnBoard)
//
f$myfunc985  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc985  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_PotSize <= 80) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveNutFlush OR HaveFlush) AND TripsOnBoard AND NOT HaveStraightFlush)
//
f$myfunc986  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveNutFlush OR HaveFlush) AND TripsOnBoard AND NOT HaveStraightFlush)
//
f$myfunc986  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 4) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutFlush AND PairOnBoard AND Opponents >= 2 AND NOT HaveStraightFlush)
//
f$myfunc987  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutFlush AND PairOnBoard AND Opponents = 1)
//
f$myfunc988  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc988  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc988  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc988  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc988  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc988  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc988  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc988  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc988  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc988  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc988  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc988  &&  [ (f$OpenPPL_PotSize >= 24) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutFlush AND PairOnBoard AND NOT HaveStraightFlush)
//
f$myfunc989  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveNutFlush OR HaveStraightFlush) AND (Bets = 0 AND Raises = 0))
//
f$myfunc990  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc990  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc990  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc990  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveNutFlush OR HaveStraightFlush) AND (Bets = 1 OR Raises >= 1))
//
f$myfunc991  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc991  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc991  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc991  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND FlushOnBoard AND NOT (HaveNutFlush OR Have2ndNutFlush))
//
f$myfunc992  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc993  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT (OneCardFlushPossible OR (hand = A) OR (hand = K)))
//
f$myfunc994  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT OneCardFlushPossible)
//
f$myfunc995  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc995  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc995  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc995  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT (OneCardFlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc996  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc996  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc996  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc996  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT (OneCardFlushPossible OR PairOnBoard))
//
f$myfunc997  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc998  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc998  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc998  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc998  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND NOT OneCardFlushPossible AND PairOnBoard)
//
f$myfunc999  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveFlush AND OneCardFlushPossible AND NOT (HaveNutFlush OR Have2ndNutFlush))
//
f$myfunc1000  &&  [ (f$OpenPPL_BetSize <= 8) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND FlushPossible AND (Bets = 0 OR Raises = 0))
//
f$myfunc1001  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1001  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1001  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1001  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND OneCardFlushPossible)
//
f$myfunc1002  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveNutStraight OR HaveStraight) AND TripsOnBoard)
//
f$myfunc1003  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveNutStraight OR HaveStraight) AND TripsOnBoard)
//
f$myfunc1003  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 4) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND (Bets = 0 OR Raises = 0))
//
f$myfunc1004  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1004  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1004  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1004  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND NOT (FlushPossible OR PairOnBoard) AND (Bets = 1 OR Raises >= 1 OR BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call))
//
f$myfunc1005  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1005  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1005  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1005  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND NOT FlushPossible AND PairOnBoard)
//
f$myfunc1006  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND NOT FlushPossible AND PairOnBoard)
//
f$myfunc1006  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND OneCardFlushPossible)
//
f$myfunc1007  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND OneCardFlushPossible)
//
f$myfunc1007  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND FlushPossible)
//
f$myfunc1008  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND FlushPossible)
//
f$myfunc1008  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc1009  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (FlushPossible OR PairOnBoard) AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc1010  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 39 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (FlushPossible OR PairOnBoard) AND ((Board = AKQJ) OR (board = AQJT) OR (board = AKJT) OR (board = AKQT) OR (board = KQJT) OR (board = QJT9) OR (board = JT98) OR (board = T987) OR (board = 9876) OR (board = 8765) OR (board = 7654) OR (board = 6543) OR (board = 5432)))
//
f$myfunc1010  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 39 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveNutStraight AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc1011  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (FlushPossible OR PairOnBoard OR HaveNutStraight))
//
f$myfunc1012  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ] ? f$OpenPPL_Call :
f$myfunc1012  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (HaveNutStraight OR FlushPossible) AND Opponents <= 2 AND Bets = 0 AND Raises = 0)
//
f$myfunc1013  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1013  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1013  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1013  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1013  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1013  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1013  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1013  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1013  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1013  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1013  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1013  &&  [ (f$OpenPPL_PotSize >= 24) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT OneCardFlushPossible AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc1014  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1014  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1014  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1014  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1014  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1014  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1014  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1014  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1014  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1014  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1014  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1014  &&  [ (f$OpenPPL_PotSize >= 24) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc1015  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1015  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1015  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1015  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible) AND PairOnBoard AND (Bets = 0 AND Raises = 0))
//
f$myfunc1016  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1016  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1016  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1016  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND PairInHand AND NOT FlushPossible AND (Bets = 0 AND Raises = 0) AND Opponents <= 2)
//
f$myfunc1017  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1017  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1017  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1017  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (HaveNutStraight OR FlushPossible OR (hand = A) OR (hand = 2) OR (hand = 3) OR (hand = 4)) AND ((Hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9) OR (hand = T)) AND (Bets = 0 AND Raises = 0))
//
f$myfunc1018  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1018  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1018  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1018  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (HaveNutStraight OR FlushPossible OR (hand = A) OR (hand = 2) OR (hand = 3) OR (hand = 4)) AND ((Hand = 5) OR (hand = 6) OR (hand = 7) OR (hand = 8) OR (hand = 9) OR (hand = T)))
//
f$myfunc1019  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_PotSize <= 10) ] ? f$OpenPPL_RaisePot :
f$myfunc1019  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND FlushPossible)
//
f$myfunc1020  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND FlushPossible)
//
f$myfunc1020  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible OR PairOnBoard))
//
f$myfunc1021  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT (OneCardStraightPossible OR OneCardFlushPossible) AND PairOnBoard)
//
f$myfunc1022  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND FlushPossible AND NOT HaveNutStraight)
//
f$myfunc1023  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND OneCardStraightPossible AND NOT (HaveNutStraight OR FlushPossible) AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (Bets = 0 AND Raises = 0))
//
f$myfunc1024  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1024  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1024  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1024  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND (FlushPossible OR OneCardStraightPossible) AND NOT HaveNutStraight)
//
f$myfunc1025  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND OneCardStraightPossible AND NOT OneCardFlushPossible AND Have2ndNutStraight)
//
f$myfunc1026  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND OneCardStraightPossible AND NOT OneCardFlushPossible)
//
f$myfunc1027  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveStraight AND NOT FlushPossible)
//
f$myfunc1028  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (OneCardFlushPossible OR OneCardStraightPossible) AND NOT HaveNutFlush)
//
f$myfunc1029  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND NOT (FlushPossible OR HaveFullHouse) AND (Bets = 0 AND Raises = 0))
//
f$myfunc1030  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1030  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1030  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1030  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND FlushPossible)
//
f$myfunc1031  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveSet AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc1032  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveSet AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND FlushPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc1033  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveSet AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND StraightPossible AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc1034  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTrips AND Opponents = 1 AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc1035  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTrips AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc1036  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND (BotsLastAction = RAISE OR BotsLastAction = BET OR BotsLastAction = Call OR BotsLastAction = Check) AND (FlushPossible OR StraightPossible OR OneCardFlushPossible OR OneCardStraightPossible OR HaveFullHouse))
//
f$myfunc1037  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 47 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (HaveSet OR HaveTrips) AND NOT (FlushPossible OR StraightPossible OR HaveFullHouse))
//
f$myfunc1038  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND OneCardStraightPossible)
//
f$myfunc1039  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND (FlushPossible OR StraightPossible) AND NOT (OneCardFlushPossible OR OneCardStraightPossible) and (Bets = 0 AND Raises = 0) AND Opponents <= 2)
//
f$myfunc1040  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1040  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1040  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1040  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND (FlushPossible OR StraightPossible) AND (Bets = 0 AND Raises = 0) AND Opponents = 1 AND NOT CalledOnTurn)
//
f$myfunc1041  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1041  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1041  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1041  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND (FlushPossible OR StraightPossible))
//
f$myfunc1042  &&  [ ([f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc1043  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1043  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1043  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1043  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND NOT (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc1044  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopTwoPair AND NOT (StraightPossible OR FlushPossible) AND PairOnBoard AND Opponents = 1)
//
f$myfunc1045  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND FlushPossible AND Opponents = 1 AND NOT OneCardStraightPossible)
//
f$myfunc1046  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND FlushPossible)
//
f$myfunc1047  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND StraightPossible AND Opponents = 1 AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc1048  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTwoPair AND StraightPossible)
//
f$myfunc1049  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc1050  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall > 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc1050  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AmountToCall > 12 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc1050  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2 && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR Have2ndTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc1050  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 0 OR Raises = 0))
//
f$myfunc1051  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1051  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1051  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1051  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 1 OR Raises >= 1))
//
f$myfunc1052  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1052  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1052  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1052  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT HaveFlush AND OneCardFlushPossible)
//
f$myfunc1053  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair AND NOT FlushPossible AND Opponents <= 1)
//
f$myfunc1054  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveOverPair)
//
f$myfunc1055  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible) AND NOT (HaveFlush OR HaveStraight))
//
f$myfunc1056  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_CalledOnTurn) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND StraightPossible AND NOT (FlushPossible OR OneCardStraightPossible) AND NOT (HaveFlush OR HaveStraight OR CalledOnTurn) AND (Bets = 0 AND Raises = 0))
//
f$myfunc1057  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1057  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1057  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1057  &&  [ (f$OpenPPL_PotSize >= 28) ] ? 24 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard) AND (Bets = 0 AND Raises = 0))
//
f$myfunc1058  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1058  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1058  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_PotSize >= 8 && f$OpenPPL_PotSize < 12) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_PotSize >= 12 && f$OpenPPL_PotSize < 17) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_PotSize >= 17 && f$OpenPPL_PotSize < 24) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_PotSize >= 24 && f$OpenPPL_PotSize < 28) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_PotSize >= 28 && f$OpenPPL_PotSize < 35) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc1058  &&  [ (f$OpenPPL_PotSize >= 35) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc1059  &&  [ (f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight OR CalledOnTurn))
//
f$myfunc1060  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight OR CalledOnTurn))
//
f$myfunc1061  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 42 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (FlushPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight))
//
f$myfunc1062  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND Opponents = 1 AND (StraightPossible OR PairOnBoard) AND NOT (OneCardFlushPossible OR OneCardStraightPossible OR HaveFlush OR HaveStraight))
//
f$myfunc1063  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Opponents = 1 AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR OneCardFlushPossible) AND PairOnBoard)
//
f$myfunc1064  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 52 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible OR PairOnBoard))
//
f$myfunc1065  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 49 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND NOT (FlushPossible OR OneCardStraightPossible) AND Opponents <= 3)
//
f$myfunc1066  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair AND NOT (HaveBestKicker OR Have2ndBestKicker OR Have3rdBestKicker) AND (FlushPossible OR OneCardStraightPossible) AND Opponents <= 2)
//
f$myfunc1067  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveTopPair)
//
f$myfunc1068  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 12 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT FlushPossible)
//
f$myfunc1069  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))] && [f$OpenPPL_BetSize <= 4 || f$OpenPPL_TotalInvested >= 50 * 0.01 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 2)
//
f$myfunc1070  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 2)
//
f$myfunc1070  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 23 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND PairOnBoard AND Opponents <= 3)
//
f$myfunc1071  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 23 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND Have2ndOverPair AND NOT (FlushPossible OR (Board = A)) AND Opponents <= 2)
//
f$myfunc1072  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HavePair AND NOT (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc1073  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HavePair AND Opponents <= 2)
//
f$myfunc1074  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND HaveBestKickerOrBetter AND NOT (FlushPossible OR OneCardStraightPossible))
//
f$myfunc1075  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (TwoPairOnBoard OR TripsOnBoard) AND (Hand = A))
//
f$myfunc1076  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotRaisedBeforeFlop OR BotRaisedOnFlop OR BotRaisedOnTurn) AND BotsLastAction = RAISE AND (Hand = A) AND Opponents = 1)
//
f$myfunc1077  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotRaisedBeforeFlop OR BotRaisedOnFlop OR BotRaisedOnTurn) AND BotsLastAction = RAISE AND HavePair AND Opponents <= 2)
//
f$myfunc1078  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotRaisedBeforeFlop OR BotRaisedOnFlop OR BotRaisedOnTurn))
//
f$myfunc1079  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc1080  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last AND (NoBettingOnFlop AND NoBettingOnTurn) AND (Bets = 0 AND Raises = 0) AND Opponents = 1 AND PotSize <= 15)
//
f$myfunc1081  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1081  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1081  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1081  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1081  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc1081  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1081  &&  [ (f$OpenPPL_PotSize >= 20) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Position = Last AND BotRaisedBeforeFlop AND (BotRaisedOnFlop OR OpponentCalledOnFlop) AND NoBettingOnTurn AND Opponents = 1 AND (Bets = 0 AND Raises = 0) AND PotSize <= 15)
//
f$myfunc1082  &&  [ (f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc1082  &&  [ (f$OpenPPL_PotSize < 5) ] ? f$OpenPPL_RaisePot :
f$myfunc1082  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc1082  &&  [ (f$OpenPPL_PotSize >= 5 && f$OpenPPL_PotSize < 10) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc1082  &&  [ (f$OpenPPL_Random <= 40 && f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc1082  &&  [ (f$OpenPPL_PotSize >= 10 && f$OpenPPL_PotSize < 20) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc1082  &&  [ (f$OpenPPL_PotSize >= 20) ] ? 20 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND Opponents = 1 AND (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc1083  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_PotSize <= 20) ] ? 60 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND Opponents = 1 AND (FlushPossible OR StraightPossible OR PairOnBoard))
//
f$myfunc1083  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check]) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (OpponentsAtTable <= 2 AND Opponents = 1)
//
f$myfunc1084  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (Have2ndOverPair AND PairInHand AND ((Hand = 33) OR (hand = 44) OR (hand = 55) OR (hand = 66)) AND BotRaisedOnTurn AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair))
//
f$myfunc1085  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_StackSize > 15 && f$OpenPPL_BetSize > 7) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((OneCardFlushPossible OR OneCardStraightPossible) AND HavePair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair OR Have2ndTopPair))
//
f$myfunc1086  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// ((HaveSet OR HaveTrips) AND OneCardFlushPossible AND NOT (HaveQuads OR HaveFullHouse OR HaveFlush))
//
f$myfunc1087  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1 && f$OpenPPL_AmountToCall > 10) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HaveSet AND OneCardStraightPossible AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight))
//
f$myfunc1088  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents > 1 && f$OpenPPL_AmountToCall > 10) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (AmountToCall < 20% PotSize AND HavePair AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair) AND (OneCardFlushPossible OR OneCardStraightPossible))
//
f$myfunc1089  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 5) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (HavePair AND NOT FlushPossible AND OpponentCalledOnTurn AND PotSize <= 14)
//
f$myfunc1090  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc1090  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Middle) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc1090  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && f$OpenPPL_OpponentsAtTable <= 6 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ] ? 6 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (PairInHand AND NOT (OneCardFlushPossible OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair) AND BotRaisedBeforeFlop AND (BotRaisedOnFlop OR BotRaisedOnTurn))
//
f$myfunc1091  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveNothing AND BotRaisedBeforeFlop AND (BotRaisedOnFlop OR BotRaisedOnTurn) AND (hand = A))
//
f$myfunc1092  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StraightPossibleOnTurn OR FlushPossibleOnTurn OR PairOnBoard))
//
f$myfunc1093  &&  [ ([f$OpenPPL_OpponentsAtTable <= 6 || f$OpenPPL_StackSize <= 110] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_CalledOnTurn || f$OpenPPL_NoBettingOnTurn]) ] ? 60 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (PotSize > 4 AND ((Hand = AK) OR (hand = AQ) OR (hand = AJ) OR HavePair) AND NOT (HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR OneCardFlushPossible OR OneCardStraightPossible OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair OR HaveTopPair OR BotsLastAction = call))
//
f$myfunc1094  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
f$myfunc1094  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_BetSize == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (NOT (TopFlopCardPairedonTurn OR TopFlopCardPairedonRiver OR OneCardFlushPossible OR OneCardStraightPossible) AND NoBettingOnFlop AND NoBettingOnTurn)
//
f$myfunc1095  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_OpponentsOnFlop == 1 && f$OpenPPL_PotSize <= 15) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (HavePair AND NOT (HaveTopPair OR Have2ndTopPair OR HaveQuads OR HaveFullHouse OR HaveStraight OR HaveFlush OR HaveSet OR HaveTrips OR HaveTopTwoPair OR HaveTwoPair))
//
f$myfunc1096  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize > 3) ] ? f$OpenPPL_Fold :
//
// Starting open-ended when-condition
// (Others)
//
f$myfunc1097  &&  [ ([f$OpenPPL_OpponentsAtTable <= 2 || f$OpenPPL_StackSize <= 110] && f$OpenPPL_Opponents == 1 && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_PotSize <= 20 && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_TopFlopCardPairedonTurn || f$OpenPPL_TopFlopCardPairedonRiver)]) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc1097  &&  [ ([f$OpenPPL_OpponentsAtTable <= 2 || f$OpenPPL_StackSize <= 110] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossibleOnTurn || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// ((NutFullHouseOrFourOfAKind = 1 OR NutFullHouseOrFourOfAKind = 2 OR NutFullHouseOrFourOfAKind = 3 OR NutFullHouseOrFourOfAKind = 4 OR HaveQuads OR HaveNutStraightFlush OR HaveStraightFlush OR HaveSet OR HaveTrips))
//
f$myfunc1098  &&  [ (f$OpenPPL_TotalInvested > 65 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair) AND NOT (FlushPossible OR OneCardStraightPossible) AND Opponents = 1)
//
f$myfunc1099  &&  [ (f$OpenPPL_TotalInvested > 65 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((HaveTopTwoPair OR HaveTwoPair OR HaveOverPair OR HaveTopPair))
//
f$myfunc1100  &&  [ (f$OpenPPL_TotalInvested > 75 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((Have2ndOverPair OR Have2ndTopPair OR HaveUnderPair OR HavePair OR HaveFullHouse))
//
f$myfunc1101  &&  [ (f$OpenPPL_TotalInvested > 330 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (TotalInvested >= 133% StackSize)
//
f$myfunc1102  &&  [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotsLastAction = RAISE OR BotsLastAction = Bet))
//
f$myfunc1103  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold


//************************************************************************
//
// Resetting all User-Defined Variables.
//
// To be called at the very beginning of a hand.
//
//************************************************************************


##f$OpenPPL_ResetUserVariables##
0
+  me_st_userinbigblind_0


//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 2.2.0 or later
//   Symbols not working with 2.1.x:
//     * isfinaltable
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   Lavezzi
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
//  Predefined action constants
//  ===========================
//
//  Positive values mean:  betsizes (in big-blinds)
//  Small negative values: percentaged potsized bets
//  Large negative values: action constants
//
//  Note: Beep is not supported.
//
//*****************************************************************************

##f$OpenPPL_Fold##
-1000000

##f$OpenPPL_Check##
-1000001

##f$OpenPPL_Undefined_BetSize_Probably_Due_To_Misscraped_Pot_Defaulting_To_Minraise##
-1000002

##f$OpenPPL_RaiseMin##
f$OpenPPL_Raise

##f$OpenPPL_RaiseHalfPot##
-1000003

##f$OpenPPL_RaisePot##
-1000004

##f$OpenPPL_RaiseMax##
-1000005

##f$OpenPPL_Call##
-1000006

##f$OpenPPL_Play##
f$OpenPPL_Call

##f$OpenPPL_Bet##
f$OpenPPL_Raise

##f$OpenPPL_BetMin##
f$OpenPPL_Bet

##f$OpenPPL_BetHalfPot##
f$OpenPPL_RaiseHalfPot

##f$OpenPPL_BetPot##
f$OpenPPL_RaisePot

##f$OpenPPL_BetMax##
f$OpenPPL_RaiseMax

##f$OpenPPL_Allin##
f$OpenPPL_RaiseMax

##f$OpenPPL_None##
-1000007

##f$OpenPPL_SitOut##
-1000008

##f$OpenPPL_Raise##
-1000009

##f$OpenPPL_UndefinedReturnValue##
// Every user-defined function ends with this return-value
// mainly to ensure syntactical correctness
// and to avoid undefined return values.
// OpenHoldem would return 0, when a return-value was not specified,
// but this might be meaningful in most contexts.
//
// To always be on the save site we use...
// f$OpenPPL_UndefinedReturnValue = f$OpenPPL_Fold = -1
f$OpenPPL_Fold

//*****************************************************************************
//
//  OpenPPL - Card Constants
//  ===========================
//  
//  Both ranks and suits accordint to the OpenHoldem docu
//
//*****************************************************************************

##f$OpenPPL_ConstCardAce##
14

##f$OpenPPL_ConstCardKing##
13

##f$OpenPPL_ConstCardQueen##
12

##f$OpenPPL_ConstCardJack##
11

##f$OpenPPL_ConstCardTen##
10

##f$OpenPPL_ConstCardNine##
9

##f$OpenPPL_ConstCardEight##
8

##f$OpenPPL_ConstCardSeven##
7

##f$OpenPPL_ConstCardSix##
6

##f$OpenPPL_ConstCardFive##
5

##f$OpenPPL_ConstCardFour##
4

##f$OpenPPL_ConstCardThree##
3

##f$OpenPPL_ConstCardTwo##
2

##f$OpenPPL_ConstSuitClubs##
1

##f$OpenPPL_ConstSuitDiamonds##
2

##f$OpenPPL_ConstSuitHearts##
3

##f$OpenPPL_ConstSuitSpades##
4

//*****************************************************************************
//
// OpenPPL - Betting Round Constants
//
//*****************************************************************************

##f$OpenPPL_ConstBetRoundPreflop##
1

##f$OpenPPL_ConstBetRoundFlop##
2

##f$OpenPPL_ConstBetRoundTurn##
3

##f$OpenPPL_ConstBetRoundRiver##
4

//*****************************************************************************
//
// OpenPPL - Other Constants
//
//*****************************************************************************

##f$OpenPPL_True##
1

##f$OpenPPL_False##
0

//*****************************************************************************
//
// OpenPPL - verbose errors and warning
//
// Instead of returning just -1 we define constants like
// "f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist"
// This way we get a verbose explanation in the log-file.
//
//*****************************************************************************

##f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY##
-1

##f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way##
0

##f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap##
// Treating this error as PLUS 1 to not mix the primecoding of board-cards up.
 1
 
##f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap##
// Treating this error as PLUS 1 to not mix the primecoding of board-cards up.
 1

##f$OpenPPL_ERROR_Betround_Out_Of_Range##
-1

##f$OpenPPL_ERROR_BotsActionsOnThisRound_Out_Of_Range##
-1

##f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_CutOffChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition3Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition2Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition3Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition2Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_DealPosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__No_Not_Call_This_Function##
-1

##f$OpenPPL_ERROR_Dealposition_Out_Of_Range__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__Do_Not_Call_This_Function##
-1

##f$OpenPPL_ERROR_No_Opponents_Detected__Check_Your_TableMap##
// Returning -bblind, because we divide by bblind to -1.
(0 - bblind)

##f$OpenPPL_HINT_We_Dont_Have_A_FullHouse_At_All##
// Docu says: this case is 0; and this special case needs extra care.
// However returning a high number instead of 0 seems better to uz,
// as it indicates the weakness and avoids any pitfalls.
999

##f$OpenPPL_HINT_There_Are_No_True_Raisers##
-1

##f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist##
-1

##f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated##
-1

##f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist##
-1

##f$OpenPPL_HINT_EarlyPosition2_Does_Not_Exist##
-1

##f$OpenPPL_HINT_EarlyPosition3_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition1_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition2_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition3_Does_Not_Exist##
-1

##f$OpenPPL_HINT_CutOff_Does_Not_Exist##
-1

##f$OpenPPL_HINT_There_Is_No_SmallNlind_In_This_Game##
-1 

##f$OpenPPL_HINT_There_Is_No_Raiser_Therefore_No_CurrentBet##
0

##f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board##
-1

##f$OpenPPL_HINT_Nothing_To_Do_But_All_OK##
0

##f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round##
0

##f$OpenPPL_HINT_StillToAct_Is_Only_Valid_On_First_Orbit##
0

##f$OpenPPL_HINT_There_Are_No_Common_Cards_Preflop##
// To use this function together with prime-coded board ranks
// a division has to be possible. 1 doesn't interfer with any cards (primes).
1

//*****************************************************************************
//
// OpenPPL - Verbosity
//
// Some OpenHoldem-symbols are awfully illnamed,
// thanks to Ray E. Bornert who invented WinHoldem.
// rais, swag, $$pr0, etc.
// We provide meaningful names here to make this library more readable.
//
//*****************************************************************************

##f$OpenPPL_RankOfFirstHoleCard##
$$pr0

##f$OpenPPL_RankOfSecondHoleCard##
$$pr1

##f$OpenPPL_FirstFlopCard##
$$cr0

##f$OpenPPL_SecondFlopCard##
$$cr1

##f$OpenPPL_ThirdFlopCard##
$$cr2

##f$OpenPPL_TurnCard##
$$cr3

##f$OpenPPL_RiverCard##
$$cr4

//*****************************************************************************
//                                                                 
//  Prime-coded board ranks                                        
//  =======================                                        
//                                                                 
//  "Board = XYZ"-expressions are difficult to translate           
//  to OH-script.                                                  
//  Cards may appear more than once, e.g. 'board = ATT',	        
//  therefore we can't work with rankbits here,  	                
//  but do some prime-coding, so that we can easily check for      
//  multiple cards.                                                
//                                                                 
//  Card:      2   3   4   5   6   7   8   9   T   J   Q   K   A   
//  Coding:    2   3   5   7  11  13  17  19  23  29  31  37  41   
//                                                                 
//  Example: prime-coding for ATT = 41 * 23 * 23 = 21689           
//  Therefore a board contains ATT, exactly if its prime-coding    
//  can be divided by 21689 without a reminder.                    
//
// Note: this code gets generated by the converter and looks like:
//   ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0))
//                                                                 
//*****************************************************************

##f$prime_coded_board_ranks_first_flop_card##
  [($$cr0 ==  2) ? f$PrimeCode_2 : ($$cr0 ==  3) ? f$PrimeCode_3 : 
   ($$cr0 ==  4) ? f$PrimeCode_4 : ($$cr0 ==  5) ? f$PrimeCode_5 : 
   ($$cr0 ==  6) ? f$PrimeCode_6 : ($$cr0 ==  7) ? f$PrimeCode_7 : 
   ($$cr0 ==  8) ? f$PrimeCode_8 : ($$cr0 ==  9) ? f$PrimeCode_9 : 
   ($$cr0 == 10) ? f$PrimeCode_T : ($$cr0 == 11) ? f$PrimeCode_J : 
   ($$cr0 == 12) ? f$PrimeCode_Q : ($$cr0 == 13) ? f$PrimeCode_K : 
   ($$cr0 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 
   
##f$prime_coded_board_ranks_second_flop_card##
  [($$cr1 ==  2) ? f$PrimeCode_2 : ($$cr1 ==  3) ? f$PrimeCode_3 : 
   ($$cr1 ==  4) ? f$PrimeCode_4 : ($$cr1 ==  5) ? f$PrimeCode_5 : 
   ($$cr1 ==  6) ? f$PrimeCode_6 : ($$cr1 ==  7) ? f$PrimeCode_7 : 
   ($$cr1 ==  8) ? f$PrimeCode_8 : ($$cr1 ==  9) ? f$PrimeCode_9 : 
   ($$cr1 == 10) ? f$PrimeCode_T : ($$cr1 == 11) ? f$PrimeCode_J : 
   ($$cr1 == 12) ? f$PrimeCode_Q : ($$cr1 == 13) ? f$PrimeCode_K : 
   ($$cr1 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 
   
##f$prime_coded_board_ranks_third_flop_card##
  [($$cr2 ==  2) ? f$PrimeCode_2 : ($$cr2 ==  3) ? f$PrimeCode_3 : 
   ($$cr2 ==  4) ? f$PrimeCode_4 : ($$cr2 ==  5) ? f$PrimeCode_5 : 
   ($$cr2 ==  6) ? f$PrimeCode_6 : ($$cr2 ==  7) ? f$PrimeCode_7 : 
   ($$cr2 ==  8) ? f$PrimeCode_8 : ($$cr2 ==  9) ? f$PrimeCode_9 : 
   ($$cr2 == 10) ? f$PrimeCode_T : ($$cr2 == 11) ? f$PrimeCode_J : 
   ($$cr2 == 12) ? f$PrimeCode_Q : ($$cr2 == 13) ? f$PrimeCode_K : 
   ($$cr2 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 
   
##f$prime_coded_board_ranks_turn_card##
  [($$cr3 ==  2) ? f$PrimeCode_2 : ($$cr3 ==  3) ? f$PrimeCode_3 : 
   ($$cr3 ==  4) ? f$PrimeCode_4 : ($$cr3 ==  5) ? f$PrimeCode_5 : 
   ($$cr3 ==  6) ? f$PrimeCode_6 : ($$cr3 ==  7) ? f$PrimeCode_7 : 
   ($$cr3 ==  8) ? f$PrimeCode_8 : ($$cr3 ==  9) ? f$PrimeCode_9 : 
   ($$cr3 == 10) ? f$PrimeCode_T : ($$cr3 == 11) ? f$PrimeCode_J : 
   ($$cr3 == 12) ? f$PrimeCode_Q : ($$cr3 == 13) ? f$PrimeCode_K : 
   ($$cr3 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 
   
##f$prime_coded_board_ranks_river_card##
  [($$cr4 ==  2) ? f$PrimeCode_2 : ($$cr4 ==  3) ? f$PrimeCode_3 : 
   ($$cr4 ==  4) ? f$PrimeCode_4 : ($$cr4 ==  5) ? f$PrimeCode_5 : 
   ($$cr4 ==  6) ? f$PrimeCode_6 : ($$cr4 ==  7) ? f$PrimeCode_7 : 
   ($$cr4 ==  8) ? f$PrimeCode_8 : ($$cr4 ==  9) ? f$PrimeCode_9 : 
   ($$cr4 == 10) ? f$PrimeCode_T : ($$cr4 == 11) ? f$PrimeCode_J : 
   ($$cr4 == 12) ? f$PrimeCode_Q : ($$cr4 == 13) ? f$PrimeCode_K : 
   ($$cr4 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 

##f$prime_coded_board_ranks##
[betround == f$OpenPPL_ConstBetRoundPreflop] ? f$OpenPPL_HINT_There_Are_No_Common_Cards_Preflop :
[betround == f$OpenPPL_ConstBetRoundFlop] ?
  (f$prime_coded_board_ranks_first_flop_card 
    * f$prime_coded_board_ranks_second_flop_card
    * f$prime_coded_board_ranks_third_flop_card) :
[betround == f$OpenPPL_ConstBetRoundTurn] ?
  (f$prime_coded_board_ranks_first_flop_card 
    * f$prime_coded_board_ranks_second_flop_card
    * f$prime_coded_board_ranks_third_flop_card 
	* f$prime_coded_board_ranks_turn_card) :
[betround == f$OpenPPL_ConstBetRoundRiver] ?
  (f$prime_coded_board_ranks_first_flop_card 
    * f$prime_coded_board_ranks_second_flop_card
    * f$prime_coded_board_ranks_third_flop_card 
	* f$prime_coded_board_ranks_turn_card
	* f$prime_coded_board_ranks_river_card) :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY
	
##f$PrimeCode_2##
  2

##f$PrimeCode_3##
  3

##f$PrimeCode_4##
  5

##f$PrimeCode_5##
  7

##f$PrimeCode_6##
  11

##f$PrimeCode_7##
  13

##f$PrimeCode_8##
  17

##f$PrimeCode_9##
  19

##f$PrimeCode_T##
  23

##f$PrimeCode_J##
  29

##f$PrimeCode_Q##
  31

##f$PrimeCode_K##
  37

##f$PrimeCode_A##
  41
  
//*****************************************************************************
//                                                                 
//  Prime-coded hole-cards
//  ======================                                        
//    
//  Similar to prime-coded board-ranks.
//  With OH we can't check for specific suits like AhKd easiliy.
//  We have to check 2 ranks * 2 suits * 2 permuations explicitly.
//  As this is really awfule and generates long and unreadable code
//  we also use the prome-coding technique here.
//             
//*****************************************************************************
//
//  Prime numbers: http://www.miniwebtool.com/list-of-prime-numbers/?to=1000
//
//  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 
//  71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 
//  151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 
//  233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293
//
//*****************************************************************************

##f$prime_coded_hole_cards##
[f$prime_code_first_hole_card * f$prime_code_second_hole_card]

##f$prime_code_first_hole_card##
[
($$ps0 == f$OpenPPL_ConstSuitClubs)   ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$ps0 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$ps0 == f$OpenPPL_ConstSuitHearts)  ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$ps0 == f$OpenPPL_ConstSuitSpades)  ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
] 
 
##f$prime_code_second_hole_card##
[
($$ps1 == f$OpenPPL_ConstSuitClubs)   ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$ps1 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$ps1 == f$OpenPPL_ConstSuitHearts)  ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$ps1 == f$OpenPPL_ConstSuitSpades)  ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap   
]

//
// Clubs
//
##f$PrimeCode_2c##
  2

##f$PrimeCode_3c##
  3

##f$PrimeCode_4c##
  5

##f$PrimeCode_5c##
  7

##f$PrimeCode_6c##
  11

##f$PrimeCode_7c##
  13

##f$PrimeCode_8c##
  17

##f$PrimeCode_9c##
  19

##f$PrimeCode_Tc##
  23

##f$PrimeCode_Jc##
  29

##f$PrimeCode_Qc##
  31

##f$PrimeCode_Kc##
  37

##f$PrimeCode_Ac##
  41

//
// Diamonds
//  
##f$PrimeCode_2d##
  43

##f$PrimeCode_3d##
  47

##f$PrimeCode_4d##
  53

##f$PrimeCode_5d##
  59

##f$PrimeCode_6d##
  61

##f$PrimeCode_7d##
  67

##f$PrimeCode_8d##
  71

##f$PrimeCode_9d##
  73

##f$PrimeCode_Td##
  79

##f$PrimeCode_Jd##
  83

##f$PrimeCode_Qd##
  89

##f$PrimeCode_Kd##
  97

##f$PrimeCode_Ad##
  101

//
// Spades  
//
##f$PrimeCode_2h##
  103

##f$PrimeCode_3h##
  107

##f$PrimeCode_4h##
  109

##f$PrimeCode_5h##
  113

##f$PrimeCode_6h##
  127

##f$PrimeCode_7h##
  131

##f$PrimeCode_8h##
  137

##f$PrimeCode_9h##
  139

##f$PrimeCode_Th##
  149

##f$PrimeCode_Jh##
  151

##f$PrimeCode_Qh##
  157
  
##f$PrimeCode_Kh##
  163

##f$PrimeCode_Ah##
  167

//  
// Spades
//  
##f$PrimeCode_2s##
  173

##f$PrimeCode_3s##
  179

##f$PrimeCode_4s##
  181

##f$PrimeCode_5s##
  191

##f$PrimeCode_6s##
  193

##f$PrimeCode_7s##
  197

##f$PrimeCode_8s##
  199

##f$PrimeCode_9s##
  211

##f$PrimeCode_Ts##
  223

##f$PrimeCode_Js##
  227

##f$PrimeCode_Qs##
  229

##f$PrimeCode_Ks##
  233

##f$PrimeCode_As##
  239
  
//*****************************************************************************
//                                                                 
//  Prime-coded board ranks                                        
//  =======================   
//  For expressions like "board = AsTh".
//
//*****************************************************************************

##f$prime_coded_board_cards##
[ f$prime_code_first_board_card
* f$prime_code_second_board_card
* f$prime_code_third_board_card
* f$prime_code_fourth_board_card
* f$prime_code_fifth_board_card ]

##f$prime_code_first_board_card##
[
($$cs0 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs0 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs0 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs0 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]

##f$prime_code_second_board_card##
[
($$cs1 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs1 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs1 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs1 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]

##f$prime_code_third_board_card##
[
($$cs2 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr2 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr2 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr2 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr2 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr2 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr2 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr2 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr2 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr2 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr2 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr2 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr2 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr2 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs2 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr2 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr2 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr2 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr2 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr2 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr2 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr2 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr2 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr2 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr2 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr2 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr2 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr2 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs2 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr2 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr2 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr2 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr2 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr2 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr2 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr2 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr2 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr2 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr2 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr2 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr2 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr2 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs2 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr2 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr2 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr2 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr2 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr2 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr2 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr2 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr2 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr2 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr2 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr2 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr2 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr2 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]  

##f$prime_code_fourth_board_card##
[
($$cs3 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr3 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr3 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr3 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr3 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr3 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr3 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr3 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr3 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr3 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr3 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr3 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr3 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr3 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs3 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr3 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr3 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr3 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr3 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr3 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr3 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr3 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr3 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr3 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr3 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr3 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr3 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr3 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs3 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr3 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr3 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr3 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr3 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr3 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr3 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr3 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr3 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr3 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr3 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr3 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr3 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr3 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs3 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr3 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr3 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr3 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr3 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr3 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr3 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr3 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr3 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr3 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr3 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr3 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr3 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr3 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]

##f$prime_code_fifth_board_card##
[
($$cs4 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr4 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr4 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr4 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr4 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr4 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr4 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr4 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr4 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr4 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr4 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr4 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr4 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr4 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs4 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr4 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr4 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr4 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr4 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr4 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr4 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr4 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr4 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr4 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr4 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr4 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr4 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr4 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs4 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr4 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr4 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr4 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr4 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr4 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr4 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr4 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr4 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr4 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr4 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr4 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr4 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr4 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs4 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr4 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr4 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr4 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr4 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr4 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr4 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr4 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr4 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr4 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr4 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr4 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr4 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr4 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]

//***********************************************************
//                                                           
//  Technical functions                                      
//  ===================                                      
//                                                           
//  Functions needed for integration into OpenHoldem.        
//  They translate the f$Decision-function to standard       
//  autoplayer-functions like f$alli, f$rais and f$call.     
//
//  The OpenPPL-logic must be able to handle several
//  different kinds of actions, that must be distinguishable.
//  Therefore we use 3 different ranges for these actions: 
//  * positive values: betsize in big-blinds,
//    using Shankys RaiseBy-semantics.
//    "RAISE 3 FORCE" will be translated to
//    "3 * f$RaiseByBigBlinds"
//    where f$RaiseByBigBlinds simply is 1.
//  * small negative values: percentaged potsized bets
//    "RAISE 70% FORCE" will be translated to 
//    "70 * f$RaiseByPercentagedPotsize"
//    where f$RaiseByPercentagedPotsize is -1.
//    f$betsize will then translate this to the correct bet-amount.
//  * large negative values (< 1.000.000): 
//    fixed action constants for check, call, raise, etc. 
//                                                           
//***********************************************************

##f$OpenPPL_Decision##
// f$preflop, f$flop, f$turn and f$river will be added by the translator.
[betround == 1] ? f$preflop :
[betround == 2] ? f$flop :
[betround == 3] ? f$turn :
[betround == 4] ? f$river :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$RaiseByBigBlinds##
// Positive amounts are betsizes in big-blinds
1

##f$RaiseByPercentagedPotsize##
// Small negative values are used for percentaged potsized bets.
// We also do the multiplication with 0.01 here.
// Don't use " / 100 *" because that can lead to an integer-division,
// and 70/100 will unexpectedly get evaluated as 0.
-0.01

##f$OpenPPL_DecisionIsPercentagedPotsizedBet##
   (f$OpenPPL_Decision <= 0) 
&& (f$OpenPPL_Decision >= -1000)

##f$OpenPPL_DecisionIsFixedBetInBigBlinds##
(f$OpenPPL_Decision > 0) 

##f$OpenPPL_DecisionIsBetPotOrBetHalfPotOrBetMax##
// Used for sanity checks in f$swag
   (f$OpenPPL_Decision == f$OpenPPL_BetHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMax)

##f$OpenPPL_DecisionIsFixedAction##
(f$OpenPPL_Decision < -1000000) 

##f$OpenPPL_RememberToSitoutIfNecessary##
// OpenHoldem handles autoplayer actions when it is heros turn,
// but f$sitin, f$sitout and f$leave once every N heartbeats,
// contrary to OpenPPL were both can happen only at heros turn.
// Therefore we have to remember a decision to SitOut somehow
// and recall it later.
[f$OpenPPL_Decision == f$OpenPPL_SitOut] ? me_st_GoBuddyTakeABreakAndABeer_1 : 0

##f$alli##
// f$alli is the very first function to be called on each turn,
// so we abuse it to initialize memory-symbhols as a side-effect
// and only then we do the real evaluation.

// We can't use addition here to call the functions in correct sequential order,
// because OH doesn't add the operands in order:
// http://www.maxinmontreal.com/forums/viewtopic.php?f=111&t=14525&start=0
   [f$OpenPPL_InitMemorySymbols * 0]
|| [f$OpenPPL_RememberToSitoutIfNecessary * 0]
|| [f$OpenPPL_Decision == f$OpenPPL_RaiseMax]
|| [(f$OpenPPL_Decision > f$OpenPPL_StackSize) && (f$OpenPPL_StackSize > 0)]
|| [f$OpenPPL_DecisionIsPercentagedPotsizedBet 
    && f$OpenPPL_BetSizeForPercentagedPotsizeBet >= f$OpenPPL_MaximumBetsizeInDollars]
	
##f$OpenPPL_MaximumBetsizeInDollars##
f$OpenPPL_MaximumPossibleBetsizeIndollars

##f$OpenPPL_BetSizeForBetHalfPot##
// Calculated in dollars and with raise-to-semantics
// First we call, then we add half of the pot (after we called)
// pot already includes currentbet, so we must not consider this twice.
[currentbet + call + 0.5 * (pot + call)]

##f$OpenPPL_BetSizeForBetPot##
// Calculated in dollars and with raise-to-semantics
// pot includes currentbet, call is the amount we need to call.
[currentbet + call + (pot + call)]

##f$OpenPPL_BetSizeForPercentagedPotsizeBet##
// f$Decision is negative, -0.70 means: 70% potsize
[currentbet + call + (-1 * f$OpenPPL_Decision) * (pot + call)]

##f$OpenPPL_BetSizeForFixedBetInBigBlinds##
// Calculated in dollars and with raise-to-semantics
[(f$OpenPPL_Decision + ncallbets) * bblind]

##f$OpenPPL_BetSizeForAllin##
// Calculated in dollars and with raise-to-semantics
[balance + currentbet]

##f$betsize##
// f$betsize gets counted in Dollars.
// OpenHoldems semantics is "raise-to".
f$alli ? f$OpenPPL_BetSizeForAllin :
[f$OpenPPL_Decision == f$OpenPPL_BetPot] ? f$OpenPPL_BetSizeForBetPot : 
[f$OpenPPL_Decision == f$OpenPPL_BetHalfPot] ? f$OpenPPL_BetSizeForBetHalfPot :
// Finally caring about about absolute betsizes.
// Shankys semantics is "raise-by" and in big blinds,
// so we have to translate it.
f$OpenPPL_DecisionIsFixedBetInBigBlinds ?  f$OpenPPL_BetSizeForFixedBetInBigBlinds :
f$OpenPPL_DecisionIsPercentagedPotsizedBet ? f$OpenPPL_BetSizeForPercentagedPotsizeBet :
0

##f$rais##
   [f$OpenPPL_Decision == f$OpenPPL_Raise]
|| f$OpenPPL_DecisionIsBetPotOrBetHalfPotOrBetMax
|| f$OpenPPL_DecisionIsPercentagedPotsizedBet
|| f$OpenPPL_DecisionIsFixedBetInBigBlinds
//
// Below is 2 times the same expression,
// but we want to log the very verbose explanation
// only in the case of a true error
// and not for normal evaluations.
//
|| [f$OpenPPL_Decision == 0 && f$betsize == f$OpenPPL_Undefined_BetSize_Probably_Due_To_Misscraped_Pot_Defaulting_To_Minraise]

##f$call##
   [f$OpenPPL_Decision == f$OpenPPL_Check]
|| [f$OpenPPL_Decision == f$OpenPPL_Call]
|| [f$OpenPPL_AmountToCall == 0]
|| f$rais

##f$sitout##
me_re_GoBuddyTakeABreakAndABeer

//*****************************************************************************
//
// OpenPPL - BettingAction Symbols
//
//*****************************************************************************

##f$OpenPPL_InitBets##
// No bet in front of us to call
((currentbet == 0) && (f$OpenPPL_AmountToCall == 0)) ? me_st_MemBets_0 :
// A bet to call and we din't act before or we checked
((currentbet == 0) && (f$OpenPPL_AmountToCall > 0)) ? me_st_MemBets_1 :
// Otherwise: we did already bet ourself or call a bet.
// So don't change anything
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_Bets##
me_re_MemBets

##f$OpenPPL_BotCalledBeforeFlop##
didcallround1

##f$OpenPPL_AggressorChair##
// ac_aggressor alone is somewhat unreliable, as it gets scraped (by bets).
// But if we raise and there are super-fast calls behind us (e.g. at PokerAcademy),
// then we don't have stable frames and soon we will switch to the next betting round.
// (There are however no problems, if somebody else raises,
// because we always get stable frames at out turn.)
// So we also check for our last action and the amount to call.
// (-1 = fold 0 = check 1 = call 2 = raise e3 = swag 4 = allin)
(((prevaction ==  2) || (prevaction == 3)) && (f$OpenPPL_AmountToCall == 0)) ? userchair :
ac_aggressor

##f$OpenPPL_BotIsLastRaiser##
(f$OpenPPL_AggressorChair==userchair)

##f$OpenPPL_BotRaisedBeforeFlop##
(didraisround1 || didswaground1)

##f$OpenPPL_BotRaisedOnFlop##
(didraisround2 || didswaground2)

##f$OpenPPL_BotRaisedOnTurn##
(didraisround3 || didswaground3)

##f$OpenPPL_BotsActionsOnFlop##
// Checks are not counted
(didcallround2 + didraisround2 + didswaground2)

##f$OpenPPL_BotsActionsOnThisRound##
// Checks are not counted
(didcall + didrais + didswag)

##f$OpenPPL_BotsActionsOnThisRoundIncludingChecks##
// Folds and allins are not relevant, as then the hand is over for us.
(didchec + didcall + didswag + didrais)

##f$OpenPPL_BotsActionsPreflop##
// Checks are not counted per definition
// and we can't check preflop without posting a blind out of order (first hand only).
(didcallround1 + didraisround1 + didswaground1)

##f$OpenPPL_InitBotsLastAction##
// Initialization on first action preflop
// This has to be done *before* we call the Decision-function,
// InitBotsLastAction has to be the last init-function to be called
// (inside f$OpenPPL_InitMemorySymbols)
// because it will call the final f$Decision routine.
//
([(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? me_st_MemBotsLastAction_f$OpenPPL_None :
//
// "Initialize" first action on other rounds to last value of last round,
// i.e. do nothing and keep the old value.
//
[[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 0 : 0])
//
// Then we call f$OpenPPL_Decision and store BotsLastAction for the next time...
//
|| 
// Call = Play
[  (f$OpenPPL_Decision == f$OpenPPL_Call)
|| (f$OpenPPL_Decision == f$OpenPPL_Play)] ? me_st_MemBotsLastAction_f$OpenPPL_Call :
// Fold
(f$OpenPPL_Decision == f$OpenPPL_Fold) ? me_st_MemBotsLastAction_f$OpenPPL_Fold :
// Check
(f$OpenPPL_Decision == f$OpenPPL_Check) ? me_st_MemBotsLastAction_f$OpenPPL_Check :
// Bet, Raise, BetHalfPot, BetPot, etc.
// Also handling fixed betsizes and peercentaged potsized bets.
[  (f$OpenPPL_Decision == f$OpenPPL_Raise)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseMin)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseMax)
|| (f$OpenPPL_Decision == f$OpenPPL_Bet)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMin)
|| (f$OpenPPL_Decision == f$OpenPPL_BetHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMax)
|| (f$OpenPPL_DecisionIsPercentagedPotsizedBet || f$OpenPPL_DecisionIsFixedBetInBigBlinds)] ?
[(ncallbets == 0) ? me_st_MemBotsLastAction_f$OpenPPL_Bet : me_st_MemBotsLastAction_f$OpenPPL_Raise] :
// Other cases: this should not happen
// Handling them as "None"
me_st_MemBotsLastAction_f$OpenPPL_None

##f$OpenPPL_BotsLastAction##
me_re_MemBotsLastAction

##f$OpenPPL_InitBotsLastPreflopAction##
// Don't use BotsLastAction on the first orbit,
// because that variable has to be the last one to be initialized
// and is therefore undefined.
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 
    me_st_MemBotsLastPreflopAction_f$OpenPPL_None :
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0)] ? 
    me_st_MemBotsLastPreflopAction_f$OpenPPL_BotsLastAction : 
[(betround == f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ?
    me_st_MemBotsLastPreflopAction_f$OpenPPL_BotsLastAction : 0  

##f$OpenPPL_BotsLastPreflopAction##
me_re_MemBotsLastPreflopAction

##f$OpenPPL_CalledOnFlop##
didcallround2

##f$OpenPPL_CalledOnTurn##
didcallround3

##f$OpenPPL_AddNopponentscalling##
f$OpenPPL_Calls + nopponentscalling

##f$OpenPPL_InitCalls##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ?
  me_st_MemCalls_nopponentscalling :
  me_st_MemCalls_f$OpenPPL_AddNopponentscalling

##f$OpenPPL_Calls##
me_re_MemCalls

##f$OpenPPL_LastRaiserCurrentBet##
raischair == 0 ? currentbet0 :
raischair == 1 ? currentbet1 :
raischair == 2 ? currentbet2 :
raischair == 3 ? currentbet3 :
raischair == 4 ? currentbet4 :
raischair == 5 ? currentbet5 :
raischair == 6 ? currentbet6 :
raischair == 7 ? currentbet7 :
raischair == 8 ? currentbet8 :
raischair == 9 ? currentbet9 :
f$OpenPPL_HINT_There_Is_No_Raiser_Therefore_No_CurrentBet

##f$OpenPPL_PlayersRaisingOrColdCallingTheLastRaise##
  (currentbet0 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet1 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet2 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet3 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet4 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet5 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet6 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet7 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet8 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet9 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)

##f$OpenPPL_CallsSinceLastRaise##
(f$OpenPPL_PlayersRaisingOrColdCallingTheLastRaise - 1)

##f$OpenPPL_Folds##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? (nplayersdealt  - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundFlop)    ? (nplayersround2 - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundTurn)    ? (nplayersround3 - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundRiver)   ? (nplayersround4 - nopponentsplaying - 1) :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_ChecksAfterHero##
// Valid second orbit only
// All active players with a zero bet
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? 0 :
nopponentschecking

##f$OpenPPL_ChecksInFrontOfHero##
// No checks preflop. Not even big blind can check (game over).
// We ignore additional blind-posters however.
(betround == f$OpenPPL_ConstBetRoundPreflop) ? 0 :
// I did already act, so no longer any posters in front of me
(currentbet > 0) ? 0 :
// A bet to call, subtract all players with a non-zero bet in front of us
(f$OpenPPL_AmountToCall > 0) ? (betposition - nopponentsbetting - 1):
// All players before us checked, not even open-folds can throw this logic off.
[betposition - 1]

##f$OpenPPL_CalculateChecks##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? f$OpenPPL_ChecksInFrontOfHero :
// Stored value of checks on previous orbit plus players behind
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 1) ? (f$OpenPPL_Checks + f$OpenPPL_ChecksAfterHero) :
// There can no longer be any checking players, so don't change anything
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitChecks##
(f$OpenPPL_BotsActionsOnThisRound <= 1) ? me_st_MemChecks_f$OpenPPL_CalculateChecks : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_Checks##
me_re_MemChecks

##f$OpenPPL_DealPosition1Chair##
ac_dealpos0 == 1 ? 0 :
ac_dealpos1 == 1 ? 1 :
ac_dealpos2 == 1 ? 2 :
ac_dealpos3 == 1 ? 3 :
ac_dealpos4 == 1 ? 4 :
ac_dealpos5 == 1 ? 5 :
ac_dealpos6 == 1 ? 6 :
ac_dealpos7 == 1 ? 7 :
ac_dealpos8 == 1 ? 8 :
ac_dealpos9 == 1 ? 9 :
f$OpenPPL_ERROR_DealPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CurrentbetOfDealPosition1Chair##
(f$OpenPPL_DealPosition1Chair == 0) ? currentbet0 :
(f$OpenPPL_DealPosition1Chair == 1) ? currentbet1 :
(f$OpenPPL_DealPosition1Chair == 2) ? currentbet2 :
(f$OpenPPL_DealPosition1Chair == 3) ? currentbet3 :
(f$OpenPPL_DealPosition1Chair == 4) ? currentbet4 :
(f$OpenPPL_DealPosition1Chair == 5) ? currentbet5 :
(f$OpenPPL_DealPosition1Chair == 6) ? currentbet6 :
(f$OpenPPL_DealPosition1Chair == 7) ? currentbet7 :
(f$OpenPPL_DealPosition1Chair == 8) ? currentbet8 :
(f$OpenPPL_DealPosition1Chair == 9) ? currentbet9 :
f$OpenPPL_ERROR_DealPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_PlayersBehindDealPosition2ChairDidAct##
// Needed for dectection of missing small blind.
// First checking for folded players,
// because lots ofnewbies won't scrape-players correctly and mix everything up.
// This affects calculation of small blind, big blind,
// all positions and finally lots of other things...
(nopponentsfolded > 0) ? f$OpenPPL_True :
// Then check for active players with a zero bet
[(playersplayingbits & 0b0000000001) && (currentbet0 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000000010) && (currentbet1 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000000100) && (currentbet2 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000001000) && (currentbet3 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000010000) && (currentbet4 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000100000) && (currentbet5 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0001000000) && (currentbet6 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0010000000) && (currentbet7 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0100000000) && (currentbet8 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b1000000000) && (currentbet9 == 0)] ? f$OpenPPL_False :
f$OpenPPL_True

##f$OpenPPL_CalculateMissingSmallBlind##
// True, if SB is missing, false otherwise
// Should be called at our first action preflop only.
(f$OpenPPL_CurrentbetOfDealPosition1Chair == sblind) ? f$OpenPPL_False :
// If we are NOT the 2nd player to be dealt and see a bet 
// of 1 big blind left to the dealer, then it is the big blind (SB missing)
[(dealposition != 2) && (f$OpenPPL_CurrentbetOfDealPosition1Chair == bblind)] ? f$OpenPPL_True :
// Problematic is only the case when I am in "big blind" (2nd player to be dealt)
// * if bet of DealPosition1Chair > 1 bblind then SB raised and is present
// * if bet = 1 big blind and players "behind me" did act, then SB is present and limped
// * if bet = 1 big blind and players behind me still to act, then SB is missing
[(dealposition == 2) && (f$OpenPPL_CurrentbetOfDealPosition1Chair > bblind)] ? f$OpenPPL_False :
// Case 2 and 3: precondition: bet = 1 big blind
[(dealposition == 2) && f$OpenPPL_PlayersBehindDealPosition2ChairDidAct] ? f$OpenPPL_False :
[(dealposition == 2) && !f$OpenPPL_PlayersBehindDealPosition2ChairDidAct] ? f$OpenPPL_True :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_InitMissingSmallBlind##
[(betround == f$OpenPPL_ConstBetRoundPreflop) &&  (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 
me_st_MemMissingSmallBlind_f$OpenPPL_CalculateMissingSmallBlind :
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_MissingSmallBlind##
me_re_MemMissingSmallBlind

##f$OpenPPL_NoBettingOnFlop##
(nbetsround2 == 0)

##f$OpenPPL_NoBettingOnTurn##
(nbetsround3 == 0)

##f$OpenPPL_NoVillainBetOrRaisedOnFlop##
((raisbits2 & ~(1<<userchair)) == 0)

##f$OpenPPL_NoVillainBetOrRaisedOnTurn##
((raisbits3 & ~(1<<userchair)) == 0)

##f$OpenPPL_OpponentCalledOnFlop##
   (betround > f$OpenPPL_ConstBetRoundFlop)
&& ((didraisround2 + didswaground2) == 1)
&& !didchecround2
&& !didcallround2
&& f$OpenPPL_NoVillainBetOrRaisedOnFlop

##f$OpenPPL_OpponentCalledOnTurn##
   (betround > f$OpenPPL_ConstBetRoundTurn)
&& ((didraisround3 + didswaground3) == 1)
&& !didchecround3
&& !didcallround3
&& f$OpenPPL_NoVillainBetOrRaisedOnTurn

##f$OpenPPL_InitRaisesBeforeFlop##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MemRaisesBeforeFlop_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitRaisesOnFlop##
(betround == f$OpenPPL_ConstBetRoundFlop) ? me_st_MemRaisesOnFlop_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitRaisesOnTurn##
(betround == f$OpenPPL_ConstBetRoundTurn) ? me_st_MemRaisesOnTurn_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_NumberOfRaisesBeforeFlop##
(betround > f$OpenPPL_ConstBetRoundPreflop) ? me_re_MemRaisesBeforeFlop : 0

##f$OpenPPL_NumberOfRaisesOnFlop##
(betround > f$OpenPPL_ConstBetRoundFlop) ? me_re_MemRaisesOnFlop : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_NumberOfRaisesOnTurn##
(betround > f$OpenPPL_ConstBetRoundTurn) ? me_re_MemRaisesOnTurn : 0

##f$OpenPPL_Calculate_Raises##
(me_re_MemRaises + f$OpenPPL_RaisesSinceLastPlay)

##f$OpenPPL_InitRaises##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? me_st_MemRaises_f$OpenPPL_RaisesSinceLastPlay :
me_st_MemRaises_f$OpenPPL_Calculate_Raises

##f$OpenPPL_Raises##
// Raises may be -1 if there are additional blind-posters,
// because nopponentsraising is wrong in that case.
// But this has to be handled in OH 2.2.0.
// For the moment we add some sanity-checks.
[(me_re_MemRaises < 0) && (betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets == 1)] ? 
  (f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way + 0) :
[(me_re_MemRaises < 0) && (betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets > 1)]  ? 
  (f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way + 1) :
// Should not happen postflop, but a sanity-check can't harm.
[(me_re_MemRaises < 0) && (betround >= f$OpenPPL_ConstBetRoundFlop)] ? 
  (f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way + 0) :
// Otherwise: probably everything ok
me_re_MemRaises

##f$OpenPPL_RaisesBeforeFlop##
(f$OpenPPL_NumberOfRaisesBeforeFlop > 0)

##f$OpenPPL_RaisesOnFlop##
(f$OpenPPL_NumberOfRaisesOnFlop > 0)

##f$OpenPPL_RaisesOnTurn##
(f$OpenPPL_NumberOfRaisesOnTurn > 0)

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPostflop##
(nopponentsraising > 0) ? (nopponentsraising - 1) : 0

##f$OpenPPL_AntesPresent##
// First orbit preflop only,
// as this function tries to guess the antes from the bets.
   [(currentbet0 > 0) && (currentbet0 < sblind) && (balance0 > 0)]
|| [(currentbet1 > 0) && (currentbet1 < sblind) && (balance1 > 0)]
|| [(currentbet2 > 0) && (currentbet2 < sblind) && (balance2 > 0)]
|| [(currentbet3 > 0) && (currentbet3 < sblind) && (balance3 > 0)]
|| [(currentbet4 > 0) && (currentbet4 < sblind) && (balance4 > 0)]
|| [(currentbet5 > 0) && (currentbet5 < sblind) && (balance5 > 0)]
|| [(currentbet6 > 0) && (currentbet6 < sblind) && (balance6 > 0)]
|| [(currentbet7 > 0) && (currentbet7 < sblind) && (balance7 > 0)]
|| [(currentbet8 > 0) && (currentbet8 < sblind) && (balance8 > 0)]
|| [(currentbet9 > 0) && (currentbet9 < sblind) && (balance9 > 0)]

##f$OpenPPL_NumberOfBlindRaisersInThisGame##
[f$OpenPPL_AntesPresent ? 1 : 0] + [f$OpenPPL_MissingSmallBlind ? 1 : 2]

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInSmallBlind##
// If we are in small-blind, there is 1 opponent "blind-raising",
// And we also have to care about potential antes
[(nopponentsraising - 1) - (f$OpenPPL_AntesPresent ? 1 : 0)]

##f$OpenPPL_NumberOfOpponentsLimpingPreflop##
// First orbit preflop only
// Does not count the user
// Does not count the big-blind, who can't limp
  [(currentbet0 == bblind) && (userchair != 0) && (f$OpenPPL_BigBlindChair != 0) ? 1 : 0]
+ [(currentbet1 == bblind) && (userchair != 1) && (f$OpenPPL_BigBlindChair != 1) ? 1 : 0]
+ [(currentbet2 == bblind) && (userchair != 2) && (f$OpenPPL_BigBlindChair != 2) ? 1 : 0]
+ [(currentbet3 == bblind) && (userchair != 3) && (f$OpenPPL_BigBlindChair != 3) ? 1 : 0]
+ [(currentbet4 == bblind) && (userchair != 4) && (f$OpenPPL_BigBlindChair != 4) ? 1 : 0]
+ [(currentbet5 == bblind) && (userchair != 5) && (f$OpenPPL_BigBlindChair != 5) ? 1 : 0]
+ [(currentbet6 == bblind) && (userchair != 6) && (f$OpenPPL_BigBlindChair != 6) ? 1 : 0]
+ [(currentbet7 == bblind) && (userchair != 7) && (f$OpenPPL_BigBlindChair != 7) ? 1 : 0]
+ [(currentbet8 == bblind) && (userchair != 8) && (f$OpenPPL_BigBlindChair != 8) ? 1 : 0]
+ [(currentbet9 == bblind) && (userchair != 9) && (f$OpenPPL_BigBlindChair != 9) ? 1 : 0]

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInBigBlind##
// If we are in big-blind, there *was* 1 opponent "blind-raising",
// but he does no longer get counted, as he either did fold,
// did call or did truely raise.
// In big blind nopponentsraising does somewhat unexpectedly
// call an open-limper as blind-raiser, so we have to adapt for that case.
// Besides of that have to care about potential antes.
(f$OpenPPL_NumberOfOpponentsLimpingPreflop >= 1) ? 
  [nopponentsraising - 1 - (f$OpenPPL_AntesPresent ? 1 : 0)] :
  [nopponentsraising - (f$OpenPPL_AntesPresent ? 1 : 0)]

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopNotInTheBlinds##
// There are (usually) 2 blindraisers which should not get countet
// And we also have to care about potential antes
[(nopponentsraising - 2) - (f$OpenPPL_AntesPresent ? 1 : 0)]

##f$OpenPPL_RaisesBeforeOurFirstAction##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0) ? 0 :
(betround > f$OpenPPL_ConstBetRoundPreflop) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPostflop :
(dealposition == 1) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInSmallBlind :
(dealposition == 2) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInBigBlind :
f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopNotInTheBlinds

##f$OpenPPL_RaisesSinceLastPlayOnOurSecondAction##
// If we checked the first time the bettor sits behind us.
[didchec && (nopponentsraising > 0) ] ? (nopponentsraising - 1) :
[didchec && (nopponentsraising == 0)] ? 0 :
// Otherwise: either we were the first bettor
// or there was a bet and maybe raises in front of us,
// so all technical "raises" behind us are true raises
nopponentsraising

##f$OpenPPL_RaisesSinceLastPlayAfterOurSecondAction##
// Now all technical raises are true raises, no bettors possible
nopponentsraising

##f$OpenPPL_RaisesSinceLastPlay##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? f$OpenPPL_RaisesBeforeOurFirstAction :
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 1) ? f$OpenPPL_RaisesSinceLastPlayOnOurSecondAction :
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks >= 2) ? f$OpenPPL_RaisesSinceLastPlayAfterOurSecondAction :
f$OpenPPL_ERROR_BotsActionsOnThisRound_Out_Of_Range

//*****************************************************************************
//
// OpenPPL - Betsizes and StackSizes - supporting technical functions
//
//*****************************************************************************

##f$OpenPPL_Chair0StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance0 + currentbet0) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair1StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance1 + currentbet1) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair2StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance2 + currentbet2) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair3StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance3 + currentbet3) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair4StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance4 + currentbet4) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair5StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance5 + currentbet5) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair6StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance6 + currentbet6) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair7StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance7 + currentbet7) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair8StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance8 + currentbet8) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair9StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance9 + currentbet9) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_ButtonStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_ButtonChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_ButtonChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_ButtonChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_ButtonChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_ButtonChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_ButtonChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_ButtonChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_ButtonChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_ButtonChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_ButtonChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CutOffStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_CutOffChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_CutOffChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_CutOffChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_CutOffChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_CutOffChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_CutOffChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_CutOffChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_CutOffChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_CutOffChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_CutOffChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_CutOffChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition3StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition3Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition3Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition2StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition2Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition2Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition1StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition1Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition3StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition3Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition3Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition2StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition2Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition2Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition1StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition1Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_BigBlindStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_BigBlindChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_BigBlindChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_BigBlindChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_BigBlindChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_BigBlindChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_BigBlindChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_BigBlindChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_BigBlindChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_BigBlindChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_BigBlindChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_SmallBlindStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_SmallBlindChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_SmallBlindChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_SmallBlindChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_SmallBlindChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_SmallBlindChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_SmallBlindChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_SmallBlindChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_SmallBlindChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_SmallBlindChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_SmallBlindChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_BigBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(f$OpenPPL_BigBlindChair == 0) ? (currentbet0 / bet) :
(f$OpenPPL_BigBlindChair == 1) ? (currentbet1 / bet) :
(f$OpenPPL_BigBlindChair == 2) ? (currentbet2 / bet) :
(f$OpenPPL_BigBlindChair == 3) ? (currentbet3 / bet) :
(f$OpenPPL_BigBlindChair == 4) ? (currentbet4 / bet) :
(f$OpenPPL_BigBlindChair == 5) ? (currentbet5 / bet) :
(f$OpenPPL_BigBlindChair == 6) ? (currentbet6 / bet) :
(f$OpenPPL_BigBlindChair == 7) ? (currentbet7 / bet) :
(f$OpenPPL_BigBlindChair == 8) ? (currentbet8 / bet) :
(f$OpenPPL_BigBlindChair == 9) ? (currentbet9 / bet) :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_SmallBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(f$OpenPPL_SmallBlindChair == 0) ? (currentbet0 / bet) :
(f$OpenPPL_SmallBlindChair == 1) ? (currentbet1 / bet) :
(f$OpenPPL_SmallBlindChair == 2) ? (currentbet2 / bet) :
(f$OpenPPL_SmallBlindChair == 3) ? (currentbet3 / bet) :
(f$OpenPPL_SmallBlindChair == 4) ? (currentbet4 / bet) :
(f$OpenPPL_SmallBlindChair == 5) ? (currentbet5 / bet) :
(f$OpenPPL_SmallBlindChair == 6) ? (currentbet6 / bet) :
(f$OpenPPL_SmallBlindChair == 7) ? (currentbet7 / bet) :
(f$OpenPPL_SmallBlindChair == 8) ? (currentbet8 / bet) :
(f$OpenPPL_SmallBlindChair == 9) ? (currentbet9 / bet) :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MaximumPossibleBetsizeIndollars##
(balance + currentbet)

##f$OpenPPL_SidePotInDollars##
// Money in the side-pot, i.e. the money we don't compete for.
  [(currentbet0 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet0 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet1 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet1 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet2 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet2 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet3 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet3 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet4 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet4 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet5 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet5 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet6 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet6 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet7 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet7 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet8 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet8 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]
+ [(currentbet9 > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? currentbet9 - f$OpenPPL_MaximumPossibleBetsizeIndollars : 0]

##f$OpenPPL_SidePot##
// Money in the side-pot, i.e. the money we don't compete for (measured in big blinds)
(bblind > 0) ? (f$OpenPPL_SidePotInDollars / bblind) : 0

##f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStackSize

##f$OpenPPL_MaxStillToActStackSizeAfterButton##
f$OpenPPL_SmallBlindStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind

##f$OpenPPL_MaxStillToActStackSizeAfterCutOff##
f$OpenPPL_ButtonStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterButton ?
  f$OpenPPL_ButtonStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterButton

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterCutOff?
  f$OpenPPL_CutOffStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterCutOff

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2

##f$OpenPPL_MinStillToActStackSizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStackSize

##f$OpenPPL_MinStillToActStackSizeAfterButton##
f$OpenPPL_SmallBlindStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterSmallBlind

##f$OpenPPL_MinStillToActStackSizeAfterCutOff##
f$OpenPPL_ButtonStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterButton ?
  f$OpenPPL_ButtonStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterButton

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterCutOff ?
  f$OpenPPL_CutOffStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterCutOff

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2

##f$OpenPPL_InitMaxOpponentStackSize##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MaxOpponentStackSize_f$OpenPPL_MaxOpponentStackSizeCalculation : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitMinOpponentStackSize##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MinOpponentStackSize_f$OpenPPL_MinOpponentStackSizeCalculation :
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_MaxOpponentStackSizeCalculation##
(bblind <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(balance_rank0 == balance) ? (balance_rank1 / bblind) : (balance_rank0 / bblind)

##f$OpenPPL_MinOpponentStackSizeCalculation##
(bblind <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
[ 1 / bblind *
[ nplayersdealt == 10 ?
    (balance_rank9 == balance ? balance_rank8 : balance_rank9) :
  nplayersdealt == 9 ?
    (balance_rank8 == balance ? balance_rank7 : balance_rank8) :
  nplayersdealt == 8 ?
    (balance_rank7 == balance ? balance_rank6 : balance_rank7) :
  nplayersdealt == 7 ?
    (balance_rank6 == balance ? balance_rank5 : balance_rank6) :
  nplayersdealt == 6 ?
    (balance_rank5 == balance ? balance_rank4 : balance_rank5) :
  nplayersdealt == 5 ?
    (balance_rank4 == balance ? balance_rank3 : balance_rank4) :
  nplayersdealt == 4 ?
    (balance_rank3 == balance ? balance_rank2 : balance_rank3) :
  nplayersdealt == 3 ?
    (balance_rank2 == balance ? balance_rank1 : balance_rank2) :
  nplayersdealt == 2 ?
    (balance_rank1 == balance ? balance_rank0 : balance_rank1) :
f$OpenPPL_ERROR_No_Opponents_Detected__Check_Your_TableMap]]

##f$OpenPPL_OpponentsWithHigherStack##
// No need to tinker with memory symbols here,
// this logic is valid for all betting rounds.
  (((balance0 + currentbet0) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance1 + currentbet1) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance2 + currentbet2) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance3 + currentbet3) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance4 + currentbet4) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance5 + currentbet5) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance6 + currentbet6) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance7 + currentbet7) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance8 + currentbet8) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)
+ (((balance9 + currentbet9) > f$OpenPPL_MaximumPossibleBetsizeIndollars) ? 1: 0)

##f$OpenPPL_CalculateStartingStackSize##
// Precondition: first hand, preflop
(bblind > 0) ? ((currentbet + balance) / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_InitStartingStackSize##
((handsplayed == 0 || f$OpenPPL_StartingStackSize == 0) && (betround == f$OpenPPL_ConstBetRoundPreflop)) ?
  me_st_MemStartingStackSize_f$OpenPPL_CalculateStartingStackSize : f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_StartingStackSize##
me_re_MemStartingStackSize

//*****************************************************************************
//
// OpenPPL - Betsizes and StackSizes
//
//*****************************************************************************

##f$OpenPPL_DollarsToCall##
(call <= balance) ? call : balance

##f$OpenPPL_AmountToCall##
(bblind > 0) ? (f$OpenPPL_DollarsToCall / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_BetSize##
ncallbets

##f$OpenPPL_BigBlindSize##
bet1

##f$OpenPPL_MaxOpponentStackSize##
me_re_MaxOpponentStackSize

##f$OpenPPL_MaxStillToActStackSize##
userchair == f$OpenPPL_BigBlindChair        ? -1 :
userchair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind      :
userchair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MaxStillToActStackSizeAfterButton          :
userchair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MaxStillToActStackSizeAfterCutOff          :
userchair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3 :
userchair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2 :
userchair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1 :
userchair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3  :
userchair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2  :
userchair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition1  :
f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated

##f$OpenPPL_MinOpponentStackSize##
me_re_MinOpponentStackSize

##f$OpenPPL_MinStillToActStackSize##
userchair == f$OpenPPL_BigBlindChair        ? -1:
userchair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MinStillToActStackSizeAfterSmallBlind      :
userchair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MinStillToActStackSizeAfterButton          :
userchair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MinStillToActStackSizeAfterCutOff          :
userchair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3 :
userchair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2 :
userchair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1 :
userchair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3  :
userchair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2  :
userchair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition1  :
f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated

##f$OpenPPL_PotSize##
(bblind > 0) ? (pot / bblind) - f$OpenPPL_SidePot: f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_StackSize##
(bblind > 0) ? (balance / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_TotalInvested##
(betround == f$OpenPPL_ConstBetRoundPreflop && nbetsround  > 0) ? ncurrentbets :
(betround == f$OpenPPL_ConstBetRoundFlop    && nbetsround1 > 0) ? (nbetsround1 + ncurrentbets) :
(betround == f$OpenPPL_ConstBetRoundTurn    && nbetsround1 > 0) ? (nbetsround1 + nbetsround2 + ncurrentbets) :
(betround == f$OpenPPL_ConstBetRoundRiver   && nbetsround1 > 0) ? (nbetsround1 + nbetsround2 + nbetsround3 + ncurrentbets) :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_TotalInvestedThisRound##
ncurrentbets

//*****************************************************************************
//
// OpenPPL - Board Symbols
//
//*****************************************************************************

##f$OpenPPL_2ndBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo   :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_AcePresentOnFlop##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardAce) || (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardAce) || (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardAce)

##f$OpenPPL_AcePresentOnTurn##
f$OpenPPL_AcePresentOnFlop || (f$OpenPPL_TurnCard == f$OpenPPL_ConstCardAce)

##f$OpenPPL_BestBoardCard##
rankhicommon

##f$OpenPPL_DoubleGutShotOnBoard##
((rankbitscommon >> 8) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 7) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 6) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 5) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 4) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 3) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 2) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 1) &0x7f) == 0x5d ? 1 : 0

##f$OpenPPL_ExactlyOneStraightPossibleOnFlop##
   [f$OpenPPL_StraightPossibleOnFlop && f$OpenPPL_AcePresentOnFlop && ((f$OpenPPL_LowestFlopCard >= 10) || (f$OpenPPL_TopFlopCard <= 5))]
|| [f$OpenPPL_StraightPossibleOnFlop && (f$OpenPPL_TopFlopCard - f$OpenPPL_LowestFlopCard == 4)]

##f$OpenPPL_FlopCardPairedonTurn##
   f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard
|| f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard
|| f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard

##f$OpenPPL_FlushPossible##
(nsuitedcommon >= 3)

##f$OpenPPL_FlushOnBoard##
($$cs0 == $$cs1 && $$cs0 == $$cs2 && $$cs0 == $$cs3 && $$cs0 == $$cs4)

##f$OpenPPL_FlushPossibleOnFlop##
($$cs0 == $$cs1 && $$cs0 == $$cs2)

##f$OpenPPL_FlushPossibleOnTurn##
[  ($$cs0 == $$cs1 && $$cs0 == $$cs2)
|| ($$cs0 == $$cs1 && $$cs0 == $$cs3)
|| ($$cs0 == $$cs2 && $$cs0 == $$cs3)
|| ($$cs1 == $$cs2 && $$cs1 == $$cs3) ]

##f$OpenPPL_FourCardsToWheelOnBoard##
`(rankbitscommon & 0b0000000000111110) >= 4

##f$OpenPPL_FourOf1SuiteOnTurn##
(($$cs0 == $$cs1) && ($$cs2 == $$cs3) && ($$cs0 == $$cs3))

##f$OpenPPL_FullHouseOnBoard##
(pokervalcommon & fullhouse)

##f$OpenPPL_HighestRankOnFlop##
[(f$OpenPPL_FirstFlopCard >= f$OpenPPL_SecondFlopCard) && (f$OpenPPL_FirstFlopCard >= f$OpenPPL_ThirdFlopCard)] ? f$OpenPPL_FirstFlopCard :
[(f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard) && (f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard)] ? f$OpenPPL_SecondFlopCard :
[(f$OpenPPL_ThirdFlopCard >= f$OpenPPL_FirstFlopCard) && (f$OpenPPL_ThirdFlopCard >= f$OpenPPL_SecondFlopCard)] ? f$OpenPPL_ThirdFlopCard :
-1

##f$OpenPPL_KingPresentOnFlop##
   (f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardKing)
|| (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardKing)
|| (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardKing)

##f$OpenPPL_LowCardsOnBoard##
`f$OpenPPL_RankBitsCommonLowCardsOnly

##f$OpenPPL_MoreThanOneStraightPossibleOnFlop##
f$OpenPPL_StraightPossibleOnFlop && !f$OpenPPL_ExactlyOneStraightPossibleOnFlop

##f$OpenPPL_MoreThanOneStraightPossibleOnRiver##
(betround == f$OpenPPL_ConstBetRoundRiver && (f$OpenPPL_NumberOfStraightsPossibleOnRiver == 1))

##f$OpenPPL_RankBitsCommonRiver##
// As this can only be called at the river it is identical to rankbiscommon
rankbitscommon

##f$OpenPPL_NumberOfStraightsPossibleOnTurn##
  (`((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_NumberOfStraightsPossibleOnRiver##
  (`((f$OpenPPL_RankBitsCommonRiver >> 10) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  9) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  8) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  7) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  6) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  5) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  4) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  3) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  2) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_MoreThanOneOneCardStraightPossible##
f$OpenPPL_DoubleGutShotOnBoard || f$OpenPPL_OpenEndedStraightDrawOnBoard

##f$OpenPPL_MoreThanOneStraightPossibleOnTurn##
(f$OpenPPL_NumberOfStraightsPossibleOnTurn > 1)

##f$OpenPPL_NumberOfOneCardStraightsPossibleOnTurn##
  (f$OpenPPL_OneCardStraightPossibleOnTurn_AceHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_KingHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_QueenHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_JackHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_TenHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_NineHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_EightHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_SevenHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_SixHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_FiveHigh  ? 1 : 0)

##f$OpenPPL_OneCardFlushPossible##
(nsuitedcommon >= 4)

##f$OpenPPL_OneCardStraightFlushPossible##
(nstraightflushfillcommon <= 1)

##f$OpenPPL_StraightFlushOnBoard##
(nstraightflushfillcommon ==0)

##f$OpenPPL_OneCardStraightPossible##
(nstraightfillcommon <= 1)

##f$OpenPPL_OneCardStraightPossibleOnTurn_AceHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b111110000000000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_KingHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b011111000000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_QueenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b001111100000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_JackHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000111110000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_TenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000011111000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_NineHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000001111100000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_EightHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000111110000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_SevenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000011111000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_SixHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000001111100) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_FiveHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000000111110) >= 4)

##f$OpenPPL_OneCardStraightPossibleOnTurn##
(f$OpenPPL_NumberOfOneCardStraightsPossibleOnTurn >= 1)

##f$OpenPPL_Only1OneCardStraightPossible##
f$OpenPPL_OneCardStraightPossible && !f$OpenPPL_MoreThanOneOneCardStraightPossible

##f$OpenPPL_OpenEndedStraightDrawOnBoard##
(nstraightcommon == 4 && (`((rankbitscommon >> 10) & 0x1f) < 4) && (`((rankbitscommon >> 1) & 0x1f) < 4)) ? 1 : 0

##f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop##
[(f$OpenPPL_TopFlopCard - f$OpenPPL_2ndTopFlopCard <= 3) && (f$OpenPPL_TopFlopCard != f$OpenPPL_ConstCardAce)]
|| [(f$OpenPPL_2ndTopFlopCard - f$OpenPPL_LowestFlopCard <= 3) && (f$OpenPPL_LowestFlopCard >= f$OpenPPL_ConstCardTwo)]

##f$OpenPPL_IndividualOverCardsOnBoard##
// Works like OvercardsOnBoard, except that it counts cards only once
`[rankbitscommon >> (rankhiplayer + 1)]

##f$OpenPPL_OvercardsOnBoard##
  ((f$OpenPPL_FirstFlopCard  > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_SecondFlopCard > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_ThirdFlopCard  > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_TurnCard       > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_RiverCard      > rankhiplayer) ? 1 : 0)

##f$OpenPPL_PairOnBoard##
(nrankedcommon >= 2)

##f$OpenPPL_PairOnFlop##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard)

##f$OpenPPL_LowestFlopCard##
f$OpenPPL_FirstFlopCard  <= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  <=  f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_SecondFlopCard <= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard <=  f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_ThirdFlopCard  <= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  <=  f$OpenPPL_SecondFlopCard ? f$OpenPPL_ThirdFlopCard : 
-1

##f$OpenPPL_LowestFlopCardPairedOnTurn##
(f$OpenPPL_LowestFlopCard == f$OpenPPL_TurnCard) 

##f$OpenPPL_OnlyOneStraightPossible##
f$OpenPPL_StraightPossible
&& ![f$OpenPPL_MoreThanOneStraightPossibleOnFlop
  || f$OpenPPL_MoreThanOneStraightPossibleOnTurn
  || f$OpenPPL_MoreThanOneStraightPossibleOnRiver]

##f$OpenPPL_PairOnTurn##
   f$OpenPPL_PairOnFlop
|| f$OpenPPL_TopFlopCardPairedonTurn
|| f$OpenPPL_2ndTopFlopCardPairedOnTurn
|| f$OpenPPL_LowestFlopCardPairedOnTurn

##f$OpenPPL_QuadsOnBoard##
(nrankedcommon == 4)

##f$OpenPPL_QueenPresentOnFlop##
   (f$OpenPPL_FirstFlopCard==f$OpenPPL_ConstCardQueen)
|| (f$OpenPPL_SecondFlopCard==f$OpenPPL_ConstCardQueen)
|| (f$OpenPPL_ThirdFlopCard==f$OpenPPL_ConstCardQueen)

##f$OpenPPL_RankBitsCommonLowCardsOnly##
// Bits 8..ace(low), last bit is unused
(rankbitscommon & 0b111111110)

##f$OpenPPL_RiverCardisOvercardToBoard##
[  f$OpenPPL_RiverCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_ThirdFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_TurnCard ]

##f$OpenPPL_2ndTopFlopCard##
f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_SecondFlopCard <= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_ThirdFlopCard  :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_FirstFlopCard  :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_FirstFlopCard  <= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_ThirdFlopCard  :
f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard ? f$OpenPPL_FirstFlopCard  :
f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  <= f$OpenPPL_SecondFlopCard ? f$OpenPPL_SecondFlopCard :
// Otherwise: there is no 2ndTopFlopCard, because all ranks are even
-1

// Shanky is a bit inconsistent with the naming
// So we provide both 2ndTopFlopCardPairedOnRiver and SecondTopFlopCardPairedOnRiver,
// same for turn. "SecondTopFlopCardPairedOnRiver" is the "standard" here.

##f$OpenPPL_SecondTopFlopCardPairedOnRiver##
f$OpenPPL_2ndTopFlopCardPairedOnRiver

##f$OpenPPL_SecondTopFlopCardPairedOnTurn##
f$OpenPPL_2ndTopFlopCardPairedOnTurn

##f$OpenPPL_2ndTopFlopCardPairedOnRiver##
(f$OpenPPL_2ndTopFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_2ndTopFlopCardPairedOnTurn##
(f$OpenPPL_2ndTopFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_srankbitshero##
 (($$ps0==tsuit ? (f$OpenPPL_RankOfFirstHoleCard!=f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_RankOfFirstHoleCard : 0b100000000000010) : 0)
| ($$ps1==tsuit ? (f$OpenPPL_RankOfSecondHoleCard!=f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_RankOfSecondHoleCard : 0b100000000000010) : 0))

##f$OpenPPL_srankavailable##
// Available suited cards for other players,
// possibly contributing to a flush or straight flush
~(srankbitscommon | f$OpenPPL_srankbitshero)

##f$OpenPPL_StraightFlushPossibleByOthers##
(nstraightflushfillcommon <= 2)

##f$OpenPPL_SuitsOnBoard##
(betround == f$OpenPPL_ConstBetRoundFlop)  ? f$OpenPPL_SuitsOnFlop :
(betround == f$OpenPPL_ConstBetRoundTurn)  ? f$OpenPPL_SuitsOnTurn :
(betround == f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_SuitsOnRiver :
f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round

##f$OpenPPL_SuitsOnFlop##
(betround < f$OpenPPL_ConstBetRoundFlop) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ ($$cs0 == $$cs1 && $$cs1 == $$cs2) ? 1 :
 (($$cs0 == $$cs1 && $$cs1 != $$cs2) || ($$cs0 == $$cs2 && $$cs0 != $$cs1) || ($$cs0 != $$cs1 && $$cs1 == $$cs2)) ? 2 :
  ($$cs0 != $$cs1 && $$cs1 != $$cs2 && $$cs0 != $$cs2) ? 3 : f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY]

##f$OpenPPL_SuitsOnRiver##
(betround < f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ f$OpenPPL_SuitsOnTurn
  + ((($$cs4 != $$cs0) && ($$cs4 != $$cs1) && ($$cs4 != $$cs2) && ($$cs4 != $$cs3)) ? 1 : 0)]
  
##f$OpenPPL_SuitsOnTurn##
(betround < f$OpenPPL_ConstBetRoundTurn) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ f$OpenPPL_SuitsOnFlop 
  + ((($$cs3 != $$cs0) && ($$cs3 != $$cs1) && ($$cs3 != $$cs2)) ? 1 : 0)]
  
##f$OpenPPL_StraightFlushPossible##
`((srankbitscommon >> 10) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 9) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 8) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 7) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 6) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 5) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 4) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 3) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 2) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 1) & 0x1f) >= 3 ? 1 : 0

##f$OpenPPL_StraightOnBoard##
(nstraightcommon >= 5)

##f$OpenPPL_StraightPossible##
(nstraightfillcommon <= 2)

##f$OpenPPL_RankBitsCommOnFlop##
  (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_FirstFlopCard : 0b100000000000010)
| (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_SecondFlopCard : 0b100000000000010)
| (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_ThirdFlopCard : 0b100000000000010)

##f$OpenPPL_RankBitsCommonTurn##
  (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_FirstFlopCard : 0b100000000000010)
| (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_SecondFlopCard : 0b100000000000010)
| (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_ThirdFlopCard : 0b100000000000010)
| (f$OpenPPL_TurnCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_TurnCard : 0b100000000000010)

##f$OpenPPL_StraightPossibleOnFlop##
(`((f$OpenPPL_RankBitsCommOnFlop >> 10) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  9) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  8) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  7) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  6) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  5) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  4) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  3) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  2) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommOnFlop >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_StraightPossibleOnTurn##
(`((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3) ? 1 :
(`((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_ThreeCardStraightOnBoard##
nstraightcommon >= 3

##f$OpenPPL_TopFlopCard##
f$OpenPPL_FirstFlopCard >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard >= f$OpenPPL_ThirdFlopCard ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_ThirdFlopCard >= f$OpenPPL_FirstFlopCard && f$OpenPPL_ThirdFlopCard >= f$OpenPPL_SecondFlopCard ? f$OpenPPL_ThirdFlopCard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_TopFlopCardPairedonRiver##
(f$OpenPPL_TopFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_TopFlopCardPairedonTurn##
(f$OpenPPL_TopFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_TripsOnBoard##
(nrankedcommon >= 3)

##f$OpenPPL_TripsOnBoardOnTurn##
   (f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard && f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard)
|| (f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard && f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard)
|| (f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard && f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard)
|| (f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard && f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_TurnCardisOvercardToBoard##
[  f$OpenPPL_TurnCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_TurnCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_TurnCard > f$OpenPPL_ThirdFlopCard ]

##f$OpenPPL_TurnCardPaired##
(f$OpenPPL_TurnCard == f$OpenPPL_RiverCard)

##f$OpenPPL_TwoOfOneSuitPresentOnFlop##
(($$cs0 == $$cs1) || ($$cs0 == $$cs2) || ($$cs1 == $$cs2))

##f$OpenPPL_TwoPairOnBoard##
(pokervalcommon & twopair) || (pokervalcommon & fullhouse)

##f$OpenPPL_UncoordinatedFlop##
!f$OpenPPL_PairOnFlop
// No possible flush: guaranteed by the next condition...
// three different suits
&& (f$OpenPPL_SuitsOnFlop == 3)
&& !f$OpenPPL_StraightPossibleOnFlop
&& !f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop

##f$OpenPPL_WheelPossible##
(`(rankbitscommon & 0b111110) >= 3)

//*****************************************************************************
//
// OpenPPL - Hand(Strength) Symbols
//
//*****************************************************************************

##f$OpenPPL_HadOverPairOnFlop##
[  ispair
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_ThirdFlopCard ]

##f$OpenPPL_HadPairOnFlop##
   ispair 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_ThirdFlopCard  
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard  
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_ThirdFlopCard

##f$OpenPPL_HadPairOnTurn##
   f$OpenPPL_HadPairOnFlop 
|| f$OpenPPL_FlopCardPairedonTurn 
|| f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_TurnCard

##f$OpenPPL_HadTopPairOnFlop##
[(f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_HighestRankOnFlop) || (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_HighestRankOnFlop)]

##f$OpenPPL_HighestRankOnTurn##
((f$OpenPPL_TurnCard > f$OpenPPL_HighestRankOnFlop) ? f$OpenPPL_TurnCard : f$OpenPPL_HighestRankOnFlop)

##f$OpenPPL_HadTopPairOnTurn##
[ f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_HighestRankOnTurn || f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_HighestRankOnTurn ]

##f$OpenPPL_HadTwoPairOnFlop##
   (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_ThirdFlopCard)
&& (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_ThirdFlopCard)
&& !ispair

##f$OpenPPL_Have2ndBestKicker##
(mh_kickerbetter == 1)

##f$OpenPPL_Have2ndBestKickerOrBetter##
f$OpenPPL_Have2ndBestKicker || f$OpenPPL_HaveBestKickerOrBetter

##f$OpenPPL_Have2ndBestOverPair##
   ($KK
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardKing)

##f$OpenPPL_Have2ndBestOverPairOrBetter##
(f$OpenPPL_Have2ndBestOverPair || f$OpenPPL_HaveBestOverPairOrBetter)

##f$OpenPPL_Have2ndNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)]

##f$OpenPPL_Have2ndNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsAceHigh##
`(rankbitscommon & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing  :
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsKingHigh##
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsQueenHigh##
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsJackHigh##
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsTenHigh##
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsNineHigh##
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsEightHigh##
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSevenHigh##
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix  :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSixHigh##
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOfBestPossibleStraight##
`(rankbitscommon & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce   :
`(rankbitscommon & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing  :
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
-1

##f$OpenPPL_HighCardOf2ndBestPossibleStraight##
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardAce)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsAceHigh   :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardKing)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsKingHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardQueen) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsQueenHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardJack)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsJackHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardTen)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsTenHigh   :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardNine)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsNineHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardEight) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsEightHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardSeven) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSevenHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardSix)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSixHigh   :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOfOurStraight##
// Precondition: we have a straight
`(rankbits & 0b111110000000000) == 5 ? f$OpenPPL_ConstCardAce   :
`(rankbits & 0b011111000000000) == 5 ? f$OpenPPL_ConstCardKing  :
`(rankbits & 0b001111100000000) == 5 ? f$OpenPPL_ConstCardQueen :
`(rankbits & 0b000111110000000) == 5 ? f$OpenPPL_ConstCardJack  :
`(rankbits & 0b000011111000000) == 5 ? f$OpenPPL_ConstCardTen   :
`(rankbits & 0b000001111100000) == 5 ? f$OpenPPL_ConstCardNine  :
`(rankbits & 0b000000111110000) == 5 ? f$OpenPPL_ConstCardEight :
`(rankbits & 0b000000011111000) == 5 ? f$OpenPPL_ConstCardSeven :
`(rankbits & 0b000000001111100) == 5 ? f$OpenPPL_ConstCardSix   :
`(rankbits & 0b000000000111110) == 5 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__Do_Not_Call_This_Function

##f$OpenPPL_Have2ndNutStraight##
f$OpenPPL_HaveStraight
&& (f$OpenPPL_HighCardOf2ndBestPossibleStraight == f$OpenPPL_HighCardOfOurStraight)

##f$OpenPPL_Have2ndOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_BestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_Have2ndTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_Have2ndTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_TopBitOfRankBitsCommon##
(1 << rankhicommon)

##f$OpenPPL_2ndTopBitOfRankBitsCommon##
(1 << f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_3rdTopBitOfRankBitsCommon##
(1 << f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_4thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_5thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_RankBitsCommonWithoutTopBit##
rankbitscommon & ~f$OpenPPL_TopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopTwoBits##
f$OpenPPL_RankBitsCommonWithoutTopBit & ~f$OpenPPL_2ndTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopThreeBits##
f$OpenPPL_RankBitsCommonWithoutTopTwoBits & ~f$OpenPPL_3rdTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopFourBits##
f$OpenPPL_RankBitsCommonWithoutTopThreeBits & ~f$OpenPPL_4thTopBitOfRankBitsCommon

##f$OpenPPL_Have3rdBestKicker##
(mh_kickerbetter == 2)

##f$OpenPPL_Have3rdBestKickerOrBetter##
f$OpenPPL_Have3rdBestKicker || f$OpenPPL_Have2ndBestKickerOrBetter

##f$OpenPPL_Have3rdBestOverPair##
   $QQ
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardQueen

##f$OpenPPL_3rdBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have3rdBestOverPairOrBetter##
(f$OpenPPL_Have3rdBestOverPair ||  f$OpenPPL_Have2ndBestOverPairOrBetter)

##f$OpenPPL_Have3rdNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)]

##f$OpenPPL_Have3rdNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_Have3rdOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_2ndBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_Have3rdTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_3rdBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_Have3rdTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_Have4thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)]

##f$OpenPPL_Have4thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)

##f$OpenPPL_4thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have4thOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_3rdBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_Have4thTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_4thBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_Have4thTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_Have5thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)]

##f$OpenPPL_Have5thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)

##f$OpenPPL_5thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have5thOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_4thBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_HaveAnyKindOfInsideStraightDraw##
// Note: This does also count straightdraws at the board,
// where we don't contribute any card. Special care should be taken
// in f$OpenPPL_HaveInsideStraightDraw
(nstraightfill <= 1)

##f$OpenPPL_HaveBackdoorFlushDrawContributingTwoCards##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& ($$ps0 == tsuit)
&& ($$ps1 == tsuit)

##f$OpenPPL_HaveBackdoorNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveBackDoor2ndNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HaveBackDoor3rdNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_HaveBackdoorFlushDraw##
   f$OpenPPL_HaveBackdoorFlushDrawContributingTwoCards
|| f$OpenPPL_HaveBackdoorNutFlushDraw
|| f$OpenPPL_HaveBackDoor2ndNutFlushDraw

##f$OpenPPL_HaveBestKicker##
(mh_kickerbetter == 0)

##f$OpenPPL_HaveBestKickerOrBetter##
(f$OpenPPL_HaveBestKicker || f$OpenPPL_HavePair  || f$OpenPPL_HaveOverPairOrBetter)

##f$OpenPPL_HaveBestOverPair##
   ($AA
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardAce)

##f$OpenPPL_HaveBestOverPairOrBetter##
  (f$OpenPPL_HaveBestOverPair
|| f$OpenPPL_HaveTwoPair
|| f$OpenPPL_HaveSet
|| f$OpenPPL_HaveTrips
|| f$OpenPPL_HaveStraight
|| f$OpenPPL_HaveFlush
|| f$OpenPPL_HaveFullHouse
|| f$OpenPPL_HaveQuads
|| f$OpenPPL_HaveStraightFlush)

##f$OpenPPL_LowestBitOfRankBitsCommon##
(1<<ranklocommon)

##f$OpenPPL_RankBitsCommonWithoutLowestBit##
// we negate lowest-bit and then do an and-operation
rankbitscommon & ~f$OpenPPL_LowestBitOfRankBitsCommon

##f$OpenPPL_LowestBoardCard##
ranklocommon

##f$OpenPPL_2ndLowestBoardCard##
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000000100) != 1 ? f$OpenPPL_ConstCardTwo   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000001000) != 1 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000010000) != 1 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000100000) != 1 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000001000000) != 1 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000010000000) != 1 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000100000000) != 1 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000001000000000) != 1 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000010000000000) != 1 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000100000000000) != 1 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b001000000000000) != 1 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b010000000000000) != 1 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b100000000000000) != 1 ? f$OpenPPL_ConstCardAce   :
-1

##f$OpenPPL_HaveBottomPair##
[ isonepair && (rankhiplayer == ranklocommon || rankloplayer == ranklocommon) ]

##f$OpenPPL_HaveBottomSet##
((nrankedcommon == 1) && ispair && isthreeofakind && (rankhiplayer == ranklocommon))

##f$OpenPPL_HaveBottomTrips##
($$pr0 == f$OpenPPL_RankOfBottomPairOnBoard || $$pr1 == f$OpenPPL_RankOfBottomPairOnBoard)

##f$OpenPPL_HaveBottomTwoPair##
   (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_LowestBoardCard && f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndLowestBoardCard)
|| (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndLowestBoardCard && f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_LowestBoardCard)

##f$OpenPPL_HaveDoubleGutshotDraw##
   `((rankbits >> 1) & 0b1011101) == 5  // A_345_7
|| `((rankbits >> 2) & 0b1011101) == 5  // 2_456_8
|| `((rankbits >> 3) & 0b1011101) == 5  // 3_567_9
|| `((rankbits >> 4) & 0b1011101) == 5  // 4_678_T
|| `((rankbits >> 5) & 0b1011101) == 5  // 5_789_J
|| `((rankbits >> 6) & 0b1011101) == 5  // 6_89T_Q
|| `((rankbits >> 7) & 0b1011101) == 5  // 8_9TJ_K
|| `((rankbits >> 8) & 0b1011101) == 5  // 9_TJQ_A
|| `((rankbits >> 1) & 0b11011011) == 6 // A2_45_78
|| `((rankbits >> 2) & 0b11011011) == 6 // 23_56_89
|| `((rankbits >> 3) & 0b11011011) == 6 // 34_67_9T
|| `((rankbits >> 4) & 0b11011011) == 6 // 45_78_TJ
|| `((rankbits >> 5) & 0b11011011) == 6 // 56_89_JQ
|| `((rankbits >> 6) & 0b11011011) == 6 // 67_9T_QK
|| `((rankbits >> 7) & 0b11011011) == 6 // 78_TJ_KA

##f$OpenPPL_HaveFlush##
(nsuited >= 5)

##f$OpenPPL_HaveFlushDraw##
(nsuited >= 4)

##f$OpenPPL_HaveFullHouse##
isfullhouse || f$OpenPPL_HaveQuads

##f$OpenPPL_HaveNothing##
!f$OpenPPL_HavePair && !(f$OpenPPL_Overcards == 2) && !f$OpenPPL_HaveBestOverPairOrBetter && !f$OpenPPL_HaveBackdoorFlushDraw && !f$OpenPPL_HaveStraightDraw && !f$OpenPPL_HaveInsideStraightDraw && !f$OpenPPL_HaveFlushDraw
// && !f$OpenPPL_HaveBackdoorStraightDraw


##f$OpenPPL_HaveNutFlush##
    f$OpenPPL_HaveNutStraightFlush
|| [f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]

##f$OpenPPL_HaveNutFlushCard##
(f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveNutFlushDraw##
    f$OpenPPL_HaveNutStraightFlush
|| [f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]


##f$OpenPPL_HaveNutStraight##
[ishistraight || f$OpenPPL_HaveNutStraightFlush]

##f$OpenPPL_RankBitsCommonWithAdditionalAce##
rankbitscommon | 0b100000000000010

##f$OpenPPL_RankBitsCommonWithAdditionalKing##
rankbitscommon | 0b010000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalQueen##
rankbitscommon | 0b001000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalJack##
rankbitscommon | 0b000100000000000

##f$OpenPPL_RankBitsCommonWithAdditionalTen##
rankbitscommon | 0b000010000000000

##f$OpenPPL_RankBitsCommonWithAdditionalNine##
rankbitscommon | 0b000001000000000

##f$OpenPPL_RankBitsCommonWithAdditionalEight##
rankbitscommon | 0b000000100000000

##f$OpenPPL_RankBitsCommonWithAdditionalSeven##
rankbitscommon | 0b000000010000000

##f$OpenPPL_RankBitsCommonWithAdditionalSix##
rankbitscommon | 0b000000001000000

##f$OpenPPL_RankBitsCommonWithAdditionalFive##
rankbitscommon | 0b000000000100000

##f$OpenPPL_RankBitsCommonWithAdditionalFour##
rankbitscommon | 0b000000000010000

##f$OpenPPL_RankBitsCommonWithAdditionalThree##
rankbitscommon | 0b000000000001000

##f$OpenPPL_RankBitsCommonWithAdditionalTwo##
rankbitscommon | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
`(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_RankBitsWithAdditionalAce##
rankbits | 0b100000000000010

##f$OpenPPL_RankBitsWithAdditionalKing##
rankbits | 0b010000000000000

##f$OpenPPL_RankBitsWithAdditionalQueen##
rankbits | 0b001000000000000

##f$OpenPPL_RankBitsWithAdditionalJack##
rankbits | 0b000100000000000

##f$OpenPPL_RankBitsWithAdditionalTen##
rankbits | 0b000010000000000

##f$OpenPPL_RankBitsWithAdditionalNine##
rankbits | 0b000001000000000

##f$OpenPPL_RankBitsWithAdditionalEight##
rankbits | 0b000000100000000

##f$OpenPPL_RankBitsWithAdditionalSeven##
rankbits | 0b000000010000000

##f$OpenPPL_RankBitsWithAdditionalSix##
rankbits | 0b000000001000000

##f$OpenPPL_RankBitsWithAdditionalFive##
rankbits | 0b000000000100000

##f$OpenPPL_RankBitsWithAdditionalFour##
rankbits | 0b000000000010000

##f$OpenPPL_RankBitsWithAdditionalThree##
rankbits | 0b000000000001000

##f$OpenPPL_RankBitsWithAdditionalTwo##
rankbits | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalAce & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
`(f$OpenPPL_RankBitsWithAdditionalAce & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalKing & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalKing & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalTwo & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalTwo & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard)

##f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight##
  f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard

##f$OpenPPL_HaveNutStraightDraw##
(nsuitedcommon < 2) && (f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight >= 2)

##f$OpenPPL_HaveInsideNutStraightDraw##
(f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight >= 1)

##f$OpenPPL_HaveInsideStraightDraw##
f$OpenPPL_HaveAnyKindOfInsideStraightDraw

##f$OpenPPL_HaveNuts##
(nhandshi == 0)

##f$OpenPPL_HaveNutStraightFlush##
isstraightflush && (nhandshi == 0)

##f$OpenPPL_HaveOpenEndedStraightDraw##
f$OpenPPL_HaveStraight
|| ((rankbits >> 0) & 0b111100) == 0b111100 // 5432
|| ((rankbits >> 1) & 0b111100) == 0b111100 // 6543
|| ((rankbits >> 2) & 0b111100) == 0b111100 // 7654
|| ((rankbits >> 3) & 0b111100) == 0b111100 // 8765
|| ((rankbits >> 4) & 0b111100) == 0b111100 // 9876
|| ((rankbits >> 5) & 0b111100) == 0b111100 // T987
|| ((rankbits >> 6) & 0b111100) == 0b111100 // JT98
|| ((rankbits >> 7) & 0b111100) == 0b111100 // QJT9
|| ((rankbits >> 8) & 0b111100) == 0b111100 // KQJT

##f$OpenPPL_HaveQuads##
[ isfourofakind && (nrankedcommon < 4) ]

##f$OpenPPL_HaveOverPair##
ispair && (rankhiplayer > rankhicommon)

##f$OpenPPL_HaveOverPairOrBetter##
f$OpenPPL_HaveOverPair || f$OpenPPL_HaveBestOverPairOrBetter

##f$OpenPPL_HavePair##
[  f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_RankOfSecondHoleCard
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_ThirdFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_RiverCard
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_ThirdFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_RiverCard ]

##f$OpenPPL_HavePocketPair##
ispair

##f$OpenPPL_HaveRunnerRunnerFlushAtRiver##
(betround == f$OpenPPL_ConstBetRoundRiver && f$OpenPPL_HaveFlush && nsuitedcommon==3 && f$OpenPPL_SuitsOnFlop!=3 && $$cs3==$$cs4) ? 1:0

##f$OpenPPL_HaveSet##
[  ispair
&& (  (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_FirstFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_SecondFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_ThirdFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_TurnCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_RiverCard)) ]

##f$OpenPPL_HaveTopTrips##
(!ispair && ($$pr0 == f$OpenPPL_RankOfTopPairOnBoard || $$pr1 == f$OpenPPL_RankOfTopPairOnBoard))

##f$OpenPPL_HaveTrips##
!ispair
&&   [(pokerval & threeofakind) && !(pokervalcommon & threeofakind)
  || ((pokerval & fullhouse)    && `(pcbits & 0b11100) == 1)
  ||  (pokerval & fourofakind)  && !(pokervalcommon & fourofakind)]

##f$OpenPPL_HaveStraight##
(nstraightfill == 0)

##f$OpenPPL_HaveStraightDraw##
   f$OpenPPL_HaveOpenEndedStraightDraw 
|| f$OpenPPL_HaveDoubleGutshotDraw

##f$OpenPPL_HaveStraightFlush##
(isstraightflush || isroyalflush)

##f$OpenPPL_CommonCard0Paired##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard1Paired##
(f$OpenPPL_SecondFlopCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard2Paired##
(f$OpenPPL_ThirdFlopCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard3Paired##
(f$OpenPPL_TurnCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard4Paired##
(f$OpenPPL_RiverCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_RiverCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RiverCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_RankBitsCommonWithoutCommonRank0Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank1Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank2Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank3Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_TurnCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_TurnCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank4Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_RiverCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_RiverCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutPairs##
  f$OpenPPL_RankBitsCommonWithoutCommonRank0Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank1Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank2Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank3Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank4Pair

##f$OpenPPL_HighestUnpairedBoardCard##
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardAce)   & 1 ? f$OpenPPL_ConstCardAce   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardKing)  & 1 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardQueen) & 1 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardJack)  & 1 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardTen)   & 1 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardNine)  & 1 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardEight) & 1 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardSeven) & 1 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardSix)   & 1 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardFive)  & 1 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardFour)  & 1 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardThree) & 1 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardTwo)   & 1 ? f$OpenPPL_ConstCardTwo   : 0

##f$OpenPPL_HaveTopNonBoardPairedPair##
   [(betround >= f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_HighestUnpairedBoardCard)]
|| [(betround >= f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_HighestUnpairedBoardCard)]

##f$OpenPPL_HaveTopPair##
[ f$OpenPPL_RankOfFirstHoleCard==rankhicommon || f$OpenPPL_RankOfSecondHoleCard==rankhicommon ]

##f$OpenPPL_HaveTopSet##
(ispair && (rankhiplayer == rankhicommon))

##f$OpenPPL_HaveTopTwoPair##
(f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndTopPair)

##f$OpenPPL_RankbitsCommonWithoutAceLow##
// Don't count ace twice in HaveTwoPair
// bit0 is unused
// bit 2 is ace low
//                 AKQJT98765432-- 
rankbitscommon & 0b111111111111100

##f$OpenPPL_HaveTwoPair##
`(rankbitsplayer & f$OpenPPL_RankbitsCommonWithoutAceLow) == 2

##f$OpenPPL_HaveUnderPair##
[ ispair && rankhiplayer<ranklocommon ]

##f$OpenPPL_HaveUnderStraight##
f$OpenPPL_HaveStraight
&& (pcbits == 0b00011 || pcbits == 0b00001)

##f$OpenPPL_NumberOfUnknownSuitedOvercards##
// Suited unknown overcards to holecards,
// e.g. on Board Ah Th, in Hand Jh 9h => 2 suited overcards: Kh Qh.
`((~srankbits & 0x7fff) >> srankhiplayer)

##f$OpenPPL_BoardKicker_FourOfAKindOnBoard##
(betround == f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_HighestUnpairedBoardCard : 2

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WeHaveOverPairToPair##
// 3 is the best strength possible, because two quads are always possible
3
// 1 OverPair for each overcard = 1 higher full house
+ (f$OpenPPL_ConstCardAce - rankhiplayer)
// Higher set possible with pair onboard?
+ [(f$OpenPPL_RankOfTopPairOnBoard > rankhiplayer) ? 1 : 0 ]
// If the cards on board are higher than our pair,
// we have to subtract them again, as otherwise we count them twice,
// as set/quads and OverPair.
+ [(f$OpenPPL_RankOfTopPairOnBoard > rankhiplayer) ? -1 : 0 ]
+ [(f$OpenPPL_RankOfSetOnBoard  > rankhiplayer) ? -1 : 0 ]

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePlayTheBoard##
// 3 is the best strength possible, because two quads are always possible
3
// 1 OverPair for each overcard = 1 higher full house
+ (f$OpenPPL_ConstCardAce - rankhiplayer)
// +1 if the pair is higher as the set (higher set possible)
// -1 if the pair is higher as the set (counted twice as OverPair / set)
// but these cases neutralize each other

##f$OpenPPL_RankOfPairOfFullHouse##
// The last 20 bits of pokerval look like XXXX XXXX XXXX YYYY YYYY (see docu)
// XXXX are the rank of the set
// YYYY are the rank of the pair
(pokerval & 0b1111)

##f$OpenPPL_RankOfSetOfFullHouse##
// The last 20 bits of pokerval look like XXXX XXXX XXXX YYYY YYYY (see docu)
// XXXX are the rank of the set
// YYYY are the rank of the pair
((pokerval >> 12) & 0b1111)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitThePairAndAnotherCard##
// 1 for each overcard on baord to RankOfTopPairOnBoard, which make better 3oaks possible = better FH
  [[(rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardAce  )] ? 1 : 0]
+ [[(rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardKing )] ? 1 : 0]
+ [[(rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardQueen)] ? 1 : 0]
+ [[(rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardJack )] ? 1 : 0]
+ [[(rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTen  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardNine )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardEight)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSeven)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSix  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFive )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFour )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardThree)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTwo  )] ? 1 : 0]
// 1 for each board-card that is not the pair on board and higher than the other pair (board-user),
// as there ar higher FHs possible (same set, higher pair)
+ [[(rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardAce  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardAce  )] ? 1 : 0]
+ [[(rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardKing ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardKing )] ? 1 : 0]
+ [[(rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardQueen) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardQueen)] ? 1 : 0]
+ [[(rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardJack ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardJack )] ? 1 : 0]
+ [[(rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardTen  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardTen  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardNine ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardNine )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardEight) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardEight)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardSeven) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardSeven)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardSix  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardSix  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardFive ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardFive )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardFour ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardFour )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardThree) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardThree)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardTwo  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardTwo  )] ? 1 : 0]
// + 1 for our hand
+ 1

##f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse##
  (rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardAce  )
+ (rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardKing )
+ (rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardQueen)
+ (rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardJack )
+ (rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTen  )
+ (rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardNine )
+ (rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardEight)
+ (rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSeven)
+ (rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSix  )
+ (rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFive )
+ (rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFour )
+ (rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardThree)
+ (rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTwo  )

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomSet##
// 3 is the lowest nut rank possible, becuase theres still a quad and a FH with the higher pair possible.
// Theres always a higher pair on board, so if there are two higher ranked cards in common cards,
// theres also a higher set possible with a pocket pair and the remaining single card on board.
3 + [(f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse >= 2) ? 1 : 0]

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopSet##
// 2 is the lowest nut rank possible, becuase theres still a quad possible.
// Theres might be a higher card on board, so if there is a higher ranked card in common cards then our set rank,
// theres also a higher set possible with a pocket pair and the remaining single card on board.
2 + [(f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse >= 1) ? 1 : 0]

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomQuads##
2

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopQuads##
1

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WePairBothPairs##
// Theres might be a higher card on board,
// so if there is a higher ranked card in common cards then our pair ranks,
// there are also a higher pair and a higher set possible.
1
+ [((pokervalcommon & 0b1111) > f$OpenPPL_RankOfPairOfFullHouse) ? 1 : 0]
+ [((pokervalcommon & 0b1111) > f$OpenPPL_RankOfSetOfFullHouse ) ? 1 : 0]

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairBothBoardCards##
1

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighSetOnBoard##
1

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowSetOnBoard##
2

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighPairOnBoard##
2

##f$OpenPPL_RankOfTopPairOnBoard##
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) ] ? f$OpenPPL_ConstCardAce :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) ] ? f$OpenPPL_ConstCardKing :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) ] ? f$OpenPPL_ConstCardQueen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) ] ? f$OpenPPL_ConstCardJack :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) ] ? f$OpenPPL_ConstCardTen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) ] ? f$OpenPPL_ConstCardNine :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) ] ? f$OpenPPL_ConstCardEight :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) ] ? f$OpenPPL_ConstCardSeven :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) ] ? f$OpenPPL_ConstCardSix :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) ] ? f$OpenPPL_ConstCardFive :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) ] ? f$OpenPPL_ConstCardFour :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) ] ? f$OpenPPL_ConstCardThree :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) ] ? f$OpenPPL_ConstCardTwo :
f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board

##f$OpenPPL_RankOfBottomPairOnBoard##
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) ] ? f$OpenPPL_ConstCardTwo :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) ] ? f$OpenPPL_ConstCardThree :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) ] ? f$OpenPPL_ConstCardFour :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) ] ? f$OpenPPL_ConstCardFive :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) ] ? f$OpenPPL_ConstCardSix :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) ] ? f$OpenPPL_ConstCardSeven :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) ] ? f$OpenPPL_ConstCardEight :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) ] ? f$OpenPPL_ConstCardNine :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) ] ? f$OpenPPL_ConstCardTen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) ] ? f$OpenPPL_ConstCardJack :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) ] ? f$OpenPPL_ConstCardQueen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) ] ? f$OpenPPL_ConstCardKing :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) ] ? f$OpenPPL_ConstCardAce :
f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowPairOnBoard##
// One quads possible, so the bestcase is second nuts
2
// Bbecause the set does have a higher rank then our pair,
// with the rank of the set theres no OverPair possible,
// and therefore are only 11 OverPairs possible instead of 12 if we do have 22 pair,
// 10 if we have 33 pair, etc.
+ (13 - f$OpenPPL_RankOfBottomPairOnBoard)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitASetWithPocketPair##
// 2 is the lowest rank possible, because quads are still possible
2
// For each rank in the common cards above the rank in the pocket cards, theres a higher FH possible.
+  (rankbitscommon & 0b000000000001000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000000010000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000000100000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000001000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000010000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000100000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000001000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000010000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000100000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b001000000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b010000000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b100000000000000 > rankbitsplayer ? 1 : 0)
// If the Pair on board is higher than our pocket-pair it got already counted
- ((trankcommon > rankhiplayer) ? 1 : 0)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitQuads##
// With a single pair on board and quads for us we have the current nuts
1

##f$OpenPPL_NutFullHouseOrFourOfAKind_FourOfAKindOnBoard##
// PreCondition: FourOfAKindOnBoard
//
// case 1: we play the board. e.g. 8888Q, we have J5
[rankhiplayer < f$OpenPPL_BoardKicker_FourOfAKindOnBoard] ?
[
	// case 1A: common kicker is higher then quads, e.g. 8888Q.
   (f$OpenPPL_BoardKicker_FourOfAKindOnBoard > trankcommon ) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
   // case 1B: common kicker is lower than quads
   (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
] :
// Otherwise: case 2: One of our cards is better then the nonpaired board card, e.g. 88885, we have J2
[
   // case 2A: Our kicker is better than quads, too (better than all board cards)
   (rankhiplayer > trankcommon) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
   // case 2B: Our kicker is worse than quads, e.g. 88885, we have 72
   (f$OpenPPL_ConstCardAce - rankhiplayer)
]

##f$OpenPPL_NutFullHouseOrFourOfAKind_FullHouseOnBoard##
// Precondition: FH on board
// There are 7 cases:
//
// 1) we pair both board-cards, so we have quads and nobody can have better quads
[(rankhiplayer == f$OpenPPL_BestBoardCard) && (rankloplayer == f$OpenPPL_2ndBestBoardCard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairBothBoardCards :
//
// 2) we pair the set on board, which is higher than the pair, so we get the best quads
[((rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer == f$OpenPPL_RankOfSetOnBoard)) && (f$OpenPPL_RankOfSetOnBoard > f$OpenPPL_2ndBestBoardCard)] ? 1: 1/*f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighSetOnBoard :
//
// 3) we pair the set on board, which is lower than the pair, so somebody could have better quads
[((rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer == f$OpenPPL_RankOfSetOnBoard)) && (f$OpenPPL_RankOfSetOnBoard < 2ndBestBoardCard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowSetOnBoard :
//
// 4) we pair the pair on board, which is higher than the set, so we get a better FH, but there are still quads possible
[(   (rankhiplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard) || (rankloplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)) && (f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard > f$OpenPPL_RankOfSetOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighPairOnBoard :
//
// 5) we pair the pair on board, which is lower than the set, so we play the board, but one kind of quads is no longer possible
[((rankhiplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard) || (rankloplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)) && (f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard < f$OpenPPL_RankOfSetOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowPairOnBoard :
//
// 6) we don't pair anything, but have an OverPair to the pair on board (we probably have to distinguish, if it is higher than the set or lower)
[ispair && (rankhiplayer != f$OpenPPL_BestBoardCard) && (rankhiplayer != f$OpenPPL_2ndBestBoardCard) && (rankhiplayer > f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WeHaveOverPairToPair :
//
// 7) we don't have an OverPair to the pair and therefore play the board (probably again 2 cases)
f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePlayTheBoard
*/

##f$OpenPPL_RankOfSetOnBoard##
// Precondition: set on board
trankcommon


##f$OpenPPL_RankOfSpareCardWhenTwoPairOnBoard##
f$OpenPPL_TwoPairOnBoard && !f$OpenPPL_FullHouseOnBoard ?
[    
			 ($$cr0!=f$OpenPPL_RankOfTopPairOnBoard && $$cr0!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr0:0)
			|($$cr1!=f$OpenPPL_RankOfTopPairOnBoard && $$cr1!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr1:0)
			|($$cr2!=f$OpenPPL_RankOfTopPairOnBoard && $$cr2!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr2:0)
			|($$cr3!=f$OpenPPL_RankOfTopPairOnBoard && $$cr3!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr3:0)
			|($$cr4!=f$OpenPPL_RankOfTopPairOnBoard && $$cr4!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr4:0)
]:
0

##f$OpenPPL_NutFullHouseOrFourOfAKind_ThreeOfAKindOnBoard##
// Case 1: we have the quads: the nuts
(rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer ==f$OpenPPL_RankOfSetOnBoard) ? 1 :
// Otherwise: we have a fullhouse with either a pocket-pair or pair a board-card.
// Case 2: Pocket-pair
ispair ?
[
    // Everybody who has a higher pocket pair or hits a higher board-card
    // or hits the set will get a better hand
    (f$OpenPPL_RankOfSetOnBoard > rankhiplayer) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
    // Otherwise: set is lower, so there is 1 additional card, that loses for us
    (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
] :
// Case 3: We pair the board
[
    // Same logic applies as above:
    // Case 3A: Our higher card hits the board
    (rankhiplayer == f$OpenPPL_BestBoardCard) || (rankhiplayer == f$OpenPPL_2ndBestBoardCard) || (rankhiplayer == f$OpenPPL_3rdBestBoardCard) ?
    [
        (f$OpenPPL_RankOfSetOnBoard > rankhiplayer) ? (f$OpenPPL_ConstCardAce - rankhiplayer) :
        // Otherwise: set is lower, so there is 1 additional card, that loses for us
        (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
    ] :
    [
        // Otherwise rankloplayer paired:
        (f$OpenPPL_RankOfSetOnBoard > rankloplayer) ? (f$OpenPPL_ConstCardAce - rankloplayer) :
        // Otherwise: set is lower, so there is 1 additional card, that loses for us
        (f$OpenPPL_ConstCardAce - rankloplayer + 1)
    ]
]

##f$OpenPPL_NutFullHouseOrFourOfAKind_TwoPairsOnBoard##
// 5 basic cases
//
// 1) we complete the higher pair to quads
[ispair && rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopQuads :
//
// 2) we complete the lower pair to quads
[ispair && rankhiplayer == f$OpenPPL_RankOfBottomPairOnBoard] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomQuads :
//
// 3) we pair both pairs: no quads possible, but:
//   * maybe 1 higher FH, if anybody pairs the higher pair and the last board-card, if it is higher than the low pair
//   * maybe 2 higher FHs, as above, if anybody pairs the completes the left board-card to higher trips
[(rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard) && (rankloplayer == f$OpenPPL_RankOfBottomPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WePairBothPairs :
//
// 4) we pair the higher board-card; probably several cases
[(rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard) || (rankloplayer == f$OpenPPL_RankOfTopPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopSet :
//
// 5) we pair the lower board card; probably several cases
[(rankhiplayer == f$OpenPPL_RankOfBottomPairOnBoard) || (rankloplayer == f$OpenPPL_RankOfBottomPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomSet :
//
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_NutFullHouseOrFourOfAKind_PairOnBoard##
// Precondition: we have FH or quads, there is a pair on board.
[ispair && (rankhiplayer == trankcommon)] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitQuads :
[ispair && (pokerval & fullhouse)] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitASetWithPocketPair :
[pokerval & fullhouse] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitThePairAndAnotherCard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_NutFullHouseOrFourOfAKind##
[(pokerval & (fullhouse | fourofakind)) == 0] ? f$OpenPPL_HINT_We_Dont_Have_A_FullHouse_At_All : 
f$OpenPPL_QuadsOnBoard     ? f$OpenPPL_NutFullHouseOrFourOfAKind_FourOfAKindOnBoard :
f$OpenPPL_FullHouseOnBoard ? f$OpenPPL_NutFullHouseOrFourOfAKind_FullHouseOnBoard :
f$OpenPPL_TripsOnBoard     ? f$OpenPPL_NutFullHouseOrFourOfAKind_ThreeOfAKindOnBoard :
f$OpenPPL_TwoPairOnBoard   ? f$OpenPPL_NutFullHouseOrFourOfAKind_TwoPairsOnBoard :
f$OpenPPL_PairOnBoard      ? f$OpenPPL_NutFullHouseOrFourOfAKind_PairOnBoard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_Overcards##
((f$OpenPPL_RankOfFirstHoleCard > rankhicommon)  && (f$OpenPPL_RankOfSecondHoleCard > rankhicommon))  ? 2 :
((f$OpenPPL_RankOfFirstHoleCard > rankhicommon)  || (f$OpenPPL_RankOfSecondHoleCard > rankhicommon))  ? 1 :
((f$OpenPPL_RankOfFirstHoleCard <= rankhicommon) && (f$OpenPPL_RankOfSecondHoleCard <= rankhicommon)) ? 0 : 0

##f$OpenPPL_PairInHand##
ispair

##f$OpenPPL_RunnerRunnerFlushPossibleAtRiver##
(betround == f$OpenPPL_ConstBetRoundRiver && nsuitedcommon==3 && f$OpenPPL_SuitsOnFlop!=3 && $$cs3==$$cs4) ? 1:0

##f$OpenPPL_SuitsInHand##
($$ps0 == $$ps1) ? 1 :
($$ps0 != $$ps1) ? 2 :
0

//*****************************************************************************
//
// OpenPPL - Other Symbols
//
//*****************************************************************************

##f$OpenPPL_IsFinalTable##
// To be implemented by OpenHoldem 2.2.0
// Currently returning always false (OH 2.1.9.3+)
//
isfinaltable

##f$OpenPPL_Others##
// Always true
1

##f$OpenPPL_FloatingPointRandom_0_100##
// OpenHoldem uses floating point numbers
// and random is in the range [0..1]
// But for OpenPPL we need a range of [0..100]
[ random * 100 ]

##f$OpenPPL_IntegerRandom_0_100##
// Cutting of the fractional part of the random number is tricky.
// We do a bitwise XOR with 0, which doesn't change anything,
// but to evaluate the expression OpenHoldem internally truncates the number 
// to integer (bit-vector).
(f$OpenPPL_FloatingPointRandom_0_100 ^ 0)

##f$OpenPPL_Random##
f$OpenPPL_IntegerRandom_0_100

//*****************************************************************************
//
// OpenPPL - Players and Opponents
//
//*****************************************************************************

##f$OpenPPL_PlayersAtStartOfThisRound##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? nplayersround1 :
(betround == f$OpenPPL_ConstBetRoundFlop)    ? nplayersround2 :
(betround == f$OpenPPL_ConstBetRoundTurn)    ? nplayersround3 :
(betround == f$OpenPPL_ConstBetRoundRiver)   ? nplayersround4 :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_Opponents##
f$OpenPPL_OpponentsLeft

##f$OpenPPL_OpponentsAtTable##
nopponentsdealt

##f$OpenPPL_NumberOfOpponentsAllin##
`f$OpenPPL_Opponents_AllinBits

##f$OpenPPL_OpponentIsAllin##
f$OpenPPL_NumberOfOpponentsAllin > 0

##f$OpenPPL_Opponents_AllinBits##
(betround == f$OpenPPL_ConstBetRoundPreflop) ?
[0
|(((opponentsplayingbits & (1 << 0)) && (currentbet0 > 0) && (balance0 == 0)) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && (currentbet1 > 0) && (balance1 == 0)) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && (currentbet2 > 0) && (balance2 == 0)) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && (currentbet3 > 0) && (balance3 == 0)) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && (currentbet4 > 0) && (balance4 == 0)) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && (currentbet5 > 0) && (balance5 == 0)) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && (currentbet6 > 0) && (balance6 == 0)) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && (currentbet7 > 0) && (balance7 == 0)) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && (currentbet8 > 0) && (balance8 == 0)) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && (currentbet9 > 0) && (balance9 == 0)) ? 1 << 9 : 0)
]
:
[0
|(((opponentsplayingbits & (1 << 0)) && balance0 == 0) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && balance1 == 0) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && balance2 == 0) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && balance3 == 0) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && balance4 == 0) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && balance5 == 0) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && balance6 == 0) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && balance7 == 0) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && balance8 == 0) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && balance9 == 0) ? 1 << 9 : 0)
]

##f$OpenPPL_OpponentsLeft##
// Does also consider players who are allin 
// (contrary to Shankys, who consider players allin in this round, but not from previous rounds).
nopponentsplaying

##f$OpenPPL_OpponentsOnFlop##
(nplayersround2 - 1)

##f$OpenPPL_OpponentsOnTurn##
(nplayersround3 - 1)

##f$OpenPPL_OpponentsOnRiver##
(nplayersround4 - 1)

##f$OpenPPL_OpponentsWithLowerStack##
  (((balance0 + currentbet0) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0001) ? 1:0)
+ (((balance1 + currentbet1) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0002) ? 1:0)
+ (((balance2 + currentbet2) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0004) ? 1:0)
+ (((balance3 + currentbet3) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0008) ? 1:0)
+ (((balance4 + currentbet4) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0010) ? 1:0)
+ (((balance5 + currentbet5) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0020) ? 1:0)
+ (((balance6 + currentbet6) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0040) ? 1:0)
+ (((balance7 + currentbet7) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0080) ? 1:0)
+ (((balance8 + currentbet8) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0100) ? 1:0)
+ (((balance9 + currentbet9) < f$OpenPPL_MaximumPossibleBetsizeIndollars) && (playersseatedbits & 0x0200) ? 1:0)

##f$OpenPPL_StillToActPreflop##
// Precondition: first action, but this gets checked in StillToAct
f$OpenPPL_InBigBlind ? 0 :
f$OpenPPL_InSmallBlind ? 1 :
// Not in the blinds
(f$OpenPPL_MissingSmallBlind > 0) ? (nchairsdealtleft + 1) :
(nchairsdealtleft + 2)

##f$OpenPPL_StillToActPostflop##
// Precondition: first action, but this gets checked in StillToAct
((f$OpenPPL_OpponentsLeft + 1) - betposition)

##f$OpenPPL_StillToAct##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0) ? f$OpenPPL_HINT_StillToAct_Is_Only_Valid_On_First_Orbit :
((betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)) ? f$OpenPPL_StillToActPreflop:
((betround != f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)) ? f$OpenPPL_StillToActPostflop:
0

//*****************************************************************************
//
// OpenPPL - Position Symbols
//
//*****************************************************************************

// Standard PPL accepts two spellings for the position symbols
// "In BigBlind" and "InBigBlind", "In Button" and "InButton", ...
// Our parser is able to ignore the fillerword "In ",
// but to be more user-friendly and to simplify the converter (less error-handling)
// we decided to provide both forms of naming in the library.

##f$OpenPPL_SmallBlind##
(dealposition == 1)

##f$OpenPPL_BigBlind##
(dealposition == 2)

##f$OpenPPL_Button##
// If the game in not 10-handed, some positions would be both "normal" and in the blinds.
// E.g. for a 9-handed game big-blind would also be counted as EarlyPosition1.
// Therefore we check for "Not InTheBlinds", except for button,
// because "InButton" makes sense even if the game is headsup.
(dealposition == nplayersdealt)

##f$OpenPPL_CutOff##
[(dealposition == nplayersdealt - 1) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition3##
[(dealposition == nplayersdealt - 2) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition2##
[(dealposition == nplayersdealt - 3) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition1##
[(dealposition == nplayersdealt - 4) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition3##
[(dealposition == nplayersdealt - 5) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition2##
[(dealposition == nplayersdealt - 6) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition1##
[(dealposition == nplayersdealt - 7) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_UTG##
// Under the gun - first to act preflop, 
// independent of the players at the table (at least 3).
// This symbols is especially useful to sitout 
// after the last hand of a session (before the next blind).
f$OpenPPL_MissingSmallBlind ? (dealposition == 2) :
(dealposition == 3)

##f$OpenPPL_InSmallBlind##
f$OpenPPL_SmallBlind

##f$OpenPPL_InBigBlind##
f$OpenPPL_BigBlind

##f$OpenPPL_TheBlinds##
// To be used: In TheBlinds
f$OpenPPL_InTheBlinds

##f$OpenPPL_InTheBlinds##
(f$OpenPPL_InSmallBlind || f$OpenPPL_InBigBlind)

##f$OpenPPL_EarlyPosition##
f$OpenPPL_InEarlyPosition

##f$OpenPPL_InEarlyPosition##
(f$OpenPPL_InEarlyPosition1 || f$OpenPPL_InEarlyPosition2 || f$OpenPPL_InEarlyPosition3)

##f$OpenPPL_MiddlePosition##
f$OpenPPL_InMiddlePosition

##f$OpenPPL_InMiddlePosition##
(f$OpenPPL_InMiddlePosition1 || f$OpenPPL_InMiddlePosition2 || f$OpenPPL_InMiddlePosition3)

##f$OpenPPL_LatePosition##
f$OpenPPL_InLatePosition

##f$OpenPPL_InLatePosition##
(f$OpenPPL_InCutOff || f$OpenPPL_InButton)



##f$OpenPPL_InButton##
f$OpenPPL_Button

##f$OpenPPL_InCutOff##
f$OpenPPL_CutOff

##f$OpenPPL_InMiddlePosition3##
f$OpenPPL_MiddlePosition3

##f$OpenPPL_InMiddlePosition2##
f$OpenPPL_MiddlePosition2

##f$OpenPPL_InMiddlePosition1##
f$OpenPPL_MiddlePosition1

##f$OpenPPL_InEarlyPosition3##
f$OpenPPL_EarlyPosition3

##f$OpenPPL_InEarlyPosition2##
f$OpenPPL_EarlyPosition2

##f$OpenPPL_InEarlyPosition1##
f$OpenPPL_EarlyPosition1

##f$OpenPPL_InUTG##
f$OpenPPL_UTG

##f$OpenPPL_TrueDealPositionOfBigBlind##
f$OpenPPL_MissingSmallBlind ? 1 : 2

##f$OpenPPL_BigBlindChair##
ac_dealpos0 == f$OpenPPL_TrueDealPositionOfBigBlind ? 0 :
ac_dealpos1 == f$OpenPPL_TrueDealPositionOfBigBlind ? 1 :
ac_dealpos2 == f$OpenPPL_TrueDealPositionOfBigBlind ? 2 :
ac_dealpos3 == f$OpenPPL_TrueDealPositionOfBigBlind ? 3 :
ac_dealpos4 == f$OpenPPL_TrueDealPositionOfBigBlind ? 4 :
ac_dealpos5 == f$OpenPPL_TrueDealPositionOfBigBlind ? 5 :
ac_dealpos6 == f$OpenPPL_TrueDealPositionOfBigBlind ? 6 :
ac_dealpos7 == f$OpenPPL_TrueDealPositionOfBigBlind ? 7 :
ac_dealpos8 == f$OpenPPL_TrueDealPositionOfBigBlind ? 8 :
ac_dealpos9 == f$OpenPPL_TrueDealPositionOfBigBlind ? 9 :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap
  
##f$OpenPPL_SmallBlindChair##
f$OpenPPL_MissingSmallBlind ? f$OpenPPL_HINT_There_Is_No_SmallNlind_In_This_Game :
ac_dealpos0 == 1 ? 0 :
ac_dealpos1 == 1 ? 1 :
ac_dealpos2 == 1 ? 2 :
ac_dealpos3 == 1 ? 3 :
ac_dealpos4 == 1 ? 4 :
ac_dealpos5 == 1 ? 5 :
ac_dealpos6 == 1 ? 6 :
ac_dealpos7 == 1 ? 7 :
ac_dealpos8 == 1 ? 8 :
ac_dealpos9 == 1 ? 9 :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_ButtonChair##
// We ignore the case of headsup,
// where button = small blind or button = big blind,
// as this seems to be different for each casino.
// For us: button = bigblind, if the game is headsup.
ac_dealpos0 == nplayersdealt ? 0 :
ac_dealpos1 == nplayersdealt ? 1 :
ac_dealpos2 == nplayersdealt ? 2 :
ac_dealpos3 == nplayersdealt ? 3 :
ac_dealpos4 == nplayersdealt ? 4 :
ac_dealpos5 == nplayersdealt ? 5 :
ac_dealpos6 == nplayersdealt ? 6 :
ac_dealpos7 == nplayersdealt ? 7 :
ac_dealpos8 == nplayersdealt ? 8 :
ac_dealpos9 == nplayersdealt ? 9 :
f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CutOffChair##
// We have to make sure, that the userchair in question is not a blind,
// which would be the case for CutOff, if the game was 3-handed.
// For 3-handed games "CutOff" = BigBlind, but blinds take priority.
// We could test for dealposition > 2, but counting players is more simple.
(nplayersdealt <= 3) ? f$OpenPPL_HINT_CutOff_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 1) ? 0 :
ac_dealpos1 == (nplayersdealt - 1) ? 1 :
ac_dealpos2 == (nplayersdealt - 1) ? 2 :
ac_dealpos3 == (nplayersdealt - 1) ? 3 :
ac_dealpos4 == (nplayersdealt - 1) ? 4 :
ac_dealpos5 == (nplayersdealt - 1) ? 5 :
ac_dealpos6 == (nplayersdealt - 1) ? 6 :
ac_dealpos7 == (nplayersdealt - 1) ? 7 :
ac_dealpos8 == (nplayersdealt - 1) ? 8 :
ac_dealpos9 == (nplayersdealt - 1) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition3Chair##
(nplayersdealt <= 4) ? f$OpenPPL_HINT_MiddlePosition3_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 2) ? 0 :
ac_dealpos1 == (nplayersdealt - 2) ? 1 :
ac_dealpos2 == (nplayersdealt - 2) ? 2 :
ac_dealpos3 == (nplayersdealt - 2) ? 3 :
ac_dealpos4 == (nplayersdealt - 2) ? 4 :
ac_dealpos5 == (nplayersdealt - 2) ? 5 :
ac_dealpos6 == (nplayersdealt - 2) ? 6 :
ac_dealpos7 == (nplayersdealt - 2) ? 7 :
ac_dealpos8 == (nplayersdealt - 2) ? 8 :
ac_dealpos9 == (nplayersdealt - 2) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition2Chair##
(nplayersdealt <= 5) ? f$OpenPPL_HINT_MiddlePosition2_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 3) ? 0 :
ac_dealpos1 == (nplayersdealt - 3) ? 1 :
ac_dealpos2 == (nplayersdealt - 3) ? 2 :
ac_dealpos3 == (nplayersdealt - 3) ? 3 :
ac_dealpos4 == (nplayersdealt - 3) ? 4 :
ac_dealpos5 == (nplayersdealt - 3) ? 5 :
ac_dealpos6 == (nplayersdealt - 3) ? 6 :
ac_dealpos7 == (nplayersdealt - 3) ? 7 :
ac_dealpos8 == (nplayersdealt - 3) ? 8 :
ac_dealpos9 == (nplayersdealt - 3) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition1Chair##
(nplayersdealt <= 6) ? f$OpenPPL_HINT_MiddlePosition1_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 4) ? 0 :
ac_dealpos1 == (nplayersdealt - 4) ? 1 :
ac_dealpos2 == (nplayersdealt - 4) ? 2 :
ac_dealpos3 == (nplayersdealt - 4) ? 3 :
ac_dealpos4 == (nplayersdealt - 4) ? 4 :
ac_dealpos5 == (nplayersdealt - 4) ? 5 :
ac_dealpos6 == (nplayersdealt - 4) ? 6 :
ac_dealpos7 == (nplayersdealt - 4) ? 7 :
ac_dealpos8 == (nplayersdealt - 4) ? 8 :
ac_dealpos9 == (nplayersdealt - 4) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition3Chair##
(nplayersdealt <= 7) ? f$OpenPPL_HINT_EarlyPosition3_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 5) ? 0 :
ac_dealpos1 == (nplayersdealt - 5) ? 1 :
ac_dealpos2 == (nplayersdealt - 5) ? 2 :
ac_dealpos3 == (nplayersdealt - 5) ? 3 :
ac_dealpos4 == (nplayersdealt - 5) ? 4 :
ac_dealpos5 == (nplayersdealt - 5) ? 5 :
ac_dealpos6 == (nplayersdealt - 5) ? 6 :
ac_dealpos7 == (nplayersdealt - 5) ? 7 :
ac_dealpos8 == (nplayersdealt - 5) ? 8 :
ac_dealpos9 == (nplayersdealt - 5) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition2Chair##
(nplayersdealt <= 8) ? f$OpenPPL_HINT_EarlyPosition2_Does_Not_Exist :
(ac_dealpos0 == (nplayersdealt - 6)) ? 0 :
(ac_dealpos1 == (nplayersdealt - 6)) ? 1 :
(ac_dealpos2 == (nplayersdealt - 6)) ? 2 :
(ac_dealpos3 == (nplayersdealt - 6)) ? 3 :
(ac_dealpos4 == (nplayersdealt - 6)) ? 4 :
(ac_dealpos5 == (nplayersdealt - 6)) ? 5 :
(ac_dealpos6 == (nplayersdealt - 6)) ? 6 :
(ac_dealpos7 == (nplayersdealt - 6)) ? 7 :
(ac_dealpos8 == (nplayersdealt - 6)) ? 8 :
(ac_dealpos9 == (nplayersdealt - 6)) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition1Chair##
(nplayersdealt <= 9) ? f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 7) ? 0 :
ac_dealpos1 == (nplayersdealt - 7) ? 1 :
ac_dealpos2 == (nplayersdealt - 7) ? 2 :
ac_dealpos3 == (nplayersdealt - 7) ? 3 :
ac_dealpos4 == (nplayersdealt - 7) ? 4 :
ac_dealpos5 == (nplayersdealt - 7) ? 5 :
ac_dealpos6 == (nplayersdealt - 7) ? 6 :
ac_dealpos7 == (nplayersdealt - 7) ? 7 :
ac_dealpos8 == (nplayersdealt - 7) ? 8 :
ac_dealpos9 == (nplayersdealt - 7) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_DealPositionLastRaiser##
// This function does also count blind-raisers.
(f$OpenPPL_AggressorChair == 0) ? ac_dealpos0 :
(f$OpenPPL_AggressorChair == 1) ? ac_dealpos1 :
(f$OpenPPL_AggressorChair == 2) ? ac_dealpos2 :
(f$OpenPPL_AggressorChair == 3) ? ac_dealpos3 :
(f$OpenPPL_AggressorChair == 4) ? ac_dealpos4 :
(f$OpenPPL_AggressorChair == 5) ? ac_dealpos5 :
(f$OpenPPL_AggressorChair == 6) ? ac_dealpos6 :
(f$OpenPPL_AggressorChair == 7) ? ac_dealpos7 :
(f$OpenPPL_AggressorChair == 8) ? ac_dealpos8 :
(f$OpenPPL_AggressorChair == 9) ? ac_dealpos9 :
f$OpenPPL_HINT_There_Are_No_True_Raisers

##f$OpenPPL_EarlyPosition1Calling##
(callbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1

##f$OpenPPL_EarlyPosition2Calling##
(callbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1

##f$OpenPPL_EarlyPosition3Calling##
(callbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1

##f$OpenPPL_MiddlePosition1Calling##
(callbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1

##f$OpenPPL_MiddlePosition2Calling##
(callbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1

##f$OpenPPL_MiddlePosition3Calling##
(callbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1

##f$OpenPPL_CutOffCalling##
(callbits1 >> f$OpenPPL_CutOffChair) & 1 == 1

##f$OpenPPL_ButtonCalling##
(callbits1 >> f$OpenPPL_ButtonChair) & 1 == 1

##f$OpenPPL_SmallBlindCalling##
(callbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1

##f$OpenPPL_BigBlindCalling##
(callbits1 >> f$OpenPPL_BigBlindChair) & 11 == 1

##f$OpenPPL_EarlyPosition1Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition2Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition3Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition1Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition2Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition3Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1]

##f$OpenPPL_CutOffRaising##
[(raisbits1 >> f$OpenPPL_CutOffChair) & 1 == 1]

##f$OpenPPL_ButtonRaising##
[(raisbits1 >> f$OpenPPL_ButtonChair) & 1 == 1]

##f$OpenPPL_SmallBlindRaising##
   [(raisbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1]
&& [f$OpenPPL_SmallBlindCurrentBet >= 0.51]

##f$OpenPPL_BigBlindRaising##
   [(raisbits1 >> f$OpenPPL_BigBlindChair) & 1 == 1]
&& [f$OpenPPL_BigBlindCurrentBet >= 1.01]

##f$OpenPPL_FirstCallerPosition##
// We have to search starting from early positions,
// as we want to detect the first one.
f$OpenPPL_EarlyPosition1Calling  ? 9 :
f$OpenPPL_EarlyPosition2Calling  ? 8 :
f$OpenPPL_EarlyPosition3Calling  ? 7 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_CutOffCalling          ? 3 :
f$OpenPPL_ButtonCalling          ? 2 :
f$OpenPPL_SmallBlindCalling      ? 1 :
// Can't be big blind (0), as it is for the first orbit preflop only
-1

##f$OpenPPL_FirstRaiserPosition##
// We have to search starting from early positions,
// as we want to detect the first one.
f$OpenPPL_EarlyPosition1Raising  ? 9 :
f$OpenPPL_EarlyPosition2Raising  ? 8 :
f$OpenPPL_EarlyPosition3Raising  ? 7 :
f$OpenPPL_MiddlePosition1Raising ? 6 :
f$OpenPPL_MiddlePosition2Raising ? 5 :
f$OpenPPL_MiddlePosition3Raising ? 4 :
f$OpenPPL_CutOffRaising          ? 3 :
f$OpenPPL_ButtonRaising          ? 2 :
f$OpenPPL_SmallBlindRaising ? 1 :
// Can't be big blind (0), as it is for the first orbit preflop only
-1

##f$OpenPPL_LastCallerPosition##
// Can't be big blind (0), as it is for the first orbit preflop only
f$OpenPPL_SmallBlindCalling      ? 1 :
f$OpenPPL_ButtonCalling          ? 2 :
f$OpenPPL_CutOffCalling          ? 3 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_EarlyPosition3Calling  ? 7 :
f$OpenPPL_EarlyPosition2Calling  ? 8 :
f$OpenPPL_EarlyPosition1Calling  ? 9 :
-1

##f$OpenPPL_LastRaiserPosition##
// Handling the case of blind-raisers only first
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets <= 1)] ? f$OpenPPL_HINT_There_Are_No_True_Raisers :
// Big blind = 0
f$OpenPPL_BigBlindRaising ? 0 :
// Small blind = 1
f$OpenPPL_SmallBlindRaising ? 1 :
// Normal players:
// Button = 2, CutOff = 3, ...
(nplayersdealt - f$OpenPPL_DealPositionLastRaiser + 2)

##f$OpenPPL_First##
0

##f$OpenPPL_Middle##
1

##f$OpenPPL_Last##
2

##f$OpenPPL_Position##
(betposition == 1) ? f$OpenPPL_First :
(betposition == nplayersplaying) ? f$OpenPPL_Last :
f$OpenPPL_Middle


//*******************************************
//  OpenPPL - Poker Tracker Symbols COSTANTS
//*******************************************
##f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR##
80

##f$OpenPPL_ConstMinHandsFor_PT_AttemptToStealBlinds##
80

##f$OpenPPL_ConstMinHandsFor_PT_BigBlind_FoldBBToSteal##
80

##f$OpenPPL_ConstMinHandsFor_PT_SmallBlind_FoldSBToSteal##
80

//*******************************************
// OpenPPL - Poker Tracker Technical Symbols
//*******************************************
##f$OpenPPL_RaiserExists##
(raischair != -1)

//*****************************************************************************
//
// OpenPPL - Poker Tracker Symbols
//
//*****************************************************************************

##f$OpenPPL_PT_LastRaiser_Hands##
(raischair != -1) ? pt_rhands : -1

##f$OpenPPL_PT_LastRaiser_PFR##
f$OpenPPL_RaiserExists && (f$OpenPPL_PT_LastRaiser_Hands >= f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR) ? pt_rpfr : -1

##f$OpenPPL_PT_LastRaiser_VPIP##
f$OpenPPL_RaiserExists && (f$OpenPPL_PT_LastRaiser_Hands >= f$OpenPPL_ConstMinHandsFor_PT_VPIP_AND_PFR) ? pt_rvpip : -1

##f$OpenPPL_PT_LastRaiser_AttemptToStealBlinds##
f$OpenPPL_RaiserExists && (f$OpenPPL_PT_LastRaiser_Hands >= f$OpenPPL_ConstMinHandsFor_PT_AttemptToStealBlinds) ? pt_rpfats : -1

##f$OpenPPL_PT_BigBlind_FoldBBToSteal##
f$OpenPPL_BigBlindChair == 0 ? pt_fbbts0 :
f$OpenPPL_BigBlindChair == 1 ? pt_fbbts1 :
f$OpenPPL_BigBlindChair == 2 ? pt_fbbts2 :
f$OpenPPL_BigBlindChair == 3 ? pt_fbbts3 :
f$OpenPPL_BigBlindChair == 4 ? pt_fbbts4 :
f$OpenPPL_BigBlindChair == 5 ? pt_fbbts5 :
f$OpenPPL_BigBlindChair == 6 ? pt_fbbts6 :
f$OpenPPL_BigBlindChair == 7 ? pt_fbbts7 :
f$OpenPPL_BigBlindChair == 8 ? pt_fbbts8 :
f$OpenPPL_BigBlindChair == 9 ? pt_fbbts9 :
-1

##f$OpenPPL_PT_SmallBlind_FoldSBToSteal##
f$OpenPPL_SmallBlindChair == 0 ? pt_fsbts0 :
f$OpenPPL_SmallBlindChair == 1 ? pt_fsbts1 :
f$OpenPPL_SmallBlindChair == 2 ? pt_fsbts2 :
f$OpenPPL_SmallBlindChair == 3 ? pt_fsbts3 :
f$OpenPPL_SmallBlindChair == 4 ? pt_fsbts4 :
f$OpenPPL_SmallBlindChair == 5 ? pt_fsbts5 :
f$OpenPPL_SmallBlindChair == 6 ? pt_fsbts6 :
f$OpenPPL_SmallBlindChair == 7 ? pt_fsbts7 :
f$OpenPPL_SmallBlindChair == 8 ? pt_fsbts8 :
f$OpenPPL_SmallBlindChair == 9 ? pt_fsbts9 :
-1

##f$OpenPPL_PT_SmallBlind_VPIP##
f$OpenPPL_SmallBlindChair == 0 ? pt_vpip0 :
f$OpenPPL_SmallBlindChair == 1 ? pt_vpip1 :
f$OpenPPL_SmallBlindChair == 2 ? pt_vpip2 :
f$OpenPPL_SmallBlindChair == 3 ? pt_vpip3 :
f$OpenPPL_SmallBlindChair == 4 ? pt_vpip4 :
f$OpenPPL_SmallBlindChair == 5 ? pt_vpip5 :
f$OpenPPL_SmallBlindChair == 6 ? pt_vpip6 :
f$OpenPPL_SmallBlindChair == 7 ? pt_vpip7 :
f$OpenPPL_SmallBlindChair == 8 ? pt_vpip8 :
f$OpenPPL_SmallBlindChair == 9 ? pt_vpip9 :
-1


//*****************************************************************************
//
// OpenPPL - Initialization of memory symbols
//
// For history symbols and other information,
// that can't be retrieved from OH-symbols
// and from the current gamestate only.
//
//*****************************************************************************

##f$OpenPPL_TimeToInitMemorySymbols##
// Some advanced symbols depend on memory symbols.
// They are designed to update once per orbit on our turn.
// However: depending on user-settings OpenHoldem might evaluate
// the necessary function even when it is not our turn.
// And incorrect delay-settings might also lead to multiple actions
// on identical frames (OH acts faster as casino/bring can update)
// So we check for isfinalanswer and a changed gamestate.
[isfinalanswer && f$OpenPPL_GameStateChanged]

##f$OpenPPL_HandResetHappened##
[   (betround == f$OpenPPL_ConstBetRoundPreflop) 
 && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)]

##f$OpenPPL_ResetUserVariablesOnHandReset##
// f$OpenPPL_ResetUserVariables
// will be auto-generated by the translator.
f$OpenPPL_HandResetHappened ? f$OpenPPL_ResetUserVariables : f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_GameStateChanged##
// Change in dealerchair => new hand
   (dealerchair != me_re_MemOldGameStateEealerChair)
// Change in currentbet => we did act 
// and the autoplayer executed sucessfully   
|| (currentbet  != me_re_MemOldGameStateCurrentBet)
// Change in potsize: somebody else behind us acted, 
// so we checked or folded sucessfully
|| (pot			!= me_re_MemOldGameStatePotSize)

##f$OpenPPL_RememberCurrentGameState##
   (me_st_MemOldGameStateEealerChair_dealerchair * 0)
|| (me_st_MemOldGameStateCurrentBet_currentbet   * 0)
|| (me_re_MemOldGameStatePotSize_pot             * 0)

##f$OpenPPL_InitMemorySymbols##
(f$OpenPPL_TimeToInitMemorySymbols == f$OpenPPL_False) ? 0 :
// We can't use addition here to call the functions in correct sequential order,
// because OH doesn't add the operands in order:
// http://www.maxinmontreal.com/forums/viewtopic.php?f=111&t=14525&start=0
   [f$OpenPPL_InitMissingSmallBlind * 0]
|| [f$OpenPPL_InitBets * 0]
|| [f$OpenPPL_InitChecks * 0]
|| [f$OpenPPL_InitCalls * 0]
|| [f$OpenPPL_InitRaises * 0]
|| [f$OpenPPL_InitBotsLastPreflopAction * 0]
|| [f$OpenPPL_InitRaisesBeforeFlop * 0]
|| [f$OpenPPL_InitRaisesOnFlop * 0]
|| [f$OpenPPL_InitRaisesOnTurn * 0]
|| [f$OpenPPL_InitMaxOpponentStackSize * 0]
|| [f$OpenPPL_InitMinOpponentStackSize * 0]
|| [f$OpenPPL_InitStartingStackSize * 0]
|| [f$OpenPPL_RememberCurrentGameState * 0]
|| [f$OpenPPL_ResetUserVariablesOnHandReset * 0]
//
// InitBotsLastAction has to be the last init-function to be called
// because it will call the final f$Decision routine.
//
|| [f$OpenPPL_InitBotsLastAction * 0]

//*****************************************************************************
//
// OpenPPL - Various functions of minor importance or to do
//
//*****************************************************************************

##f$OpenPPL_NOT_YET_IMPLEMENTED_YOUR_HELP_IS_REQUIRED##
-1

##f$OpenPPL_HaveBackdoorStraightDraw##
f$OpenPPL_NOT_YET_IMPLEMENTED_YOUR_HELP_IS_REQUIRED

//*****************************************************************************
//
// OpenPPL - the glory end
//
//*****************************************************************************

//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 2.2.0 or later
//   Symbols not working with 2.1.x:
//     * isfinaltable
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   Lavezzi
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
//  OpenPPL - Swag Functions
//  ========================
//
//  Swag-functions for OpenHoldem 2.1.x only.
//  Please delete this file once you use OpenHoldem 2.2.0 and later.
//
//  Swagging (swag = stated wager, a Ray-E.-Bornesian abbreviation)
//  was the old way to handle NL-betsizing.
//  It got replaced by a single f$betsize function in OH 2.2.0
//  and OpenHoldem handles now all adjustments of the betsize to the casino
//  and all other technical things automatically.
//
//*****************************************************************************

##f$OpenPPL_MinimumRaiseAllowed##
// Final betsize if we raise by the minimum.
// Aamount in dollars.
(currentbet + call + sraimin)

##f$OpenPPL_BetSizeAdjustedToMinimumRaise##
// Aamount in dollars.
(f$betsize < f$OpenPPL_MinimumRaiseAllowed) ? f$OpenPPL_MinimumRaiseAllowed :
f$betsize

##f$OpenPPL_PotLimitPotSize##
// The pot for potsize calculations is the current pot plus the amount if we call
// Amount in dollars
(pot + call)

##f$OpenPPL_BetSizeAdjustedToGameType##
// In pot-limit we can only raise by pot-size ;-)
// Aamount in dollars.
[ispl && (f$OpenPPL_BetSizeAdjustedToMinimumRaise > 2 * f$OpenPPL_PotLimitPotSize)] ?
(2 * f$OpenPPL_PotLimitPotSize) : f$OpenPPL_BetSizeAdjustedToMinimumRaise

##f$OpenPPL_BetSizeAdjustedToUsersBalance##
// Aamount in dollars.
(f$OpenPPL_BetSizeAdjustedToGameType > (balance + currentbet)) ?
(balance + currentbet) : f$OpenPPL_BetSizeAdjustedToGameType

##f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements##
// There are 3 different ways, how casinos treat swagged input.
//
// Swag means, the casino will interpret the amount as
// 1) f$srai
// 2) f$srai+call
// 3) f$srai+call+currentbet
// As our f$betsize function treats case X as normal and not case 1,
// we have to do some small calculations in the other direction.
(swagtextmethod == 1) ? f$OpenPPL_BetSizeAdjustedToUsersBalance :
(swagtextmethod == 2) ? [f$OpenPPL_BetSizeAdjustedToUsersBalance - call] :
(swagtextmethod == 3) ? [f$OpenPPL_BetSizeAdjustedToUsersBalance - call - currentbet] :
// This should not happen, but we default to 1)
f$OpenPPL_BetSizeAdjustedToUsersBalance

##f$OpenPPL_HINT_No_NL_BetSizing_In_A_FL_Game##
0

##f$swag##
// No swagging in a FL game
isfl ? f$OpenPPL_HINT_No_NL_BetSizing_In_A_FL_Game : 
// Only swag, if we really decided to swag
// and not because the betsize-adaption resulted in a positive betsize.
f$OpenPPL_DecisionIsFixedBetInBigBlinds        ? f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements : 
f$OpenPPL_DecisionIsPercentagedPotsizedBet     ? f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements : 
f$OpenPPL_DecisionIsBetPotOrBetHalfPotOrBetMax ? f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements : 
0

//*****************************************************************************
//
//  OpenPPL - f$play
//  ================
//
//  f$play will be replaced by f$sitin, f$sitout and f$leave in OH 2.2.0.
//  But for the moment we need it so make OpenPPLs sitout command work.
//  http://forum.winholdem.net/wbb/viewtopic.php?t=8095
//  -2 press the leave button this frame
//  -1 do absolutely nothing this frame
//  0 click the sitout action this frame
//  +1 click the sitin action this frame
//
//*****************************************************************************

##f$play##
f$sitout ? 0 : -1

##f$myfunc1##
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_OpponentsAtTable > 6 && [($AA) || ($KK)]) ]
##f$myfunc2##
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_OpponentsAtTable > 6 && [($QQ) || ($JJ) || ($AK) || ($AQs) || ($AJs)]) ]
##f$myfunc3##
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_OpponentsAtTable > 6 && [($TT) || ($99) || ($88)]) ]
##f$myfunc4##
[ (f$OpenPPL_StackSize <= 40 && [($AA) || ($KK)]) ]
##f$myfunc5##
[ (f$OpenPPL_StackSize <= 40 && [($QQ) || ($JJ) || ($AK)]) ]
##f$myfunc6##
[ (f$OpenPPL_StackSize <= 20 && [($AJs) || ($AQs)]) ]
##f$myfunc7##
[ (f$OpenPPL_StackSize <= 40 && [($AJs) || ($AQs)]) ]
##f$myfunc8##
[ (f$OpenPPL_StackSize <= 40 && [($TT) || ($99) || ($88)]) ]
##f$myfunc9##
[ (f$OpenPPL_StackSize <= 35 && [($AQ) || ($AJs) || ($ATs) || ($KQs)]) ]
##f$myfunc10##
[ (f$OpenPPL_StackSize <= 15 && [($AJ) || ($ATs)]) ]
##f$myfunc11##
[ (f$OpenPPL_StackSize <= 10 && [($A) || ($AT) || ($KQ) || ($KJ) || ($QJ) || f$OpenPPL_PairInHand]) ]
##f$myfunc12##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($AK) || ($AQ) || ($AJs) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc13##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($A4) || ($A3) || ($A2)]) ]
##f$myfunc14##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($K6s) || ($K5s) || ($K4s) || ($K3s) || ($K2s)]) ]
##f$myfunc15##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($K8) || ($K7)]) ]
##f$myfunc16##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($Q6s) || ($Q5s) || ($Q4s) || ($Q3s) || ($Q2s)]) ]
##f$myfunc17##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($65s) || ($54s)]) ]
##f$myfunc18##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($Q9) || ($Q8) || ($J9) || ($T9) || ($Q7) || ($J8) || ($J7) || ($98)]) ]
##f$myfunc19##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($97s) || ($96s) || ($86s) || ($85s) || ([ /* 7s5s */ $75 && [f$prime_coded_hole_cards % [1 * f$PrimeCode_7s * f$PrimeCode_5s] != 0]]) || ([ /* 6h4h */ $64 && [f$prime_coded_hole_cards % [1 * f$PrimeCode_6h * f$PrimeCode_4h] != 0]])]) ]
##f$myfunc20##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($T8) || ($T7) || ($97)]) ]
##f$myfunc21##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($75s) || ($64s)]) ]
##f$myfunc22##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($JXs) || ($TXs)]) ]
##f$myfunc23##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($96) || ($86) || ($76) || ($65)]) ]
##f$myfunc24##
[ (f$OpenPPL_OpponentsAtTable == 1 && [($95) || ($85) || ($75)]) ]
##f$myfunc25##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($AT) || ($KQ) || ($KJ) || ($QJ)]) ]
##f$myfunc26##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($KT) || ($QT) || ($JT)]) ]
##f$myfunc27##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($66) || ($55) || ($44) || ($33) || ($22)]) ]
##f$myfunc28##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($A9s) || ($A8s) || ($A7s)]) ]
##f$myfunc29##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($A6s) || ($A5s) || ($A4s) || ($A3s) || ($A2s)]) ]
##f$myfunc30##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [$A9]) ]
##f$myfunc31##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($A8) || ($A7) || ($A6) || ($A5)]) ]
##f$myfunc32##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($K9s) || ($K8s) || ($K7s)]) ]
##f$myfunc33##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($Q9s) || ($Q8s) || ($Q7s) || ($J9s)]) ]
##f$myfunc34##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($87s) || ($76s)]) ]
##f$myfunc35##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [($J8s) || ($J7s) || ($T8s) || ($T7s)]) ]
##f$myfunc36##
[ ([$AA]) ]
##f$myfunc37##
[ ([$KK]) ]
##f$myfunc38##
[ ([$QQ]) ]
##f$myfunc39##
[ ([$AKs]) ]
##f$myfunc40##
[ ([($AK) || ($AQs) || ($AJs)]) ]
##f$myfunc41##
[ ([($AK) || ($JJ)]) ]
##f$myfunc42##
[ ([$JJ]) ]
##f$myfunc43##
[ ([$AQ]) ]
##f$myfunc44##
[ ([$AJ]) ]
##f$myfunc45##
[ ([$AXs]) ]
##f$myfunc46##
[ ([($AT) || ($A9) || ($A8)]) ]
##f$myfunc47##
[ ([$A]) ]
##f$myfunc48##
[ ([$KQs]) ]
##f$myfunc49##
[ ([($KQ) || ($QJs)]) ]
##f$myfunc50##
[ ([($KJ) || ($KT) || ($QJ) || ($QTs) || ($JT) || ($J9s)]) ]
##f$myfunc51##
[ ([($KJ) || ($KTs) || ($QJs) || ($QTs) || ($JTs) || ($J9s)]) ]
##f$myfunc52##
[ ([($K9) || ($K8) || ($QT) || ($Q9) || ($J9) || ($J8)] &&  ![(f$OpenPPL_StackSize <= 40)]) ]
##f$myfunc53##
[ ([($T9s) || ($T8s) || ($98s) || ($97s)]) ]
##f$myfunc54##
[ ([($T9s) || ($87s) || ($76s) || ($65s) || ($54s)]) ]
##f$myfunc55##
[ ([($T8s) || ($86s) || ($75s) || ($64s) || ($53s)]) ]
##f$myfunc56##
[ ([($TT) || ($99)]) ]
##f$myfunc57##
[ ([($88) || ($77)]) ]
##f$myfunc58##
[ ([($66) || ($55)]) ]
##f$myfunc59##
[ ([($44) || ($33) || ($22)]) ]
##f$myfunc60##
[ (f$OpenPPL_Others) ]
##f$myfunc61##
[ (f$OpenPPL_OpponentsAtTable > 6 && [$KQs]) ]
##f$myfunc62##
[ (f$OpenPPL_OpponentsAtTable > 6 && [$KQ]) ]
##f$myfunc63##
[ (f$OpenPPL_OpponentsAtTable > 6 && [($KJ) || ($KTs) || ($QTs)]) ]
##f$myfunc64##
[ (f$OpenPPL_OpponentsAtTable > 6 && [($KTs) || ($QJs) || ($QTs) || ($JTs) || ($T9s) || ($T8s) || ($98s) || ($97s)]) ]
##f$myfunc65##
[ (f$OpenPPL_OpponentsAtTable > 6 && f$OpenPPL_PairInHand) ]
##f$myfunc66##
[ (f$OpenPPL_Others) ]
##f$myfunc67##
[ (f$OpenPPL_TotalInvested > 115 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 110 && f$OpenPPL_TripsOnBoard && [ !([f$OpenPPL_NutFullHouseOrFourOfAKind == 1])] && f$OpenPPL_HaveFullHouse) ]
##f$myfunc68##
[ (f$OpenPPL_TotalInvested > 115 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 110 && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && [f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_HaveUnderPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ]
##f$myfunc69##
[ (f$OpenPPL_TotalInvested > 115 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 110 && f$OpenPPL_FlushPossible && [ !(f$OpenPPL_HaveFlush)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraight || f$OpenPPL_HaveNutFlushDraw]) ]
##f$myfunc70##
[ (f$OpenPPL_TotalInvested > 115 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 110 && f$OpenPPL_StraightPossible && [ !(f$OpenPPL_HaveStraight)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw]) ]
##f$myfunc71##
[ (f$OpenPPL_TotalInvested > 115 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 110 &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTopTwoPair)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ]
##f$myfunc72##
[ (f$OpenPPL_TotalInvested > 300 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 110) ]
##f$myfunc73##
[ (f$OpenPPL_TotalInvested > 100 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_BotRaisedBeforeFlop || f$OpenPPL_BotRaisedOnFlop]) ]
##f$myfunc74##
[ (f$OpenPPL_StackSize <= 60 && f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ]
##f$myfunc75##
[ (f$OpenPPL_StackSize <= 60 &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc76##
[ (f$OpenPPL_StackSize <= 60 && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse]) ]
##f$myfunc77##
[ (f$OpenPPL_StackSize <= 60 && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents > 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc78##
[ (f$OpenPPL_StackSize <= 60 && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc79##
[ (f$OpenPPL_StackSize <= 60 && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents > 2 && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc80##
[ (f$OpenPPL_StackSize <= 60 && f$OpenPPL_HaveOverPair && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc81##
[ (f$OpenPPL_StackSize <= 60 && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents > 2 && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc82##
[ (f$OpenPPL_StackSize <= 60 && f$OpenPPL_HaveOverPair && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc83##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents > 2 &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc84##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc85##
[ (f$OpenPPL_StackSize <= 60 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKickerOrBetter] && f$OpenPPL_Opponents > 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc86##
[ (f$OpenPPL_StackSize <= 60 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKickerOrBetter] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc87##
[ (f$OpenPPL_StackSize <= 60 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKickerOrBetter] && f$OpenPPL_Opponents > 2 && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc88##
[ (f$OpenPPL_StackSize <= 60 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKickerOrBetter] && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc89##
[ (f$OpenPPL_StackSize <= 60 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKickerOrBetter] && f$OpenPPL_Opponents > 2 && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc90##
[ (f$OpenPPL_StackSize <= 60 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKickerOrBetter] && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc91##
[ (f$OpenPPL_StackSize <= 40 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents > 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc92##
[ (f$OpenPPL_StackSize <= 40 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc93##
[ (f$OpenPPL_StackSize <= 40 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents > 2 && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc94##
[ (f$OpenPPL_StackSize <= 40 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc95##
[ (f$OpenPPL_StackSize <= 40 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_Opponents > 2 && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc96##
[ (f$OpenPPL_StackSize <= 40 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc97##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_Opponents > 2 &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc98##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc99##
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc100##
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc101##
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc102##
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_HaveTopPair && f$OpenPPL_BetSize <= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc103##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents <= 2 && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc104##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc105##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents <= 2 && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc106##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveTopPair && f$OpenPPL_BetSize <= 2 && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc107##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents <= 2 && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc108##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc109##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents <= 2 && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc110##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveTopPair && f$OpenPPL_BetSize <= 2 && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc111##
[ (f$OpenPPL_StackSize <= 60 && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [($AK) || ($AQ) || ($AJ) || ($AT) || ($KQ) || ($KJ)]) ]
##f$myfunc112##
[ (f$OpenPPL_StackSize <= 30 && f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_PairOnBoard && f$OpenPPL_Overcards == 2 && [($AK) || ($AQ) || ($AJ)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw)]) ]
##f$myfunc113##
[ (f$OpenPPL_StackSize <= 30 && f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_PairOnBoard && f$OpenPPL_Overcards == 2 && [($AK) || ($AQ) || ($AJ)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)] || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw)]) ]
##f$myfunc114##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_StackSize <= 40 && f$OpenPPL_PotSize >= 10 &&  ![(f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)]) ]
##f$myfunc115##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_StackSize <= 40 && f$OpenPPL_PotSize >= 10 && [f$OpenPPL_Overcards == 1 || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)]) ]
##f$myfunc116##
[ (f$OpenPPL_BotRaisedBeforeFlop &&  ![(f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] && f$OpenPPL_Overcards == 1) ]
##f$myfunc117##
[ (f$OpenPPL_BotRaisedBeforeFlop &&  ![(f$OpenPPL_Position == f$OpenPPL_Last || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] && f$OpenPPL_Overcards == 2) ]
##f$myfunc118##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_Opponents >= 2 && [f$OpenPPL_SuitsOnBoard == 2 || f$OpenPPL_StraightPossible] && f$OpenPPL_Overcards == 2 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)]) ]
##f$myfunc119##
[ (f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_SuitsOnBoard == 2 || f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents > 1 &&  ![(f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_UncoordinatedFlop)]) ]
##f$myfunc120##
[ (f$OpenPPL_BotRaisedBeforeFlop &&  ![(f$OpenPPL_SuitsOnBoard == 1 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_HaveInsideStraightDraw && [($AK) || ($AQ) || ($AJ) || ($AT) || ($KQ) || ($KJ) || ($QJ) || ($KT) || ($QT) || ($JT)]) ]
##f$myfunc121##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_OpponentsAtTable <= 6 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_SuitsOnBoard == 1 || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)])] && f$OpenPPL_Opponents == 1) ]
##f$myfunc122##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_OpponentsAtTable <= 6 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_SuitsOnBoard == 1 || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)])] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc123##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_OpponentsAtTable <= 6 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_SuitsOnBoard == 1 || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)])] && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc124##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_OpponentsAtTable <= 6 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_SuitsOnBoard == 1 || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)])] && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc125##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_SuitsOnBoard == 1 || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)])] && f$OpenPPL_Opponents == 2) ]
##f$myfunc126##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_OpponentsAtTable <= 6 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_SuitsOnBoard == 1 || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)])] && f$OpenPPL_Opponents == 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc127##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_OpponentsAtTable > 6 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_SuitsOnBoard == 1 || f$OpenPPL_StraightPossible)] && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_Overcards == 2] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc128##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_OpponentsAtTable > 6 &&  ![(f$OpenPPL_RaisesBeforeFlop || f$OpenPPL_SuitsOnBoard == 1 || f$OpenPPL_StraightPossible)] && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc129##
[ (f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_StackSize >= 14 && f$OpenPPL_Opponents == 1 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw)]) ]
##f$myfunc130##
[ ( ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_Overcards == 2)]) ]
##f$myfunc131##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind > 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 14] && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc132##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc133##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 7] &&  ![f$OpenPPL_TripsOnBoard] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc134##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible && f$OpenPPL_HaveFlushDraw && [($A) || ($K)]) ]
##f$myfunc135##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible && f$OpenPPL_HaveFlushDraw && [($Q) || ($J)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc136##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible && f$OpenPPL_HaveFlushDraw && f$OpenPPL_StackSize <= 15) ]
##f$myfunc137##
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc138##
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_Random <= 70 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc139##
[ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc140##
[ (f$OpenPPL_HaveTrips && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 7) ]
##f$myfunc141##
[ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_SuitsOnBoard == 1)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 70 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc142##
[ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc143##
[ (f$OpenPPL_HaveTwoPair && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_SuitsOnBoard == 1)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc144##
[ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_Random <= 70 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc145##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_PairOnBoard && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [($A) || ($K) || ($Q)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)])]) ]
##f$myfunc146##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_BotRaisedBeforeFlop && [($AA) || ($KK) || ($QQ)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc147##
[ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ)] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_SuitsOnBoard == 1)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc148##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc149##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ)] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_SuitsOnBoard == 1)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc150##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc151##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Random <= 70 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc152##
[ (f$OpenPPL_BotRaisedBeforeFlop &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_RaisesBeforeFlop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc153##
[ (f$OpenPPL_BotRaisedBeforeFlop &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_RaisesBeforeFlop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HavePair &&  ![(f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc154##
[ ([f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair] &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc155##
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveQuads)]) ]
##f$myfunc156##
[ (f$OpenPPL_HaveStraightFlush) ]
##f$myfunc157##
[ (f$OpenPPL_HaveStraightFlush && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc158##
[ (f$OpenPPL_HaveQuads) ]
##f$myfunc159##
[ (f$OpenPPL_HaveQuads && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc160##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind > 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 14] && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc161##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 3] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc162##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc163##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 7] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc164##
[ (f$OpenPPL_HaveNutFlush) ]
##f$myfunc165##
[ (f$OpenPPL_HaveNutFlush && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc166##
[ (f$OpenPPL_HaveFlush) ]
##f$myfunc167##
[ (f$OpenPPL_HaveFlush && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc168##
[ (f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc169##
[ (f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc170##
[ (f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc171##
[ (f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc172##
[ (f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc173##
[ (f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc174##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc175##
[ (f$OpenPPL_HaveSet && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents == 1) ]
##f$myfunc176##
[ (f$OpenPPL_HaveSet && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc177##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc178##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc179##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible]) ]
##f$myfunc180##
[ (f$OpenPPL_HaveSet && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc181##
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc182##
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc183##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible]) ]
##f$myfunc184##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc185##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [($AK) || ($AQ) || ($AJ) || ($AT)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc186##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] && [($AK) || ($AQ) || ($AJ) || ($AT)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc187##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc188##
[ (f$OpenPPL_HaveTrips &&  ![f$OpenPPL_TripsOnBoard] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc189##
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips)]) ]
##f$myfunc190##
[ (f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc191##
[ (f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc192##
[ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc193##
[ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc194##
[ (f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc195##
[ (f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc196##
[ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] &&  ![f$OpenPPL_HaveTopTwoPair]) ]
##f$myfunc197##
[ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] &&  ![f$OpenPPL_HaveTopTwoPair] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc198##
[ (f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents == 1 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99)]) ]
##f$myfunc199##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents == 1 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99)]) ]
##f$myfunc200##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] && f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))]) ]
##f$myfunc201##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] && f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc202##
[ (f$OpenPPL_HaveOverPair && [$Q] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))]) ]
##f$myfunc203##
[ (f$OpenPPL_HaveOverPair && [$Q] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc204##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc205##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] && f$OpenPPL_Opponents <= 3 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc206##
[ (f$OpenPPL_HaveOverPair && [$Q] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc207##
[ (f$OpenPPL_HaveOverPair && [$Q] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc208##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc209##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc210##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc211##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc212##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc213##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc214##
[ (f$OpenPPL_HaveOverPair && [($Q) || ($J)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc215##
[ (f$OpenPPL_HaveOverPair && [($Q) || ($J)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 2) ]
##f$myfunc216##
[ (f$OpenPPL_HaveOverPair && [($T) || ($9) || ($8) || ($7)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc217##
[ (f$OpenPPL_HaveOverPair && [($Q) || ($J)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc218##
[ (f$OpenPPL_HaveOverPair && [($Q) || ($J)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc219##
[ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc220##
[ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc221##
[ (f$OpenPPL_HaveOverPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible]) ]
##f$myfunc222##
[ (f$OpenPPL_HaveOverPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ]
##f$myfunc223##
[ (f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc224##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc225##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 2) ]
##f$myfunc226##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($A9)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc227##
[ (f$OpenPPL_HaveTopPair &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents == 1 && [($AK) || ($AQ) || ($AJ)]) ]
##f$myfunc228##
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents == 1 && [($AK) || ($AQ) || ($AJ)]) ]
##f$myfunc229##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc230##
[ (f$OpenPPL_HaveTopPair && [$AK] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc231##
[ (f$OpenPPL_HaveTopPair && [$AK] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc232##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc233##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc234##
[ (f$OpenPPL_HaveTopPair && [$AK] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ]
##f$myfunc235##
[ (f$OpenPPL_HaveTopPair && [$AQ] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ]
##f$myfunc236##
[ (f$OpenPPL_HaveTopPair && [$AK] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc237##
[ (f$OpenPPL_HaveTopPair && [($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc238##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc239##
[ (f$OpenPPL_Random <= 60 && f$OpenPPL_HaveTopPair && [$AK] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc240##
[ (f$OpenPPL_Random <= 60 && f$OpenPPL_HaveTopPair && [$AK] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc241##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc242##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($KJ) || ($QJ) || ($KT) || ($QT) || ($JT)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize <= 15) ]
##f$myfunc243##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($KJ) || ($QJ) || ($KT) || ($QT) || ($JT)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize <= 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc244##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($KJ) || ($QJ) || ($KT) || ($QT) || ($JT)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize > 15) ]
##f$myfunc245##
[ (f$OpenPPL_HaveTopPair && [($AT) || ($KQ) || ($KJ) || ($QJ) || ($KT) || ($QT) || ($JT)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize > 15 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc246##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc247##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc248##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc249##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc250##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9])]) ]
##f$myfunc251##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ]
##f$myfunc252##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc253##
[ (f$OpenPPL_HaveTopPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc254##
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_BotCalledBeforeFlop || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveStraightDraw && [($TT) || ($JJ) || ($QQ) || ($KK)]) ]
##f$myfunc255##
[ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_BotCalledBeforeFlop &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveStraightDraw && [($TT) || ($JJ) || ($QQ) || ($KK)]) ]
##f$myfunc256##
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_BotCalledBeforeFlop || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc257##
[ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_BotCalledBeforeFlop &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc258##
[ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard || [$23])]) ]
##f$myfunc259##
[ (f$OpenPPL_HaveNutFlushDraw &&  ![f$OpenPPL_FlushPossible] && [$AXs] && f$OpenPPL_Opponents == 1) ]
##f$myfunc260##
[ (f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc261##
[ (f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc262##
[ (f$OpenPPL_Have2ndNutFlushDraw) ]
##f$myfunc263##
[ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2 &&  ![f$OpenPPL_FlushPossible] && [($AK) || ($AQ) || ($AJ) || ($KQ) || ($KJ) || ($QJ) || ($T9) || ($98) || ($87)]) ]
##f$myfunc264##
[ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc265##
[ (f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible] && [($AK) || ($AQ) || ($AJ)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0))]) ]
##f$myfunc266##
[ (f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc267##
[ (f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible] && [($TT) || ($JJ) || ($QQ) || ($KK)]) ]
##f$myfunc268##
[ (f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible] && [($TT) || ($JJ) || ($QQ) || ($KK)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc269##
[ (f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [($AK) || ($AQ) || ($AJs) || ($KQs)]) ]
##f$myfunc270##
[ ([f$OpenPPL_BotRaisedBeforeFlop || f$OpenPPL_BotRaisedOnFlop] && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && [($AK) || ($AQ) || ($AJ) || ($KQ) || f$OpenPPL_PairInHand || f$OpenPPL_HavePair]) ]
##f$myfunc271##
[ (f$OpenPPL_Position == f$OpenPPL_Last &&  ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Overcards == 2 && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc272##
[ (f$OpenPPL_PairInHand && f$OpenPPL_PairOnBoard && [($TT) || ($99) || ($88) || ($77) || ($66) || ($55)] && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc273##
[ (f$OpenPPL_PairInHand && f$OpenPPL_PairOnBoard) ]
##f$myfunc274##
[ (f$OpenPPL_PairInHand && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [($TT) || ($99) || ($88) || ($77) || ($66) || ($55)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc275##
[ (f$OpenPPL_PairInHand &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] &&  ![([$22] || [$33] || [$44])]) ]
##f$myfunc276##
[ (f$OpenPPL_PairInHand && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] &&  ![([$22] || [$33] || [$44])]) ]
##f$myfunc277##
[ (f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || [$2] || [$3] || [$4] || [$5] || [$6] || [$7] || [$8] || [$9] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)])] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc278##
[ ([f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_PairOnBoard || [$22] || [$33] || [$44] || [$23])] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc279##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize >= 10) ]
##f$myfunc280##
[ (f$OpenPPL_StackSize <= 10 && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw] && f$OpenPPL_TotalInvested > 66 * 0.01 * f$OpenPPL_StackSize) ]
##f$myfunc281##
[ (f$OpenPPL_Others) ]
##f$myfunc282##
[ (f$OpenPPL_OpponentsAtTable <= 2 && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_StraightPossible && f$OpenPPL_SuitsOnBoard == 3 &&  ![((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))]) ]
##f$myfunc283##
[ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HavePair)] && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc284##
[ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HavePair)]) ]
##f$myfunc285##
[ ( ![f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HavePair)]) ]
##f$myfunc286##
[ (f$OpenPPL_BotRaisedBeforeFlop &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HavePair || f$OpenPPL_Overcards == 1] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc287##
[ (f$OpenPPL_InBigBlind && f$OpenPPL_CalledOnFlop && f$OpenPPL_PairOnBoard && [f$OpenPPL_PairInHand || f$OpenPPL_Overcards == 2] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])] && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc288##
[ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] &&  ![f$OpenPPL_RaisesBeforeFlop] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc289##
[ ( ![(f$OpenPPL_UncoordinatedFlop || f$OpenPPL_BotRaisedBeforeFlop || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])] && f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw] && f$OpenPPL_Random <= 50) ]
##f$myfunc290##
[ ( ![(f$OpenPPL_UncoordinatedFlop || f$OpenPPL_BotRaisedBeforeFlop || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])] && f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_Opponents == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && [f$OpenPPL_HavePair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw]) ]
##f$myfunc291##
[ ( ![(f$OpenPPL_UncoordinatedFlop || f$OpenPPL_BotRaisedBeforeFlop || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])] && f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc292##
[ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_StackSize <= 55 || f$OpenPPL_TotalInvested > 300 * 0.01 * f$OpenPPL_StackSize)] && f$OpenPPL_OpponentsOnFlop > 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc293##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_StackSize <= 55 || f$OpenPPL_TotalInvested > 300 * 0.01 * f$OpenPPL_StackSize)] && f$OpenPPL_OpponentsOnFlop > 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc294##
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFullHouse || f$OpenPPL_StackSize <= 35 || f$OpenPPL_TotalInvested > 300 * 0.01 * f$OpenPPL_StackSize)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc295##
[ (f$OpenPPL_TotalInvested > 100 * 0.01 * f$OpenPPL_StackSize) ]
##f$myfunc296##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse]) ]
##f$myfunc297##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc298##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents > 2 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc299##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc300##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents > 2 && f$OpenPPL_FlushPossible && f$OpenPPL_HaveFlushDraw && [($A) || ($K) || ($Q) || ($J)]) ]
##f$myfunc301##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveFlushDraw && [($A) || ($K) || ($Q) || ($J)]) ]
##f$myfunc302##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents > 2 && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc303##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc304##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc305##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents > 2 && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc306##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc307##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc308##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_Opponents > 2 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc309##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc310##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_Opponents > 2 && f$OpenPPL_FlushPossible && f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc311##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc312##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter]) ]
##f$myfunc313##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_Opponents > 2 && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc314##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc315##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_Opponents > 2 && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc316##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveTopPair && f$OpenPPL_Have3rdBestKickerOrBetter] && f$OpenPPL_StraightPossible && f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc317##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc318##
[ (f$OpenPPL_StackSize <= 35 && f$OpenPPL_PotSize >= 20 && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc319##
[ (f$OpenPPL_StackSize <= 35 && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [($AK) || ($AQ) || ($AJ) || ($AT) || ($KQ) || ($KJ)]) ]
##f$myfunc320##
[ (f$OpenPPL_StackSize <= 40 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35 && f$OpenPPL_PotSize <= 5) ]
##f$myfunc321##
[ (f$OpenPPL_StackSize <= 40 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35) ]
##f$myfunc322##
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35 && f$OpenPPL_PotSize <= 5) ]
##f$myfunc323##
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35) ]
##f$myfunc324##
[ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_StackSize <= 55 || f$OpenPPL_TotalInvested > 300 * 0.01 * f$OpenPPL_StackSize)] && f$OpenPPL_OpponentsOnFlop > 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc325##
[ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_StackSize <= 55 || f$OpenPPL_TotalInvested > 300 * 0.01 * f$OpenPPL_StackSize)] && f$OpenPPL_OpponentsOnFlop > 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc326##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind > 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 14] && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc327##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] && f$OpenPPL_TripsOnBoard && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc328##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] &&  ![f$OpenPPL_TripsOnBoard] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc329##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind >= 5 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 7] &&  ![f$OpenPPL_TripsOnBoard] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc330##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_NoBettingOnFlop && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10 &&  ![(f$OpenPPL_TopFlopCardPairedonTurn || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35) ]
##f$myfunc331##
[ (f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10 &&  ![(f$OpenPPL_TopFlopCardPairedonTurn || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35) ]
##f$myfunc332##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_StackSize <= 110 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10 &&  ![(f$OpenPPL_TopFlopCardPairedonTurn || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35) ]
##f$myfunc333##
[ (f$OpenPPL_Opponents == 2 && [f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last] && f$OpenPPL_StackSize <= 110 && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PotSize < 10 &&  ![(f$OpenPPL_TopFlopCardPairedonTurn || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)])] && f$OpenPPL_StackSize > 35) ]
##f$myfunc334##
[ (f$OpenPPL_OneCardFlushPossible && f$OpenPPL_CalledOnFlop &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips)]) ]
##f$myfunc335##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_PairInHand && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveNutStraight)]) ]
##f$myfunc336##
[ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle || f$OpenPPL_Position == f$OpenPPL_Last]) ]
##f$myfunc337##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_PairOnTurn && [($AA) || ($KK) || ($QQ)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_TopFlopCardPairedonTurn)]) ]
##f$myfunc338##
[ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ)] && f$OpenPPL_BotRaisedOnFlop && [f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossibleOnTurn]) ]
##f$myfunc339##
[ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ)] && f$OpenPPL_BotRaisedOnFlop && [f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc340##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_PairOnTurn && [($AA) || ($KK) || ($QQ)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc341##
[ (f$OpenPPL_HaveOverPair && [($JJ) || ($TT) || ($99) || ($88) || ($77)] && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_HaveStraightDraw]) ]
##f$myfunc342##
[ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ) || ($JJ)] && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)]) ]
##f$myfunc343##
[ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ) || ($JJ)] && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_CalledOnFlop)]) ]
##f$myfunc344##
[ (f$OpenPPL_HaveOverPair && [($AA) || ($KK) || ($QQ) || ($JJ)] && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)]) ]
##f$myfunc345##
[ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)]) ]
##f$myfunc346##
[ (f$OpenPPL_HaveOverPair && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_TotalInvested > 233 * 0.01 * f$OpenPPL_StackSize)]) ]
##f$myfunc347##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_BotRaisedOnFlop && [f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossibleOnTurn]) ]
##f$myfunc348##
[ (f$OpenPPL_HaveTopPair && [($AK) || ($AQ)] && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc349##
[ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_StraightPossibleOnTurn) ]
##f$myfunc350##
[ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_NoBettingOnFlop) ]
##f$myfunc351##
[ ([f$OpenPPL_NoBettingOnFlop || f$OpenPPL_CalledOnFlop] && f$OpenPPL_StackSize >= 14 && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_TopFlopCardPairedonTurn || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)]) ]
##f$myfunc352##
[ (f$OpenPPL_Opponents == 1 && [f$OpenPPL_HadTopPairOnFlop || f$OpenPPL_HadOverPairOnFlop] && f$OpenPPL_OvercardsOnBoard == 1 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)]) ]
##f$myfunc353##
[ (f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_FlushPossible && f$OpenPPL_PotSize > 20 &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc354##
[ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc355##
[ ([f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_HaveInsideStraightDraw)]) ]
##f$myfunc356##
[ (f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize) ]
##f$myfunc357##
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc358##
[ (f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc359##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc360##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check]) ]
##f$myfunc361##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_HaveOverPair && [f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveNutStraight || f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)]) ]
##f$myfunc362##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveQuads && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc363##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveQuads && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ]
##f$myfunc364##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraightFlush && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc365##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraightFlush && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ]
##f$myfunc366##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First) ]
##f$myfunc367##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 1 && [ !([f$OpenPPL_Position == f$OpenPPL_First])]) ]
##f$myfunc368##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_First) ]
##f$myfunc369##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Middle) ]
##f$myfunc370##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc371##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents > 2 && [ !([f$OpenPPL_Position == f$OpenPPL_Last])]) ]
##f$myfunc372##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents > 2 && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc373##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 1 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_First) ]
##f$myfunc374##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 1 && [ !(f$OpenPPL_TripsOnBoard)] && [ !([f$OpenPPL_Position == f$OpenPPL_First])]) ]
##f$myfunc375##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 2 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_First) ]
##f$myfunc376##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 2 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_Middle) ]
##f$myfunc377##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 2 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc378##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents > 2 && [ !(f$OpenPPL_TripsOnBoard)] && [ !([f$OpenPPL_Position == f$OpenPPL_Last])]) ]
##f$myfunc379##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents > 2 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc380##
[ (f$OpenPPL_TotalInvested >= 66 * 0.01 * f$OpenPPL_StackSize) ]
##f$myfunc381##
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc382##
[ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc383##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutFlush && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc384##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutFlush) ]
##f$myfunc385##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc386##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc387##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents > 2) ]
##f$myfunc388##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc389##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc390##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc391##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_HaveFlushDraw] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_2) == 0))]) ]
##f$myfunc392##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc393##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc394##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc395##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc396##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible)]) ]
##f$myfunc397##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc398##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents == 1) ]
##f$myfunc399##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents > 1) ]
##f$myfunc400##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents <= 2) ]
##f$myfunc401##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight && f$OpenPPL_Opponents <= 2) ]
##f$myfunc402##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraight && f$OpenPPL_Opponents > 2) ]
##f$myfunc403##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc404##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc405##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc406##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc407##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ]
##f$myfunc408##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc409##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc410##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardFlushPossible && f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc411##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc412##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc413##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc414##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc415##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible]) ]
##f$myfunc416##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc417##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_FlushPossible]) ]
##f$myfunc418##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_StraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc419##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveSet && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_Opponents == 1) ]
##f$myfunc420##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc421##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents > 3) ]
##f$myfunc422##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc423##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc424##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips]) ]
##f$myfunc425##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc426##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc427##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc428##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc429##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc430##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc431##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible]) ]
##f$myfunc432##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc433##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc434##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc435##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard == 2 && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible]) ]
##f$myfunc436##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc437##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents == 1) ]
##f$myfunc438##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents <= 2) ]
##f$myfunc439##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc440##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc441##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc442##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard >= 3 && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc443##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard >= 3 && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc444##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![f$OpenPPL_StraightPossible] &&  ![f$OpenPPL_PairOnBoard] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc445##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc446##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc447##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc448##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc449##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_PairOnBoard] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc450##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc451##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc452##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc453##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc454##
[ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] && [($8) || ($9) || ($T)] &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc455##
[ (f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0))]) ]
##f$myfunc456##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K) || ($Q) || ($J)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc457##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K) || ($Q) || ($J)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc458##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc459##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc460##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc461##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc462##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents == 1) ]
##f$myfunc463##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q) || ($J)] &&  ![(f$OpenPPL_PairOnFlop || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnTurn && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc464##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q) || ($J)] &&  ![(f$OpenPPL_PairOnFlop || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnTurn && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))]) ]
##f$myfunc465##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc466##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K)] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc467##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![f$OpenPPL_HaveStraight]) ]
##f$myfunc468##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K) || ($Q) || ($J)]) ]
##f$myfunc469##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K) || ($Q) || ($J)]) ]
##f$myfunc470##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc471##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveFlushDraw &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc472##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc473##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1 && [($A) || ($K) || ($Q) || ($J)]) ]
##f$myfunc474##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1) ]
##f$myfunc475##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveOverPair) ]
##f$myfunc476##
[ (f$OpenPPL_HaveTopPair && me_re_userinbigblind &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_BetSize <= 5)]) ]
##f$myfunc477##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossibleOnTurn] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)] && f$OpenPPL_PotSize > 20) ]
##f$myfunc478##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ]
##f$myfunc479##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveNutFlushDraw)]) ]
##f$myfunc480##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc481##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc482##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ]
##f$myfunc483##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc484##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw &&  ![f$OpenPPL_OneCardStraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc485##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw &&  ![f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc486##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc487##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_HaveFlushDraw]) ]
##f$myfunc488##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc489##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible) ]
##f$myfunc490##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents > 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible) ]
##f$myfunc491##
[ (f$OpenPPL_Random <= 70 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents >= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible) ]
##f$myfunc492##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc493##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc494##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc495##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc496##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_PairOnBoard] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc497##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc498##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || [$AK] || [$AQ] || [$AJ] || [$AT] || [$A9] || [$A8])] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc499##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ) || ($AT) || ($A9) || ($A8)] &&  ![(f$OpenPPL_CalledOnFlop || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AcePresentOnFlop) ]
##f$myfunc500##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] &&  ![f$OpenPPL_AcePresentOnFlop]) ]
##f$myfunc501##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc502##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnBoard && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc503##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard || me_re_userinbigblind)]) ]
##f$myfunc504##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard || me_re_userinbigblind)] && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc505##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc506##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc507##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc508##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc509##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc510##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc511##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents <= 2) ]
##f$myfunc512##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveTopPair) ]
##f$myfunc513##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc514##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc515##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc516##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc517##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc518##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc519##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc520##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc521##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair && f$OpenPPL_Opponents > 1 &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc522##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair) ]
##f$myfunc523##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])]) ]
##f$myfunc524##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc525##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc526##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])]) ]
##f$myfunc527##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc528##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc529##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc530##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || f$OpenPPL_Position == f$OpenPPL_First)] && f$OpenPPL_Opponents == 2 && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc531##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndTopPair &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents > 2 &&  ![(f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])]) ]
##f$myfunc532##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc533##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair) ]
##f$myfunc534##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] &&  ![f$OpenPPL_AcePresentOnFlop]) ]
##f$myfunc535##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] &&  ![f$OpenPPL_AcePresentOnFlop] && f$OpenPPL_Opponents == 1) ]
##f$myfunc536##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard) ]
##f$myfunc537##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible] && [($KK) || ($QQ) || ($JJ)]) ]
##f$myfunc538##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveFlushDraw && [($KK) || ($QQ) || ($JJ)]) ]
##f$myfunc539##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible] && [($KK) || ($QQ) || ($JJ)]) ]
##f$myfunc540##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible] && [($KK) || ($QQ) || ($JJ)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1) ]
##f$myfunc541##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc542##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc543##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc544##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents <= 3) ]
##f$myfunc545##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc546##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_BetSize <= 2) ]
##f$myfunc547##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ]
##f$myfunc548##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_TripsOnBoard)]) ]
##f$myfunc549##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc550##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc551##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNutFlushDraw && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc552##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc553##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Have2ndNutFlushDraw && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc554##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_FlushPossible)]) ]
##f$myfunc555##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88) || ($77) || ($66) || ($55)]) ]
##f$myfunc556##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible) ]
##f$myfunc557##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc558##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_HaveStraight] && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TripsOnBoard)]) ]
##f$myfunc559##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_HaveStraight] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TripsOnBoard)]) ]
##f$myfunc560##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && [($AK) || ($AQ) || ($AJ)] && f$OpenPPL_OpponentIsAllin) ]
##f$myfunc561##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible] && [($AK) || ($AQ) || ($AJ)]) ]
##f$myfunc562##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc563##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![f$OpenPPL_HaveStraight]) ]
##f$myfunc564##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HavePair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw]) ]
##f$myfunc565##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_OpponentsAtTable <= 4 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HadTopPairOnFlop || f$OpenPPL_HadOverPairOnFlop] && f$OpenPPL_OvercardsOnBoard == 1 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc566##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Overcards == 2 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ]
##f$myfunc567##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Overcards == 2 && f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [($AK) || ($AQ) || ($AJs) || ($KQs) || ($KJs) || ($QJs)]) ]
##f$myfunc568##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check]) ]
##f$myfunc569##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_HaveOverPair && [f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveNutStraight || f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)]) ]
##f$myfunc570##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveQuads && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc571##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveQuads && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ]
##f$myfunc572##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraightFlush && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc573##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraightFlush) ]
##f$myfunc574##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_First) ]
##f$myfunc575##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 1 && [ !([f$OpenPPL_Position == f$OpenPPL_First])]) ]
##f$myfunc576##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_First) ]
##f$myfunc577##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Middle) ]
##f$myfunc578##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc579##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents > 2 && [ !([f$OpenPPL_Position == f$OpenPPL_Last])]) ]
##f$myfunc580##
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_Opponents > 2 && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc581##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 1 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_First) ]
##f$myfunc582##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 1 && [ !(f$OpenPPL_TripsOnBoard)] && [ !([f$OpenPPL_Position == f$OpenPPL_First])]) ]
##f$myfunc583##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 2 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_First) ]
##f$myfunc584##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 2 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_Middle) ]
##f$myfunc585##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents == 2 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc586##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents > 2 && [ !(f$OpenPPL_TripsOnBoard)] && [ !([f$OpenPPL_Position == f$OpenPPL_Last])]) ]
##f$myfunc587##
[ (f$OpenPPL_HaveFullHouse && f$OpenPPL_Opponents > 2 && [ !(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Position == f$OpenPPL_Last) ]
##f$myfunc588##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutFlush && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc589##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutFlush) ]
##f$myfunc590##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc591##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc592##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc593##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc594##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents > 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc595##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc596##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_HaveFlushDraw] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_2) == 0))]) ]
##f$myfunc597##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc598##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc599##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc600##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc601##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible)]) ]
##f$myfunc602##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc603##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents == 1) ]
##f$myfunc604##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents > 1) ]
##f$myfunc605##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents <= 2) ]
##f$myfunc606##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_Opponents <= 2) ]
##f$myfunc607##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_Opponents > 2) ]
##f$myfunc608##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc609##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc610##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc611##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc612##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ]
##f$myfunc613##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc614##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && f$OpenPPL_BotsLastAction == f$OpenPPL_Call &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc615##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardFlushPossible && f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc616##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc617##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc618##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc619##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc620##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_FlushPossible && f$OpenPPL_StraightPossible]) ]
##f$myfunc621##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc622##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_FlushPossible]) ]
##f$myfunc623##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_StraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc624##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveSet && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_Opponents == 1) ]
##f$myfunc625##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc626##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_StraightPossible] && f$OpenPPL_Opponents > 3) ]
##f$myfunc627##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc628##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc629##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips]) ]
##f$myfunc630##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc631##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc632##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc633##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc634##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc635##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc636##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible]) ]
##f$myfunc637##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc638##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc639##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc640##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents == 1) ]
##f$myfunc641##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents <= 2) ]
##f$myfunc642##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc643##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc644##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc645##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_PairOnBoard || f$OpenPPL_StraightPossible] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc646##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard == 2 && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible]) ]
##f$myfunc647##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc648##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard >= 3 && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc649##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard >= 3 && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_PairOnBoard] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc650##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![f$OpenPPL_StraightPossible] &&  ![f$OpenPPL_PairOnBoard] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc651##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc652##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc653##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc654##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc655##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_StraightPossible &&  ![f$OpenPPL_PairOnBoard] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc656##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc657##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc658##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc659##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc660##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc661##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K) || ($Q) || ($J)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc662##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K) || ($Q) || ($J)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc663##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc664##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])] && f$OpenPPL_Opponents <= 2 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc665##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc666##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc667##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && f$OpenPPL_Opponents == 1) ]
##f$myfunc668##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q) || ($J)] &&  ![(f$OpenPPL_PairOnFlop || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnTurn && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc669##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && [($A) || ($K) || ($Q) || ($J)] &&  ![(f$OpenPPL_PairOnFlop || f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnTurn && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0))]) ]
##f$myfunc670##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![f$OpenPPL_HaveStraight]) ]
##f$myfunc671##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K) || ($Q) || ($J)]) ]
##f$myfunc672##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc673##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K)] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc674##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [($A) || ($K) || ($Q) || ($J)]) ]
##f$myfunc675##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc676##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveFlushDraw &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc677##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] &&  ![([$A] || [$K] || [$Q] || [$J])]) ]
##f$myfunc678##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1 && [($A) || ($K) || ($Q) || ($J)]) ]
##f$myfunc679##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1) ]
##f$myfunc680##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair) ]
##f$myfunc681##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossibleOnTurn] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)] && f$OpenPPL_PotSize > 20) ]
##f$myfunc682##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible]) ]
##f$myfunc683##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call) ]
##f$myfunc684##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveNutFlushDraw)]) ]
##f$myfunc685##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && f$OpenPPL_BotRaisedOnFlop && f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc686##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc687##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ]
##f$myfunc688##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc689##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc690##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc691##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc692##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc693##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && f$OpenPPL_PairOnBoard && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc694##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_HaveFlushDraw]) ]
##f$myfunc695##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc696##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc697##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc698##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc699##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents >= 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible) ]
##f$myfunc700##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_Opponents >= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StraightPossible) ]
##f$myfunc701##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents <= 2) ]
##f$myfunc702##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc703##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc704##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc705##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_PairOnBoard]) ]
##f$myfunc706##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_PairOnBoard] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc707##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc708##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc709##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || [$AK] || [$AQ] || [$AJ] || [$AT] || [$A9] || [$A8])] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc710##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [($AK) || ($AQ) || ($AJ) || ($AT) || ($A9) || ($A8)] &&  ![(f$OpenPPL_CalledOnFlop || f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_AcePresentOnFlop) ]
##f$myfunc711##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] &&  ![f$OpenPPL_AcePresentOnFlop]) ]
##f$myfunc712##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc713##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc714##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc715##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair) ]
##f$myfunc716##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc717##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc718##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc719##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc720##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc721##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && f$OpenPPL_BotRaisedOnFlop && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc722##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc723##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] && [($8) || ($9) || ($T) || ($J) || ($Q) || ($K)] &&  ![(f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)) || ($Q) || ($A)] &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc724##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair && f$OpenPPL_Opponents > 1 &&  ![(f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_HaveNutStraightDraw || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc725##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndTopPair) ]
##f$myfunc726##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_HaveFlushDraw) ]
##f$myfunc727##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_HaveStraightDraw) ]
##f$myfunc728##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])]) ]
##f$myfunc729##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndTopPair && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc730##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc731##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndTopPair &&  ![f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_OneCardStraightPossible] &&  ![((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))] && f$OpenPPL_Opponents > 2) ]
##f$myfunc732##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair) ]
##f$myfunc733##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc734##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible] && [($KK) || ($QQ) || ($JJ)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1) ]
##f$myfunc735##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible] && [($KK) || ($QQ) || ($JJ)] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc736##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveFlushDraw && [($KK) || ($QQ) || ($JJ)] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc737##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1) ]
##f$myfunc738##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc739##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 3 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc740##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible] && [($KK) || ($QQ) || ($JJ)]) ]
##f$myfunc741##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1) ]
##f$myfunc742##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents <= 3) ]
##f$myfunc743##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc744##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_TripsOnBoard)]) ]
##f$myfunc745##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc746##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc747##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutFlushDraw && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc748##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc749##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndNutFlushDraw && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc750##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_FlushPossible)]) ]
##f$myfunc751##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88) || ($77) || ($66) || ($55)]) ]
##f$myfunc752##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible) ]
##f$myfunc753##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlushDraw &&  ![f$OpenPPL_FlushPossible] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc754##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_TripsOnBoard || f$OpenPPL_OneCardFlushPossible)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc755##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_HaveStraight] &&  ![f$OpenPPL_TripsOnBoard] && f$OpenPPL_Overcards == 2 &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc756##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_TripsOnBoard)]) ]
##f$myfunc757##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraightDraw &&  ![f$OpenPPL_HaveStraight] && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightOnBoard || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TripsOnBoard)]) ]
##f$myfunc758##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HaveStraight || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_TripsOnBoard)]) ]
##f$myfunc759##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && [($AK) || ($AQ) || ($AJ)] && f$OpenPPL_OpponentIsAllin) ]
##f$myfunc760##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible] && [($AK) || ($AQ) || ($AJ)]) ]
##f$myfunc761##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveInsideStraightDraw &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc762##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ]
##f$myfunc763##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![f$OpenPPL_HaveStraight]) ]
##f$myfunc764##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveInsideStraightDraw] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ]
##f$myfunc765##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_NoBettingOnFlop && f$OpenPPL_BetSize == 0] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 10) ]
##f$myfunc766##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_OpponentsAtTable <= 4 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HadTopPairOnFlop || f$OpenPPL_HadOverPairOnFlop] && f$OpenPPL_OvercardsOnBoard == 1 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0))] &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips || f$OpenPPL_HaveSet || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc767##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Overcards == 2 && f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [($AK) || ($AQ) || ($AJs) || ($KQs) || ($KJs) || ($QJs)]) ]
##f$myfunc768##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Overcards == 2 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ]
##f$myfunc769##
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc770##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_BotRaisedOnFlop &&  ![(f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] && [f$OpenPPL_Overcards == 1 || f$OpenPPL_Overcards == 2]) ]
##f$myfunc771##
[ (f$OpenPPL_BotCalledBeforeFlop && f$OpenPPL_BotRaisedOnFlop &&  ![(f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)] && [f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible] && [f$OpenPPL_Overcards == 1 || f$OpenPPL_Overcards == 2]) ]
##f$myfunc772##
[ (f$OpenPPL_Others) ]
##f$myfunc773##
[ ([f$OpenPPL_OpponentsAtTable <= 2 || f$OpenPPL_StackSize <= 70] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ]
##f$myfunc774##
[ (f$OpenPPL_BotRaisedOnFlop &&  ![f$OpenPPL_CalledOnFlop] && f$OpenPPL_TopFlopCardPairedonTurn && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)]) ]
##f$myfunc775##
[ (f$OpenPPL_HaveNutFlush && f$OpenPPL_CalledOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc776##
[ (f$OpenPPL_HaveStraight && f$OpenPPL_PairInHand && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveNutStraight)]) ]
##f$myfunc777##
[ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc778##
[ ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)] &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc779##
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc780##
[ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc781##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveQuads && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc782##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveQuads) ]
##f$myfunc783##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFullHouse && f$OpenPPL_NutFullHouseOrFourOfAKind >= 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 6 && f$OpenPPL_TripsOnBoard) ]
##f$myfunc784##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_NutFullHouseOrFourOfAKind > 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 14] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc785##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc786##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc787##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_NutFullHouseOrFourOfAKind >= 5 &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc788##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_NutFullHouseOrFourOfAKind >= 6 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 7] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc789##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFlush] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc790##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1) ]
##f$myfunc791##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutFlush &&  ![f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc792##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents >= 2 &&  ![f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc793##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard &&  ![f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc794##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc795##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ]
##f$myfunc796##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_FlushOnBoard &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ]
##f$myfunc797##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc798##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc799##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || [$A] || [$K])]) ]
##f$myfunc800##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc801##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc802##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc803##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc804##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc805##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ]
##f$myfunc806##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc807##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc808##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveNutStraight || f$OpenPPL_HaveStraight] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc809##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutStraight && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc810##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call]) ]
##f$myfunc811##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc812##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc813##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc814##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc815##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_2) == 0))]) ]
##f$myfunc816##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc817##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_HaveNutStraight)]) ]
##f$myfunc818##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible)] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc819##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc820##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc821##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight && f$OpenPPL_PairInHand &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc822##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || [$A] || [$2] || [$3] || [$4])] && [($5) || ($6) || ($7) || ($8) || ($9) || ($T)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc823##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || [$A] || [$2] || [$3] || [$4])] && [($5) || ($6) || ($7) || ($8) || ($9) || ($T)]) ]
##f$myfunc824##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc825##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc826##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc827##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_HaveNutStraight]) ]
##f$myfunc828##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_Have2ndNutStraight) ]
##f$myfunc829##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc830##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc831##
[ (f$OpenPPL_HaveSet && f$OpenPPL_CalledOnTurn && f$OpenPPL_Position == f$OpenPPL_First) ]
##f$myfunc832##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_HaveNutFlush]) ]
##f$myfunc833##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveFullHouse)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc834##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_HaveFullHouse)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1) ]
##f$myfunc835##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && f$OpenPPL_FlushPossible) ]
##f$myfunc836##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveSet && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc837##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveSet && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc838##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveSet && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc839##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTrips && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc840##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTrips && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc841##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTrips && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc842##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse]) ]
##f$myfunc843##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc844##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair && f$OpenPPL_OneCardStraightPossible) ]
##f$myfunc845##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossibleOnTurn)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1) ]
##f$myfunc846##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![f$OpenPPL_CalledOnTurn]) ]
##f$myfunc847##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible]) ]
##f$myfunc848##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc849##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc850##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1) ]
##f$myfunc851##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents == 1 &&  ![f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc852##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair && f$OpenPPL_FlushPossible) ]
##f$myfunc853##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents == 1 &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc854##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTwoPair && f$OpenPPL_StraightPossible) ]
##f$myfunc855##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)] && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc856##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc857##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ]
##f$myfunc858##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_HaveFlush] && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc859##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents <= 1) ]
##f$myfunc860##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveOverPair) ]
##f$myfunc861##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ]
##f$myfunc862##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_CalledOnTurn)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc863##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc864##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc865##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_HaveFlush)]) ]
##f$myfunc866##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_CalledOnTurn)]) ]
##f$myfunc867##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_CalledOnTurn)]) ]
##f$myfunc868##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ]
##f$myfunc869##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ]
##f$myfunc870##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc871##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc872##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc873##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveTopPair) ]
##f$myfunc874##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc875##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc876##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents <= 2) ]
##f$myfunc877##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc878##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HavePair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc879##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HavePair && f$OpenPPL_Opponents <= 2) ]
##f$myfunc880##
[ (f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_HaveBestKickerOrBetter &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc881##
[ (f$OpenPPL_Position == f$OpenPPL_First && [f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard] && [$A]) ]
##f$myfunc882##
[ (f$OpenPPL_Position == f$OpenPPL_First && [$A] && f$OpenPPL_Opponents == 1) ]
##f$myfunc883##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveQuads && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc884##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveQuads) ]
##f$myfunc885##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveFullHouse && f$OpenPPL_NutFullHouseOrFourOfAKind >= 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 6 && f$OpenPPL_TripsOnBoard) ]
##f$myfunc886##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_NutFullHouseOrFourOfAKind > 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 14] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc887##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc888##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc889##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_NutFullHouseOrFourOfAKind >= 5 &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc890##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_NutFullHouseOrFourOfAKind >= 6 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 7] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc891##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFlush] && f$OpenPPL_TripsOnBoard &&  ![f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc892##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents >= 2 &&  ![f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc893##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1) ]
##f$myfunc894##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard &&  ![f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc895##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc896##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ]
##f$myfunc897##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_FlushOnBoard &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ]
##f$myfunc898##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc899##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || [$A] || [$K])]) ]
##f$myfunc900##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc901##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc902##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc903##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc904##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc905##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ]
##f$myfunc906##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc907##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_HaveNutStraight || f$OpenPPL_HaveStraight] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc908##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc909##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutStraight && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc910##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc911##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc912##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc913##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc914##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc915##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_2) == 0))]) ]
##f$myfunc916##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc917##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_HaveNutStraight)]) ]
##f$myfunc918##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible)] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc919##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc920##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc921##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight && f$OpenPPL_PairInHand &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc922##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || [$A] || [$2] || [$3] || [$4])] && [($5) || ($6) || ($7) || ($8) || ($9) || ($T)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc923##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || [$A] || [$2] || [$3] || [$4])] && [($5) || ($6) || ($7) || ($8) || ($9) || ($T)]) ]
##f$myfunc924##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc925##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc926##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc927##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_HaveNutStraight]) ]
##f$myfunc928##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_Have2ndNutStraight) ]
##f$myfunc929##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc930##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc931##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_HaveNutFlush]) ]
##f$myfunc932##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveFullHouse)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc933##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && f$OpenPPL_FlushPossible) ]
##f$myfunc934##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveSet && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc935##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveSet && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc936##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveSet && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc937##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTrips && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc938##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTrips && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc939##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTrips && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc940##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse]) ]
##f$myfunc941##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]
##f$myfunc942##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair && f$OpenPPL_OneCardStraightPossible) ]
##f$myfunc943##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_StraightPossibleOnTurn || f$OpenPPL_BotsLastAction == f$OpenPPL_Call)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc944##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![f$OpenPPL_CalledOnTurn]) ]
##f$myfunc945##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible]) ]
##f$myfunc946##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc947##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc948##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1) ]
##f$myfunc949##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents == 1 &&  ![f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc950##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair && f$OpenPPL_FlushPossible) ]
##f$myfunc951##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc952##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair && f$OpenPPL_StraightPossible) ]
##f$myfunc953##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc954##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)] && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc955##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc956##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_HaveFlush] && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc957##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents <= 1) ]
##f$myfunc958##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveOverPair) ]
##f$myfunc959##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc960##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_CalledOnTurn)]) ]
##f$myfunc961##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_CalledOnTurn)]) ]
##f$myfunc962##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ]
##f$myfunc963##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ]
##f$myfunc964##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc965##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc966##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc967##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc968##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveTopPair) ]
##f$myfunc969##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc970##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc971##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents <= 2) ]
##f$myfunc972##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc973##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HavePair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc974##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HavePair && f$OpenPPL_Opponents <= 2) ]
##f$myfunc975##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && f$OpenPPL_HaveBestKickerOrBetter &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc976##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard] && [$A]) ]
##f$myfunc977##
[ (f$OpenPPL_Position == f$OpenPPL_Middle && [$A] && f$OpenPPL_Opponents == 1) ]
##f$myfunc978##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveQuads && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc979##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveQuads) ]
##f$myfunc980##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFullHouse && f$OpenPPL_NutFullHouseOrFourOfAKind >= 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 6 && f$OpenPPL_TripsOnBoard) ]
##f$myfunc981##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_NutFullHouseOrFourOfAKind > 4 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 14] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc982##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc983##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_NutFullHouseOrFourOfAKind >= 1 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 4] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc984##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_NutFullHouseOrFourOfAKind == 5 &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc985##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_NutFullHouseOrFourOfAKind >= 6 && f$OpenPPL_NutFullHouseOrFourOfAKind <= 7] &&  ![f$OpenPPL_TripsOnBoard]) ]
##f$myfunc986##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFlush] && f$OpenPPL_TripsOnBoard &&  ![f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc987##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents >= 2 &&  ![f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc988##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1) ]
##f$myfunc989##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutFlush && f$OpenPPL_PairOnBoard &&  ![f$OpenPPL_HaveStraightFlush]) ]
##f$myfunc990##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc991##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ]
##f$myfunc992##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_FlushOnBoard &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ]
##f$myfunc993##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc994##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || [$A] || [$K])]) ]
##f$myfunc995##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc996##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc997##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc998##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc999##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc1000##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)]) ]
##f$myfunc1001##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc1002##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc1003##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveNutStraight || f$OpenPPL_HaveStraight] && f$OpenPPL_TripsOnBoard) ]
##f$myfunc1004##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc1005##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1 || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call]) ]
##f$myfunc1006##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_PairOnBoard) ]
##f$myfunc1007##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc1008##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc1009##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc1010##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_2) == 0))]) ]
##f$myfunc1011##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc1012##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard || f$OpenPPL_HaveNutStraight)]) ]
##f$myfunc1013##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible)] && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc1014##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]
##f$myfunc1015##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc1016##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_PairOnBoard && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc1017##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_PairInHand &&  ![f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc1018##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || [$A] || [$2] || [$3] || [$4])] && [($5) || ($6) || ($7) || ($8) || ($9) || ($T)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc1019##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible || [$A] || [$2] || [$3] || [$4])] && [($5) || ($6) || ($7) || ($8) || ($9) || ($T)]) ]
##f$myfunc1020##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible) ]
##f$myfunc1021##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc1022##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc1023##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_FlushPossible &&  ![f$OpenPPL_HaveNutStraight]) ]
##f$myfunc1024##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_FlushPossible)] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc1025##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_HaveNutStraight]) ]
##f$myfunc1026##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_Have2ndNutStraight) ]
##f$myfunc1027##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![f$OpenPPL_OneCardFlushPossible]) ]
##f$myfunc1028##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveStraight &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc1029##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![f$OpenPPL_HaveNutFlush]) ]
##f$myfunc1030##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_HaveFullHouse)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc1031##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && f$OpenPPL_FlushPossible) ]
##f$myfunc1032##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveSet && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc1033##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveSet && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc1034##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveSet && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc1035##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTrips && f$OpenPPL_Opponents == 1 && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc1036##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTrips && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc1037##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Check] && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFullHouse]) ]
##f$myfunc1038##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_HaveFullHouse)]) ]
##f$myfunc1039##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_OneCardStraightPossible) ]
##f$myfunc1040##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc1041##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 &&  ![f$OpenPPL_CalledOnTurn]) ]
##f$myfunc1042##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible]) ]
##f$myfunc1043##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc1044##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc1045##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents == 1) ]
##f$myfunc1046##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_FlushPossible && f$OpenPPL_Opponents == 1 &&  ![f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc1047##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_FlushPossible) ]
##f$myfunc1048##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_StraightPossible && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc1049##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTwoPair && f$OpenPPL_StraightPossible) ]
##f$myfunc1050##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)] && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc1051##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 || f$OpenPPL_Raises == 0]) ]
##f$myfunc1052##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ]
##f$myfunc1053##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_HaveFlush] && f$OpenPPL_OneCardFlushPossible) ]
##f$myfunc1054##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_Opponents <= 1) ]
##f$myfunc1055##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveOverPair) ]
##f$myfunc1056##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ]
##f$myfunc1057##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_CalledOnTurn)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc1058##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0]) ]
##f$myfunc1059##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc1060##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_CalledOnTurn)]) ]
##f$myfunc1061##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_CalledOnTurn)]) ]
##f$myfunc1062##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ]
##f$myfunc1063##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)]) ]
##f$myfunc1064##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_PairOnBoard) ]
##f$myfunc1065##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) ]
##f$myfunc1066##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents <= 3) ]
##f$myfunc1067##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc1068##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveTopPair) ]
##f$myfunc1069##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![f$OpenPPL_FlushPossible]) ]
##f$myfunc1070##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc1071##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_Opponents <= 3) ]
##f$myfunc1072##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Opponents <= 2) ]
##f$myfunc1073##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HavePair &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc1074##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HavePair && f$OpenPPL_Opponents <= 2) ]
##f$myfunc1075##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveBestKickerOrBetter &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]
##f$myfunc1076##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard] && [$A]) ]
##f$myfunc1077##
[ ([f$OpenPPL_BotRaisedBeforeFlop || f$OpenPPL_BotRaisedOnFlop || f$OpenPPL_BotRaisedOnTurn] && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [$A] && f$OpenPPL_Opponents == 1) ]
##f$myfunc1078##
[ ([f$OpenPPL_BotRaisedBeforeFlop || f$OpenPPL_BotRaisedOnFlop || f$OpenPPL_BotRaisedOnTurn] && f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_HavePair && f$OpenPPL_Opponents <= 2) ]
##f$myfunc1079##
[ ([f$OpenPPL_BotRaisedBeforeFlop || f$OpenPPL_BotRaisedOnFlop || f$OpenPPL_BotRaisedOnTurn]) ]
##f$myfunc1080##
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
##f$myfunc1081##
[ (f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_NoBettingOnFlop && f$OpenPPL_NoBettingOnTurn] && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_Opponents == 1 && f$OpenPPL_PotSize <= 15) ]
##f$myfunc1082##
[ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_BotRaisedOnFlop || f$OpenPPL_OpponentCalledOnFlop] && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0] && f$OpenPPL_PotSize <= 15) ]
##f$myfunc1083##
[ (f$OpenPPL_OpponentsAtTable <= 2 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard]) ]
##f$myfunc1084##
[ (f$OpenPPL_OpponentsAtTable <= 2 && f$OpenPPL_Opponents == 1) ]
##f$myfunc1085##
[ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairInHand && [($33) || ($44) || ($55) || ($66)] && f$OpenPPL_BotRaisedOnTurn &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)]) ]
##f$myfunc1086##
[ ([f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair)]) ]
##f$myfunc1087##
[ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush)]) ]
##f$myfunc1088##
[ (f$OpenPPL_HaveSet && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight)]) ]
##f$myfunc1089##
[ (f$OpenPPL_AmountToCall < 20 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)] && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible]) ]
##f$myfunc1090##
[ (f$OpenPPL_HavePair &&  ![f$OpenPPL_FlushPossible] && f$OpenPPL_OpponentCalledOnTurn && f$OpenPPL_PotSize <= 14) ]
##f$myfunc1091##
[ (f$OpenPPL_PairInHand &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair)] && f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_BotRaisedOnFlop || f$OpenPPL_BotRaisedOnTurn]) ]
##f$myfunc1092##
[ (f$OpenPPL_HaveNothing && f$OpenPPL_BotRaisedBeforeFlop && [f$OpenPPL_BotRaisedOnFlop || f$OpenPPL_BotRaisedOnTurn] && [$A]) ]
##f$myfunc1093##
[ ([f$OpenPPL_StraightPossibleOnTurn || f$OpenPPL_FlushPossibleOnTurn || f$OpenPPL_PairOnBoard]) ]
##f$myfunc1094##
[ (f$OpenPPL_PotSize > 4 && [($AK) || ($AQ) || ($AJ) || f$OpenPPL_HavePair] &&  ![(f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTopPair || f$OpenPPL_BotsLastAction == f$OpenPPL_Call)]) ]
##f$myfunc1095##
[ ( ![(f$OpenPPL_TopFlopCardPairedonTurn || f$OpenPPL_TopFlopCardPairedonRiver || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_NoBettingOnTurn) ]
##f$myfunc1096##
[ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair)]) ]
##f$myfunc1097##
[ (f$OpenPPL_Others) ]
##f$myfunc1098##
[ ([f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutStraightFlush || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips]) ]
##f$myfunc1099##
[ ([f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Opponents == 1) ]
##f$myfunc1100##
[ ([f$OpenPPL_HaveTopTwoPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTopPair]) ]
##f$myfunc1101##
[ ([f$OpenPPL_Have2ndOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveUnderPair || f$OpenPPL_HavePair || f$OpenPPL_HaveFullHouse]) ]
##f$myfunc1102##
[ (f$OpenPPL_TotalInvested >= 133 * 0.01 * f$OpenPPL_StackSize) ]
##f$myfunc1103##
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ]
