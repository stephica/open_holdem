##2012-08-13 19:00:38##

##notes##


##dll##


##bankroll##
0.000000

##defcon##
0.000000

##rake##
0.000000

##nit##
0

##f$alli##
// f$alli is the very first function to be called on each turn,
// so we abuse it to initialize memory-symbhols as a side-effect
// and only then we do the real evaluation.

// We can't use addition here to call the functions in correct sequential order,
// because OH doesn't add the operands in order:
// http://www.maxinmontreal.com/forums/viewtopic.php?f=111&t=14525&start=0
   [f$OpenPPL_InitMemorySymbols * 0]
|| [f$OpenPPL_RememberToSitoutIfNecessary * 0]
|| [f$OpenPPL_Decision == f$OpenPPL_RaiseMax]
|| [(f$OpenPPL_Decision > f$OpenPPL_StackSize) && (f$OpenPPL_StackSize > 0)]
|| [f$OpenPPL_DecisionIsPercentagedPotsizedBet 
    && f$OpenPPL_BetSizeForPercentagedPotsizeBet >= f$OpenPPL_MaximumBetsizeInDollars]
	

##f$swag##
// No swagging in a FL game
isfl ? f$OpenPPL_HINT_No_NL_BetSizing_In_A_FL_Game : 
// Only swag, if we really decided to swag
// and not because the betsize-adaption resulted in a positive betsize.
f$OpenPPL_DecisionIsFixedBetInBigBlinds        ? f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements : 
f$OpenPPL_DecisionIsPercentagedPotsizedBet     ? f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements : 
f$OpenPPL_DecisionIsBetPotOrBetHalfPotOrBetMax ? f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements : 
0

//*****************************************************************************
//
//  OpenPPL - f$play
//  ================
//
//  f$play will be replaced by f$sitin, f$sitout and f$leave in OH 2.2.0.
//  But for the moment we need it so make OpenPPLs sitout command work.
//  http://forum.winholdem.net/wbb/viewtopic.php?t=8095
//  -2 press the leave button this frame
//  -1 do absolutely nothing this frame
//  0 click the sitout action this frame
//  +1 click the sitin action this frame
//
//*****************************************************************************

##f$srai##


##f$rais##
   [f$OpenPPL_Decision == f$OpenPPL_Raise]
|| f$OpenPPL_DecisionIsBetPotOrBetHalfPotOrBetMax
|| f$OpenPPL_DecisionIsPercentagedPotsizedBet
|| f$OpenPPL_DecisionIsFixedBetInBigBlinds
//
// Below is 2 times the same expression,
// but we want to log the very verbose explanation
// only in the case of a true error
// and not for normal evaluations.
//
|| [f$OpenPPL_Decision == 0 && f$betsize == f$OpenPPL_Undefined_BetSize_Probably_Due_To_Misscraped_Pot_Defaulting_To_Minraise]

##f$call##
   [f$OpenPPL_Decision == f$OpenPPL_Check]
|| [f$OpenPPL_Decision == f$OpenPPL_Call]
|| [f$OpenPPL_AmountToCall == 0]
|| f$rais

##f$prefold##


##f$rebuy##


##f$delay##


##f$chat##


##f$P##


##f$play##
//------------------------------------------------------------------------
//    SITIN RULE
issittingout                  // i am sitting out 
&& elapsedauto >= 10
&& (br == 1 || br==2 || br==3)    
&& nplayersseated>=6            // 6 or more opponents 

                         ?  1 :  // sitin 

//------------------------------------------------------------------------
//    SITOUT RULE
issittingin                   // i am sitting in 
&& elapsedauto >= 10 
&& (br == 1 || br==2 || br==3)        
&& nplayersseated<=5            // 5 or less opponents 

                         ?  0 :  // sitout 

//------------------------------------------------------------------------
1 // disabled

##f$test##


##f$debug##
          1.0000 = issittingout     
          0.0000 = issittingin     
          0.0000 = nplayersplaying 
          0.0000 = nplayersdealt
          0.0000 = nplayersactive
          0.0000 = nplayersseated
          0.0000 = nopponentsseated
          0.0000 = br
         -1.0000 = f$play

 

##f$OpenPPL_Standard3Bet##
[ ([f$OpenPPL_Raises >= 1]) ] ? (f$OpenPPL_AmountToCall * 3) :
[ ([br>1 && (f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1)]) ] ? (f$OpenPPL_AmountToCall * 3) :
[ ([f$OpenPPL_Others]) ] ? (f$OpenPPL_AmountToCall * 4) :
//
// To ensure syntactical completeness
// and to take care about undefined cases...
//
f$OpenPPL_UndefinedReturnValue


//***********************************************************
//                                                           
//  Main Code Sections                                       
//  ==================                                       
//                                                           
//  Preflop, Flop, Turn and River                            
//  are mandatory for every OpenPPL-profile.                 
//                                                           
//***********************************************************

##f$preflop##
[ (nopponentsseated < 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Folds == 0 && f$OpenPPL_Calls == 0 &&  ![([$AA] || [$KK] || [$QQ])]) ] ? f$OpenPPL_SitOut :
[ [ (f$OpenPPL_Raises >= 0) ] ? me_st_userwebfrcashnlhe_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Raises >= 0) ] ? me_st_userversion101_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_OpponentsAtTable == 1) ] ? me_st_userheadsup_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Raises >= 0) ] ? me_st_userdefaultpreflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_StillToAct >= 7) ] ? me_st_userearlyposition_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5]) ] ? me_st_usermiddleposition_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_StillToAct == 4) ] ? me_st_userhijackposition_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_StillToAct == 3) ] ? me_st_usercutoffposition_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Button) ] ? me_st_userbuttonposition_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_SmallBlind) ] ? me_st_usersmallblindposition_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BigBlind) ] ? me_st_userbigblindposition_1 : 0] && 0 ? 0 :
[ [ ([me_re_userhijackposition || me_re_usercutoffposition || me_re_userbuttonposition]) ] ? me_st_userlateposition_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_LastRaiserPosition >= 7) ] ? me_st_userraiserpositionearly_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Raises >= 1 && [f$OpenPPL_LastRaiserPosition == 6 || f$OpenPPL_LastRaiserPosition == 5]) ] ? me_st_userraiserpositionmiddle_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_LastRaiserPosition == 4) ] ? me_st_userraiserpositionhijack_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_LastRaiserPosition == 3) ] ? me_st_userraiserpositioncutoff_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_LastRaiserPosition == 2) ] ? me_st_userraiserpositionbutton_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Raises >= 1 && f$OpenPPL_LastRaiserPosition == 1) ] ? me_st_userraiserpositionsmallblind_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionpreflopraise_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None) ] ? me_st_userlastactionpreflopnone_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionpreflopcall_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_CallsSinceLastRaise == 1) ] ? me_st_user1callerpreflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_CallsSinceLastRaise > 1) ] ? me_st_usermultiplecallerspreflop_1 : 0] && 0 ? 0 :
[ [ ([($AA) || ($KK) || ($QQ) || ($JJ)]) ] ? me_st_userbigpocketpair_1 : 0] && 0 ? 0 :
[ [ ([($TT) || ($99) || ($88) || ($77)]) ] ? me_st_usermiddlepocketpair_1 : 0] && 0 ? 0 :
[ [ ([($66) || ($55) || ($44) || ($33) || ($22)]) ] ? me_st_usersmallpocketpair_1 : 0] && 0 ? 0 :
[ [ ([($AKs) || ($AQs) || ($AJs) || ($ATs) || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs)]) ] ? me_st_usersuitedbroadway_1 : 0] && 0 ? 0 :
[ [ ([($AK) || ($AQ) || ($AJ) || ($AT) || ($KQ) || ($KJ) || ($KT) || ($QJ) || ($QT) || ($JT)] &&  ![me_re_usersuitedbroadway]) ] ? me_st_userbroadway_1 : 0] && 0 ? 0 :
[ [ ([($T9s) || ($98s) || ($87s) || ($76s)]) ] ? me_st_usermidsuitedconnector_1 : 0] && 0 ? 0 :
[ [ ([($65s) || ($54s) || ($43s) || ($32s)]) ] ? me_st_userlowsuitedconnector_1 : 0] && 0 ? 0 :
[ [ ([($T9) || ($98) || ($87) || ($76)] &&  ![(me_re_usermidsc)]) ] ? me_st_usermidconnector_1 : 0] && 0 ? 0 :
[ [ ([($65) || ($54) || ($43) || ($32)] &&  ![(me_re_userlowsuitedconnector)]) ] ? me_st_userlowconnector_1 : 0] && 0 ? 0 :
[ [ ([($J9s) || ($T8s) || ($97s) || ($86s)]) ] ? me_st_user1gapmidsuitedconnector_1 : 0] && 0 ? 0 :
[ [ ([($75s) || ($64s) || ($53s) || ($42s)]) ] ? me_st_user1gaplowsuitedconnector_1 : 0] && 0 ? 0 :
[ [ ([($J9) || ($T8) || ($97) || ($86)] &&  ![(me_re_user1gapsuitedconnector)]) ] ? me_st_user1gapmidconnector_1 : 0] && 0 ? 0 :
[ [ ([($75) || ($64) || ($53) || ($42)] &&  ![(me_re_user1gaplowsuitedconnector)]) ] ? me_st_user1gaplowconnector_1 : 0] && 0 ? 0 :
[ [ ([($Q9s) || ($J8s) || ($T7s) || ($96s)]) ] ? me_st_user2gapmidsuitedconnector_1 : 0] && 0 ? 0 :
[ [ ([($85s) || ($74s) || ($63s) || ($52s)]) ] ? me_st_user2gaplowsuitedconnector_1 : 0] && 0 ? 0 :
[ [ ([($Q9) || ($J8) || ($T7) || ($96)] &&  ![(me_re_user2gapmidsuitedconnector)]) ] ? me_st_user2gapmidconnector_1 : 0] && 0 ? 0 :
[ [ ([($85) || ($74) || ($63) || ($52)] &&  ![(me_re_user2gaplowsuitedconnector)]) ] ? me_st_user2gaplowconnector_1 : 0] && 0 ? 0 :
[ [ ([($K9s) || ($Q8s) || ($J7s) || ($T6s)]) ] ? me_st_user3gapmidsuitedconnector_1 : 0] && 0 ? 0 :
[ [ ([($95s) || ($84s) || ($73s) || ($62s)]) ] ? me_st_user3gaplowsuitedconnector_1 : 0] && 0 ? 0 :
[ [ ([($K9) || ($Q8) || ($J7) || ($T6)] &&  ![(me_re_user3gapmidsuitedconnector)]) ] ? me_st_user3gapmidconnector_1 : 0] && 0 ? 0 :
[ [ ([($95) || ($84) || ($73) || ($62)] &&  ![(me_re_user3gaplowsuitedconnector)]) ] ? me_st_user3gaplowconnector_1 : 0] && 0 ? 0 :
[ [ ([($T2) || ($92) || ($82) || ($72) || ($T3) || ($93) || ($94)] &&  ![([$TXs] || [$9Xs] || [$8Xs] || [$7Xs])]) ] ? me_st_usercompletejunk_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_AmountToCall <= 5 * 0.01 * f$OpenPPL_StackSize) ] ? me_st_userbetlessthan20xstack_1 : 0] && 0 ? 0 :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_StackSize > 400 &&  ![([$AA] || [$KK] || [$QQ])]) ] ? f$OpenPPL_SitOut :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 15 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 40 * 0.01 * f$OpenPPL_PotSize && [($AK) || ($AQ) || ($JJ) || ($TT)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_SmallBlind] && f$OpenPPL_AmountToCall > 1 &&  ![([$A] || [$KQ] || [$KJ] || [$KT] || [$KXs] || [$QJ] || [$QT] || [$Q9] || [$QXs] || [$JT] || [$J9] || [$J8s] || [$J7s] || [$T9s] || [$T8s] || [$T7s] || [$98s] || [$97s] || [$87s] || [$86s] || [$76s] || [$75s] || [$65s] || [$64s] || [$54s] || [$53s] || [$43s] || f$OpenPPL_PairInHand)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize <= 40 && f$OpenPPL_Raises == 1 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($AK)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [($AA)] && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [($AA)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [($KK)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [($AK) || ($QQ)] && f$OpenPPL_Raises <= 1 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Opponents == 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 12) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_PairInHand || ($AK) || ($AQs) || ($KQs) || ($KJs) || ($QJs) || ($QTs) || ($JTs) || ($T9s) || ($98s) || ($87s) || ($76s)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_AmountToCall <= 6 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($AK) || ($AQs) || ($KQs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = Call AND Raises = 1)
//
f$myfunc1  &&  [ (f$OpenPPL_Raises > 1 && [($AA)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc1  &&  [ (f$OpenPPL_Calls >= 1 && [($AA) || ($KK)]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (BotsLastAction = Call AND Raises = 1)
//
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 1) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 2) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 4) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 5) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 1) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 2) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 4) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 5) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 1) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 2) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 4) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 5) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)]) ] ? f$OpenPPL_Standard3Bet :
f$myfunc1  &&  [ ([($JJ)] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc1  &&  [ ([($TT) || ($99)] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc1  &&  [ (f$OpenPPL_AmountToCall <= 3 && [f$OpenPPL_PairInHand]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = RAISE AND Raises >= 1)
//
f$myfunc2  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc2  &&  [ ([($AK) || ($AQ) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88) || ($77)] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc2  &&  [ ([($AK) || ($AQ) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88) || ($77)] && f$OpenPPL_StackSize <= 30) ] ? f$OpenPPL_RaiseMax :
f$myfunc2  &&  [ ([($AK) || ($AQ) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88) || ($77)] && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 20) ] ? f$OpenPPL_Call :
f$myfunc2  &&  [ ([($AK) || ($QQ) || ($JJ)] && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_TotalInvested >= 200 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND LastRaiserPosition >= 6)
//
f$myfunc3  &&  [ ([($KK)]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (Raises = 0 AND Calls >= 2)
//
f$myfunc4  &&  [ ([($KK)]) ] ? 14 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Raises = 1)
//
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 1) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 2) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 4) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 5) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 1) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 2) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 4) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 5) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 1) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 2) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 4) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 5) ] ? f$OpenPPL_Standard3Bet :
f$myfunc5  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Standard3Bet :
//
// Starting open-ended when-condition
// (BotsLastAction = RAISE AND ((Hand = QQ) OR (Hand = JJ) OR (Hand = AK)))
//
f$myfunc6  &&  [ (f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = QQ) OR (Hand = AK)) AND NOT (BotsLastAction = Raise))
//
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Standard3Bet :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Standard3Bet :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall >= 6) ] ? f$OpenPPL_Call :
f$myfunc7  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = JJ)) AND NOT (BotsLastAction = Raise))
//
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Standard3Bet :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Standard3Bet :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall >= 6) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall >= 6) ] ? f$OpenPPL_Call :
f$myfunc8  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = QQ) OR (Hand = JJ) OR (Hand = AK)))
//
f$myfunc9  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc9  &&  [ (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaisePot :
f$myfunc9  &&  [ (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0 && f$OpenPPL_AmountToCall <= 10 && [($QQ)]) ] ? f$OpenPPL_Call :
f$myfunc9  &&  [ (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0 && f$OpenPPL_AmountToCall <= 8 && [($AK)]) ] ? f$OpenPPL_Call :
f$myfunc9  &&  [ (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0 && f$OpenPPL_AmountToCall <= 8 && [($JJ)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises >= 2)
//
f$myfunc10  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (Raises >= 2 AND AmountToCall <= 35% StackSize)
//
f$myfunc11  &&  [ ([($KK)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = AK)) AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc12  &&  [ (f$OpenPPL_Random <= 35) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc12  &&  [ (f$OpenPPL_Random <= 35) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc12  &&  [ (f$OpenPPL_Random <= 35) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc12  &&  [ (f$OpenPPL_Calls == 0) ] ? 4 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 4 AND (StillToAct = 3 OR In Button) AND ((Hand = AK) OR (Hand = AQ suited) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ)) AND NOT (BotsLastAction = Raise))
//
f$myfunc13  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc13  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Standard3Bet :
f$myfunc13  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Standard3Bet :
f$myfunc13  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Standard3Bet :
f$myfunc13  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Standard3Bet :
f$myfunc13  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall > 7 && f$OpenPPL_AmountToCall <= 15) ] ? f$OpenPPL_Standard3Bet :
f$myfunc13  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 3 AND (In Button) AND ((Hand = AK) OR (Hand = AQ suited) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ)) AND NOT (BotsLastAction = Raise))
//
f$myfunc14  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc14  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 4) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc14  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 5) ] ? 14 * f$RaiseByBigBlinds :
f$myfunc14  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 6) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc14  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 7) ] ? 19 * f$RaiseByBigBlinds :
f$myfunc14  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall > 7 && f$OpenPPL_AmountToCall <= 15) ] ? f$OpenPPL_RaisePot :
f$myfunc14  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 1 AND (In BigBlind) AND ((Hand = AK) OR (Hand = AQ suited) OR (Hand = AJ suited) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ) OR (Hand = TT) OR (Hand = 99) OR (Hand = 88)) AND NOT (BotsLastAction = Raise))
//
f$myfunc15  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc15  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 4) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc15  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 5) ] ? 19 * f$RaiseByBigBlinds :
f$myfunc15  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 6) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc15  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 7) ] ? 19 * f$RaiseByBigBlinds :
f$myfunc15  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall > 7 && f$OpenPPL_AmountToCall <= 15) ] ? f$OpenPPL_RaisePot :
f$myfunc15  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 4 AND (In SmallBlind OR In BigBlind) AND ((Hand = AK) OR (Hand = AQ suited) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ)) AND NOT (BotsLastAction = Raise))
//
f$myfunc16  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc16  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 4) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc16  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 5) ] ? 14 * f$RaiseByBigBlinds :
f$myfunc16  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 6) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc16  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 7) ] ? 19 * f$RaiseByBigBlinds :
f$myfunc16  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall > 7 && f$OpenPPL_AmountToCall <= 15) ] ? f$OpenPPL_RaisePot :
f$myfunc16  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 3 AND (In SmallBlind OR In BigBlind) AND ((Hand = AK) OR (Hand = AQ) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ)) AND NOT (BotsLastAction = Raise))
//
f$myfunc17  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc17  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 4) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc17  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 5) ] ? 14 * f$RaiseByBigBlinds :
f$myfunc17  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 6) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc17  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 7) ] ? 19 * f$RaiseByBigBlinds :
f$myfunc17  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall > 7 && f$OpenPPL_AmountToCall <= 15) ] ? f$OpenPPL_RaisePot :
f$myfunc17  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 2 AND (In SmallBlind OR In BigBlind) AND ((Hand = AK) OR (Hand = AQ) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ)) AND NOT (BotsLastAction = Raise))
//
f$myfunc18  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc18  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 4) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc18  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 5) ] ? 14 * f$RaiseByBigBlinds :
f$myfunc18  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 6) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc18  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 7) ] ? 19 * f$RaiseByBigBlinds :
f$myfunc18  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall > 7 && f$OpenPPL_AmountToCall <= 15) ] ? f$OpenPPL_RaisePot :
f$myfunc18  &&  [ (f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 4 AND (StillToAct = 3 OR In Button) AND ((Hand = AJ suited) OR (Hand = JJ) OR (Hand = TT)) AND NOT (BotsLastAction = Raise))
//
f$myfunc19  &&  [ (f$OpenPPL_AmountToCall <= 3) ] ? 13 * f$RaiseByBigBlinds :
f$myfunc19  &&  [ (f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 3 AND (In Button) AND ((Hand = AJ suited) OR (Hand = JJ) OR (Hand = TT)) AND NOT (BotsLastAction = Raise))
//
f$myfunc20  &&  [ (f$OpenPPL_AmountToCall <= 3) ] ? 13 * f$RaiseByBigBlinds :
f$myfunc20  &&  [ (f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 4 AND (StillToAct = 3 OR In Button) AND ((Hand = AK) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ)))
//
f$myfunc21  &&  [ (f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Standard3Bet :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 3 AND (In Button) AND ((Hand = AK) OR (Hand = AQ) OR (Hand = AJ suited) OR (Hand = KQ) OR (Hand = KJ) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ) OR (Hand = TT) OR (Hand = 99)))
//
f$myfunc22  &&  [ (f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Standard3Bet :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition = 1 AND (In BigBlind) AND ((Hand = AK) OR (Hand = AQ) OR (Hand = AJ) OR (Hand = AT) OR (Hand = KQ) OR (Hand = KJ) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ) OR (Hand = TT) OR (Hand = 99)))
//
f$myfunc23  &&  [ (f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Standard3Bet :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition <= 4 AND (In SmallBlind OR In BigBlind) AND ((Hand = AK) OR (Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ)))
//
f$myfunc24  &&  [ (f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Standard3Bet :
//
// Starting open-ended when-condition
// (Raises = 1 AND Calls = 0 AND LastRaiserPosition <= 4 AND (In SmallBlind OR In BigBlind) AND ((Hand = AQ)))
//
f$myfunc25  &&  [ (f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND Calls = 0 AND StillToAct >= 7)
//
f$myfunc26  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND ((Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ) OR (Hand = AK suited)))
//
f$myfunc27  &&  [ (f$OpenPPL_Calls == 0) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc27  &&  [ (f$OpenPPL_Calls == 1) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc27  &&  [ (f$OpenPPL_Calls == 2) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc27  &&  [ (f$OpenPPL_Calls >= 3) ] ? 11 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (BotsLastAction = Call AND Raises = 0 AND BetSize <= 3)
//
f$myfunc28  &&  [ ([($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs) || ($J9s) || ($T9s) || ($T8s)]) ] ? f$OpenPPL_Call :
f$myfunc28  &&  [ ([($98s) || ($97s) || ($87s) || ($86s) || ($76s) || ($75s) || ($65s) || ($64s) || ($54s)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = Call AND (PairInHand))
//
f$myfunc29  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 1 && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc29  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 2 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc29  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 3 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = RAISE AND (PairInHand))
//
f$myfunc30  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 1 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 2 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc30  &&  [ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 3 && f$OpenPPL_AmountToCall <= 6) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = JJ)) AND StillToAct >= 4)
//
f$myfunc31  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc31  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc31  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = JJ) OR (Hand = TT) OR (Hand = 99)) AND (StillToAct = 3 OR In Button))
//
f$myfunc32  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 4 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = TT) OR (Hand = 99) OR (Hand = 88) OR (Hand = 77) OR (Hand = 66)))
//
f$myfunc33  &&  [ (me_re_usercake && f$OpenPPL_Random <= 80 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc33  &&  [ (f$OpenPPL_Random <= 80 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc33  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = 88)) AND StillToAct = 5 AND Raises = 0 AND Calls = 0 AND Checks = 0 AND Random <= 85)
//
f$myfunc34  &&  [ (f$OpenPPL_Random <= 50) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc34  &&  [ (f$OpenPPL_Calls == 0) ] ? 4 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = 88)) AND StillToAct = 5)
//
f$myfunc35  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc35  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? f$OpenPPL_Call :
f$myfunc35  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = 77) OR (Hand = 66)) AND StillToAct = 5)
//
f$myfunc36  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = 88) OR (Hand = 77) OR (Hand = 66)) AND In Button AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc37  &&  [ (f$OpenPPL_Random <= 50) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc37  &&  [ (f$OpenPPL_Calls == 0) ] ? 4 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = 88) OR (Hand = 77) OR (Hand = 66)) AND (StillToAct = 4 OR StillToAct = 3 OR In Button))
//
f$myfunc38  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = 55) OR (Hand = 44) OR (Hand = 33) OR (Hand = 22)) AND StillToAct >= 7 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc39  &&  [ (f$OpenPPL_Random <= 10 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = 55) OR (Hand = 44)) AND (StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4))
//
f$myfunc40  &&  [ (me_re_usercake && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc40  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 100 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (((Hand = 33) OR (Hand = 22)) AND (StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4))
//
f$myfunc41  &&  [ (f$OpenPPL_Random <= 10 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = 55) OR (Hand = 44)) AND (StillToAct = 3 OR In Button) AND Raises = 0 AND Calls = 0 AND Checks = 0 AND Random <= 75)
//
f$myfunc42  &&  [ (f$OpenPPL_Random <= 50) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc42  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = 55) OR (Hand = 44)) AND (StillToAct = 3 OR In Button))
//
f$myfunc43  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = 33) OR (Hand = 22)) AND (StillToAct = 3 OR In Button))
//
f$myfunc44  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = AK) OR (Hand = AQ)) AND StillToAct >= 7 AND Raises = 0 AND Calls = 0 AND Checks = 0 AND Random <= 90)
//
f$myfunc45  &&  [ (f$OpenPPL_Random <= 40) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc45  &&  [ (f$OpenPPL_Random <= 15) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc45  &&  [ (f$OpenPPL_Calls == 0) ] ? 4 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = AK)) AND StillToAct >= 7)
//
f$myfunc46  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc46  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc46  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (((Hand = AK)) AND (StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4 OR StillToAct = 3 OR In Button))
//
f$myfunc47  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc47  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc47  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (((Hand = AQ)) AND StillToAct >= 7)
//
f$myfunc48  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = AQ)) AND StillToAct >= 6)
//
f$myfunc49  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc49  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = AQ)) AND (StillToAct = 5 OR StillToAct = 4))
//
f$myfunc50  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc50  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc50  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = AQ)) AND (StillToAct = 3 OR In Button))
//
f$myfunc51  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc51  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc51  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = AJ suited)) AND Raises = 0 AND Calls = 0 AND Checks = 0 AND StillToAct >= 7 AND Random <= 70)
//
f$myfunc52  &&  [ (f$OpenPPL_Random <= 40) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc52  &&  [ (f$OpenPPL_Random <= 30) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc52  &&  [ (f$OpenPPL_Calls == 0) ] ? 5 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = AJ suited)) AND StillToAct >= 7)
//
f$myfunc53  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = AJ suited)) AND (StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4 OR StillToAct = 3 OR In Button))
//
f$myfunc54  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc54  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc54  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = AT suited)) AND (StillToAct = 4 OR StillToAct = 5))
//
f$myfunc55  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc55  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = AT suited)) AND (StillToAct = 3 OR In Button))
//
f$myfunc56  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc56  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = AJ)) AND (StillToAct = 5) AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc57  &&  [ (f$OpenPPL_Random <= 90) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = AJ)) AND StillToAct = 4)
//
f$myfunc58  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc58  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = AJ) OR (Hand = AT)) AND (StillToAct = 3 OR In Button))
//
f$myfunc59  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc59  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = A9 suited) OR (Hand = A8 suited)) AND StillToAct = 5 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc60  &&  [ (f$OpenPPL_Random <= 65) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = A9 suited) OR (Hand = A8 suited)) AND StillToAct = 4 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc61  &&  [ (f$OpenPPL_Random <= 80) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = A9 suited) OR (Hand = A8 suited)) AND (StillToAct = 3 OR In Button) AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc62  &&  [ (f$OpenPPL_Random <= 50) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc62  &&  [ (f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = A9) OR (Hand = A8)) AND StillToAct = 4 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc63  &&  [ (f$OpenPPL_Random <= 80) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = A9) OR (Hand = A8)) AND (StillToAct = 3 OR In Button) AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc64  &&  [ (f$OpenPPL_Random <= 90) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = A7 suited)) AND StillToAct = 4 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc65  &&  [ (f$OpenPPL_Random <= 80) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = A7) OR (Hand = A6)) AND StillToAct = 2 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc66  &&  [ (f$OpenPPL_Random <= 80) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = A6) OR (Hand = A5) OR (Hand = A4) OR (Hand = A3) OR (Hand = A2)) AND In Button AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc67  &&  [ (f$OpenPPL_Random <= 50) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc67  &&  [ (f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = KQ suited)) AND StillToAct >= 7 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc68  &&  [ (f$OpenPPL_Random <= 60) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = KQ suited)) AND StillToAct <= 6 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc69  &&  [ (f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = KQ)) AND StillToAct >= 7 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc70  &&  [ (f$OpenPPL_Random <= 25) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = KQ)) AND (StillToAct = 6 OR StillToAct = 5) AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc71  &&  [ (f$OpenPPL_Random <= 40) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = KQ)) AND (StillToAct = 4) AND Raises = 0 AND Calls = 0)
//
f$myfunc72  &&  [ (f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = KJ suited)) AND StillToAct = 4)
//
f$myfunc73  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc73  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc73  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = QJ suited)) AND StillToAct = 5 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc74  &&  [ (f$OpenPPL_Random <= 60) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = QJ)) AND StillToAct = 4 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc75  &&  [ (f$OpenPPL_Random <= 70) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = KQ) OR (Hand = KJ) OR (Hand = QJ)) AND (StillToAct = 3 OR In Button))
//
f$myfunc76  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc76  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? f$OpenPPL_Call :
f$myfunc76  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = JT suited)) AND StillToAct >= 7)
//
f$myfunc77  &&  [ (f$OpenPPL_Random <= 50 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = JT suited)) AND (StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4) AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc78  &&  [ (f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = JT suited)) AND (StillToAct = 3 OR In Button))
//
f$myfunc79  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc79  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_Checks == 0) ] ? f$OpenPPL_Call :
f$myfunc79  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((Hand = T9 suited)) AND (StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4) AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc80  &&  [ (f$OpenPPL_Random <= 30) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = T9 suited)) AND (StillToAct = 3 OR In Button) AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc81  &&  [ (f$OpenPPL_Random <= 50) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc81  &&  [ (f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = 98 suited) OR (Hand = 87 suited)) AND StillToAct = 3)
//
f$myfunc82  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = 98 suited) OR (Hand = 87 suited) OR (Hand = 76 suited) OR (Hand = 65 suited)) AND In Button AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc83  &&  [ (f$OpenPPL_Random <= 50) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc83  &&  [ (f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (((Hand = KT suited) OR (Hand = K9 suited) OR (Hand = QT suited)) AND StillToAct = 3 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc84  &&  [ (f$OpenPPL_Random <= 60) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc84  &&  [ (me_re_usercake && f$OpenPPL_Calls == 0) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc84  &&  [ (f$OpenPPL_Calls == 0) ] ? 100 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (((Hand = KT) OR (Hand = K9) OR (Hand = QT) OR (Hand = Q9) OR (Hand = J9 suited)) AND In Button AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc85  &&  [ (f$OpenPPL_Random <= 50) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc85  &&  [ (f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (StillToAct = 3 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc86  &&  [ ([f$OpenPPL_PairInHand || ($AXs) || ($AK) || ($AQ) || ($AT) || ($A9) || ($A8) || ($KQ) || ($KJ) || ($KT) || ($K9) || ($QJ) || ($QT) || ($JTs) || ($J9s) || ($T9s) || ($98s) || ($87s) || ($76s) || ($65s)]) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((In Button OR In SmallBlind) AND Raises = 0 AND Checks = 0)
//
f$myfunc87  &&  [ (f$OpenPPL_Calls == 0 && [f$OpenPPL_PairInHand || ($A) || ($KXs) || ($KJ) || ($KT) || ($K9) || ($K8) || ($K7) || ($QJ) || ($QT) || ($Q9) || ($Q8s) || ($Q7s) || ($JT) || ($J9) || ($J8s) || ($T9s) || ($98s) || ($87s) || ($76s) || ($65s) || ($54s) || ($J9s) || ($T8s) || ($97s) || ($86s) || ($75s) || ($64s) || ($53s) || ($KT) || ($QT)]) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((In Button OR In SmallBlind) AND Raises = 0 AND Checks = 0)
//
f$myfunc87  &&  [ (f$OpenPPL_Calls == 0 && [f$OpenPPL_PairInHand || ($A) || ($KJ) || ($QTs) || ($QJ) || ($QTs) || ($JTs) || ($J9s) || ($J8s) || ($T9s) || ($98s) || ($87s) || ($76s) || ($65s) || ($54s) || ($T8s) || ($97s) || ($86s) || ($75s) || ($64s) || ($53s)]) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((In Button OR StillToAct = 3) AND Raises = 0)
//
f$myfunc88  &&  [ (f$OpenPPL_Calls >= 1 && [($AXs) || ($ATs) || ($KTs) || ($K9s) || ($QJs) || ($QTs) || ($JTs) || ($T9s)]) ] ? f$OpenPPL_Call :
f$myfunc88  &&  [ (f$OpenPPL_Calls >= 2 && [($KXs) || ($J9s) || ($T8s) || ($T7s) || ($98s) || ($97s) || ($87s) || ($86s) || ($76s) || ($75s) || ($65s) || ($64s)]) ] ? f$OpenPPL_Call :
f$myfunc88  &&  [ (f$OpenPPL_Calls >= 3 && [($QXs) || ($J8s) || ($T6s) || ($96s) || ($85s) || ($74s) || ($63s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In SmallBlind AND Raises = 0 AND Calls = 0 AND Checks = 0 AND (PairInHand OR (Hand = A) OR (Hand = K) OR (Hand = QJ) OR (Hand = QT) OR (Hand = Q9) OR (Hand = Q8) OR (Hand = Q7) OR (Hand = Q6) OR (Hand = Q5) OR (Hand = JT suited) OR (Hand = J9 suited)))
//
f$myfunc89  &&  [ (f$OpenPPL_Random <= 60) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc89  &&  [ (f$OpenPPL_Calls == 0 && [f$OpenPPL_PairInHand || ($A) || ($KQ) || ($KJ) || ($KT) || ($K9s) || ($QJ) || ($QT) || ($Q9s) || ($Q8s) || ($JTs) || ($J9s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In BigBlind AND Raises = 0 AND Calls = 1 AND LastCallerPosition = 1 AND (PairInHand OR (Hand = A) OR (Hand = K) OR (Hand = QJ) OR (Hand = QT) OR (Hand = Q9) OR (Hand = Q8) OR (Hand = Q7) OR (Hand = Q6) OR (Hand = Q5) OR (Hand = JT suited) OR (Hand = J9 suited)))
//
f$myfunc90  &&  [ (f$OpenPPL_Random <= 60) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc90  &&  [ (f$OpenPPL_Calls == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND ((Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ) OR (Hand = AK) OR (Hand = AQ suited)))
//
f$myfunc91  &&  [ (f$OpenPPL_Calls >= 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Raises = 0 AND ((Hand = TT)))
//
f$myfunc92  &&  [ (f$OpenPPL_Calls >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND Calls >= 1 AND Position = Middle AND ((Hand = 99)))
//
f$myfunc93  &&  [ (f$OpenPPL_Calls >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND ((Hand = 88) OR (Hand = 77) OR (Hand = 66) OR (Hand = AQ) OR (Hand = AJ suited) OR (Hand = AT suited) OR (Hand = KQ suited) OR (Hand = KJ suited)))
//
f$myfunc94  &&  [ (f$OpenPPL_BigBlind && f$OpenPPL_LastCallerPosition == 1 && [($AQ) || ($AJs) || ($KQs)] && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_RaisePot :
f$myfunc94  &&  [ (f$OpenPPL_Calls >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND Position = Last AND ((Hand = AA) OR (Hand = KK) OR (Hand = QQ) OR (Hand = JJ) OR (Hand = TT) OR (Hand = AK) OR (Hand = AQ suited)))
//
f$myfunc95  &&  [ (f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Raises = 0 AND Position = Last AND ((Hand = 99) OR (Hand = 88) OR (Hand = 77) OR (Hand = 66) OR (Hand = 55) OR (Hand = 44) OR (Hand = 33) OR (Hand = 22) OR (Hand = AQ) OR (Hand = AJ suited) OR (Hand = AT suited) OR (Hand = A suited) OR (Hand = KJ suited) OR (Hand = KQ suited)))
//
f$myfunc96  &&  [ (f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND Position = Last AND ((Hand = QJ suited) OR (Hand = QT suited) OR (Hand = JT suited) OR (Hand = J9 suited) OR (Hand = T9 suited) OR (Hand = T8 suited) OR (Hand = 98 suited) OR (Hand = 97 suited) OR (Hand = 87 suited) OR (Hand = 86 suited) OR (Hand = 76 suited) OR (Hand = 75 suited) OR (Hand = 65 suited) OR (Hand = 54 suited)))
//
f$myfunc97  &&  [ (f$OpenPPL_Calls >= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND Position = Last AND ((Hand = 88) OR (Hand = 77) OR (Hand = 66) OR (Hand = 55) OR (Hand = 44) OR (Hand = 33) OR (Hand = 22)))
//
f$myfunc98  &&  [ (f$OpenPPL_Calls >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 7 OR StillToAct = 8) AND Raises = 0 AND Calls >= 1)
//
f$myfunc99  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK) || ($AQ) || ($AJs)]) ] ? f$OpenPPL_RaisePot :
f$myfunc99  &&  [ ([($JJ) || ($TT) || ($99) || ($ATs) || ($A9s) || ($KQs)]) ] ? f$OpenPPL_Call :
f$myfunc99  &&  [ ([($88) || ($77) || ($A8s) || ($A7s) || ($KJs) || ($QJs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4) AND Raises = 0 AND Calls = 1)
//
f$myfunc100  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK) || ($AQ) || ($JJ)]) ] ? f$OpenPPL_RaisePot :
f$myfunc100  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($AXs) || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4) AND Raises = 0 AND Calls = 2)
//
f$myfunc101  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK) || ($AQ) || ($JJ)]) ] ? f$OpenPPL_RaisePot :
f$myfunc101  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($66) || ($55)]) ] ? f$OpenPPL_Call :
f$myfunc101  &&  [ ([($AXs) || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4) AND Raises = 0 AND Calls >= 3)
//
f$myfunc102  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK) || ($AQ) || ($JJ)]) ] ? f$OpenPPL_RaisePot :
f$myfunc102  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($66) || ($55) || ($44) || ($33) || ($22)]) ] ? f$OpenPPL_Call :
f$myfunc102  &&  [ ([($AXs) || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs) || ($J9s) || ($T9s) || ($98s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 3 OR In Button) AND Raises = 0 AND Calls = 1)
//
f$myfunc103  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK) || ($AQ) || ($AJ) || ($JJ) || ($KQs)]) ] ? f$OpenPPL_RaisePot :
f$myfunc103  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($AXs) || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 3 OR In Button) AND Raises = 0 AND Calls = 2)
//
f$myfunc104  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK) || ($AQ) || ($JJ)]) ] ? f$OpenPPL_RaisePot :
f$myfunc104  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($AXs) || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs)]) ] ? f$OpenPPL_Call :
f$myfunc104  &&  [ ([($66) || ($55) || ($KTs) || ($K9s) || ($QTs) || ($Q9s) || ($J9s) || ($T9s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 3 OR In Button) AND Raises = 0 AND Calls = 3)
//
f$myfunc105  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK) || ($AQ) || ($JJ)]) ] ? f$OpenPPL_RaisePot :
f$myfunc105  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($AJs) || ($ATs) || ($AXs) || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs)]) ] ? f$OpenPPL_Call :
f$myfunc105  &&  [ ([($66) || ($55) || ($KTs) || ($K9s) || ($QTs) || ($Q9s) || ($J9s) || ($T9s)]) ] ? f$OpenPPL_Call :
f$myfunc105  &&  [ ([($44) || ($33) || ($22) || ($K8s) || ($K7s) || ($JT) || ($T8s) || ($98s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 3 OR In Button) AND Raises = 0 AND Calls >= 4)
//
f$myfunc106  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK) || ($AQ) || ($JJ)]) ] ? f$OpenPPL_RaisePot :
f$myfunc106  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($AXs) || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs)]) ] ? f$OpenPPL_Call :
f$myfunc106  &&  [ ([($66) || ($55) || ($KTs) || ($K9s) || ($QTs) || ($Q9s) || ($J9s) || ($T9s)]) ] ? f$OpenPPL_Call :
f$myfunc106  &&  [ ([($44) || ($33) || ($22) || ($K8s) || ($K7s) || ($JT) || ($T8s) || ($98s)]) ] ? f$OpenPPL_Call :
f$myfunc106  &&  [ ([($KXs) || ($Q8s) || ($J8s) || ($87s) || ($76s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = Call AND (PairInHand))
//
f$myfunc107  &&  [ (f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND StackSize >= 20)
//
f$myfunc108  &&  [ ([($AA) || ($KK) || ($JJ)]) ] ? f$OpenPPL_RaisePot :
f$myfunc108  &&  [ (f$OpenPPL_Calls >= 1 && f$OpenPPL_PairInHand) ] ? f$OpenPPL_Call :
f$myfunc108  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_PairInHand) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Raises = 1 AND LastRaiserPosition >= 6 AND ((Hand = AA) OR (Hand = KK)) AND BetSize <= 3)
//
f$myfunc109  &&  [ (f$OpenPPL_Random <= 10) ] ? f$OpenPPL_Call :
f$myfunc109  &&  [ (f$OpenPPL_Raises == 1) ] ? f$OpenPPL_RaisePot :
//
// Starting open-ended when-condition
// (Raises = 1 AND LastRaiserPosition >= 6 AND ((Hand = QQ)) AND BetSize <= 3)
//
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70 && f$OpenPPL_AmountToCall == 1 && f$OpenPPL_Calls == 0) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70 && f$OpenPPL_AmountToCall == 2 && f$OpenPPL_Calls == 0) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70 && f$OpenPPL_AmountToCall == 3 && f$OpenPPL_Calls == 0) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70 && f$OpenPPL_AmountToCall == 1 && f$OpenPPL_Calls == 1) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70 && f$OpenPPL_AmountToCall == 2 && f$OpenPPL_Calls == 1) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70 && f$OpenPPL_AmountToCall == 3 && f$OpenPPL_Calls == 1) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70 && f$OpenPPL_AmountToCall == 1 && f$OpenPPL_Calls == 2) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70 && f$OpenPPL_AmountToCall == 2 && f$OpenPPL_Calls == 2) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70 && f$OpenPPL_AmountToCall == 3 && f$OpenPPL_Calls == 2) ] ? 12 * f$RaiseByBigBlinds :
f$myfunc110  &&  [ (f$OpenPPL_Random <= 70) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc110  &&  [ (f$OpenPPL_Raises == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND LastRaiserPosition >= 6 AND ((Hand = JJ) OR (hand = TT) OR (Hand = AK)) AND BetSize <= 3)
//
f$myfunc111  &&  [ (f$OpenPPL_Raises == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND LastRaiserPosition >= 6 AND ((Hand = 99) OR (Hand = 88) OR (Hand = 77) OR (Hand = AQ suited)))
//
f$myfunc112  &&  [ (f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (StillToAct = 3 AND Raises = 0 AND Calls = 0)
//
f$myfunc113  &&  [ ([($AK) || ($AQ) || ($AJ) || ($ATs) || ($KQ) || ($KJ) || ($KTs) || ($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88) || ($77)]) ] ? 4 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (In Button AND Raises = 0 AND Calls = 0)
//
f$myfunc114  &&  [ ([($AK) || ($AQ) || ($AJ) || ($AT) || ($A9s) || ($A8s) || ($KQ) || ($KJ) || ($KT) || ($K9s) || ($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88) || ($77)]) ] ? 4 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (StillToAct = 3 AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc115  &&  [ ([($AK) || ($AQ) || ($AJ) || ($AT) || ($A9s) || ($A8s) || ($KQ) || ($KJ) || ($KT) || ($K9s) || ($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88) || ($77)]) ] ? 4 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (In Button AND Raises = 0 AND Calls = 0 AND Checks = 0)
//
f$myfunc116  &&  [ ([($AK) || ($AQ) || ($AJ) || ($AT) || ($A9) || ($A8) || ($AXs) || ($KQ) || ($KJ) || ($KT) || ($K9) || ($QJ) || ($QT) || ($JT) || ($T9s) || ($98s) || f$OpenPPL_PairInHand]) ] ? 4 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// ((StillToAct = 7 OR StillToAct = 8) AND Raises = 1)
//
f$myfunc117  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc117  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc117  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc117  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($AK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc117  &&  [ ([($AJ) || ($AQ) || ($JJ)] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 6 OR StillToAct = 5 OR StillToAct = 4) AND Raises = 1)
//
f$myfunc118  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc118  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc118  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc118  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($AK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc118  &&  [ ([($AJ) || ($AQ) || ($JJ)] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 3 OR In Button) AND Raises = 1 AND Calls <= 1)
//
f$myfunc119  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc119  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc119  &&  [ ([($AA) || ($KK) || ($QQ)]) ] ? f$OpenPPL_RaisePot :
f$myfunc119  &&  [ ([($AK)] && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_RaisePot :
f$myfunc119  &&  [ ([($AK)] && f$OpenPPL_AmountToCall <= 10) ] ? f$OpenPPL_Call :
f$myfunc119  &&  [ (f$OpenPPL_LastRaiserPosition <= 6 && [($JJ) || ($AQ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc119  &&  [ (f$OpenPPL_LastRaiserPosition <= 6 && [($JJ) || ($AQ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc119  &&  [ (f$OpenPPL_LastRaiserPosition <= 6 && [($JJ) || ($AQ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc119  &&  [ (f$OpenPPL_LastRaiserPosition <= 6 && [($JJ) || ($AQ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 1) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc119  &&  [ (f$OpenPPL_LastRaiserPosition <= 6 && [($JJ) || ($AQ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 2) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc119  &&  [ (f$OpenPPL_LastRaiserPosition <= 6 && [($JJ) || ($AQ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 3) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc119  &&  [ (f$OpenPPL_LastRaiserPosition <= 6 && [($JJ) || ($AQ)]) ] ? 95 * f$RaiseByPercentagedPotsize :
f$myfunc119  &&  [ ([($JJ) || ($TT) || ($AQ)] && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((StillToAct = 3 OR In Button) AND Raises = 1 AND Calls >= 2)
//
f$myfunc120  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc120  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_PairInHand || ($A) || ($KQ) || ($KJ) || ($KT) || ($K9s) || ($QJ) || ($QT) || ($Q9s) || ($Q8s) || ($JT) || ($J9s) || ($J8s) || ($J7s) || ($T9s) || ($T8s) || ($T7s) || ($98s) || ($97s) || ($87s) || ($86s) || ($76s) || ($75s) || ($65s) || ($64s) || ($54s) || ($53s) || ($43s) || ($42s) || ($32s)]) ] ? f$OpenPPL_Call :
f$myfunc120  &&  [ ([($AA) || ($KK) || ($QQ) || ($AK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc120  &&  [ ([($JJ) || ($TT) || ($AQ) || ($AJs)] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc120  &&  [ ([($99) || ($88) || ($77) || ($66) || ($55) || ($44) || ($33) || ($22)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc120  &&  [ ([($QJs) || ($JT) || ($T9s) || ($98s)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In BigBlind AND Raises = 1 AND Calls = 0 AND Checks = 0 AND LastRaiserPosition = 1 AND NOT OpponentIsAllin)
//
f$myfunc121  &&  [ ([($AA) || ($KK) || ($QQ) || ($JJ) || ($AK) || ($AQ) || ($AJ)] && f$OpenPPL_AmountToCall == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc121  &&  [ ([($AA) || ($KK) || ($QQ) || ($JJ) || ($AK) || ($AQ) || ($AJ)] && f$OpenPPL_AmountToCall == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc121  &&  [ ([($AA) || ($KK) || ($QQ) || ($JJ) || ($AK) || ($AQ) || ($AJ)] && f$OpenPPL_AmountToCall == 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc121  &&  [ ([($AA) || ($KK) || ($QQ) || ($JJ) || ($AK) || ($AQ) || ($AJ)]) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc121  &&  [ ([($AT) || ($AA) || ($KK) || ($QQ) || ($JJ) || ($TT)]) ] ? f$OpenPPL_RaisePot :
f$myfunc121  &&  [ (f$OpenPPL_AmountToCall <= 4 && [($AT) || ($KJ) || ($KT) || ($QJ) || ($QT) || ($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99)]) ] ? f$OpenPPL_Call :
f$myfunc121  &&  [ (f$OpenPPL_AmountToCall <= 3 && [($A9) || ($A8) || ($K9) || ($K8)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In BigBlind AND Raises = 1)
//
f$myfunc122  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc122  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc122  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc122  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($AK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc122  &&  [ ([f$OpenPPL_PairInHand || ($AK) || ($AQ) || ($AJs)] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition <= 2 && f$OpenPPL_Calls <= 1 && [($AQ) || ($JJ)] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 2 && [($ATs) || ($KQ) || ($KJs) || ($KTs) || ($QJs) || f$OpenPPL_PairInHand] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 4) ] ? 13 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 1) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 2) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 3) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 4) ] ? 14 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 1) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 2) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 3) ] ? 12 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 4) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AA) || ($KK) || ($QQ) || ($JJ)] && f$OpenPPL_AmountToCall <= 4) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 4) ] ? 13 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 1) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 2) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 3) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 4) ] ? 14 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 1) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 2) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 3) ] ? 12 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 4) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($JJ)] && f$OpenPPL_AmountToCall <= 4) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc122  &&  [ (f$OpenPPL_LastRaiserPosition == 1 && [($AJ) || ($AT) || ($KQ) || ($KJ) || ($KT) || ($QJ) || ($QTs) || ($JTs) || f$OpenPPL_PairInHand] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc122  &&  [ (f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In SmallBlind AND Raises = 1 AND Calls <= 2)
//
f$myfunc123  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 5) ] ? f$OpenPPL_Call :
f$myfunc123  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc123  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc123  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($AK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc123  &&  [ ([($AQ) || ($JJ) || ($TT) || ($99) || ($AJs)] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc123  &&  [ ([f$OpenPPL_PairInHand || ($KQs) || ($KJs) || ($QJs) || ($JTs)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In SmallBlind AND Raises = 1 AND Calls >= 3)
//
f$myfunc124  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc124  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 4 && [f$OpenPPL_PairInHand || ($AK) || ($AQ) || ($AJ) || ($AT) || ($KQ) || ($KJ) || ($KT) || ($QT) || ($QJ) || ($JT) || ($K9s) || ($Q9s) || ($Q8s) || ($J9s) || ($J8s) || ($J7s) || ($T9s) || ($T8s) || ($98s) || ($97s) || ($87s) || ($86s) || ($76s) || ($75s) || ($65s) || ($64s) || ($54s)]) ] ? f$OpenPPL_Call :
f$myfunc124  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
f$myfunc124  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc124  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($AK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc124  &&  [ ([($AQ) || ($JJ) || ($TT) || ($99) || ($AJs)] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc124  &&  [ ([f$OpenPPL_PairInHand || ($KQs) || ($KJs) || ($QJs) || ($JTs)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc124  &&  [ ([($T9s) || ($98s)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In BigBlind AND Raises = 1 AND Opponents = 1 AND (LastRaiserPosition = 4 OR LastRaiserPosition = 5 OR LastRaiserPosition = 6 OR LastRaiserPosition = 7 OR LastRaiserPosition = 8))
//
f$myfunc125  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [($AA) || ($KK) || ($QQ)]) ] ? f$OpenPPL_RaisePot :
f$myfunc125  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc125  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc125  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc125  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($AK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc125  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($AQ) || ($AJ) || ($AT) || ($KQ)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc125  &&  [ ([($AXs) || ($KJs) || ($KTs) || ($K9s) || ($QJ) || ($QT) || ($JTs)] && f$OpenPPL_AmountToCall <= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In BigBlind AND Raises = 1 AND Opponents = 1 AND (LastRaiserPosition = 2 OR LastRaiserPosition = 3))
//
f$myfunc126  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && [($AA) || ($KK) || ($QQ)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc126  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc126  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc126  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc126  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($AK)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc126  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($AQ) || ($AJ) || ($AT) || ($KQ)] && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc126  &&  [ ([($AXs) || ($KJs) || ($KTs) || ($K9s) || ($QJ) || ($QT) || ($JTs)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc126  &&  [ ([($A9) || ($A8) || ($KJ) || ($KT) || ($Q9s) || ($Q8s)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In BigBlind AND Raises = 1 AND Calls = 2)
//
f$myfunc127  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc127  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc127  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc127  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($AK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc127  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($AQ) || ($AJ) || ($AT) || ($KQ)] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc127  &&  [ ([($AXs) || ($KJs) || ($KTs) || ($K9s) || ($QJ) || ($JTs)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc127  &&  [ ([($A9) || ($A8) || ($Q9s) || ($Q8s) || ($J9s) || ($T9s) || ($98s)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In BigBlind AND Raises = 1 AND Calls >= 3)
//
f$myfunc128  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc128  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1 && f$OpenPPL_AmountToCall <= 4) ] ? f$OpenPPL_Call :
f$myfunc128  &&  [ ([($AA) || ($KK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc128  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && [($QQ) || ($AK)]) ] ? f$OpenPPL_RaisePot :
f$myfunc128  &&  [ ([($TT) || ($99) || ($88) || ($77) || ($AQ) || ($AJ) || ($AT) || ($KQ)] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc128  &&  [ ([($AXs) || ($KJs) || ($KTs) || ($K9s) || ($QJ) || ($JTs)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc128  &&  [ ([($A9) || ($A8) || ($Q9s) || ($Q8s) || ($J9s) || ($T9s) || ($98s)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc128  &&  [ ([($KXs) || ($QXs) || ($J8s) || ($T9) || ($T8s) || ($98) || ($97s) || ($87s) || ($76s) || ($65s)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc128  &&  [ ([($T7s) || ($87) || ($86s) || ($76) || ($75s) || ($54s) || ($J7s) || ($96s)] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In SmallBlind AND Raises = 0 AND Calls >= 2)
//
f$myfunc129  &&  [ ([($A) || ($KXs) || ($QJs) || ($QTs) || ($Q9s) || ($Q8s) || ($JTs) || ($J9s) || ($J8s) || ($KQ) || ($KJ) || ($KT) || ($K9) || ($QJ) || ($QT) || ($Q9) || ($Q8) || ($JT) || ($J9) || ($J8) || ($J7) || ($T9) || ($T8) || ($T7) || ($98) || ($97) || ($87) || ($86) || ($76)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In SmallBlind AND Raises = 0 AND Calls >= 3)
//
f$myfunc130  &&  [ (f$OpenPPL_StackSize >= 20) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 1 AND NOT (BotsLastAction = RAISE) AND ((Hand = AA) OR (Hand = KK)))
//
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 1 && f$OpenPPL_Calls == 0) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 2 && f$OpenPPL_Calls == 0) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 3 && f$OpenPPL_Calls == 0) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 4 && f$OpenPPL_Calls == 0) ] ? 13 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 5 && f$OpenPPL_Calls == 0) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 1 && f$OpenPPL_Calls == 1) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 2 && f$OpenPPL_Calls == 1) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 3 && f$OpenPPL_Calls == 1) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 4 && f$OpenPPL_Calls == 1) ] ? 14 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 5 && f$OpenPPL_Calls == 1) ] ? 17 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 1 && f$OpenPPL_Calls == 2) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 2 && f$OpenPPL_Calls == 2) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 3 && f$OpenPPL_Calls == 2) ] ? 12 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 4 && f$OpenPPL_Calls == 2) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_AmountToCall == 5 && f$OpenPPL_Calls == 2) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc131  &&  [ (f$OpenPPL_Calls >= 0) ] ? 130 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (Raises = 1 AND NOT (BotsLastAction = Raise) AND ((Hand = QQ) OR (Hand = JJ) OR (Hand = AK suited)))
//
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 1) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 2) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 3) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 4) ] ? 13 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 5) ] ? 16 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 6) ] ? 19 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 7) ] ? 22 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 8) ] ? 25 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 9) ] ? 28 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 0 && f$OpenPPL_AmountToCall == 10) ] ? 31 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 1) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 2) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 3) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 4) ] ? 14 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 5) ] ? 17 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 6) ] ? 20 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 7) ] ? 223 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 8) ] ? 26 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 9) ] ? 29 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 1 && f$OpenPPL_AmountToCall == 10) ] ? 32 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 1) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 2) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 3) ] ? 11 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 4) ] ? 15 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 5) ] ? 18 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 6) ] ? 21 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 7) ] ? 24 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 8) ] ? 27 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 9) ] ? 30 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls == 2 && f$OpenPPL_AmountToCall == 10) ] ? 32 * f$RaiseByBigBlinds :
f$myfunc132  &&  [ (f$OpenPPL_Calls >= 0 && f$OpenPPL_AmountToCall <= 10) ] ? 130 * f$RaiseByPercentagedPotsize :
f$myfunc132  &&  [ (f$OpenPPL_Calls >= 0 && f$OpenPPL_AmountToCall <= 30) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (StillToAct <= 6 AND (PairInHand))
//
f$myfunc133  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ] ? 3 * f$RaiseByBigBlinds :
f$myfunc133  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((In BigBlind OR In SmallBlind) AND Raises = 1 AND BetSize <= 2)
//
f$myfunc134  &&  [ ([($AXs) || f$OpenPPL_PairInHand || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs) || ($T9s)]) ] ? f$OpenPPL_Call :
f$myfunc134  &&  [ (f$OpenPPL_AmountToCall <= 1 && [($98s) || ($87s) || ($76s) || ($65s) || ($54s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In Button AND Raises = 0 AND Calls >= 1)
//
f$myfunc135  &&  [ ([($AXs) || ($KTs) || ($KJs) || ($KQs) || ($QJs) || ($QTs) || ($JTs) || ($T9s) || ($98s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In SmallBlind AND Raises = 0 AND Calls >= 1)
//
f$myfunc136  &&  [ ([($AXs) || ($KTs) || ($KJs) || ($KQs) || ($QJs) || ($QTs) || ($JTs) || ($T9s) || ($98s)]) ] ? f$OpenPPL_Call :
f$myfunc136  &&  [ ([($AJ) || ($AT) || ($KQ) || ($KJ) || ($QJ) || ($QT) || ($JT)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = RAISE)
//
f$myfunc137  &&  [ (f$OpenPPL_AmountToCall <= 3 && [($AXs) || ($KQs) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs) || ($J9s) || ($T9s) || ($T8s) || ($98s) || ($87s) || ($76s) || ($65s) || ($54s) || f$OpenPPL_PairInHand]) ] ? f$OpenPPL_Call :
f$myfunc137  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_LastRaiserPosition == 1 && f$OpenPPL_BigBlind && [($AA) || ($KK) || ($QQ) || ($AK)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc137  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && [f$OpenPPL_TotalInvested >= 150 * 0.01 * f$OpenPPL_StackSize || f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize] && [($AK) || ($AA) || ($KK) || ($QQ)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In SmallBlind AND Raises = 0 AND Calls >= 1)
//
f$myfunc138  &&  [ (f$OpenPPL_Calls >= 1 && [($A) || ($KQ) || ($KJ) || ($KTs) || ($QJ) || ($QT) || ($JT) || ($T9s) || ($98s) || ($87s) || ($76s) || ($65s) || ($54s) || ($43s) || ($32s)]) ] ? f$OpenPPL_Call :
f$myfunc138  &&  [ (f$OpenPPL_Calls >= 2 && [($KT) || ($K9s) || ($Q9s) || ($J9s) || ($J8s) || ($T8s) || ($97s) || ($86s) || ($75s) || ($64s) || ($53s) || ($42s)]) ] ? f$OpenPPL_Call :
f$myfunc138  &&  [ (f$OpenPPL_Calls >= 3 && [($K9) || ($KXs) || ($QXs) || ($J7s) || ($T7s) || ($96s) || ($85s) || ($74s) || ($63s) || ($52s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND BotsLastAction = None AND AmountToCall <= 3)
//
f$myfunc139  &&  [ (f$OpenPPL_Button && f$OpenPPL_LastRaiserPosition <= 5 && [($AK) || ($AQ) || ($AJ) || ($ATs) || ($KQ) || ($KJs) || ($QJs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND Calls = 0 AND In Button)
//
f$myfunc140  &&  [ ([($A) || ($KQ) || ($KJ) || ($KT) || ($K9) || ($KXs) || ($QJ) || ($QT) || ($Q9) || ($Q8) || ($QXs) || ($JT) || f$OpenPPL_PairInHand]) ] ? 3 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Raises = 1 AND BotsLastAction = None AND (In SmallBlind OR In BigBlind) AND AmountToCall <= 2)
//
f$myfunc141  &&  [ ([f$OpenPPL_PairInHand || ($AK) || ($AQ) || ($AJ) || ($AT) || ($KQ) || ($KJ) || ($KTs) || ($QJs) || ($QTs) || ($JTs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Random <= 65 AND Raises = 0 AND Calls = 0 AND NOT (In BigBlind))
//
f$myfunc142  &&  [ (me_re_usercake && f$OpenPPL_StillToAct <= 6 && [($AXs) || ($KXs) || ($KQ) || ($KJs) || ($KTs) || ($K9s) || ($QJs) || ($QTs) || ($Q9s) || ($Q8s) || ($JTs) || ($J9s) || ($T9s) || ($T8s) || ($98s) || ($97s) || ($87s) || ($86s) || ($76s) || ($75s) || ($65s) || ($64s) || ($54s)]) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc142  &&  [ (f$OpenPPL_StillToAct <= 6 && [($AXs) || ($KXs) || ($KQ) || ($KJs) || ($KTs) || ($K9s) || ($QJs) || ($QTs) || ($Q9s) || ($Q8s) || ($JTs) || ($J9s) || ($T9s) || ($T8s) || ($98s) || ($97s) || ($87s) || ($86s) || ($76s) || ($75s) || ($65s) || ($64s) || ($54s)]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc142  &&  [ (me_re_usercake && [f$OpenPPL_PairInHand || ($AXs) || ($KQ) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs) || ($J9s) || ($T9s) || ($T8s) || ($98s) || ($97s)]) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc142  &&  [ ([f$OpenPPL_PairInHand || ($AXs) || ($KQ) || ($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs) || ($J9s) || ($T9s) || ($T8s) || ($98s) || ($97s)]) ] ? 100 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (In SmallBlind AND Raises = 0 AND Calls >= 1)
//
f$myfunc143  &&  [ ([($AXs) || ($KXs) || ($QXs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = None AND Raises = 1 AND Calls >= 2 AND AmountToCall <= 5)
//
f$myfunc144  &&  [ ([($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88) || ($77) || ($AKs) || ($AQs) || ($AJs) || ($KQs) || ($KJs) || ($QJs) || ($JTs)]) ] ? f$OpenPPL_Call :
f$myfunc144  &&  [ (f$OpenPPL_Calls >= 2 && f$OpenPPL_AmountToCall <= 4 && [f$OpenPPL_PairInHand || ($AK) || ($AQ) || ($AJ)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (StillToAct <= 4 AND Raises = 0 AND Calls = 0)
//
f$myfunc145  &&  [ (me_re_usercake && [($AK) || ($AQ) || ($AJ) || ($AT) || ($A9s) || ($A8s) || ($A7s) || ($A6s) || ($A5s)]) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc145  &&  [ ([($AK) || ($AQ) || ($AJ) || ($AT) || ($A9s) || ($A8s) || ($A7s) || ($A6s) || ($A5s)]) ] ? 100 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (BotsLastAction = RAISE AND Raises = 1 AND CallsSinceLastRaise = 0)
//
f$myfunc146  &&  [ ([($AA) || ($KK) || ($AKs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = None AND Raises = 1 AND BetSize <= 4)
//
f$myfunc147  &&  [ ([($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99) || ($AK) || ($AQ) || ($AJs) || ($ATs) || ($KQs)]) ] ? f$OpenPPL_Call :
f$myfunc147  &&  [ (f$OpenPPL_AmountToCall <= 2 && [($KJs) || ($KTs) || ($QJs) || ($QTs) || ($JTs)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = RAISE AND Raises <= 2 AND OpponentIsAllin AND BetSize <= 50 AND CallsSinceLastRaise = 0)
//
f$myfunc148  &&  [ ([($AA) || ($KK) || ($QQ) || ($JJ) || ($AK)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (AmountToCall <= 3 AND BotsActionsOnThisRound = 0)
//
f$myfunc149  &&  [ ([f$OpenPPL_PairInHand || ($45s) || ($56s) || ($67s) || ($78s) || ($89s) || ($9Ts) || ($JTs) || ($QJs) || ($KQs) || ($AKs)]) ] ? f$OpenPPL_Call :
f$myfunc149  &&  [ ([f$OpenPPL_PairInHand || ($46s) || ($57s) || ($68s) || ($79s) || ($8Ts) || ($9Js) || ($QTs) || ($KJs) || ($AQs) || ($35s)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (In Button AND Raises = 0 AND BotsActionsOnThisRound = 0)
//
f$myfunc150  &&  [ (me_re_usercake && f$OpenPPL_Calls == 0 &&  ![(me_re_usercompletejunk)]) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc150  &&  [ (f$OpenPPL_Calls == 0 &&  ![(me_re_usercompletejunk)]) ] ? 2.5 * f$RaiseByBigBlinds :
//
// Starting open-ended when-condition
// (Raises = 0 AND Calls = 0 AND StillToAct <= 5)
//
f$myfunc151  &&  [ (me_re_usercake && [($KQ) || ($KJs)]) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc151  &&  [ ([($KQ) || ($KJs)]) ] ? 100 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// ((In BigBlind) AND Raises = 1 AND Calls = 0 AND BotsActionsOnThisRound = 0)
//
f$myfunc152  &&  [ (f$OpenPPL_LastRaiserPosition <= 2 && f$OpenPPL_AmountToCall <= 2 && [($A) || ($KQ) || ($KJ) || ($KT) || ($QJ) || ($QT)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (StillToAct <= 3 AND NOT (In SmallBlind) AND BotsActionsOnThisRound = 0)
//
f$myfunc153  &&  [ (me_re_usercake && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && [($A)]) ] ? 150 * f$RaiseByPercentagedPotsize :
f$myfunc153  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && [($A)]) ] ? 100 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (StillToAct <= 6 AND Raises = 0 AND BotsActionsOnThisRound = 0)
//
f$myfunc154  &&  [ (f$OpenPPL_Calls >= 3 &&  ![(me_re_usercompletejunk)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises = 0 AND Calls >= 1 AND BotsActionsOnThisRound = 0)
//
f$myfunc155  &&  [ (f$OpenPPL_Calls >= 1 && [($A) || ($KQ) || ($KJ) || ($KT) || ($QJ) || ($QT) || ($JT)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((BotsLastAction = Call OR BotsLastAction = RAISE OR BotsLastAction = None) AND AmountToCall <= 4)
//
f$myfunc156  &&  [ ([($66) || ($77) || ($88) || ($99) || ($TT)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Others)
//

f$myfunc157  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_BotsActionsOnThisRound == 0 && f$OpenPPL_StillToAct <= 4 && [($AK) || ($AQ) || ($AJ) || ($AT) || ($AXs) || ($KQ) || ($KJ) || ($KTs) || ($QJ) || ($QTs) || ($JTs)]) ] ? 3 * f$RaiseByBigBlinds :

f$myfunc157  &&  [ (f$OpenPPL_Raises >= 0) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold 

##f$flop##
[ [ (f$OpenPPL_HaveNuts) ] ? me_st_userflopnuts_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveQuads) ] ? me_st_userflopquads_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? me_st_userflopfullhouse_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveStraightFlush) ] ? me_st_userflopstraightflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutFlush) ] ? me_st_userflopnutflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_HaveNutFlush)]) ] ? me_st_userflopflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutStraight) ] ? me_st_userflopnutstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveUnderStraight) ] ? me_st_userflopunderstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight)]) ] ? me_st_userflopstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveSet) ] ? me_st_userflopset_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTrips) ] ? me_st_userfloptrips_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTopTwoPair) ] ? me_st_userfloptoptwopair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_HaveTopTwoPair)]) ] ? me_st_userfloptwopair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveOverPair) ] ? me_st_userflopoverpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTopPair) ] ? me_st_userfloptoppair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTopNonBoardPairedPair) ] ? me_st_userfloptopnonboardpairedpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have2ndOverPair) ] ? me_st_userflop2ndoverpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have2ndTopPair) ] ? me_st_userflop2ndtoppair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair)]) ] ? me_st_userfloppair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_HaveNutFlush)]) ] ? me_st_userflopnutflushdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_HaveFlush)] &&  ![(f$OpenPPL_HaveNutFlushDraw)]) ] ? me_st_userflopflushdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_HaveNutStraight)]) ] ? me_st_userflopnutstraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HaveStraight)] &&  ![(f$OpenPPL_HaveNutStraightDraw)]) ] ? me_st_userflopstraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveInsideNutStraightDraw &&  ![(f$OpenPPL_HaveStraight)]) ] ? me_st_userflopnutinsidestraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveInsideStraightDraw &&  ![(f$OpenPPL_HaveStraight)] &&  ![(f$OpenPPL_HaveStraightDraw)]) ] ? me_st_userflopinsidestraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_HavePair)]) ] ? me_st_userflop2overcards_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Overcards == 1 &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Overcards < 2) ] ? me_st_userflop1overcard_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveBestKicker) ] ? me_st_userflopbestkicker_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have2ndBestKicker &&  ![(f$OpenPPL_HaveBestKicker)]) ] ? me_st_userflop2ndbestkicker_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have3rdBestKicker &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)]) ] ? me_st_userflop3rdbestkicker_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNothing) ] ? me_st_userflopnothing_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TripsOnBoard) ] ? me_st_userflopboardtrips_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_TripsOnBoard)]) ] ? me_st_userflopboardpaired_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_FlushPossible) ] ? me_st_userflopboardpossibleflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_StraightPossible) ] ? me_st_userflopboardpossiblestraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_OnlyOneStraightPossible) ] ? me_st_userflopboardonlyonepossiblestraight_1 : 0] && 0 ? 0 :
[ [ ( ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)])] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])]) ] ? me_st_userboardflopnopaint_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Raise) ] ? me_st_useraggressorpreflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call && f$OpenPPL_RaisesBeforeFlop) ] ? me_st_usernonaggressorpreflop_1 : 0] && 0 ? 0 :
[ [ ( ![(f$OpenPPL_RaisesBeforeFlop)] &&  ![me_re_useraggressorpreflop]) ] ? me_st_usernoraisespreflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall == 1) ] ? me_st_useroppminraiseflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall == 2) ] ? me_st_useroppraise2bbflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall == 3) ] ? me_st_useroppraise3bbflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall == 4) ] ? me_st_useroppraise4bbflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall >= 5) ] ? me_st_useroppraisegreaterthan5bbflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useroppraiselessthanorequalto25percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 20 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 26 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useroppraiselessthanorequalto35percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 26 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useroppraiselessthanorequalto50percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 33 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 43 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useroppraiselessthanorequalto75percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 43 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useroppraiselessthanorequalto100percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useroppraiseoverraiseflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useramounttocalllessthanorequalto25percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 25 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useramounttocalllessthanorequalto35percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useramounttocalllessthanorequalto50percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 75 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useramounttocalllessthanorequalto75percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 75 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useramounttocalllessthanorequalto100percpotflop_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 100 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useramounttocallgreaterthanorequalto50percpotflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_TotalInvested < 200 * 0.01 * f$OpenPPL_StackSize) ] ? me_st_usertotalinvestedhalfofstackflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TotalInvested >= 200 * 0.01 * f$OpenPPL_StackSize) ] ? me_st_usertotalinvestedtwothirdsofstackflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_PotSize >= 100 * 0.01 * f$OpenPPL_StackSize) ] ? me_st_userpotcommitted_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionflopraise_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_BotsActionsOnThisRound == 0) ] ? me_st_userlastactionflopnone_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionflopcall_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionflopbet_1 : 0] && 0 ? 0 :
[ [ ( ![(me_re_userlastactionflopraise)] &&  ![(me_re_userlastactionflopnone)] &&  ![(me_re_userlastactionflopcall)] &&  ![(me_re_userlastactionflopbet)] && f$OpenPPL_BotsActionsOnThisRound > 0) ] ? me_st_userlastactionflopcheck_1 : 0] && 0 ? 0 :
[ [ ( ![(f$OpenPPL_UncoordinatedFlop)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? me_st_userdrawflopboard_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_SuitsOnBoard == 3 &&  !([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_2) == 0))])]) ] ? me_st_usersafeflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_SuitsOnBoard == 3 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_A) == 0)])]) ] ? me_st_userverydryflopboard_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_SuitsOnBoard == 3 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_2) == 0)])] &&  ![(me_re_userverydryflopboard)]) ] ? me_st_userdryflopboard_1 : 0] && 0 ? 0 :
[ [ ([(f$OpenPPL_SuitsOnBoard == 2 && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_A) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_A) == 0))]) || f$OpenPPL_SuitsOnBoard == 1 || f$OpenPPL_StraightPossible]) ] ? me_st_userverywetflopboard_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_SuitsOnBoard == 2 || ([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_7) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_3) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_2) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_A) == 0)])] &&  ![(me_re_userdryflopboard)] &&  ![(me_re_userverywetflopboard)]) ] ? me_st_userwetflopboard_1 : 0] && 0 ? 0 :
[ [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9 * f$PrimeCode_8) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_8 * f$PrimeCode_7) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_7 * f$PrimeCode_6) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_6 * f$PrimeCode_5) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_5 * f$PrimeCode_4) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_4 * f$PrimeCode_3) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_3 * f$PrimeCode_2) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_2 * f$PrimeCode_A) == 0))]) ] ? me_st_userconnectedcoordinatedflop_1 : 0] && 0 ? 0 :
[ [ ([((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_J * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0))]) ] ? me_st_userscaryboard_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads]) ] ? me_st_usertoppairorbetter_1 : 0] && 0 ? 0 :
[ ([f$OpenPPL_HaveUnderPair ||  !([f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HavePair])] && me_re_userscaryboard && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StackSize <= 6 && [($AA) || ($KK)] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] && f$OpenPPL_UncoordinatedFlop && [f$OpenPPL_BotsLastAction == f$OpenPPL_Check]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize <= 6 && [($AA) || ($KK)] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] && f$OpenPPL_UncoordinatedFlop && f$OpenPPL_Position == f$OpenPPL_First && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StackSize <= 6 && [($AA) || ($KK)] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)]) ] ? f$OpenPPL_RaiseMax :
[ ([f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall == 1 && [me_re_usertoppairorbetter] && f$OpenPPL_StackSize > 10) ] ? 3 * f$RaiseByBigBlinds :
[ ([f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall == 1 && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_StackSize > 10) ] ? f$OpenPPL_RaiseMin :
[ ([f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall == 1 && f$OpenPPL_StackSize > 10) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_Overcards == 1 &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_RaisesBeforeFlop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_RaisesBeforeFlop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards >= 1]) ] ? f$OpenPPL_Call :
[ ( ![(f$OpenPPL_RaisesBeforeFlop)] && f$OpenPPL_Opponents <= 3 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && [f$OpenPPL_HavePair || ($A) || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_StackSize >= 12) ] ? 60 * f$RaiseByPercentagedPotsize :
[ ([f$OpenPPL_RaisesBeforeFlop] && f$OpenPPL_TotalInvested >= 75 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize <= 10 && [f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Random <= 50) ] ? 50 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 75 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 58 * 0.01 * f$OpenPPL_PotSize) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_BotsActionsOnThisRound == 1 && f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 58 * 0.01 * f$OpenPPL_PotSize) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Random <= 35) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle]) ] ? f$OpenPPL_Call :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usertoppairorbetter)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Random <= 50) ] ? 50 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usertoppairorbetter)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 75 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards >= 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usertoppairorbetter)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 58 * 0.01 * f$OpenPPL_PotSize) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards >= 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usertoppairorbetter)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_BotsActionsOnThisRound == 1 && f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 58 * 0.01 * f$OpenPPL_PotSize) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usertoppairorbetter)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Random <= 35) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usertoppairorbetter)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle]) ] ? f$OpenPPL_Call :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Random <= 50) ] ? 50 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 75 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 58 * 0.01 * f$OpenPPL_PotSize) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_BotsActionsOnThisRound == 1 && f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 58 * 0.01 * f$OpenPPL_PotSize) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Random <= 35) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle]) ] ? f$OpenPPL_Call :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usertoppairorbetter)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])]) ] ? 55 * f$RaiseByPercentagedPotsize :
[ ( ![(me_re_useraltcbetstrategy)] && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ ( ![(me_re_useraltcbetstrategy)] && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usertoppairorbetter)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])]) ] ? 55 * f$RaiseByPercentagedPotsize :
[ ( ![(me_re_useraltcbetstrategy)] && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usertoppairorbetter)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Overcards >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usertoppairorbetter)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_T) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_J) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_9) == 0)])]) ] ? 55 * f$RaiseByPercentagedPotsize :
[ ([f$OpenPPL_BotRaisedBeforeFlop] &&  ![(f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTwoPair)] && f$OpenPPL_Opponents > 2) ] ? f$OpenPPL_Fold :
[ (me_re_useraggressorpreflop && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (me_re_useraggressorpreflop && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Check && [f$OpenPPL_RaisesBeforeFlop] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_StackSize < 14 && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises == 1) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_StackSize <= 6) ] ? f$OpenPPL_RaiseMax :
[ ([f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_StackSize < 10 && [f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndOverPair] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaiseMax :
[ ([f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize < 10 && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Random <= 50 && f$OpenPPL_HaveNothing) ] ? 50 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HaveNothing) ] ? 75 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Random <= 35 && f$OpenPPL_HaveNothing && f$OpenPPL_AmountToCall <= 58 * 0.01 * f$OpenPPL_PotSize) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNothing && f$OpenPPL_BotsLastAction == f$OpenPPL_Check && f$OpenPPL_BotsActionsOnThisRound == 1 && f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 58 * 0.01 * f$OpenPPL_PotSize) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Random <= 35 && f$OpenPPL_HaveNothing) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_HaveNothing) ] ? f$OpenPPL_Call :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Random <= 50) ] ? 50 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible)]) ] ? 75 * f$RaiseByPercentagedPotsize :
[ (me_re_useraltcbetstrategy && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Opponents <= 2 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Random <= 35 && f$OpenPPL_AmountToCall <= 58 * 0.01 * f$OpenPPL_PotSize) ] ? 90 * f$RaiseByPercentagedPotsize :
[ ( ![(me_re_useraltcbetstrategy)] && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_HaveNothing) ] ? 55 * f$RaiseByPercentagedPotsize :
[ ( ![(me_re_useraltcbetstrategy)] && me_re_useraggressorpreflop &&  ![(me_re_userpassiveflop)] &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 2 && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible)]) ] ? 55 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall >= 50 * 0.01 * f$OpenPPL_StackSize &&  ![([f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker] || [f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndBestKicker] || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair)]) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveOverPair]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveFlush || f$OpenPPL_HaveQuads]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveTwoPair || (f$OpenPPL_HaveOverPair && [($AA) || ($KK)])] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_HaveStraight) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveTwoPair || (f$OpenPPL_HaveOverPair && [($AA) || ($KK)])]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [(f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker) || f$OpenPPL_HaveOverPair] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_Raises >= 1 && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Raises >= 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 30 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StackSize < 10 && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 10 && f$OpenPPL_HaveFlushDraw && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize < 10 && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_StackSize < 10 && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 1 && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StackSize <= 10 && [f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_HaveTopPair && f$OpenPPL_HaveBestKicker && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
[ (me_re_userheadsup && f$OpenPPL_Bets == 1 && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? 100 * f$RaiseByPercentagedPotsize :
[ (me_re_userheadsup && f$OpenPPL_Bets == 1 && [(f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveTopPair)]) || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (User_Aggressor_Preflop AND Opponents <= 3 AND BotsActionsOnThisRound = 0)
//
f$myfunc158  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usersafeflop)]) ] ? 120 * f$RaiseByPercentagedPotsize :
f$myfunc158  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usersafeflop || f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc158  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveTwoPair] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usersafeflop)]) ] ? f$OpenPPL_Call :
f$myfunc158  &&  [ ([f$OpenPPL_HaveNutFlushDraw] &&  ![(me_re_userpassiveflop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc158  &&  [ ([f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(me_re_userpassiveflop)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (HaveSet)
//
f$myfunc159  &&  [ ( ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_UncoordinatedFlop)] && [( ![(me_re_usernonaggressorpreflop)]) || (f$OpenPPL_Position == f$OpenPPL_Last)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 90 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 0 AND Raises = 0 AND Position = First)
//
f$myfunc160  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)] && f$OpenPPL_PotSize == 6) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)] && f$OpenPPL_PotSize == 7) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)] && f$OpenPPL_PotSize == 8) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)] && f$OpenPPL_PotSize == 9) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)] && f$OpenPPL_PotSize == 10) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveNutFlush) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2 && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 6) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 7) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 8) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 9) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 10) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlush && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlush && f$OpenPPL_PotSize == 6) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlush && f$OpenPPL_PotSize == 7) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlush && f$OpenPPL_PotSize == 8) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlush && f$OpenPPL_PotSize == 9) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlush && f$OpenPPL_PotSize == 10) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlush) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2 && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 6) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 7) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 8) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 9) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 10) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2 && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 6) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 7) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 8) ] ? 8 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 9) ] ? 9 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 10) ] ? 10 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 8) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 10) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 8) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && f$OpenPPL_PotSize == 10) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 8) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 10) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_PotSize == 8) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_PotSize == 10) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 8) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 10) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10 && f$OpenPPL_Random <= 25) ] ? 40 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && f$OpenPPL_PotSize == 8) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && f$OpenPPL_PotSize == 10) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 8) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 10) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 8) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 10) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 8) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 10) ] ? 7 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 10) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 7) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 9) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PotSize == 10) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 7) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 9) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_PotSize == 10) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_StackSize > 10 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10 && f$OpenPPL_PotSize == 6) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10 && f$OpenPPL_PotSize == 7) ] ? 4 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10 && f$OpenPPL_PotSize == 8) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10 && f$OpenPPL_PotSize == 9) ] ? 5 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10 && f$OpenPPL_PotSize == 10) ] ? 6 * f$RaiseByBigBlinds :
f$myfunc160  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_Have3rdNutFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc160  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc160  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 1 AND Raises = 0 AND Position = First)
//
f$myfunc161  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc161  &&  [ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_BigBlindSize <= 300 && f$OpenPPL_StackSize > 10 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc161  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc161  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc161  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_AmountToCall <= 32 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc161  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 70 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets <= 1 AND Raises >= 1 AND Position = First)
//
f$myfunc162  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopTwoPair]) ] ? f$OpenPPL_RaiseMax :
f$myfunc162  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_StackSize < 10) ] ? f$OpenPPL_RaiseMax :
f$myfunc162  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_HaveNutFlush) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc162  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveFlush) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaisePot :
f$myfunc162  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] && [($TT) || ($JJ) || ($QQ) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] &&  ![([$TT] || [$JJ] || [$QQ] || [$KK] || [$AA])]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc162  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc162  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets = 0 AND Raises = 0 AND Position = First)
//
f$myfunc163  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveFlush) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10 && f$OpenPPL_BigBlindSize <= 80) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))] && f$OpenPPL_AmountToCall <= 30 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10 && f$OpenPPL_BigBlindSize <= 80) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_Have3rdNutFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc163  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc163  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets = 1 AND Raises = 0 AND (Position = First OR Position = Middle) AND User_Aggressive_Flop)
//
f$myfunc164  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveNutFlush) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveFlush) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMax :
f$myfunc164  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndNutFlushDraw) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_StackSize > 10 && f$OpenPPL_BigBlindSize <= 300 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMin :
f$myfunc164  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc164  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc164  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc164  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 40 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2) ] ? f$OpenPPL_RaiseMin :
f$myfunc164  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaisePot :
f$myfunc164  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc164  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets = 1 AND Raises = 0 AND Position = First)
//
f$myfunc165  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMax :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMin :
f$myfunc165  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc165  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc165  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc165  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 40 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc165  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets <= 1 AND Raises >= 1 AND (Position = First OR Position = Middle) AND User_Aggressive_Flop)
//
f$myfunc166  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopTwoPair]) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_StackSize < 10) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveNutFlush) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveFlush) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMin :
f$myfunc166  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc166  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc166  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc166  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_RaiseMax :
f$myfunc166  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets <= 1 AND Raises >= 1 AND Position = First)
//
f$myfunc167  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopTwoPair]) ] ? f$OpenPPL_RaiseMax :
f$myfunc167  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_StackSize < 10) ] ? f$OpenPPL_RaiseMax :
f$myfunc167  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc167  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc167  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc167  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc167  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveFlush) ] ? f$OpenPPL_RaiseMax :
f$myfunc167  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc167  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc167  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc167  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc167  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] && [($TT) || ($JJ) || ($QQ) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] &&  ![([$TT] || [$JJ] || [$QQ] || [$KK] || [$AA])]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc167  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc167  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 0 AND Raises = 0 AND Position = Middle)
//
f$myfunc168  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveFlush) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 90 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))] && f$OpenPPL_AmountToCall <= 30 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_Have3rdNutFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc168  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? f$OpenPPL_Call :
f$myfunc168  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 1 AND Raises = 0 AND Position = Middle)
//
f$myfunc169  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMax :
f$myfunc169  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_StackSize > 10 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc169  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc169  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc169  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc169  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 60 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc169  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets <= 1 AND Raises >= 1 AND Position = Middle)
//
f$myfunc170  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopTwoPair]) ] ? f$OpenPPL_RaiseMax :
f$myfunc170  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_StackSize < 10) ] ? f$OpenPPL_RaiseMax :
f$myfunc170  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc170  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc170  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc170  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc170  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveFlush) ] ? f$OpenPPL_RaiseMax :
f$myfunc170  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc170  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc170  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc170  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc170  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc170  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] && [($TT) || ($JJ) || ($QQ) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] &&  ![([$TT] || [$JJ] || [$QQ] || [$KK] || [$AA])]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc170  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 60 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc170  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets = 0 AND Raises = 0 AND Position = Middle)
//
f$myfunc171  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveFlush) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc171  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_Have3rdNutFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? f$OpenPPL_Call :
f$myfunc171  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets = 1 AND Raises = 0 AND Position = Middle)
//
f$myfunc172  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMax :
f$myfunc172  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc172  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_StackSize > 10 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMin :
f$myfunc172  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc172  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc172  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc172  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 60 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc172  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets <= 1 AND Raises >= 1 AND Position = Middle)
//
f$myfunc173  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopTwoPair]) ] ? f$OpenPPL_RaiseMax :
f$myfunc173  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_StackSize < 10) ] ? f$OpenPPL_RaiseMax :
f$myfunc173  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc173  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc173  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc173  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc173  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveFlush) ] ? f$OpenPPL_RaiseMax :
f$myfunc173  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc173  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc173  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc173  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc173  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc173  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc173  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMax :
f$myfunc173  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] && [($TT) || ($JJ) || ($QQ) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] &&  ![([$TT] || [$JJ] || [$QQ] || [$KK] || [$AA])]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc173  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc173  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 0 AND Raises = 0 AND Position = Last)
//
f$myfunc174  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveFlush) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([$23] || [$24] || [$25] || [$26] || [$27] || [$28] || [$29] || [$2T] || [$34] || [$35] || [$36] || [$37] || [$38] || [$39] || [$3T])]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))] && f$OpenPPL_AmountToCall <= 30 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc174  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveNutFlushDraw) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_Have3rdNutFlushDraw]) ] ? f$OpenPPL_Call :
f$myfunc174  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc174  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 40 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (me_re_useraggressorpreflop && [f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HavePair] && f$OpenPPL_StackSize <= 9) ] ? f$OpenPPL_RaiseMax :
f$myfunc174  &&  [ (me_re_useraggressorpreflop && [f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HavePair] && f$OpenPPL_StackSize > 9) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc174  &&  [ (me_re_useraggressorpreflop && f$OpenPPL_OvercardsOnBoard <= 1 && f$OpenPPL_StackSize > 9) ] ? 80 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets = 1 AND Raises = 0 AND Position = Last)
//
f$myfunc175  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveFlush) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_StraightPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_AmountToCall >= 3) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_StraightPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_AmountToCall >= 3) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaisePot :
f$myfunc175  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc175  &&  [ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_StackSize > 10 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc175  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc175  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc175  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 66 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 60 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc175  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents = 1 AND Bets <= 1 AND Raises >= 1 AND Position = Last)
//
f$myfunc176  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopTwoPair]) ] ? f$OpenPPL_RaiseMax :
f$myfunc176  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_StackSize < 10) ] ? f$OpenPPL_RaiseMax :
f$myfunc176  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_StraightPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_AmountToCall >= 3) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_StraightPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_AmountToCall >= 3) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc176  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] && [($TT) || ($JJ) || ($QQ) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] &&  ![([$TT] || [$JJ] || [$QQ] || [$KK] || [$AA])]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMin :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc176  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 60 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc176  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets = 0 AND Raises = 0 AND Position = Last)
//
f$myfunc177  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveFlush) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_SuitsOnBoard >= 2 && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(me_re_usernonaggressorpreflop)]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Call :
f$myfunc177  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [ !([f$OpenPPL_RaisesBeforeFlop]) || f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_StackSize > 10) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveNutFlushDraw) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [f$OpenPPL_Have2ndNutFlushDraw || f$OpenPPL_Have3rdNutFlushDraw]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc177  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc177  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw) ] ? 75 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets = 1 AND Raises = 0 AND Position = Last)
//
f$myfunc178  &&  [ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_StraightPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_AmountToCall >= 3) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_StraightPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_AmountToCall >= 3) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc178  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Standard3Bet :
f$myfunc178  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Standard3Bet :
f$myfunc178  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Standard3Bet :
f$myfunc178  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_Standard3Bet :
f$myfunc178  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMax :
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Standard3Bet :
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] && me_re_usernonaggressorpreflop) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Standard3Bet :
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_Have2ndTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_StackSize > 10 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Standard3Bet :
f$myfunc178  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_RaiseMin :
f$myfunc178  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc178  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc178  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc178  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_AmountToCall <= 60 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc178  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Opponents >= 2 AND Bets <= 1 AND Raises >= 1 AND Position = Last)
//
f$myfunc179  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_HaveQuads)]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveTopTwoPair]) ] ? f$OpenPPL_RaiseMax :
f$myfunc179  &&  [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 2] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_StackSize < 10) ] ? f$OpenPPL_RaiseMax :
f$myfunc179  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc179  &&  [ (f$OpenPPL_HaveNutFlush) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc179  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc179  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc179  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveFlush) ] ? f$OpenPPL_RaiseMax :
f$myfunc179  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_StraightPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_AmountToCall >= 3) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc179  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 2) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc179  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_StraightPossible)] && me_re_usernonaggressorpreflop && f$OpenPPL_AmountToCall >= 3) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 3) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc179  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_RaiseMax :
f$myfunc179  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Standard3Bet :
f$myfunc179  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Standard3Bet :
f$myfunc179  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 3) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 2) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_SuitsOnBoard == 1) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] && [($TT) || ($JJ) || ($QQ) || ($KK)]) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [(f$OpenPPL_NumberOfRaisesBeforeFlop >= 2) || (f$OpenPPL_BotsActionsPreflop >= 2 && f$OpenPPL_BotRaisedBeforeFlop)] &&  ![([$TT] || [$JJ] || [$QQ] || [$KK] || [$AA])]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Raises == 0 || ( ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_HaveFlushDraw)]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard && f$OpenPPL_FlushPossible) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_Have2ndOverPair && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0))]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Fold :
f$myfunc179  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Have2ndNutFlushDraw && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_SuitsOnBoard >= 2 && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_RaisesSinceLastPlay <= 1) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HavePair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc179  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (User_Aggressor_Preflop AND Bets = 1 AND Raises = 0)
//
f$myfunc180  &&  [ (me_re_useraggressiveflop && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_Have2ndOverPair &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])] && f$OpenPPL_AmountToCall <= 45 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc180  &&  [ (me_re_userpassiveflop && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_Have2ndOverPair &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])] && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc180  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_Have2ndOverPair &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)] || [(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (User_Aggressor_Preflop AND Bets = 0 AND Raises = 0 AND Opponents <= 2)
//
f$myfunc181  &&  [ (me_re_useraggressiveflop && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_TripsOnBoard)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ (me_re_useraggressiveflop && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ (me_re_useraggressiveflop && f$OpenPPL_Overcards == 1 && f$OpenPPL_HaveInsideStraightDraw) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ (me_re_useraggressiveflop && f$OpenPPL_HaveNutFlushDraw) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ (me_re_userpassiveflop && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc181  &&  [ (me_re_userpassiveflop && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc181  &&  [ (me_re_userpassiveflop && f$OpenPPL_Overcards == 1 && f$OpenPPL_HaveInsideStraightDraw) ] ? f$OpenPPL_Call :
f$myfunc181  &&  [ (me_re_userpassiveflop && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc181  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)])] &&  ![(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Random <= 50) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)])] &&  ![(f$OpenPPL_TripsOnBoard)]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)])] &&  ![(f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Random <= 35) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_PairOnBoard &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)])] &&  ![(f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc181  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Random <= 50) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Random <= 35) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc181  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Overcards == 1 && f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_Random <= 50) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Overcards == 1 && f$OpenPPL_HaveInsideStraightDraw) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Overcards == 1 && f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_Random <= 35) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc181  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && f$OpenPPL_Overcards == 1 && f$OpenPPL_HaveInsideStraightDraw) ] ? f$OpenPPL_Call :
f$myfunc181  &&  [ (f$OpenPPL_HaveNutFlushDraw) ] ? 65 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (User_Heads_Up AND Bets = 0 AND Raises = 0)
//
f$myfunc182  &&  [ ( ![(f$OpenPPL_RaisesBeforeFlop)] && f$OpenPPL_HavePair) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc182  &&  [ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_HavePair) ] ? 75 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (User_Heads_Up AND RaisesBeforeFlop AND BotsLastPreflopAction = Call)
//
f$myfunc183  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle]) ] ? f$OpenPPL_Call :
f$myfunc183  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc183  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (Opponents <= 2 AND NOT (RaisesBeforeFlop) AND NOT (FlushPossible) AND PairOnBoard)
//
f$myfunc184  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Random <= 35) ] ? 55 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (NOT (RaisesBeforeFlop) AND Opponents = 1 AND StackSize <= 7 AND HavePair AND NOT (PairOnBoard))
//
f$myfunc185  &&  [ (me_re_useraggressiveflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaiseMax :
f$myfunc185  &&  [ (me_re_userpassiveflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc185  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (AmountToCall <= 1 AND HavePair AND NOT (FlushPossible OR PairOnBoard) AND Raises = 0 AND AmountToCall <= 10% StackSize)
//
f$myfunc186  &&  [ (f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// ((((Hand = QQ) AND NOT ((Board = AA))) OR ((Hand = KK) AND NOT ((Board = AA))) OR ((Hand = JJ) AND NOT ((Board = AA)))) AND NOT (FlushPossible) AND User_Aggressor_Preflop)
//
f$myfunc187  &&  [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BotsActionsOnThisRound == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (Overcards = 2 AND NOT (PairInHand) AND (HaveInsideStraightDraw OR HaveFlushDraw) AND NOT (FlushPossible) AND User_Aggressor_Preflop)
//
f$myfunc188  &&  [ (f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BotsActionsOnThisRound <= 1 && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (User_Aggressor_Preflop AND Opponents = 1 AND Bets = 0 AND Raises = 0)
//
f$myfunc189  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_TripsOnBoard || me_re_userconnectedcoordinatedflop || me_re_userscaryboard)] && f$OpenPPL_Random <= 50) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc189  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_TripsOnBoard || me_re_userconnectedcoordinatedflop || me_re_userscaryboard)]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc189  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_TripsOnBoard || me_re_userconnectedcoordinatedflop || me_re_userscaryboard)] && f$OpenPPL_Random <= 35) ] ? 50 * f$RaiseByPercentagedPotsize :
f$myfunc189  &&  [ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)) || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard] &&  ![(f$OpenPPL_TripsOnBoard || me_re_userconnectedcoordinatedflop || me_re_userscaryboard)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((HaveInsideStraightDraw AND (Overcards = 2 OR (Overcards = 1 AND HavePair))) OR (HaveFlushDraw AND (Overcards = 2 OR (Overcards = 1 AND HavePair)))) AND NOT (PairOnBoard OR FlushPossible))
//
f$myfunc190  &&  [ (f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Raises == 0 && f$OpenPPL_BotsActionsOnThisRound == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Raises <= 1 AND (HaveSet OR HaveTwoPair OR HaveTrips) AND NOT (FlushPossible OR StraightPossible))
//
f$myfunc191  &&  [ (f$OpenPPL_OpponentIsAllin && f$OpenPPL_AmountToCall <= 75) ] ? f$OpenPPL_RaiseMax :
//
// Starting open-ended when-condition
// (AmountToCall <= 16% PotSize AND Raises <= 1 AND AmountToCall <= 15)
//
f$myfunc192  &&  [ ([f$OpenPPL_Overcards == 2 || f$OpenPPL_HaveInsideStraightDraw] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotsLastAction = BET AND Raises = 1 AND NOT (PairOnBoard OR FlushPossible))
//
f$myfunc193  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc193  &&  [ (f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_HaveFlushDraw) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND Overcards = 2 AND User_Aggressor_Preflop AND NOT (FlushPossible OR PairOnBoard))
//
f$myfunc194  &&  [ (f$OpenPPL_AmountToCall <= 30 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Others)
//
f$myfunc195  &&  [ (f$OpenPPL_Raises >= 0) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold 

##f$turn##
[ [ (f$OpenPPL_HaveNuts) ] ? me_st_userturnnuts_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveQuads) ] ? me_st_userturnquads_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? me_st_userturnfullhouse_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveStraightFlush) ] ? me_st_userturnstraightflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutFlush) ] ? me_st_userturnnutflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_HaveNutFlush)]) ] ? me_st_userturnflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutStraight) ] ? me_st_userturnnutstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveUnderStraight) ] ? me_st_userturnunderstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight)]) ] ? me_st_userturnstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveSet) ] ? me_st_userturnset_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTrips) ] ? me_st_userturntrips_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTopTwoPair) ] ? me_st_userturntoptwopair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_HaveTopTwoPair)]) ] ? me_st_userturntwopair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveOverPair) ] ? me_st_userturnoverpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTopPair) ] ? me_st_userturntoppair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTopNonBoardPairedPair && f$OpenPPL_PairOnBoard) ] ? me_st_userturntopnonboardpairedpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have2ndOverPair) ] ? me_st_userturn2ndoverpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have2ndTopPair) ] ? me_st_userturn2ndtoppair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair)]) ] ? me_st_userturnpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_HaveNutFlush)]) ] ? me_st_userturnnutflushdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_HaveFlush)] &&  ![(f$OpenPPL_HaveNutFlushDraw)]) ] ? me_st_userturnflushdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_HaveNutStraight)]) ] ? me_st_userturnnutstraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HaveStraight)] &&  ![(f$OpenPPL_HaveNutStraightDraw)]) ] ? me_st_userturnstraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveInsideNutStraightDraw &&  ![(f$OpenPPL_HaveStraight)]) ] ? me_st_userturnnutinsidestraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveInsideStraightDraw &&  ![(f$OpenPPL_HaveStraight)] &&  ![(f$OpenPPL_HaveStraightDraw)]) ] ? me_st_userturninsidestraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_HavePair)]) ] ? me_st_userturn2overcards_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Overcards == 1 &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Overcards < 2) ] ? me_st_userturn1overcard_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveBestKicker) ] ? me_st_userturnbestkicker_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have2ndBestKicker &&  ![(f$OpenPPL_HaveBestKicker)]) ] ? me_st_userturn2ndbestkicker_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have3rdBestKicker &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)]) ] ? me_st_userturn3rdbestkicker_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNothing) ] ? me_st_userturnnothing_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_QuadsOnBoard) ] ? me_st_userturnboardquads_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_QuadsOnBoard)]) ] ? me_st_userturnboardtrips_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_TripsOnBoard)]) ] ? me_st_userturnboardtwopair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_TripsOnBoard)] &&  ![(f$OpenPPL_TwoPairOnBoard)]) ] ? me_st_userturnboardpaired_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_OneCardFlushPossible) ] ? me_st_userturnboardonecardpossibleflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)]) ] ? me_st_userturnboardpossibleflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_OneCardStraightPossible) ] ? me_st_userturnboardonecardpossiblestraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_OneCardStraightPossible)]) ] ? me_st_userturnboardpossiblestraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Only1OneCardStraightPossible) ] ? me_st_userturnboardonlyonecardpossiblestraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_OnlyOneStraightPossible &&  ![(f$OpenPPL_Only1OneCardStraightPossible)]) ] ? me_st_userturnboardonlyonepossiblestraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TurnCardisOvercardToBoard) ] ? me_st_userturnboardnextcardisovercard_1 : 0] && 0 ? 0 :
[ [ ( ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)])] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])]) ] ? me_st_userboardturnnopaint_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_NoBettingOnFlop) ] ? me_st_usernobetsonflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_CalledOnFlop &&  ![(f$OpenPPL_NoBettingOnFlop)]) ] ? me_st_usernonaggressorflop_1 : 0] && 0 ? 0 :
[ [ ( ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_CalledOnFlop)]) ] ? me_st_useraggressorflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Opponents == 1 && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call &&  ![(f$OpenPPL_NoBettingOnFlop)] && f$OpenPPL_CalledOnFlop) ] ? me_st_userfloatedonflop_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_NoBettingOnFlop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? me_st_usershowingweaknessonturn_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 50 * 0.01 * f$OpenPPL_PotSize) ] ? me_st_useroppraiseoverraiseturn_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_PotSize >= 100 * 0.01 * f$OpenPPL_StackSize) ] ? me_st_userpotcommitted_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TotalInvested >= 200 * 0.01 * f$OpenPPL_StackSize) ] ? me_st_usertotalinvestedtwothirdsofstackturn_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize) ] ? me_st_usertotalinvestedhalfofstackturn_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionturnraise_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_BotsActionsOnThisRound == 0) ] ? me_st_userlastactionturnnone_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionturncall_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionturnbet_1 : 0] && 0 ? 0 :
[ [ ( ![(me_re_userlastactionturnraise)] &&  ![(me_re_userlastactionturnnone)] &&  ![(me_re_userlastactionturncall)] &&  ![(me_re_userlastactionturnbet)] && f$OpenPPL_BotsActionsOnThisRound > 0) ] ? me_st_userlastactionturncheck_1 : 0] && 0 ? 0 :
[ [ ([(me_re_userflopflush &&  ![(me_re_userflopnutflush)] && f$OpenPPL_HaveNutFlush &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) || (me_re_userflopstraight &&  ![(me_re_userflopnutstraight)] && f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) || ([me_re_userflopset || me_re_userfloptrips] && [f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads]) || ([me_re_userfloptwopair || me_re_userfloptoptwopair] && f$OpenPPL_HaveFullHouse) || ([me_re_userflopoverpair || me_re_userfloptoppair || me_re_userflop2ndoverpair || me_re_userflop2ndtoppair || me_re_userfloppair] &&  ![(me_re_userflopset || me_re_userfloptrips)] && [f$OpenPPL_HaveTrips || f$OpenPPL_HaveTwoPair || (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)])]) || (f$OpenPPL_HaveStraightDraw &&  ![(me_re_userflopstraightdraw)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) || (f$OpenPPL_HaveNutStraightDraw &&  ![(me_re_userflopnutstraightdraw)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) || (f$OpenPPL_HaveFlushDraw &&  ![(me_re_userflopflushdraw)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) || (f$OpenPPL_HaveNutFlushDraw &&  ![(me_re_userflopnutflushdraw)] &&  ![(f$OpenPPL_OneCardStraightPossible)]) || (me_re_userflopnutflushdraw && f$OpenPPL_HaveNutFlush &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) || (me_re_userflopflushdraw &&  ![(me_re_userflopboardpossibleflush || f$OpenPPL_OneCardFlushPossible)]) || (me_re_userflopnutstraightdraw && [f$OpenPPL_HaveNutStraight &&  !([f$OpenPPL_FlushPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard])]) || ([me_re_userflopstraightdraw || me_re_userflopnutinsidestraightdraw] && f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) || ([me_re_userflop2overcards || me_re_userflop1overcard] &&  ![(me_re_userfloptoppair)] && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_PairOnBoard)]) || (me_re_userflopnothing && f$OpenPPL_HavePair &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)])]) ] ? me_st_userhandimproved_1 : 0] && 0 ? 0 :
[ (me_re_userhandimprovedonturn && [me_re_useraggressorpreflop || me_re_usernoraisespreflop || (f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Opponents == 1)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
[ (me_re_userhandimprovedonturn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 65 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveQuads || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards >= 1]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_NutFullHouseOrFourOfAKind == 4 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_AmountToCall > 6) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_AmountToCall > 6) ] ? f$OpenPPL_Fold :
[ ( ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_CalledOnFlop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle]) ] ? 65 * f$RaiseByPercentagedPotsize :
[ ( ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_CalledOnFlop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_StackSize < 10 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Raises >= 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 30 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StackSize <= 10 && [f$OpenPPL_BotIsLastRaiser || f$OpenPPL_NoBettingOnFlop] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveTopPair || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_HaveInsideStraightDraw)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush]) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Bets == 1 && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (me_re_userheadsup && f$OpenPPL_HaveTopPair) ] ? f$OpenPPL_RaiseMax :
[ (me_re_userheadsup && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 40 * f$RaiseByPercentagedPotsize :
[ (me_re_userheadsup && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_HaveStraightDraw || f$OpenPPL_HaveFlushDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
[ (me_re_userheadsup && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 40 * f$RaiseByPercentagedPotsize :
[ ([f$OpenPPL_BotRaisedBeforeFlop] && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveNutFlush] && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_BigBlind && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// ((Position = First OR Position = Middle))
//
f$myfunc196  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Raises >= 1 && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_HaveOverPair && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_AmountToCall >= 40 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFullHouse] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFullHouse] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ ([f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFullHouse]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndNutFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndNutFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible] && f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StillToAct >= 1 &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall > 70 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize >= 13) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && [f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && [f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && me_re_userhandimproved) ] ? f$OpenPPL_RaiseMin :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard <= 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard <= 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard <= 2 &&  ![(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && me_re_userhandimproved) ] ? f$OpenPPL_RaiseMin :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard <= 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HadTopPairOnFlop &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(me_re_usernobetsonflop)] &&  ![(f$OpenPPL_CalledOnFlop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HadTopPairOnFlop &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(me_re_usernobetsonflop)] &&  ![(f$OpenPPL_CalledOnFlop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 1 && f$OpenPPL_AmountToCall > 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(me_re_usernonaggressorflop)]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_Raises >= 1] && me_re_useraggressorflop && me_re_useraggressorpreflop && f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_AmountToCall >= 15 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && me_re_useraggressorflop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && me_re_usernonaggressorflop && me_re_useroppraiseoverraiseturn) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_AcePresentOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_AcePresentOnFlop && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_AcePresentOnFlop) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_AcePresentOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_AcePresentOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_AcePresentOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_AcePresentOnFlop)] && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_AcePresentOnFlop)]) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BotsActionsOnThisRound == 0 && [(f$OpenPPL_AmountToCall <= 3) || (f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize)] && [f$OpenPPL_AcePresentOnFlop]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_HadTopPairOnFlop &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_HadTopPairOnFlop &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair &&  ![([$A] || [$K])] && [([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)]) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair &&  ![([$A] || [$K])] && [([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)]) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0))] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 2) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_NoBettingOnFlop)] && f$OpenPPL_Opponents >= 2 && [($AA) || ($KK) || ($QQ) || ($JJ)]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [($AA) || ($KK) || ($QQ) || ($JJ)] && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && [($AA) || ($KK) || ($QQ) || ($JJ)]) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 && f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 75 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 && f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 75 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_HadOverPairOnFlop &&  ![(f$OpenPPL_OneCardStraightPossible)] && me_re_useraggressorflop &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernonaggressorflop && f$OpenPPL_CalledOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_HadOverPairOnFlop &&  ![(f$OpenPPL_OneCardStraightPossible)] && me_re_useraggressorflop &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_HadOverPairOnFlop &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_AcePresentOnFlop)] && me_re_usernobetsonflop) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_AcePresentOnFlop) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && [f$OpenPPL_AmountToCall <= 4 || f$OpenPPL_TotalInvested >= 50 * 0.01 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_useraggressorflop && me_re_userhandimproved) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_OneCardFlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_Overcards == 2 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 45 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_useraggressorflop && me_re_userhandimproved) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_AmountToCall <= 45 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_AmountToCall <= 30 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_useraggressorflop && me_re_userhandimproved) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_BotRaisedBeforeFlop)] &&  ![(me_re_usernobetsonflop)] && f$OpenPPL_CalledOnFlop && f$OpenPPL_StillToAct >= 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 45 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(me_re_usernonaggressorflop)]) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 45 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HavePair && me_re_usernoraisespreflop && me_re_usernobetsonflop &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc196  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 10 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_AmountToCall <= 37 * 0.01 * f$OpenPPL_PotSize || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall > 37 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc196  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 28 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc196  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_HaveInsideStraightDraw &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 28 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last)
//
f$myfunc197  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Raises >= 1 && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_HaveOverPair && [f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible] && f$OpenPPL_AmountToCall >= 70 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ (f$OpenPPL_HaveQuads && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveQuads) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ ([f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFullHouse] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ ([f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveFullHouse]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMin :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndNutFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndNutFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_RaiseMin :
f$myfunc197  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMin :
f$myfunc197  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMin :
f$myfunc197  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 40 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_OneCardStraightPossible && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 70 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall > 70 * 0.01 * f$OpenPPL_StackSize && f$OpenPPL_StackSize >= 13) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ ([f$OpenPPL_HaveSet] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && [f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && [f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && me_re_userhandimproved) ] ? f$OpenPPL_RaiseMin :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard <= 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard <= 2 &&  ![(f$OpenPPL_StraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && me_re_userhandimproved) ] ? f$OpenPPL_RaiseMin :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopTwoPair && f$OpenPPL_SuitsOnBoard <= 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_HadTopPairOnFlop &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && me_re_useraggressorflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 1 &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 1 && f$OpenPPL_AmountToCall > 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_SuitsOnBoard >= 3 &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair && f$OpenPPL_HaveNutFlushDraw && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_Raises >= 1] && me_re_useraggressorflop && me_re_useraggressorpreflop && f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_AmountToCall >= 15 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && me_re_useraggressorflop) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && me_re_usernonaggressorflop && me_re_useroppraiseoverraiseturn) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_AcePresentOnFlop) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_AcePresentOnFlop)]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_AcePresentOnFlop) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_AcePresentOnFlop)]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_BotsActionsOnThisRound == 0 && [(f$OpenPPL_AmountToCall <= 3) || (f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize)] && [f$OpenPPL_AcePresentOnFlop]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall > 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndTopPair && f$OpenPPL_HadTopPairOnFlop &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_NoBettingOnFlop)] && f$OpenPPL_Opponents >= 2) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 && f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 75 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 && f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 75 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 40 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(me_re_usernonaggressorflop)]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && f$OpenPPL_FlushPossible && f$OpenPPL_HaveNutFlushDraw && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(me_re_usernonaggressorflop)]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_FlushPossible)]) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveOverPair && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![(f$OpenPPL_FlushPossible)]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_HadOverPairOnFlop &&  ![(f$OpenPPL_OneCardStraightPossible)] && me_re_useraggressorflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_HadOverPairOnFlop &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_usernobetsonflop) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndOverPair && f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])]) ] ? 60 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && f$OpenPPL_AmountToCall <= 2) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_Have2ndOverPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] && [f$OpenPPL_AmountToCall <= 4 || f$OpenPPL_TotalInvested >= 50 * 0.01 * f$OpenPPL_PotSize]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveNutFlushDraw && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_PairOnBoard)] && me_re_usernobetsonflop) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_OneCardFlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_FlushPossible && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_userhandimproved) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Overcards == 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_userhandimproved) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Overcards == 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Overcards == 2 && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 45 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_userhandimproved) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_userhandimproved) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_AmountToCall <= 45 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveFlushDraw && f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_AmountToCall <= 30 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 && f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 45 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 45 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_userhandimproved) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveStraightDraw && f$OpenPPL_OneCardStraightPossible && f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 33 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_userhandimproved) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HavePair && me_re_usernoraisespreflop && me_re_usernobetsonflop &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 10 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && [f$OpenPPL_AmountToCall <= 37 * 0.01 * f$OpenPPL_PotSize || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_SuitsOnBoard == 2 &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall > 37 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc197  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 28 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_HavePair && f$OpenPPL_HaveInsideStraightDraw &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 28 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_AmountToCall <= 16 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Bets == 1 && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Bets == 1 && [f$OpenPPL_HavePair && (f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw)]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Bets == 1 && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw]) ] ? f$OpenPPL_Call :
f$myfunc197  &&  [ (f$OpenPPL_RaisesBeforeFlop &&  ![(f$OpenPPL_BotIsLastRaiser)] && me_re_usernobetsonflop && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_HavePair && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (me_re_userturntoppair && me_re_userturnbestkicker && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] &&  ![(f$OpenPPL_PairOnBoard)] &&  ![(me_re_usernonaggressorflop)]) ] ? 85 * f$RaiseByPercentagedPotsize :
f$myfunc197  &&  [ (me_re_userturntoppair && me_re_userturnbestkicker && [f$OpenPPL_HaveNutFlushDraw || f$OpenPPL_Have2ndNutFlushDraw] &&  ![(f$OpenPPL_PairOnBoard)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NoBettingOnFlop AND Position = Last AND Bets = 0 AND Raises = 0 AND NOT (OneCardFlushPossible) AND NOT (OneCardStraightPossible))
//
f$myfunc198  &&  [ (f$OpenPPL_Bets == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (NOT (NoBettingOnFlop) AND NOT (CalledOnFlop) AND Bets = 0 AND Raises = 0 AND User_Heads_Up)
//
f$myfunc199  &&  [ ([f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_FlushPossible)]) ] ? 55 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (NoBettingOnFlop AND NotRaisesBeforeFlop AND NOT (FlushPossible) AND NOT (OneCardStraightPossible))
//
f$myfunc200  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 55 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (NoBettingOnFlop AND NOT (RaisesBeforeFlop) AND NOT (OneCardStraightPossible) AND NOT (OneCardFlushPossible) AND NOT (TripsOnBoard) AND NOT (TwoPairOnBoard))
//
f$myfunc201  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1 && f$OpenPPL_Position == f$OpenPPL_Last) ] ? 55 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (NoBettingOnFlop AND HadTopPairOnFlop AND HaveTopPair AND NOT (FlushPossible) AND NOT (TwoPairOnBoard) AND NOT (TripsOnBoard) AND NOT (OneCardStraightPossible))
//
f$myfunc202  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ] ? 55 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (NoBettingOnFlop AND (HaveTopPair OR HaveOverPair) AND NOT (FlushPossible OR TwoPairOnBoard OR TripsOnBoard OR OneCardStraightPossible))
//
f$myfunc203  &&  [ (f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (RaisesBeforeFlop AND NoBettingOnFlop AND Bets = 0 AND Raises = 0 AND Opponents = 1)
//
f$myfunc204  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_TripsOnBoard || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_OneCardStraightPossible)]) ] ? 50 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (BotRaisedBeforeFlop AND NoBettingOnFlop AND Opponents = 1 AND NOT (User_Turn_Board_NextCardIsOverCard) AND Bets = 0 AND Raises = 0)
//
f$myfunc205  &&  [ ([f$OpenPPL_HavePair || f$OpenPPL_HaveFlushDraw || f$OpenPPL_HaveStraightDraw || f$OpenPPL_Overcards == 2 || (f$OpenPPL_Overcards == 1 && f$OpenPPL_HaveInsideStraightDraw)] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? 65 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// ((User_Flop_2ndTopPair OR User_Flop_2ndOverPair) AND User_Turn_TopNonBoardPairedPair AND User_Aggressor_Flop AND NOT (FlushPossible OR OneCardStraightPossible OR TwoPairOnBoard OR TripsOnBoard))
//
f$myfunc206  &&  [ (f$OpenPPL_Opponents <= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 60 * f$RaiseByPercentagedPotsize :
//
// Starting open-ended when-condition
// (HaveInsideStraightDraw AND Overcards = 2 AND NOT (PairOnBoard OR FlushPossible OR OneCardStraightPossible))
//
f$myfunc207  &&  [ (f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 22 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Others)
//
f$myfunc208  &&  [ (f$OpenPPL_Raises >= 0) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold 

##f$river##
[ [ (f$OpenPPL_HaveNuts) ] ? me_st_userrivernuts_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveQuads) ] ? me_st_userriverquads_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_HaveQuads)]) ] ? me_st_userriverfullhouse_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveStraightFlush) ] ? me_st_userriverstraightflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutFlush) ] ? me_st_userrivernutflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_HaveNutFlush)]) ] ? me_st_userriverflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutStraight) ] ? me_st_userrivernutstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveUnderStraight) ] ? me_st_userriverunderstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_HaveNutStraight)]) ] ? me_st_userriverstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveSet) ] ? me_st_userriverset_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTrips) ] ? me_st_userrivertrips_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTopTwoPair) ] ? me_st_userrivertoptwopair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_HaveTopTwoPair)]) ] ? me_st_userrivertwopair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveOverPair) ] ? me_st_userriveroverpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTopPair) ] ? me_st_userrivertoppair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveTopNonBoardPairedPair && f$OpenPPL_PairOnBoard) ] ? me_st_userrivertopnonboardpairedpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have2ndOverPair) ] ? me_st_userriver2ndoverpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have2ndTopPair) ] ? me_st_userriver2ndtoppair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HavePair &&  ![(f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair)]) ] ? me_st_userriverpair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutFlushDraw &&  ![(f$OpenPPL_HaveNutFlush)]) ] ? me_st_userrivernutflushdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveFlushDraw &&  ![(f$OpenPPL_HaveFlush)] &&  ![(f$OpenPPL_HaveNutFlushDraw)]) ] ? me_st_userriverflushdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNutStraightDraw &&  ![(f$OpenPPL_HaveNutStraight)]) ] ? me_st_userrivernutstraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveStraightDraw &&  ![(f$OpenPPL_HaveStraight)] &&  ![(f$OpenPPL_HaveNutStraightDraw)]) ] ? me_st_userriverstraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveInsideNutStraightDraw &&  ![(f$OpenPPL_HaveStraight)]) ] ? me_st_userrivernutinsidestraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveInsideStraightDraw &&  ![(f$OpenPPL_HaveStraight)] &&  ![(f$OpenPPL_HaveStraightDraw)]) ] ? me_st_userriverinsidestraightdraw_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_HavePair)]) ] ? me_st_userriver2overcards_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Overcards == 1 &&  ![(f$OpenPPL_HavePair)] && f$OpenPPL_Overcards < 2) ] ? me_st_userriver1overcard_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveBestKicker) ] ? me_st_userriverbestkicker_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have2ndBestKicker &&  ![(f$OpenPPL_HaveBestKicker)]) ] ? me_st_userriver2ndbestkicker_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Have3rdBestKicker &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker || f$OpenPPL_Have3rdBestKicker)]) ] ? me_st_userriver3rdbestkicker_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_HaveNothing) ] ? me_st_userrivernothing_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_QuadsOnBoard) ] ? me_st_userriverboardquads_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_FullHouseOnBoard &&  ![(f$OpenPPL_QuadsOnBoard)]) ] ? me_st_userriverboardfullhouse_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_StraightOnBoard) ] ? me_st_userriverboardstraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_FlushOnBoard) ] ? me_st_userriverboardflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_QuadsOnBoard)]) ] ? me_st_userriverboardtrips_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_TripsOnBoard)]) ] ? me_st_userriverboardtwopair_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_PairOnBoard &&  ![(f$OpenPPL_TripsOnBoard)] &&  ![(f$OpenPPL_TwoPairOnBoard)]) ] ? me_st_userriverboardpaired_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_OneCardFlushPossible) ] ? me_st_userriverboardonecardpossibleflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)]) ] ? me_st_userriverboardpossibleflush_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_OneCardStraightPossible) ] ? me_st_userriverboardonecardpossiblestraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_StraightPossible &&  ![(f$OpenPPL_OneCardStraightPossible)]) ] ? me_st_userriverboardpossiblestraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Only1OneCardStraightPossible) ] ? me_st_userriverboardonlyonecardpossiblestraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_OnlyOneStraightPossible &&  ![(f$OpenPPL_Only1OneCardStraightPossible)]) ] ? me_st_userriverboardonlyonepossiblestraight_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_RiverCardisOvercardToBoard) ] ? me_st_userriverboardnextcardisovercard_1 : 0] && 0 ? 0 :
[ [ ( ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A) == 0)])] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_K) == 0)])] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_Q) == 0)])] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_J) == 0)])]) ] ? me_st_userboardrivernopaint_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_NoBettingOnTurn) ] ? me_st_usernobetsonturn_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_CalledOnTurn &&  ![(f$OpenPPL_NoBettingOnTurn)]) ] ? me_st_usernonaggressorturn_1 : 0] && 0 ? 0 :
[ [ ( ![(f$OpenPPL_NoBettingOnTurn)] &&  ![(f$OpenPPL_CalledOnTurn)]) ] ? me_st_useraggressorturn_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_Opponents == 1 &&  ![(f$OpenPPL_NoBettingOnTurn)] && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? me_st_usershowingweaknessonriver_1 : 0] && 0 ? 0 :
[ [ ([f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall == 1) ] ? me_st_useroppminraiseriver_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_PotSize >= 100 * 0.01 * f$OpenPPL_StackSize) ] ? me_st_userpotcommitted_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionriverraise_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_BotsActionsOnThisRound == 0) ] ? me_st_userlastactionrivernone_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionrivercall_1 : 0] && 0 ? 0 :
[ [ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_BotsActionsOnThisRound >= 1) ] ? me_st_userlastactionriverbet_1 : 0] && 0 ? 0 :
[ [ ( ![(me_re_userlastactionriverraise)] &&  ![(me_re_userlastactionrivernone)] &&  ![(me_re_userlastactionrivercall)] &&  ![(me_re_userlastactionriverbet)] && f$OpenPPL_BotsActionsOnThisRound > 0) ] ? me_st_userlastactionrivercheck_1 : 0] && 0 ? 0 :
[ [ ([(f$OpenPPL_TotalInvested >= 5 && f$OpenPPL_AmountToCall <= 7) || (f$OpenPPL_TotalInvested >= 6 && f$OpenPPL_AmountToCall <= 8) || (f$OpenPPL_TotalInvested >= 9 && f$OpenPPL_AmountToCall <= 12) || (f$OpenPPL_TotalInvested >= 10 && f$OpenPPL_AmountToCall <= 13) || (f$OpenPPL_TotalInvested >= 11 && f$OpenPPL_AmountToCall <= 14) || (f$OpenPPL_TotalInvested >= 12 && f$OpenPPL_AmountToCall <= 16) || (f$OpenPPL_TotalInvested >= 13 && f$OpenPPL_AmountToCall <= 17) || (f$OpenPPL_TotalInvested >= 14 && f$OpenPPL_AmountToCall <= 18) || (f$OpenPPL_TotalInvested >= 15 && f$OpenPPL_AmountToCall <= 20) || (f$OpenPPL_TotalInvested >= 16 && f$OpenPPL_AmountToCall <= 21) || (f$OpenPPL_TotalInvested >= 17 && f$OpenPPL_AmountToCall <= 22) || (f$OpenPPL_TotalInvested >= 18 && f$OpenPPL_AmountToCall <= 24) || (f$OpenPPL_TotalInvested >= 19 && f$OpenPPL_AmountToCall <= 25) || (f$OpenPPL_TotalInvested >= 20 && f$OpenPPL_AmountToCall <= 26) || (f$OpenPPL_TotalInvested >= 21 && f$OpenPPL_AmountToCall <= 27) || (f$OpenPPL_TotalInvested >= 22 && f$OpenPPL_AmountToCall <= 28) || (f$OpenPPL_TotalInvested >= 23 && f$OpenPPL_AmountToCall <= 30) || (f$OpenPPL_TotalInvested >= 24 && f$OpenPPL_AmountToCall <= 31) || (f$OpenPPL_TotalInvested >= 25 && f$OpenPPL_AmountToCall <= 32) || (f$OpenPPL_TotalInvested >= 26 && f$OpenPPL_AmountToCall <= 33) || (f$OpenPPL_TotalInvested >= 27 && f$OpenPPL_AmountToCall <= 34) || (f$OpenPPL_TotalInvested >= 28 && f$OpenPPL_AmountToCall <= 35) || (f$OpenPPL_TotalInvested >= 29 && f$OpenPPL_AmountToCall <= 37) || (f$OpenPPL_TotalInvested >= 30 && f$OpenPPL_AmountToCall <= 40) || (f$OpenPPL_TotalInvested >= 31 && f$OpenPPL_AmountToCall <= 41) || (f$OpenPPL_TotalInvested >= 32 && f$OpenPPL_AmountToCall <= 42) || (f$OpenPPL_TotalInvested >= 33 && f$OpenPPL_AmountToCall <= 43) || (f$OpenPPL_TotalInvested >= 34 && f$OpenPPL_AmountToCall <= 44) || (f$OpenPPL_TotalInvested >= 35 && f$OpenPPL_AmountToCall <= 45) || (f$OpenPPL_TotalInvested >= 36 && f$OpenPPL_AmountToCall <= 46) || (f$OpenPPL_TotalInvested >= 37 && f$OpenPPL_AmountToCall <= 47) || (f$OpenPPL_TotalInvested >= 38 && f$OpenPPL_AmountToCall <= 48) || (f$OpenPPL_TotalInvested >= 39 && f$OpenPPL_AmountToCall <= 49) || (f$OpenPPL_TotalInvested >= 40 && f$OpenPPL_AmountToCall <= 50)]) ] ? me_st_usercommitted_1 : 0] && 0 ? 0 :
[ [ ([(f$OpenPPL_TotalInvested >= 5 && f$OpenPPL_AmountToCall <= 4) || (f$OpenPPL_TotalInvested >= 6 && f$OpenPPL_AmountToCall <= 5) || (f$OpenPPL_TotalInvested >= 7 && f$OpenPPL_AmountToCall <= 6) || (f$OpenPPL_TotalInvested >= 8 && f$OpenPPL_AmountToCall <= 7) || (f$OpenPPL_TotalInvested >= 9 && f$OpenPPL_AmountToCall <= 7) || (f$OpenPPL_TotalInvested >= 10 && f$OpenPPL_AmountToCall <= 8) || (f$OpenPPL_TotalInvested >= 11 && f$OpenPPL_AmountToCall <= 9) || (f$OpenPPL_TotalInvested >= 12 && f$OpenPPL_AmountToCall <= 10) || (f$OpenPPL_TotalInvested >= 13 && f$OpenPPL_AmountToCall <= 10) || (f$OpenPPL_TotalInvested >= 14 && f$OpenPPL_AmountToCall <= 11) || (f$OpenPPL_TotalInvested >= 15 && f$OpenPPL_AmountToCall <= 12) || (f$OpenPPL_TotalInvested >= 16 && f$OpenPPL_AmountToCall <= 13) || (f$OpenPPL_TotalInvested >= 17 && f$OpenPPL_AmountToCall <= 14) || (f$OpenPPL_TotalInvested >= 19 && f$OpenPPL_AmountToCall <= 15) || (f$OpenPPL_TotalInvested >= 21 && f$OpenPPL_AmountToCall <= 17) || (f$OpenPPL_TotalInvested >= 22 && f$OpenPPL_AmountToCall <= 17) || (f$OpenPPL_TotalInvested >= 23 && f$OpenPPL_AmountToCall <= 19) || (f$OpenPPL_TotalInvested >= 24 && f$OpenPPL_AmountToCall <= 20) || (f$OpenPPL_TotalInvested >= 25 && f$OpenPPL_AmountToCall <= 21) || (f$OpenPPL_TotalInvested >= 26 && f$OpenPPL_AmountToCall <= 22) || (f$OpenPPL_TotalInvested >= 27 && f$OpenPPL_AmountToCall <= 23) || (f$OpenPPL_TotalInvested >= 28 && f$OpenPPL_AmountToCall <= 24) || (f$OpenPPL_TotalInvested >= 29 && f$OpenPPL_AmountToCall <= 25) || (f$OpenPPL_TotalInvested >= 30 && f$OpenPPL_AmountToCall <= 26) || (f$OpenPPL_TotalInvested >= 31 && f$OpenPPL_AmountToCall <= 27) || (f$OpenPPL_TotalInvested >= 32 && f$OpenPPL_AmountToCall <= 28) || (f$OpenPPL_TotalInvested >= 33 && f$OpenPPL_AmountToCall <= 29) || (f$OpenPPL_TotalInvested >= 34 && f$OpenPPL_AmountToCall <= 30) || (f$OpenPPL_TotalInvested >= 35 && f$OpenPPL_AmountToCall <= 31) || (f$OpenPPL_TotalInvested >= 36 && f$OpenPPL_AmountToCall <= 32) || (f$OpenPPL_TotalInvested >= 37 && f$OpenPPL_AmountToCall <= 33) || (f$OpenPPL_TotalInvested >= 38 && f$OpenPPL_AmountToCall <= 34) || (f$OpenPPL_TotalInvested >= 39 && f$OpenPPL_AmountToCall <= 35) || (f$OpenPPL_TotalInvested >= 40 && f$OpenPPL_AmountToCall <= 36)]) ] ? me_st_usercommittedwithnotstronghand_1 : 0] && 0 ? 0 :
[ (me_re_useraggressorflop && me_re_useraggressorturn &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)] &&  ![(f$OpenPPL_TripsOnBoard || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_FlushPossible)] && [(f$OpenPPL_HaveTrips && f$OpenPPL_HaveBestKicker && [f$OpenPPL_OnlyOneStraightPossible || ( ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)])]) || (f$OpenPPL_HaveSet && [f$OpenPPL_OnlyOneStraightPossible || ( ![(f$OpenPPL_StraightPossible || f$OpenPPL_FlushPossible)])]) || (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible)]) || (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_FlushPossible)]) || (f$OpenPPL_HaveTopTwoPair &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)])]) ] ? f$OpenPPL_RaiseMax :
[ (me_re_useraggressorflop && me_re_useraggressorturn &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)] &&  ![(f$OpenPPL_TripsOnBoard || f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_HaveNutFlush) ] ? f$OpenPPL_RaiseMax :
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_HavePair || f$OpenPPL_HaveFlush || f$OpenPPL_HaveStraight || f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips || f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveQuads]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_QuadsOnBoard &&  ![([$A] || [$K])]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_QuadsOnBoard && [($A)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 75 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_QuadsOnBoard && [($A)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 90 * f$RaiseByPercentagedPotsize :
[ (f$OpenPPL_QuadsOnBoard && [$K] && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_StraightOnBoard && [((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_Q * f$PrimeCode_J * f$PrimeCode_T * f$PrimeCode_9) == 0)) || ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_3 * f$PrimeCode_4 * f$PrimeCode_5 * f$PrimeCode_6) == 0))] &&  ![([$A])] &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight)]) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_StraightOnBoard &&  ![(f$OpenPPL_HaveNutStraight || f$OpenPPL_Have2ndNutStraight)] && f$OpenPPL_AmountToCall >= 25 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Fold :
[ (f$OpenPPL_HaveFullHouse &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] && f$OpenPPL_AmountToCall <= 60 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TripsOnBoard && f$OpenPPL_HaveOverPair) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TripsOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_AmountToCall > 6) ] ? f$OpenPPL_Fold :
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Raises >= 1 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_Opponents == 1 && f$OpenPPL_AmountToCall <= 30 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Bet] && f$OpenPPL_Raises >= 1 && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair]) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_HaveNutFlush)] && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_HaveFlush && [f$OpenPPL_PairOnBoard || f$OpenPPL_TripsOnBoard] && f$OpenPPL_Raises >= 1) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1] &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_NutFullHouseOrFourOfAKind == 1 || f$OpenPPL_NutFullHouseOrFourOfAKind == 2 || f$OpenPPL_NutFullHouseOrFourOfAKind == 3 || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)] && f$OpenPPL_AmountToCall > 6) ] ? f$OpenPPL_Fold :
[ ( ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)] && f$OpenPPL_Raises >= 1 && f$OpenPPL_AmountToCall <= 10 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_HavePair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested >= 50 * 0.01 * f$OpenPPL_PotSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair]) ] ? f$OpenPPL_Call :
[ (f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair]) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_TotalInvested >= 150 * 0.01 * f$OpenPPL_PotSize] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && [f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair]) ] ? f$OpenPPL_Call :
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Bet || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise] && f$OpenPPL_Bets == 1 && f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = First)
//
f$myfunc209  &&  [ (f$OpenPPL_HaveFullHouse && f$OpenPPL_FullHouseOnBoard) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc209  &&  [ (f$OpenPPL_HaveNutFlush && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveNutFlush && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_Have2ndNutFlush && f$OpenPPL_OneCardFlushPossible && f$OpenPPL_CalledOnFlop && f$OpenPPL_CalledOnTurn && f$OpenPPL_AmountToCall <= 8) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_HaveFlush)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc209  &&  [ (f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveFlush)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 40 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Have2ndNutStraight) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_Have2ndNutStraight)] &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_AmountToCall <= 8) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 && f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 43 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc209  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc209  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc209  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_OnlyOneStraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc209  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTwoPair && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)]) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc209  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)] && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_AmountToCall <= 60 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)]) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
f$myfunc209  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_AmountToCall <= 40 * 0.01 * f$OpenPPL_StackSize || f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Call :
f$myfunc209  &&  [ (me_re_userheadsup && f$OpenPPL_HavePair && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Middle)
//
f$myfunc210  &&  [ (f$OpenPPL_HaveFullHouse && f$OpenPPL_FullHouseOnBoard) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse] && f$OpenPPL_TripsOnBoard && f$OpenPPL_PairOnBoard && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc210  &&  [ (f$OpenPPL_HaveNutFlush && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveNutFlush && [f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardStraightPossible] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_Have2ndNutFlush && f$OpenPPL_OneCardFlushPossible && f$OpenPPL_CalledOnFlop && f$OpenPPL_CalledOnTurn && f$OpenPPL_AmountToCall <= 8) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_HaveFlush)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc210  &&  [ (f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveFlush)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 40 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Have2ndNutStraight) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_Have2ndNutStraight)] &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_AmountToCall <= 8) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 && f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 43 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc210  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc210  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_StraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc210  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_OnlyOneStraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc210  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)]) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc210  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)] && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)]) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
f$myfunc210  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_AmountToCall <= 40 * 0.01 * f$OpenPPL_StackSize || f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Call :
f$myfunc210  &&  [ (me_re_userheadsup && f$OpenPPL_HavePair && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Position = Last)
//
f$myfunc211  &&  [ (f$OpenPPL_HaveFullHouse && f$OpenPPL_FullHouseOnBoard) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ ([f$OpenPPL_HaveQuads || f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveStraightFlush || f$OpenPPL_HaveFullHouse] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc211  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_HaveFlush)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc211  &&  [ (f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveNutStraight && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveFlush)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 40 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveFlush &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveNutFlush && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveNutFlush && [f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? 100 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_Have2ndNutFlush && f$OpenPPL_OneCardFlushPossible && f$OpenPPL_CalledOnFlop && f$OpenPPL_CalledOnTurn && f$OpenPPL_AmountToCall <= 8) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Have2ndNutStraight && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Have2ndNutStraight &&  ![(f$OpenPPL_HaveFlush)]) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_Have2ndNutStraight) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveStraight && f$OpenPPL_OneCardStraightPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_Have2ndNutStraight)] &&  ![(f$OpenPPL_HaveFlush)] && f$OpenPPL_AmountToCall <= 8) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveFlush && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_HaveNutFlush || f$OpenPPL_Have2ndNutFlush)] && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 && f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall > 43 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Fold :
f$myfunc211  &&  [ (f$OpenPPL_HaveTrips && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1] && f$OpenPPL_AmountToCall <= 100 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveTrips &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc211  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 80 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_FlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc211  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_OnlyOneStraightPossible && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_RaiseMax :
f$myfunc211  &&  [ (f$OpenPPL_HaveSet &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveSet && f$OpenPPL_OneCardFlushPossible &&  ![(f$OpenPPL_OneCardFlushPossible)] && f$OpenPPL_AmountToCall <= 7) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveTwoPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)]) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises == 1]) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 50 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises >= 2) ] ? f$OpenPPL_Fold :
f$myfunc211  &&  [ (f$OpenPPL_HaveTopPair && [f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)] && f$OpenPPL_AmountToCall <= 25 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_HaveBestKicker || f$OpenPPL_Have2ndBestKicker)] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && f$OpenPPL_AmountToCall <= 20 * 0.01 * f$OpenPPL_StackSize) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)]) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ] ? 55 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_PairOnBoard)] && [f$OpenPPL_Bets == 1 || f$OpenPPL_Raises >= 1]) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_HaveOverPair &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)] && [f$OpenPPL_AmountToCall <= 40 * 0.01 * f$OpenPPL_StackSize || f$OpenPPL_TotalInvested >= 100 * 0.01 * f$OpenPPL_StackSize]) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (me_re_userheadsup && f$OpenPPL_HavePair && f$OpenPPL_AmountToCall <= 3) ] ? f$OpenPPL_Call :
f$myfunc211  &&  [ (f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_NoBettingOnTurn && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_StackSize >= 30 && f$OpenPPL_Opponents <= 2) ] ? 65 * f$RaiseByPercentagedPotsize :
f$myfunc211  &&  [ (f$OpenPPL_AmountToCall <= 13 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_OpponentIsAllin && f$OpenPPL_HavePair && f$OpenPPL_Raises == 0) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (User_Committed AND NOT (NoBettingOnFlop) AND NOT (NoBettingOnTurn) AND Raises = 0 AND Opponents = 1)
//
f$myfunc212  &&  [ ([f$OpenPPL_HaveFullHouse] && f$OpenPPL_TripsOnBoard && [f$OpenPPL_NutFullHouseOrFourOfAKind <= 5]) ] ? f$OpenPPL_Call :
f$myfunc212  &&  [ ([f$OpenPPL_HaveFullHouse] && f$OpenPPL_TwoPairOnBoard &&  ![(f$OpenPPL_TripsOnBoard)] && [f$OpenPPL_NutFullHouseOrFourOfAKind <= 7]) ] ? f$OpenPPL_Call :
f$myfunc212  &&  [ ([f$OpenPPL_HaveNutFlush] &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc212  &&  [ ([f$OpenPPL_HaveFlush] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc212  &&  [ (f$OpenPPL_HaveNutStraight &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc212  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc212  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc212  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] &&  ![(f$OpenPPL_OneCardStraightPossible || f$OpenPPL_OneCardFlushPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (User_Committed_With_Not_Strong_Hand AND NOT (NoBettingOnTurn) AND Raises = 0 AND Opponents = 1)
//
f$myfunc213  &&  [ ([f$OpenPPL_HaveFlush] &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc213  &&  [ (f$OpenPPL_HaveStraight &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc213  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ] ? f$OpenPPL_Call :
f$myfunc213  &&  [ ([f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] &&  ![(f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard || f$OpenPPL_OneCardFlushPossible)]) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (User_River_Board_OneCard_Possible_Straight AND NOT (User_Turn_Board_OneCard_Possible_Straight OR FlushPossible OR PairOnBoard) AND Raises = 0)
//
f$myfunc214  &&  [ ([f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair] && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_PotSize) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (((TotalInvested >= 5 AND AmountToCall <= 2) OR (TotalInvested >= 7 AND AmountToCall <= 3) OR (TotalInvested >= 10 AND AmountToCall <= 3) OR (TotalInvested >= 13 AND AmountToCall <= 4) OR (TotalInvested >= 15 AND AmountToCall <= 5)))
//
f$myfunc215  &&  [ ( ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_NoBettingOnTurn)] && f$OpenPPL_Raises == 0 && [f$OpenPPL_HaveTopPair || me_re_userrivertopnonboardpairedpair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (AmountToCall <= 2 AND NOT (NoBettingOnFlop OR NoBettingOnTurn) AND Raises = 0)
//
f$myfunc216  &&  [ ([f$OpenPPL_HaveTopPair || me_re_userrivertopnonboardpairedpair || f$OpenPPL_HaveOverPair || f$OpenPPL_Have2ndTopPair || f$OpenPPL_Have2ndOverPair] &&  ![(f$OpenPPL_OneCardFlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)] && f$OpenPPL_Opponents == 1) ] ? f$OpenPPL_Call :
//
// Starting open-ended when-condition
// (Others)
//

f$myfunc217  &&  [ (f$OpenPPL_Opponents <= 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 1 && f$OpenPPL_HavePair && ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_NoBettingOnTurn)]) ] ? f$OpenPPL_Call :

f$myfunc217  &&  [ (f$OpenPPL_Raises >= 0) ] ? f$OpenPPL_Fold :
//
// When Others Fold Force
// Automatically added, just to be safe
//
f$OpenPPL_Fold 

##f$myfunc1##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 1) ]

##f$myfunc2##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises >= 1) ]

##f$myfunc3##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_LastRaiserPosition >= 6) ]

##f$myfunc4##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ]

##f$myfunc5##
[ (f$OpenPPL_Raises == 1) ]

##f$myfunc6##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [($QQ) || ($JJ) || ($AK)]) ]

##f$myfunc7##
[ ([($QQ) || ($AK)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc8##
[ ([($JJ)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc9##
[ ([($QQ) || ($JJ) || ($AK)]) ]

##f$myfunc10##
[ (f$OpenPPL_Raises >= 2) ]

##f$myfunc11##
[ (f$OpenPPL_Raises >= 2 && f$OpenPPL_AmountToCall <= 35 * 0.01 * f$OpenPPL_StackSize) ]

##f$myfunc12##
[ ([($AA) || ($KK) || ($QQ) || ($AK)] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc13##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 4 && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && [($AK) || ($AQs) || ($AA) || ($KK) || ($QQ)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc14##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 3 && [f$OpenPPL_Button] && [($AK) || ($AQs) || ($AA) || ($KK) || ($QQ)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc15##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 1 && [f$OpenPPL_BigBlind] && [($AK) || ($AQs) || ($AJs) || ($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99) || ($88)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc16##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 4 && [f$OpenPPL_SmallBlind || f$OpenPPL_BigBlind] && [($AK) || ($AQs) || ($AA) || ($KK) || ($QQ) || ($JJ)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc17##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 3 && [f$OpenPPL_SmallBlind || f$OpenPPL_BigBlind] && [($AK) || ($AQ) || ($AA) || ($KK) || ($QQ) || ($JJ)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc18##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 2 && [f$OpenPPL_SmallBlind || f$OpenPPL_BigBlind] && [($AK) || ($AQ) || ($AA) || ($KK) || ($QQ) || ($JJ)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc19##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 4 && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && [($AJs) || ($JJ) || ($TT)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc20##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 3 && [f$OpenPPL_Button] && [($AJs) || ($JJ) || ($TT)] &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)]) ]

##f$myfunc21##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 4 && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && [($AK) || ($AA) || ($KK) || ($QQ) || ($JJ)]) ]

##f$myfunc22##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 3 && [f$OpenPPL_Button] && [($AK) || ($AQ) || ($AJs) || ($KQ) || ($KJ) || ($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99)]) ]

##f$myfunc23##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition == 1 && [f$OpenPPL_BigBlind] && [($AK) || ($AQ) || ($AJ) || ($AT) || ($KQ) || ($KJ) || ($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($99)]) ]

##f$myfunc24##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 4 && [f$OpenPPL_SmallBlind || f$OpenPPL_BigBlind] && [($AK) || ($AA) || ($KK) || ($QQ) || ($JJ)]) ]

##f$myfunc25##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_LastRaiserPosition <= 4 && [f$OpenPPL_SmallBlind || f$OpenPPL_BigBlind] && [($AQ)]) ]

##f$myfunc26##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct >= 7) ]

##f$myfunc27##
[ (f$OpenPPL_Raises == 0 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($AKs)]) ]

##f$myfunc28##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && f$OpenPPL_Raises == 0 && f$OpenPPL_BetSize <= 3) ]

##f$myfunc29##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_PairInHand]) ]

##f$myfunc30##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && [f$OpenPPL_PairInHand]) ]

##f$myfunc31##
[ ([($JJ)] && f$OpenPPL_StillToAct >= 4) ]

##f$myfunc32##
[ ([($JJ) || ($TT) || ($99)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc33##
[ ([($TT) || ($99) || ($88) || ($77) || ($66)]) ]

##f$myfunc34##
[ ([($88)] && f$OpenPPL_StillToAct == 5 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0 && f$OpenPPL_Random <= 85) ]

##f$myfunc35##
[ ([($88)] && f$OpenPPL_StillToAct == 5) ]

##f$myfunc36##
[ ([($77) || ($66)] && f$OpenPPL_StillToAct == 5) ]

##f$myfunc37##
[ ([($88) || ($77) || ($66)] && f$OpenPPL_Button && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc38##
[ ([($88) || ($77) || ($66)] && [f$OpenPPL_StillToAct == 4 || f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc39##
[ ([($55) || ($44) || ($33) || ($22)] && f$OpenPPL_StillToAct >= 7 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc40##
[ ([($55) || ($44)] && [f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4]) ]

##f$myfunc41##
[ ([($33) || ($22)] && [f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4]) ]

##f$myfunc42##
[ ([($55) || ($44)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0 && f$OpenPPL_Random <= 75) ]

##f$myfunc43##
[ ([($55) || ($44)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc44##
[ ([($33) || ($22)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc45##
[ ([($AK) || ($AQ)] && f$OpenPPL_StillToAct >= 7 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0 && f$OpenPPL_Random <= 90) ]

##f$myfunc46##
[ ([($AK)] && f$OpenPPL_StillToAct >= 7) ]

##f$myfunc47##
[ ([($AK)] && [f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4 || f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc48##
[ ([($AQ)] && f$OpenPPL_StillToAct >= 7) ]

##f$myfunc49##
[ ([($AQ)] && f$OpenPPL_StillToAct >= 6) ]

##f$myfunc50##
[ ([($AQ)] && [f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4]) ]

##f$myfunc51##
[ ([($AQ)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc52##
[ ([($AJs)] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0 && f$OpenPPL_StillToAct >= 7 && f$OpenPPL_Random <= 70) ]

##f$myfunc53##
[ ([($AJs)] && f$OpenPPL_StillToAct >= 7) ]

##f$myfunc54##
[ ([($AJs)] && [f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4 || f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc55##
[ ([($ATs)] && [f$OpenPPL_StillToAct == 4 || f$OpenPPL_StillToAct == 5]) ]

##f$myfunc56##
[ ([($ATs)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc57##
[ ([($AJ)] && [f$OpenPPL_StillToAct == 5] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc58##
[ ([($AJ)] && f$OpenPPL_StillToAct == 4) ]

##f$myfunc59##
[ ([($AJ) || ($AT)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc60##
[ ([($A9s) || ($A8s)] && f$OpenPPL_StillToAct == 5 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc61##
[ ([($A9s) || ($A8s)] && f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc62##
[ ([($A9s) || ($A8s)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc63##
[ ([($A9) || ($A8)] && f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc64##
[ ([($A9) || ($A8)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc65##
[ ([($A7s)] && f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc66##
[ ([($A7) || ($A6)] && f$OpenPPL_StillToAct == 2 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc67##
[ ([($A6) || ($A5) || ($A4) || ($A3) || ($A2)] && f$OpenPPL_Button && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc68##
[ ([($KQs)] && f$OpenPPL_StillToAct >= 7 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc69##
[ ([($KQs)] && f$OpenPPL_StillToAct <= 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc70##
[ ([($KQ)] && f$OpenPPL_StillToAct >= 7 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc71##
[ ([($KQ)] && [f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc72##
[ ([($KQ)] && [f$OpenPPL_StillToAct == 4] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ]

##f$myfunc73##
[ ([($KJs)] && f$OpenPPL_StillToAct == 4) ]

##f$myfunc74##
[ ([($QJs)] && f$OpenPPL_StillToAct == 5 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc75##
[ ([($QJ)] && f$OpenPPL_StillToAct == 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc76##
[ ([($KQ) || ($KJ) || ($QJ)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc77##
[ ([($JTs)] && f$OpenPPL_StillToAct >= 7) ]

##f$myfunc78##
[ ([($JTs)] && [f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc79##
[ ([($JTs)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button]) ]

##f$myfunc80##
[ ([($T9s)] && [f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc81##
[ ([($T9s)] && [f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc82##
[ ([($98s) || ($87s)] && f$OpenPPL_StillToAct == 3) ]

##f$myfunc83##
[ ([($98s) || ($87s) || ($76s) || ($65s)] && f$OpenPPL_Button && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc84##
[ ([($KTs) || ($K9s) || ($QTs)] && f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc85##
[ ([($KT) || ($K9) || ($QT) || ($Q9) || ($J9s)] && f$OpenPPL_Button && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc86##
[ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc87##
[ ([f$OpenPPL_Button || f$OpenPPL_SmallBlind] && f$OpenPPL_Raises == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc88##
[ ([f$OpenPPL_Button || f$OpenPPL_StillToAct == 3] && f$OpenPPL_Raises == 0) ]

##f$myfunc89##
[ (f$OpenPPL_SmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0 && [f$OpenPPL_PairInHand || ($A) || ($K) || ($QJ) || ($QT) || ($Q9) || ($Q8) || ($Q7) || ($Q6) || ($Q5) || ($JTs) || ($J9s)]) ]

##f$myfunc90##
[ (f$OpenPPL_BigBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1 && f$OpenPPL_LastCallerPosition == 1 && [f$OpenPPL_PairInHand || ($A) || ($K) || ($QJ) || ($QT) || ($Q9) || ($Q8) || ($Q7) || ($Q6) || ($Q5) || ($JTs) || ($J9s)]) ]

##f$myfunc91##
[ (f$OpenPPL_Raises == 0 && [($AA) || ($KK) || ($QQ) || ($JJ) || ($AK) || ($AQs)]) ]

##f$myfunc92##
[ (f$OpenPPL_Raises == 0 && [($TT)]) ]

##f$myfunc93##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1 && f$OpenPPL_Position == f$OpenPPL_Middle && [($99)]) ]

##f$myfunc94##
[ (f$OpenPPL_Raises == 0 && [($88) || ($77) || ($66) || ($AQ) || ($AJs) || ($ATs) || ($KQs) || ($KJs)]) ]

##f$myfunc95##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && [($AA) || ($KK) || ($QQ) || ($JJ) || ($TT) || ($AK) || ($AQs)]) ]

##f$myfunc96##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && [($99) || ($88) || ($77) || ($66) || ($55) || ($44) || ($33) || ($22) || ($AQ) || ($AJs) || ($ATs) || ($AXs) || ($KJs) || ($KQs)]) ]

##f$myfunc97##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && [($QJs) || ($QTs) || ($JTs) || ($J9s) || ($T9s) || ($T8s) || ($98s) || ($97s) || ($87s) || ($86s) || ($76s) || ($75s) || ($65s) || ($54s)]) ]

##f$myfunc98##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last && [($88) || ($77) || ($66) || ($55) || ($44) || ($33) || ($22)]) ]

##f$myfunc99##
[ ([f$OpenPPL_StillToAct == 7 || f$OpenPPL_StillToAct == 8] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1) ]

##f$myfunc100##
[ ([f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ]

##f$myfunc101##
[ ([f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ]

##f$myfunc102##
[ ([f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 3) ]

##f$myfunc103##
[ ([f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 1) ]

##f$myfunc104##
[ ([f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 2) ]

##f$myfunc105##
[ ([f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 3) ]

##f$myfunc106##
[ ([f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 4) ]

##f$myfunc107##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Call && [f$OpenPPL_PairInHand]) ]

##f$myfunc108##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_StackSize >= 20) ]

##f$myfunc109##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_LastRaiserPosition >= 6 && [($AA) || ($KK)] && f$OpenPPL_BetSize <= 3) ]

##f$myfunc110##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_LastRaiserPosition >= 6 && [($QQ)] && f$OpenPPL_BetSize <= 3) ]

##f$myfunc111##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_LastRaiserPosition >= 6 && [($JJ) || ($TT) || ($AK)] && f$OpenPPL_BetSize <= 3) ]

##f$myfunc112##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_LastRaiserPosition >= 6 && [($99) || ($88) || ($77) || ($AQs)]) ]

##f$myfunc113##
[ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ]

##f$myfunc114##
[ (f$OpenPPL_Button && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ]

##f$myfunc115##
[ (f$OpenPPL_StillToAct == 3 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc116##
[ (f$OpenPPL_Button && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0) ]

##f$myfunc117##
[ ([f$OpenPPL_StillToAct == 7 || f$OpenPPL_StillToAct == 8] && f$OpenPPL_Raises == 1) ]

##f$myfunc118##
[ ([f$OpenPPL_StillToAct == 6 || f$OpenPPL_StillToAct == 5 || f$OpenPPL_StillToAct == 4] && f$OpenPPL_Raises == 1) ]

##f$myfunc119##
[ ([f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 1) ]

##f$myfunc120##
[ ([f$OpenPPL_StillToAct == 3 || f$OpenPPL_Button] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 2) ]

##f$myfunc121##
[ (f$OpenPPL_BigBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_Checks == 0 && f$OpenPPL_LastRaiserPosition == 1 &&  ![f$OpenPPL_OpponentIsAllin]) ]

##f$myfunc122##
[ (f$OpenPPL_BigBlind && f$OpenPPL_Raises == 1) ]

##f$myfunc123##
[ (f$OpenPPL_SmallBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls <= 2) ]

##f$myfunc124##
[ (f$OpenPPL_SmallBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 3) ]

##f$myfunc125##
[ (f$OpenPPL_BigBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_LastRaiserPosition == 4 || f$OpenPPL_LastRaiserPosition == 5 || f$OpenPPL_LastRaiserPosition == 6 || f$OpenPPL_LastRaiserPosition == 7 || f$OpenPPL_LastRaiserPosition == 8]) ]

##f$myfunc126##
[ (f$OpenPPL_BigBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Opponents == 1 && [f$OpenPPL_LastRaiserPosition == 2 || f$OpenPPL_LastRaiserPosition == 3]) ]

##f$myfunc127##
[ (f$OpenPPL_BigBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 2) ]

##f$myfunc128##
[ (f$OpenPPL_BigBlind && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 3) ]

##f$myfunc129##
[ (f$OpenPPL_SmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 2) ]

##f$myfunc130##
[ (f$OpenPPL_SmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 3) ]

##f$myfunc131##
[ (f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)] && [($AA) || ($KK)]) ]

##f$myfunc132##
[ (f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_BotsLastAction == f$OpenPPL_Raise)] && [($QQ) || ($JJ) || ($AKs)]) ]

##f$myfunc133##
[ (f$OpenPPL_StillToAct <= 6 && [f$OpenPPL_PairInHand]) ]

##f$myfunc134##
[ ([f$OpenPPL_BigBlind || f$OpenPPL_SmallBlind] && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 2) ]

##f$myfunc135##
[ (f$OpenPPL_Button && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1) ]

##f$myfunc136##
[ (f$OpenPPL_SmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1) ]

##f$myfunc137##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise) ]

##f$myfunc138##
[ (f$OpenPPL_SmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1) ]

##f$myfunc139##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_AmountToCall <= 3) ]

##f$myfunc140##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_Button) ]

##f$myfunc141##
[ (f$OpenPPL_Raises == 1 && f$OpenPPL_BotsLastAction == f$OpenPPL_None && [f$OpenPPL_SmallBlind || f$OpenPPL_BigBlind] && f$OpenPPL_AmountToCall <= 2) ]

##f$myfunc142##
[ (f$OpenPPL_Random <= 65 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 &&  ![(f$OpenPPL_BigBlind)]) ]

##f$myfunc143##
[ (f$OpenPPL_SmallBlind && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1) ]

##f$myfunc144##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls >= 2 && f$OpenPPL_AmountToCall <= 5) ]

##f$myfunc145##
[ (f$OpenPPL_StillToAct <= 4 && f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0) ]

##f$myfunc146##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises == 1 && f$OpenPPL_CallsSinceLastRaise == 0) ]

##f$myfunc147##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_None && f$OpenPPL_Raises == 1 && f$OpenPPL_BetSize <= 4) ]

##f$myfunc148##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Raise && f$OpenPPL_Raises <= 2 && f$OpenPPL_OpponentIsAllin && f$OpenPPL_BetSize <= 50 && f$OpenPPL_CallsSinceLastRaise == 0) ]

##f$myfunc149##
[ (f$OpenPPL_AmountToCall <= 3 && f$OpenPPL_BotsActionsOnThisRound == 0) ]

##f$myfunc150##
[ (f$OpenPPL_Button && f$OpenPPL_Raises == 0 && f$OpenPPL_BotsActionsOnThisRound == 0) ]

##f$myfunc151##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls == 0 && f$OpenPPL_StillToAct <= 5) ]

##f$myfunc152##
[ ([f$OpenPPL_BigBlind] && f$OpenPPL_Raises == 1 && f$OpenPPL_Calls == 0 && f$OpenPPL_BotsActionsOnThisRound == 0) ]

##f$myfunc153##
[ (f$OpenPPL_StillToAct <= 3 &&  ![(f$OpenPPL_SmallBlind)] && f$OpenPPL_BotsActionsOnThisRound == 0) ]

##f$myfunc154##
[ (f$OpenPPL_StillToAct <= 6 && f$OpenPPL_Raises == 0 && f$OpenPPL_BotsActionsOnThisRound == 0) ]

##f$myfunc155##
[ (f$OpenPPL_Raises == 0 && f$OpenPPL_Calls >= 1 && f$OpenPPL_BotsActionsOnThisRound == 0) ]

##f$myfunc156##
[ ([f$OpenPPL_BotsLastAction == f$OpenPPL_Call || f$OpenPPL_BotsLastAction == f$OpenPPL_Raise || f$OpenPPL_BotsLastAction == f$OpenPPL_None] && f$OpenPPL_AmountToCall <= 4) ]

##f$myfunc157##
[ (f$OpenPPL_Others) ]

##f$myfunc158##
[ (me_re_useraggressorpreflop && f$OpenPPL_Opponents <= 3 && f$OpenPPL_BotsActionsOnThisRound == 0) ]

##f$myfunc159##
[ (f$OpenPPL_HaveSet) ]

##f$myfunc160##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_First) ]

##f$myfunc161##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_First) ]

##f$myfunc162##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets <= 1 && f$OpenPPL_Raises >= 1 && f$OpenPPL_Position == f$OpenPPL_First) ]

##f$myfunc163##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_First) ]

##f$myfunc164##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && me_re_useraggressiveflop) ]

##f$myfunc165##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_First) ]

##f$myfunc166##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets <= 1 && f$OpenPPL_Raises >= 1 && [f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle] && me_re_useraggressiveflop) ]

##f$myfunc167##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets <= 1 && f$OpenPPL_Raises >= 1 && f$OpenPPL_Position == f$OpenPPL_First) ]

##f$myfunc168##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Middle) ]

##f$myfunc169##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Middle) ]

##f$myfunc170##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets <= 1 && f$OpenPPL_Raises >= 1 && f$OpenPPL_Position == f$OpenPPL_Middle) ]

##f$myfunc171##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Middle) ]

##f$myfunc172##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Middle) ]

##f$myfunc173##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets <= 1 && f$OpenPPL_Raises >= 1 && f$OpenPPL_Position == f$OpenPPL_Middle) ]

##f$myfunc174##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ]

##f$myfunc175##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ]

##f$myfunc176##
[ (f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets <= 1 && f$OpenPPL_Raises >= 1 && f$OpenPPL_Position == f$OpenPPL_Last) ]

##f$myfunc177##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ]

##f$myfunc178##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0 && f$OpenPPL_Position == f$OpenPPL_Last) ]

##f$myfunc179##
[ (f$OpenPPL_Opponents >= 2 && f$OpenPPL_Bets <= 1 && f$OpenPPL_Raises >= 1 && f$OpenPPL_Position == f$OpenPPL_Last) ]

##f$myfunc180##
[ (me_re_useraggressorpreflop && f$OpenPPL_Bets == 1 && f$OpenPPL_Raises == 0) ]

##f$myfunc181##
[ (me_re_useraggressorpreflop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents <= 2) ]

##f$myfunc182##
[ (me_re_userheadsup && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]

##f$myfunc183##
[ (me_re_userheadsup && f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_BotsLastPreflopAction == f$OpenPPL_Call) ]

##f$myfunc184##
[ (f$OpenPPL_Opponents <= 2 &&  ![(f$OpenPPL_RaisesBeforeFlop)] &&  ![(f$OpenPPL_FlushPossible)] && f$OpenPPL_PairOnBoard) ]

##f$myfunc185##
[ ( ![(f$OpenPPL_RaisesBeforeFlop)] && f$OpenPPL_Opponents == 1 && f$OpenPPL_StackSize <= 7 && f$OpenPPL_HavePair &&  ![(f$OpenPPL_PairOnBoard)]) ]

##f$myfunc186##
[ (f$OpenPPL_AmountToCall <= 1 && f$OpenPPL_HavePair &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises == 0 && f$OpenPPL_AmountToCall <= 10 * 0.01 * f$OpenPPL_StackSize) ]

##f$myfunc187##
[ ([([$QQ] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)])]) || ([$KK] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)])]) || ([$JJ] &&  ![([(f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)])])] &&  ![(f$OpenPPL_FlushPossible)] && me_re_useraggressorpreflop) ]

##f$myfunc188##
[ (f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_PairInHand)] && [f$OpenPPL_HaveInsideStraightDraw || f$OpenPPL_HaveFlushDraw] &&  ![(f$OpenPPL_FlushPossible)] && me_re_useraggressorpreflop) ]

##f$myfunc189##
[ (me_re_useraggressorpreflop && f$OpenPPL_Opponents == 1 && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]

##f$myfunc190##
[ ([(f$OpenPPL_HaveInsideStraightDraw && [f$OpenPPL_Overcards == 2 || (f$OpenPPL_Overcards == 1 && f$OpenPPL_HavePair)]) || (f$OpenPPL_HaveFlushDraw && [f$OpenPPL_Overcards == 2 || (f$OpenPPL_Overcards == 1 && f$OpenPPL_HavePair)])] &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]

##f$myfunc191##
[ (f$OpenPPL_Raises <= 1 && [f$OpenPPL_HaveSet || f$OpenPPL_HaveTwoPair || f$OpenPPL_HaveTrips] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_StraightPossible)]) ]

##f$myfunc192##
[ (f$OpenPPL_AmountToCall <= 16 * 0.01 * f$OpenPPL_PotSize && f$OpenPPL_Raises <= 1 && f$OpenPPL_AmountToCall <= 15) ]

##f$myfunc193##
[ (f$OpenPPL_BotsLastAction == f$OpenPPL_Bet && f$OpenPPL_Raises == 1 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible)]) ]

##f$myfunc194##
[ (f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_Overcards == 2 && me_re_useraggressorpreflop &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)]) ]

##f$myfunc195##
[ (f$OpenPPL_Others) ]

##f$myfunc196##
[ ([f$OpenPPL_Position == f$OpenPPL_First || f$OpenPPL_Position == f$OpenPPL_Middle]) ]

##f$myfunc197##
[ (f$OpenPPL_Position == f$OpenPPL_Last) ]

##f$myfunc198##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Position == f$OpenPPL_Last && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)]) ]

##f$myfunc199##
[ ( ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_CalledOnFlop)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && me_re_userheadsup) ]

##f$myfunc200##
[ (f$OpenPPL_NoBettingOnFlop &&  ![f$OpenPPL_RaisesBeforeFlop] &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_OneCardStraightPossible)]) ]

##f$myfunc201##
[ (f$OpenPPL_NoBettingOnFlop &&  ![(f$OpenPPL_RaisesBeforeFlop)] &&  ![(f$OpenPPL_OneCardStraightPossible)] &&  ![(f$OpenPPL_OneCardFlushPossible)] &&  ![(f$OpenPPL_TripsOnBoard)] &&  ![(f$OpenPPL_TwoPairOnBoard)]) ]

##f$myfunc202##
[ (f$OpenPPL_NoBettingOnFlop && f$OpenPPL_HadTopPairOnFlop && f$OpenPPL_HaveTopPair &&  ![(f$OpenPPL_FlushPossible)] &&  ![(f$OpenPPL_TwoPairOnBoard)] &&  ![(f$OpenPPL_TripsOnBoard)] &&  ![(f$OpenPPL_OneCardStraightPossible)]) ]

##f$myfunc203##
[ (f$OpenPPL_NoBettingOnFlop && [f$OpenPPL_HaveTopPair || f$OpenPPL_HaveOverPair] &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard || f$OpenPPL_OneCardStraightPossible)]) ]

##f$myfunc204##
[ (f$OpenPPL_RaisesBeforeFlop && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ]

##f$myfunc205##
[ (f$OpenPPL_BotRaisedBeforeFlop && f$OpenPPL_NoBettingOnFlop && f$OpenPPL_Opponents == 1 &&  ![(me_re_userturnboardnextcardisovercard)] && f$OpenPPL_Bets == 0 && f$OpenPPL_Raises == 0) ]

##f$myfunc206##
[ ([me_re_userflop2ndtoppair || me_re_userflop2ndoverpair] && me_re_userturntopnonboardpairedpair && me_re_useraggressorflop &&  ![(f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible || f$OpenPPL_TwoPairOnBoard || f$OpenPPL_TripsOnBoard)]) ]

##f$myfunc207##
[ (f$OpenPPL_HaveInsideStraightDraw && f$OpenPPL_Overcards == 2 &&  ![(f$OpenPPL_PairOnBoard || f$OpenPPL_FlushPossible || f$OpenPPL_OneCardStraightPossible)]) ]

##f$myfunc208##
[ (f$OpenPPL_Others) ]

##f$myfunc209##
[ (f$OpenPPL_Position == f$OpenPPL_First) ]

##f$myfunc210##
[ (f$OpenPPL_Position == f$OpenPPL_Middle) ]

##f$myfunc211##
[ (f$OpenPPL_Position == f$OpenPPL_Last) ]

##f$myfunc212##
[ (me_re_usercommitted &&  ![(f$OpenPPL_NoBettingOnFlop)] &&  ![(f$OpenPPL_NoBettingOnTurn)] && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ]

##f$myfunc213##
[ (me_re_usercommittedwithnotstronghand &&  ![(f$OpenPPL_NoBettingOnTurn)] && f$OpenPPL_Raises == 0 && f$OpenPPL_Opponents == 1) ]

##f$myfunc214##
[ (me_re_userriverboardonecardpossiblestraight &&  ![(me_re_userturnboardonecardpossiblestraight || f$OpenPPL_FlushPossible || f$OpenPPL_PairOnBoard)] && f$OpenPPL_Raises == 0) ]

##f$myfunc215##
[ ([(f$OpenPPL_TotalInvested >= 5 && f$OpenPPL_AmountToCall <= 2) || (f$OpenPPL_TotalInvested >= 7 && f$OpenPPL_AmountToCall <= 3) || (f$OpenPPL_TotalInvested >= 10 && f$OpenPPL_AmountToCall <= 3) || (f$OpenPPL_TotalInvested >= 13 && f$OpenPPL_AmountToCall <= 4) || (f$OpenPPL_TotalInvested >= 15 && f$OpenPPL_AmountToCall <= 5)]) ]

##f$myfunc216##
[ (f$OpenPPL_AmountToCall <= 2 &&  ![(f$OpenPPL_NoBettingOnFlop || f$OpenPPL_NoBettingOnTurn)] && f$OpenPPL_Raises == 0) ]

##f$myfunc217##
[ (f$OpenPPL_Others) ]



//************************************************************************
//
// Resetting all User-Defined Variables.
//
// To be called at the very beginning of a hand.
//
//************************************************************************

##f$OpenPPL_ResetUserVariables##
0
+  me_st_user1callerpreflop_0
+  me_st_user1gaplowconnector_0
+  me_st_user1gaplowsuitedconnector_0
+  me_st_user1gapmidconnector_0
+  me_st_user1gapmidsuitedconnector_0
+  me_st_user2gaplowconnector_0
+  me_st_user2gaplowsuitedconnector_0
+  me_st_user2gapmidconnector_0
+  me_st_user2gapmidsuitedconnector_0
+  me_st_user3gaplowconnector_0
+  me_st_user3gaplowsuitedconnector_0
+  me_st_user3gapmidconnector_0
+  me_st_user3gapmidsuitedconnector_0
+  me_st_useraggressorflop_0
+  me_st_useraggressorpreflop_0
+  me_st_useraggressorturn_0
+  me_st_useramounttocallgreaterthanorequalto50percpotflop_0
+  me_st_useramounttocalllessthanorequalto100percpotflop_0
+  me_st_useramounttocalllessthanorequalto25percpotflop_0
+  me_st_useramounttocalllessthanorequalto35percpotflop_0
+  me_st_useramounttocalllessthanorequalto50percpotflop_0
+  me_st_useramounttocalllessthanorequalto75percpotflop_0
+  me_st_userbetlessthan20xstack_0
+  me_st_userbigblindposition_0
+  me_st_userbigpocketpair_0
+  me_st_userboardflopnopaint_0
+  me_st_userboardrivernopaint_0
+  me_st_userboardturnnopaint_0
+  me_st_userbroadway_0
+  me_st_userbuttonposition_0
+  me_st_usercommitted_0
+  me_st_usercommittedwithnotstronghand_0
+  me_st_usercompletejunk_0
+  me_st_userconnectedcoordinatedflop_0
+  me_st_usercutoffposition_0
+  me_st_userdefaultpreflop_0
+  me_st_userdrawflopboard_0
+  me_st_userdryflopboard_0
+  me_st_userearlyposition_0
+  me_st_userfloatedonflop_0
+  me_st_userflop1overcard_0
+  me_st_userflop2ndbestkicker_0
+  me_st_userflop2ndoverpair_0
+  me_st_userflop2ndtoppair_0
+  me_st_userflop2overcards_0
+  me_st_userflop3rdbestkicker_0
+  me_st_userflopbestkicker_0
+  me_st_userflopboardonlyonepossiblestraight_0
+  me_st_userflopboardpaired_0
+  me_st_userflopboardpossibleflush_0
+  me_st_userflopboardpossiblestraight_0
+  me_st_userflopboardtrips_0
+  me_st_userflopflush_0
+  me_st_userflopflushdraw_0
+  me_st_userflopfullhouse_0
+  me_st_userflopinsidestraightdraw_0
+  me_st_userflopnothing_0
+  me_st_userflopnutflush_0
+  me_st_userflopnutflushdraw_0
+  me_st_userflopnutinsidestraightdraw_0
+  me_st_userflopnuts_0
+  me_st_userflopnutstraight_0
+  me_st_userflopnutstraightdraw_0
+  me_st_userflopoverpair_0
+  me_st_userfloppair_0
+  me_st_userflopquads_0
+  me_st_userflopset_0
+  me_st_userflopstraight_0
+  me_st_userflopstraightdraw_0
+  me_st_userflopstraightflush_0
+  me_st_userfloptopnonboardpairedpair_0
+  me_st_userfloptoppair_0
+  me_st_userfloptoptwopair_0
+  me_st_userfloptrips_0
+  me_st_userfloptwopair_0
+  me_st_userflopunderstraight_0
+  me_st_userhandimproved_0
+  me_st_userheadsup_0
+  me_st_userhijackposition_0
+  me_st_userlastactionflopbet_0
+  me_st_userlastactionflopcall_0
+  me_st_userlastactionflopcheck_0
+  me_st_userlastactionflopnone_0
+  me_st_userlastactionflopraise_0
+  me_st_userlastactionpreflopcall_0
+  me_st_userlastactionpreflopnone_0
+  me_st_userlastactionpreflopraise_0
+  me_st_userlastactionriverbet_0
+  me_st_userlastactionrivercall_0
+  me_st_userlastactionrivercheck_0
+  me_st_userlastactionrivernone_0
+  me_st_userlastactionriverraise_0
+  me_st_userlastactionturnbet_0
+  me_st_userlastactionturncall_0
+  me_st_userlastactionturncheck_0
+  me_st_userlastactionturnnone_0
+  me_st_userlastactionturnraise_0
+  me_st_userlateposition_0
+  me_st_userlowconnector_0
+  me_st_userlowsuitedconnector_0
+  me_st_usermidconnector_0
+  me_st_usermiddlepocketpair_0
+  me_st_usermiddleposition_0
+  me_st_usermidsuitedconnector_0
+  me_st_usermultiplecallerspreflop_0
+  me_st_usernobetsonflop_0
+  me_st_usernobetsonturn_0
+  me_st_usernonaggressorflop_0
+  me_st_usernonaggressorpreflop_0
+  me_st_usernonaggressorturn_0
+  me_st_usernoraisespreflop_0
+  me_st_useroppminraiseflop_0
+  me_st_useroppminraiseriver_0
+  me_st_useroppraise2bbflop_0
+  me_st_useroppraise3bbflop_0
+  me_st_useroppraise4bbflop_0
+  me_st_useroppraisegreaterthan5bbflop_0
+  me_st_useroppraiselessthanorequalto100percpotflop_0
+  me_st_useroppraiselessthanorequalto25percpotflop_0
+  me_st_useroppraiselessthanorequalto35percpotflop_0
+  me_st_useroppraiselessthanorequalto50percpotflop_0
+  me_st_useroppraiselessthanorequalto75percpotflop_0
+  me_st_useroppraiseoverraiseflop_0
+  me_st_useroppraiseoverraiseturn_0
+  me_st_userpotcommitted_0
+  me_st_userraiserpositionbutton_0
+  me_st_userraiserpositioncutoff_0
+  me_st_userraiserpositionearly_0
+  me_st_userraiserpositionhijack_0
+  me_st_userraiserpositionmiddle_0
+  me_st_userraiserpositionsmallblind_0
+  me_st_userriver1overcard_0
+  me_st_userriver2ndbestkicker_0
+  me_st_userriver2ndoverpair_0
+  me_st_userriver2ndtoppair_0
+  me_st_userriver2overcards_0
+  me_st_userriver3rdbestkicker_0
+  me_st_userriverbestkicker_0
+  me_st_userriverboardflush_0
+  me_st_userriverboardfullhouse_0
+  me_st_userriverboardnextcardisovercard_0
+  me_st_userriverboardonecardpossibleflush_0
+  me_st_userriverboardonecardpossiblestraight_0
+  me_st_userriverboardonlyonecardpossiblestraight_0
+  me_st_userriverboardonlyonepossiblestraight_0
+  me_st_userriverboardpaired_0
+  me_st_userriverboardpossibleflush_0
+  me_st_userriverboardpossiblestraight_0
+  me_st_userriverboardquads_0
+  me_st_userriverboardstraight_0
+  me_st_userriverboardtrips_0
+  me_st_userriverboardtwopair_0
+  me_st_userriverflush_0
+  me_st_userriverflushdraw_0
+  me_st_userriverfullhouse_0
+  me_st_userriverinsidestraightdraw_0
+  me_st_userrivernothing_0
+  me_st_userrivernutflush_0
+  me_st_userrivernutflushdraw_0
+  me_st_userrivernutinsidestraightdraw_0
+  me_st_userrivernuts_0
+  me_st_userrivernutstraight_0
+  me_st_userrivernutstraightdraw_0
+  me_st_userriveroverpair_0
+  me_st_userriverpair_0
+  me_st_userriverquads_0
+  me_st_userriverset_0
+  me_st_userriverstraight_0
+  me_st_userriverstraightdraw_0
+  me_st_userriverstraightflush_0
+  me_st_userrivertopnonboardpairedpair_0
+  me_st_userrivertoppair_0
+  me_st_userrivertoptwopair_0
+  me_st_userrivertrips_0
+  me_st_userrivertwopair_0
+  me_st_userriverunderstraight_0
+  me_st_usersafeflop_0
+  me_st_userscaryboard_0
+  me_st_usershowingweaknessonriver_0
+  me_st_usershowingweaknessonturn_0
+  me_st_usersmallblindposition_0
+  me_st_usersmallpocketpair_0
+  me_st_usersuitedbroadway_0
+  me_st_usertoppairorbetter_0
+  me_st_usertotalinvestedhalfofstackflop_0
+  me_st_usertotalinvestedhalfofstackturn_0
+  me_st_usertotalinvestedtwothirdsofstackflop_0
+  me_st_usertotalinvestedtwothirdsofstackturn_0
+  me_st_userturn1overcard_0
+  me_st_userturn2ndbestkicker_0
+  me_st_userturn2ndoverpair_0
+  me_st_userturn2ndtoppair_0
+  me_st_userturn2overcards_0
+  me_st_userturn3rdbestkicker_0
+  me_st_userturnbestkicker_0
+  me_st_userturnboardnextcardisovercard_0
+  me_st_userturnboardonecardpossibleflush_0
+  me_st_userturnboardonecardpossiblestraight_0
+  me_st_userturnboardonlyonecardpossiblestraight_0
+  me_st_userturnboardonlyonepossiblestraight_0
+  me_st_userturnboardpaired_0
+  me_st_userturnboardpossibleflush_0
+  me_st_userturnboardpossiblestraight_0
+  me_st_userturnboardquads_0
+  me_st_userturnboardtrips_0
+  me_st_userturnboardtwopair_0
+  me_st_userturnflush_0
+  me_st_userturnflushdraw_0
+  me_st_userturnfullhouse_0
+  me_st_userturninsidestraightdraw_0
+  me_st_userturnnothing_0
+  me_st_userturnnutflush_0
+  me_st_userturnnutflushdraw_0
+  me_st_userturnnutinsidestraightdraw_0
+  me_st_userturnnuts_0
+  me_st_userturnnutstraight_0
+  me_st_userturnnutstraightdraw_0
+  me_st_userturnoverpair_0
+  me_st_userturnpair_0
+  me_st_userturnquads_0
+  me_st_userturnset_0
+  me_st_userturnstraight_0
+  me_st_userturnstraightdraw_0
+  me_st_userturnstraightflush_0
+  me_st_userturntopnonboardpairedpair_0
+  me_st_userturntoppair_0
+  me_st_userturntoptwopair_0
+  me_st_userturntrips_0
+  me_st_userturntwopair_0
+  me_st_userturnunderstraight_0
+  me_st_userversion101_0
+  me_st_userverydryflopboard_0
+  me_st_userverywetflopboard_0
+  me_st_userwebfrcashnlhe_0
+  me_st_userwetflopboard_0


//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 2.2.0 or later
//   Symbols not working with 2.1.x:
//     * isfinaltable
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   Lavezzi
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
//  Predefined action constants
//  ===========================
//
//  Positive values mean:  betsizes (in big-blinds)
//  Small negative values: percentaged potsized bets
//  Large negative values: action constants
//
//  Note: Beep is not supported.
//
//*****************************************************************************

##f$OpenPPL_Fold##
-1000000

##f$OpenPPL_Check##
-1000001

##f$OpenPPL_Undefined_BetSize_Probably_Due_To_Misscraped_Pot_Defaulting_To_Minraise##
-1000002

##f$OpenPPL_RaiseMin##
f$OpenPPL_Raise

##f$OpenPPL_RaiseHalfPot##
-1000003

##f$OpenPPL_RaisePot##
-1000004

##f$OpenPPL_RaiseMax##
-1000005

##f$OpenPPL_Call##
-1000006

##f$OpenPPL_Play##
f$OpenPPL_Call

##f$OpenPPL_Bet##
f$OpenPPL_Raise

##f$OpenPPL_BetMin##
f$OpenPPL_Bet

##f$OpenPPL_BetHalfPot##
f$OpenPPL_RaiseHalfPot

##f$OpenPPL_BetPot##
f$OpenPPL_RaisePot

##f$OpenPPL_BetMax##
f$OpenPPL_RaiseMax

##f$OpenPPL_Allin##
f$OpenPPL_RaiseMax

##f$OpenPPL_None##
-1000007

##f$OpenPPL_SitOut##
-1000008

##f$OpenPPL_Raise##
-1000009

##f$OpenPPL_UndefinedReturnValue##
// Every user-defined function ends with this return-value
// mainly to ensure syntactical correctness
// and to avoid undefined return values.
// OpenHoldem would return 0, when a return-value was not specified,
// but this might be meaningful in most contexts.
//
// To always be on the save site we use...
// f$OpenPPL_UndefinedReturnValue = f$OpenPPL_Fold = -1
f$OpenPPL_Fold

//*****************************************************************************
//
//  OpenPPL - Card Constants
//  ===========================
//  
//  Both ranks and suits accordint to the OpenHoldem docu
//
//*****************************************************************************

##f$OpenPPL_ConstCardAce##
14

##f$OpenPPL_ConstCardKing##
13

##f$OpenPPL_ConstCardQueen##
12

##f$OpenPPL_ConstCardJack##
11

##f$OpenPPL_ConstCardTen##
10

##f$OpenPPL_ConstCardNine##
9

##f$OpenPPL_ConstCardEight##
8

##f$OpenPPL_ConstCardSeven##
7

##f$OpenPPL_ConstCardSix##
6

##f$OpenPPL_ConstCardFive##
5

##f$OpenPPL_ConstCardFour##
4

##f$OpenPPL_ConstCardThree##
3

##f$OpenPPL_ConstCardTwo##
2

##f$OpenPPL_ConstSuitClubs##
1

##f$OpenPPL_ConstSuitDiamonds##
2

##f$OpenPPL_ConstSuitHearts##
3

##f$OpenPPL_ConstSuitSpades##
4

//*****************************************************************************
//
// OpenPPL - Betting Round Constants
//
//*****************************************************************************

##f$OpenPPL_ConstBetRoundPreflop##
1

##f$OpenPPL_ConstBetRoundFlop##
2

##f$OpenPPL_ConstBetRoundTurn##
3

##f$OpenPPL_ConstBetRoundRiver##
4

//*****************************************************************************
//
// OpenPPL - Other Constants
//
//*****************************************************************************

##f$OpenPPL_True##
1

##f$OpenPPL_False##
0

//*****************************************************************************
//
// OpenPPL - verbose errors and warning
//
// Instead of returning just -1 we define constants like
// "f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist"
// This way we get a verbose explanation in the log-file.
//
//*****************************************************************************

##f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY##
-1

##f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way##
0

##f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap##
// Treating this error as PLUS 1 to not mix the primecoding of board-cards up.
 1
 

##f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap##
// Treating this error as PLUS 1 to not mix the primecoding of board-cards up.
 1

##f$OpenPPL_ERROR_Betround_Out_Of_Range##
-1

##f$OpenPPL_ERROR_BotsActionsOnThisRound_Out_Of_Range##
-1

##f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_CutOffChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition3Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition2Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_MiddlePosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition3Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition2Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_EarlyPosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_DealPosition1Chair_Not_Recognized__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__No_Not_Call_This_Function##
-1

##f$OpenPPL_ERROR_Dealposition_Out_Of_Range__Check_Your_TableMap##
-1

##f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__Do_Not_Call_This_Function##
-1

##f$OpenPPL_ERROR_No_Opponents_Detected__Check_Your_TableMap##
// Returning -bblind, because we divide by bblind to -1.
(0 - bblind)

##f$OpenPPL_HINT_We_Dont_Have_A_FullHouse_At_All##
// Docu says: this case is 0; and this special case needs extra care.
// However returning a high number instead of 0 seems better to uz,
// as it indicates the weakness and avoids any pitfalls.
999

##f$OpenPPL_HINT_There_Are_No_True_Raisers##
-1

##f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist##
-1

##f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated##
-1

##f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist##
-1

##f$OpenPPL_HINT_EarlyPosition2_Does_Not_Exist##
-1

##f$OpenPPL_HINT_EarlyPosition3_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition1_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition2_Does_Not_Exist##
-1

##f$OpenPPL_HINT_MiddlePosition3_Does_Not_Exist##
-1

##f$OpenPPL_HINT_CutOff_Does_Not_Exist##
-1

##f$OpenPPL_HINT_There_Is_No_SmallNlind_In_This_Game##
-1 

##f$OpenPPL_HINT_There_Is_No_Raiser_Therefore_No_CurrentBet##
0

##f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board##
-1

##f$OpenPPL_HINT_Nothing_To_Do_But_All_OK##
0

##f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round##
0

##f$OpenPPL_HINT_StillToAct_Is_Only_Valid_On_First_Orbit##
0

##f$OpenPPL_HINT_There_Are_No_Common_Cards_Preflop##
// To use this function together with prime-coded board ranks
// a division has to be possible. 1 doesn't interfer with any cards (primes).
1

//*****************************************************************************
//
// OpenPPL - Verbosity
//
// Some OpenHoldem-symbols are awfully illnamed,
// thanks to Ray E. Bornert who invented WinHoldem.
// rais, swag, $$pr0, etc.
// We provide meaningful names here to make this library more readable.
//
//*****************************************************************************

##f$OpenPPL_RankOfFirstHoleCard##
$$pr0

##f$OpenPPL_RankOfSecondHoleCard##
$$pr1

##f$OpenPPL_FirstFlopCard##
$$cr0

##f$OpenPPL_SecondFlopCard##
$$cr1

##f$OpenPPL_ThirdFlopCard##
$$cr2

##f$OpenPPL_TurnCard##
$$cr3

##f$OpenPPL_RiverCard##
$$cr4

//*****************************************************************************
//                                                                 
//  Prime-coded board ranks                                        
//  =======================                                        
//                                                                 
//  "Board = XYZ"-expressions are difficult to translate           
//  to OH-script.                                                  
//  Cards may appear more than once, e.g. 'board = ATT',	        
//  therefore we can't work with rankbits here,  	                
//  but do some prime-coding, so that we can easily check for      
//  multiple cards.                                                
//                                                                 
//  Card:      2   3   4   5   6   7   8   9   T   J   Q   K   A   
//  Coding:    2   3   5   7  11  13  17  19  23  29  31  37  41   
//                                                                 
//  Example: prime-coding for ATT = 41 * 23 * 23 = 21689           
//  Therefore a board contains ATT, exactly if its prime-coding    
//  can be divided by 21689 without a reminder.                    
//
// Note: this code gets generated by the converter and looks like:
//   ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_K) == 0))
//                                                                 
//*****************************************************************

##f$prime_coded_board_ranks_first_flop_card##
  [($$cr0 ==  2) ? f$PrimeCode_2 : ($$cr0 ==  3) ? f$PrimeCode_3 : 
   ($$cr0 ==  4) ? f$PrimeCode_4 : ($$cr0 ==  5) ? f$PrimeCode_5 : 
   ($$cr0 ==  6) ? f$PrimeCode_6 : ($$cr0 ==  7) ? f$PrimeCode_7 : 
   ($$cr0 ==  8) ? f$PrimeCode_8 : ($$cr0 ==  9) ? f$PrimeCode_9 : 
   ($$cr0 == 10) ? f$PrimeCode_T : ($$cr0 == 11) ? f$PrimeCode_J : 
   ($$cr0 == 12) ? f$PrimeCode_Q : ($$cr0 == 13) ? f$PrimeCode_K : 
   ($$cr0 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 
   

##f$prime_coded_board_ranks_second_flop_card##
  [($$cr1 ==  2) ? f$PrimeCode_2 : ($$cr1 ==  3) ? f$PrimeCode_3 : 
   ($$cr1 ==  4) ? f$PrimeCode_4 : ($$cr1 ==  5) ? f$PrimeCode_5 : 
   ($$cr1 ==  6) ? f$PrimeCode_6 : ($$cr1 ==  7) ? f$PrimeCode_7 : 
   ($$cr1 ==  8) ? f$PrimeCode_8 : ($$cr1 ==  9) ? f$PrimeCode_9 : 
   ($$cr1 == 10) ? f$PrimeCode_T : ($$cr1 == 11) ? f$PrimeCode_J : 
   ($$cr1 == 12) ? f$PrimeCode_Q : ($$cr1 == 13) ? f$PrimeCode_K : 
   ($$cr1 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 
   

##f$prime_coded_board_ranks_third_flop_card##
  [($$cr2 ==  2) ? f$PrimeCode_2 : ($$cr2 ==  3) ? f$PrimeCode_3 : 
   ($$cr2 ==  4) ? f$PrimeCode_4 : ($$cr2 ==  5) ? f$PrimeCode_5 : 
   ($$cr2 ==  6) ? f$PrimeCode_6 : ($$cr2 ==  7) ? f$PrimeCode_7 : 
   ($$cr2 ==  8) ? f$PrimeCode_8 : ($$cr2 ==  9) ? f$PrimeCode_9 : 
   ($$cr2 == 10) ? f$PrimeCode_T : ($$cr2 == 11) ? f$PrimeCode_J : 
   ($$cr2 == 12) ? f$PrimeCode_Q : ($$cr2 == 13) ? f$PrimeCode_K : 
   ($$cr2 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 
   

##f$prime_coded_board_ranks_turn_card##
  [($$cr3 ==  2) ? f$PrimeCode_2 : ($$cr3 ==  3) ? f$PrimeCode_3 : 
   ($$cr3 ==  4) ? f$PrimeCode_4 : ($$cr3 ==  5) ? f$PrimeCode_5 : 
   ($$cr3 ==  6) ? f$PrimeCode_6 : ($$cr3 ==  7) ? f$PrimeCode_7 : 
   ($$cr3 ==  8) ? f$PrimeCode_8 : ($$cr3 ==  9) ? f$PrimeCode_9 : 
   ($$cr3 == 10) ? f$PrimeCode_T : ($$cr3 == 11) ? f$PrimeCode_J : 
   ($$cr3 == 12) ? f$PrimeCode_Q : ($$cr3 == 13) ? f$PrimeCode_K : 
   ($$cr3 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 
   

##f$prime_coded_board_ranks_river_card##
  [($$cr4 ==  2) ? f$PrimeCode_2 : ($$cr4 ==  3) ? f$PrimeCode_3 : 
   ($$cr4 ==  4) ? f$PrimeCode_4 : ($$cr4 ==  5) ? f$PrimeCode_5 : 
   ($$cr4 ==  6) ? f$PrimeCode_6 : ($$cr4 ==  7) ? f$PrimeCode_7 : 
   ($$cr4 ==  8) ? f$PrimeCode_8 : ($$cr4 ==  9) ? f$PrimeCode_9 : 
   ($$cr4 == 10) ? f$PrimeCode_T : ($$cr4 == 11) ? f$PrimeCode_J : 
   ($$cr4 == 12) ? f$PrimeCode_Q : ($$cr4 == 13) ? f$PrimeCode_K : 
   ($$cr4 == 14) ? f$PrimeCode_A : 
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] 

##f$prime_coded_board_ranks##
[betround == f$OpenPPL_ConstBetRoundPreflop] ? f$OpenPPL_HINT_There_Are_No_Common_Cards_Preflop :
[betround == f$OpenPPL_ConstBetRoundFlop] ?
  (f$prime_coded_board_ranks_first_flop_card 
    * f$prime_coded_board_ranks_second_flop_card
    * f$prime_coded_board_ranks_third_flop_card) :
[betround == f$OpenPPL_ConstBetRoundTurn] ?
  (f$prime_coded_board_ranks_first_flop_card 
    * f$prime_coded_board_ranks_second_flop_card
    * f$prime_coded_board_ranks_third_flop_card 
	* f$prime_coded_board_ranks_turn_card) :
[betround == f$OpenPPL_ConstBetRoundRiver] ?
  (f$prime_coded_board_ranks_first_flop_card 
    * f$prime_coded_board_ranks_second_flop_card
    * f$prime_coded_board_ranks_third_flop_card 
	* f$prime_coded_board_ranks_turn_card
	* f$prime_coded_board_ranks_river_card) :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY
	

##f$PrimeCode_2##
  2

##f$PrimeCode_3##
  3

##f$PrimeCode_4##
  5

##f$PrimeCode_5##
  7

##f$PrimeCode_6##
  11

##f$PrimeCode_7##
  13

##f$PrimeCode_8##
  17

##f$PrimeCode_9##
  19

##f$PrimeCode_T##
  23

##f$PrimeCode_J##
  29

##f$PrimeCode_Q##
  31

##f$PrimeCode_K##
  37

##f$PrimeCode_A##
  41
  
//*****************************************************************************
//                                                                 
//  Prime-coded hole-cards
//  ======================                                        
//    
//  Similar to prime-coded board-ranks.
//  With OH we can't check for specific suits like AhKd easiliy.
//  We have to check 2 ranks * 2 suits * 2 permuations explicitly.
//  As this is really awfule and generates long and unreadable code
//  we also use the prome-coding technique here.
//             
//*****************************************************************************
//
//  Prime numbers: http://www.miniwebtool.com/list-of-prime-numbers/?to=1000
//
//  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 
//  71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 
//  151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 
//  233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293
//
//*****************************************************************************

##f$prime_coded_hole_cards##
[f$prime_code_first_hole_card * f$prime_code_second_hole_card]

##f$prime_code_first_hole_card##
[
($$ps0 == f$OpenPPL_ConstSuitClubs)   ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$ps0 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$ps0 == f$OpenPPL_ConstSuitHearts)  ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$ps0 == f$OpenPPL_ConstSuitSpades)  ?
  [$$pr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$pr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$pr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$pr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$pr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$pr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$pr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$pr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$pr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$pr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$pr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$pr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$pr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
] 
 

##f$prime_code_second_hole_card##
[
($$ps1 == f$OpenPPL_ConstSuitClubs)   ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$ps1 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$ps1 == f$OpenPPL_ConstSuitHearts)  ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$ps1 == f$OpenPPL_ConstSuitSpades)  ?
  [$$pr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$pr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$pr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$pr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$pr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$pr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$pr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$pr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$pr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$pr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$pr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$pr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$pr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap   
]

//
// Clubs
//

##f$PrimeCode_2c##
  2

##f$PrimeCode_3c##
  3

##f$PrimeCode_4c##
  5

##f$PrimeCode_5c##
  7

##f$PrimeCode_6c##
  11

##f$PrimeCode_7c##
  13

##f$PrimeCode_8c##
  17

##f$PrimeCode_9c##
  19

##f$PrimeCode_Tc##
  23

##f$PrimeCode_Jc##
  29

##f$PrimeCode_Qc##
  31

##f$PrimeCode_Kc##
  37

##f$PrimeCode_Ac##
  41

//
// Diamonds
//  

##f$PrimeCode_2d##
  43

##f$PrimeCode_3d##
  47

##f$PrimeCode_4d##
  53

##f$PrimeCode_5d##
  59

##f$PrimeCode_6d##
  61

##f$PrimeCode_7d##
  67

##f$PrimeCode_8d##
  71

##f$PrimeCode_9d##
  73

##f$PrimeCode_Td##
  79

##f$PrimeCode_Jd##
  83

##f$PrimeCode_Qd##
  89

##f$PrimeCode_Kd##
  97

##f$PrimeCode_Ad##
  101

//
// Spades  
//

##f$PrimeCode_2h##
  103

##f$PrimeCode_3h##
  107

##f$PrimeCode_4h##
  109

##f$PrimeCode_5h##
  113

##f$PrimeCode_6h##
  127

##f$PrimeCode_7h##
  131

##f$PrimeCode_8h##
  137

##f$PrimeCode_9h##
  139

##f$PrimeCode_Th##
  149

##f$PrimeCode_Jh##
  151

##f$PrimeCode_Qh##
  157
  

##f$PrimeCode_Kh##
  163

##f$PrimeCode_Ah##
  167

//  
// Spades
//  

##f$PrimeCode_2s##
  173

##f$PrimeCode_3s##
  179

##f$PrimeCode_4s##
  181

##f$PrimeCode_5s##
  191

##f$PrimeCode_6s##
  193

##f$PrimeCode_7s##
  197

##f$PrimeCode_8s##
  199

##f$PrimeCode_9s##
  211

##f$PrimeCode_Ts##
  223

##f$PrimeCode_Js##
  227

##f$PrimeCode_Qs##
  229

##f$PrimeCode_Ks##
  233

##f$PrimeCode_As##
  239
  
//*****************************************************************************
//                                                                 
//  Prime-coded board ranks                                        
//  =======================   
//  For expressions like "board = AsTh".
//
//*****************************************************************************

##f$prime_coded_board_cards##
[ f$prime_code_first_board_card
* f$prime_code_second_board_card
* f$prime_code_third_board_card
* f$prime_code_fourth_board_card
* f$prime_code_fifth_board_card ]

##f$prime_code_first_board_card##
[
($$cs0 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs0 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs0 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs0 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr0 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr0 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr0 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr0 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr0 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr0 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr0 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr0 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr0 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr0 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr0 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr0 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr0 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]

##f$prime_code_second_board_card##
[
($$cs1 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs1 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs1 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs1 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr1 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr1 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr1 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr1 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr1 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr1 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr1 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr1 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr1 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr1 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr1 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr1 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr1 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]

##f$prime_code_third_board_card##
[
($$cs2 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr2 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr2 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr2 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr2 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr2 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr2 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr2 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr2 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr2 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr2 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr2 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr2 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr2 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs2 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr2 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr2 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr2 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr2 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr2 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr2 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr2 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr2 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr2 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr2 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr2 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr2 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr2 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs2 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr2 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr2 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr2 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr2 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr2 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr2 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr2 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr2 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr2 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr2 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr2 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr2 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr2 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs2 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr2 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr2 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr2 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr2 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr2 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr2 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr2 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr2 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr2 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr2 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr2 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr2 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr2 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]  

##f$prime_code_fourth_board_card##
[
($$cs3 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr3 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr3 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr3 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr3 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr3 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr3 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr3 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr3 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr3 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr3 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr3 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr3 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr3 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs3 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr3 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr3 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr3 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr3 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr3 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr3 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr3 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr3 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr3 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr3 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr3 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr3 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr3 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs3 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr3 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr3 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr3 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr3 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr3 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr3 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr3 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr3 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr3 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr3 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr3 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr3 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr3 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs3 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr3 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr3 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr3 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr3 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr3 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr3 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr3 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr3 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr3 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr3 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr3 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr3 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr3 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]

##f$prime_code_fifth_board_card##
[
($$cs4 == f$OpenPPL_ConstSuitClubs)   ?
  [$$cr4 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2c :
   $$cr4 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3c :
   $$cr4 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4c :
   $$cr4 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5c :
   $$cr4 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6c :
   $$cr4 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7c :
   $$cr4 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8c :
   $$cr4 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9c :
   $$cr4 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Tc :
   $$cr4 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jc :
   $$cr4 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qc :
   $$cr4 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kc :
   $$cr4 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ac :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
($$cs4 == f$OpenPPL_ConstSuitDiamonds) ?
  [$$cr4 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2d :
   $$cr4 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3d :
   $$cr4 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4d :
   $$cr4 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5d :
   $$cr4 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6d :
   $$cr4 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7d :
   $$cr4 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8d :
   $$cr4 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9d :
   $$cr4 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Td :
   $$cr4 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jd :
   $$cr4 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qd :
   $$cr4 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kd :
   $$cr4 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ad :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs4 == f$OpenPPL_ConstSuitHearts)  ?
  [$$cr4 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2h :
   $$cr4 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3h :
   $$cr4 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4h :
   $$cr4 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5h :
   $$cr4 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6h :
   $$cr4 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7h :
   $$cr4 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8h :
   $$cr4 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9h :
   $$cr4 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Th :
   $$cr4 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Jh :
   $$cr4 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qh :
   $$cr4 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Kh :
   $$cr4 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_Ah :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] : 
($$cs4 == f$OpenPPL_ConstSuitSpades)  ?
  [$$cr4 == f$OpenPPL_ConstCardTwo    ? f$PrimeCode_2s :
   $$cr4 == f$OpenPPL_ConstCardThree  ? f$PrimeCode_3s :
   $$cr4 == f$OpenPPL_ConstCardFour   ? f$PrimeCode_4s :
   $$cr4 == f$OpenPPL_ConstCardFive   ? f$PrimeCode_5s :
   $$cr4 == f$OpenPPL_ConstCardSix    ? f$PrimeCode_6s :
   $$cr4 == f$OpenPPL_ConstCardSeven  ? f$PrimeCode_7s :
   $$cr4 == f$OpenPPL_ConstCardEight  ? f$PrimeCode_8s :
   $$cr4 == f$OpenPPL_ConstCardNine   ? f$PrimeCode_9s :
   $$cr4 == f$OpenPPL_ConstCardTen    ? f$PrimeCode_Ts :
   $$cr4 == f$OpenPPL_ConstCardJack   ? f$PrimeCode_Js :
   $$cr4 == f$OpenPPL_ConstCardQueen  ? f$PrimeCode_Qs :
   $$cr4 == f$OpenPPL_ConstCardKing   ? f$PrimeCode_Ks :
   $$cr4 == f$OpenPPL_ConstCardAce    ? f$PrimeCode_As :
   f$OpenPPL_ERROR_Rank_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap] :
f$OpenPPL_ERROR_Suit_Of_Card_Not_Recognized_Correctly__Check_Your_TableMap     
]

//***********************************************************
//                                                           
//  Technical functions                                      
//  ===================                                      
//                                                           
//  Functions needed for integration into OpenHoldem.        
//  They translate the f$Decision-function to standard       
//  autoplayer-functions like f$alli, f$rais and f$call.     
//
//  The OpenPPL-logic must be able to handle several
//  different kinds of actions, that must be distinguishable.
//  Therefore we use 3 different ranges for these actions: 
//  * positive values: betsize in big-blinds,
//    using Shankys RaiseBy-semantics.
//    "RAISE 3 FORCE" will be translated to
//    "3 * f$RaiseByBigBlinds"
//    where f$RaiseByBigBlinds simply is 1.
//  * small negative values: percentaged potsized bets
//    "RAISE 70% FORCE" will be translated to 
//    "70 * f$RaiseByPercentagedPotsize"
//    where f$RaiseByPercentagedPotsize is -1.
//    f$betsize will then translate this to the correct bet-amount.
//  * large negative values (< 1.000.000): 
//    fixed action constants for check, call, raise, etc. 
//                                                           
//***********************************************************

##f$OpenPPL_Decision##
// f$preflop, f$flop, f$turn and f$river will be added by the translator.
[betround == 1] ? f$preflop :
[betround == 2] ? f$flop :
[betround == 3] ? f$turn :
[betround == 4] ? f$river :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$RaiseByBigBlinds##
// Positive amounts are betsizes in big-blinds
1

##f$RaiseByPercentagedPotsize##
// Small negative values are used for percentaged potsized bets.
// We also do the multiplication with 0.01 here.
// Don't use " / 100 *" because that can lead to an integer-division,
// and 70/100 will unexpectedly get evaluated as 0.
-0.01

##f$OpenPPL_DecisionIsPercentagedPotsizedBet##
   (f$OpenPPL_Decision <= 0) 
&& (f$OpenPPL_Decision >= -1000)

##f$OpenPPL_DecisionIsFixedBetInBigBlinds##
(f$OpenPPL_Decision > 0) 

##f$OpenPPL_DecisionIsBetPotOrBetHalfPotOrBetMax##
// Used for sanity checks in f$swag
   (f$OpenPPL_Decision == f$OpenPPL_BetHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMax)

##f$OpenPPL_DecisionIsFixedAction##
(f$OpenPPL_Decision < -1000000) 

##f$OpenPPL_RememberToSitoutIfNecessary##
// OpenHoldem handles autoplayer actions when it is heros turn,
// but f$sitin, f$sitout and f$leave once every N heartbeats,
// contrary to OpenPPL were both can happen only at heros turn.
// Therefore we have to remember a decision to SitOut somehow
// and recall it later.
[f$OpenPPL_Decision == f$OpenPPL_SitOut] ? me_st_GoBuddyTakeABreakAndABeer_1 : 0

##f$OpenPPL_MaximumBetsizeInDollars##
(balance + currentbet)

##f$OpenPPL_BetSizeForBetHalfPot##
// Calculated in dollars and with raise-to-semantics
// First we call, then we add half of the pot (after we called)
// pot already includes currentbet, so we must not consider this twice.
[currentbet + call + 0.5 * (pot + call)]

##f$OpenPPL_BetSizeForBetPot##
// Calculated in dollars and with raise-to-semantics
// pot includes currentbet, call is the amount we need to call.
[currentbet + call + (pot + call)]

##f$OpenPPL_BetSizeForPercentagedPotsizeBet##
// f$Decision is negative, -0.70 means: 70% potsize
[currentbet + call + (-1 * f$OpenPPL_Decision) * (pot + call)]

##f$OpenPPL_BetSizeForFixedBetInBigBlinds##
// Calculated in dollars and with raise-to-semantics
[(f$OpenPPL_Decision + ncallbets) * bblind]

##f$OpenPPL_BetSizeForAllin##
// Calculated in dollars and with raise-to-semantics
[balance + currentbet]

##f$betsize##
// f$betsize gets counted in Dollars.
// OpenHoldems semantics is "raise-to".
f$alli ? f$OpenPPL_BetSizeForAllin :
[f$OpenPPL_Decision == f$OpenPPL_BetPot] ? f$OpenPPL_BetSizeForBetPot : 
[f$OpenPPL_Decision == f$OpenPPL_BetHalfPot] ? f$OpenPPL_BetSizeForBetHalfPot :
// Finally caring about about absolute betsizes.
// Shankys semantics is "raise-by" and in big blinds,
// so we have to translate it.
f$OpenPPL_DecisionIsFixedBetInBigBlinds ?  f$OpenPPL_BetSizeForFixedBetInBigBlinds :
f$OpenPPL_DecisionIsPercentagedPotsizedBet ? f$OpenPPL_BetSizeForPercentagedPotsizeBet :
0

##f$sitout##
me_re_GoBuddyTakeABreakAndABeer

//*****************************************************************************
//
// OpenPPL - BettingAction Symbols
//
//*****************************************************************************

##f$OpenPPL_InitBets##
// No bet in front of us to call
((currentbet == 0) && (f$OpenPPL_AmountToCall == 0)) ? me_st_MemBets_0 :
// A bet to call and we din't act before or we checked
((currentbet == 0) && (f$OpenPPL_AmountToCall > 0)) ? me_st_MemBets_1 :
// Otherwise: we did already bet ourself or call a bet.
// So don't change anything
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_Bets##
me_re_MemBets

##f$OpenPPL_BotCalledBeforeFlop##
didcallround1

##f$OpenPPL_AggressorChair##
// ac_aggressor alone is somewhat unreliable, as it gets scraped (by bets).
// But if we raise and there are super-fast calls behind us (e.g. at PokerAcademy),
// then we don't have stable frames and soon we will switch to the next betting round.
// (There are however no problems, if somebody else raises,
// because we always get stable frames at out turn.)
// So we also check for our last action and the amount to call.
// (-1 = fold 0 = check 1 = call 2 = raise e3 = swag 4 = allin)
(((prevaction ==  2) || (prevaction == 3)) && (f$OpenPPL_AmountToCall == 0)) ? userchair :
ac_aggressor

##f$OpenPPL_BotIsLastRaiser##
(f$OpenPPL_AggressorChair==userchair)

##f$OpenPPL_BotRaisedBeforeFlop##
(didraisround1 || didswaground1)

##f$OpenPPL_BotRaisedOnFlop##
(didraisround2 || didswaground2)

##f$OpenPPL_BotRaisedOnTurn##
(didraisround3 || didswaground3)

##f$OpenPPL_BotsActionsOnFlop##
// Checks are not counted
(didcallround2 + didraisround2 + didswaground2)

##f$OpenPPL_BotsActionsOnThisRound##
// Checks are not counted
(didcall + didrais + didswag)

##f$OpenPPL_BotsActionsOnThisRoundIncludingChecks##
// Folds and allins are not relevant, as then the hand is over for us.
(didchec + didcall + didswag + didrais)

##f$OpenPPL_BotsActionsPreflop##
// Checks are not counted per definition
// and we can't check preflop without posting a blind out of order (first hand only).
(didcallround1 + didraisround1 + didswaground1)

##f$OpenPPL_InitBotsLastAction##
// Initialization on first action preflop
// This has to be done *before* we call the Decision-function,
// InitBotsLastAction has to be the last init-function to be called
// (inside f$OpenPPL_InitMemorySymbols)
// because it will call the final f$Decision routine.
//
([(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? me_st_MemBotsLastAction_f$OpenPPL_None :
//
// "Initialize" first action on other rounds to last value of last round,
// i.e. do nothing and keep the old value.
//
[[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 0 : 0])
//
// Then we call f$OpenPPL_Decision and store BotsLastAction for the next time...
//
|| 
// Call = Play
[  (f$OpenPPL_Decision == f$OpenPPL_Call)
|| (f$OpenPPL_Decision == f$OpenPPL_Play)] ? me_st_MemBotsLastAction_f$OpenPPL_Call :
// Fold
(f$OpenPPL_Decision == f$OpenPPL_Fold) ? me_st_MemBotsLastAction_f$OpenPPL_Fold :
// Check
(f$OpenPPL_Decision == f$OpenPPL_Check) ? me_st_MemBotsLastAction_f$OpenPPL_Check :
// Bet, Raise, BetHalfPot, BetPot, etc.
// Also handling fixed betsizes and peercentaged potsized bets.
[  (f$OpenPPL_Decision == f$OpenPPL_Raise)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseMin)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_RaiseMax)
|| (f$OpenPPL_Decision == f$OpenPPL_Bet)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMin)
|| (f$OpenPPL_Decision == f$OpenPPL_BetHalfPot)
|| (f$OpenPPL_Decision == f$OpenPPL_BetMax)
|| (f$OpenPPL_DecisionIsPercentagedPotsizedBet || f$OpenPPL_DecisionIsFixedBetInBigBlinds)] ?
[(ncallbets == 0) ? me_st_MemBotsLastAction_f$OpenPPL_Bet : me_st_MemBotsLastAction_f$OpenPPL_Raise] :
// Other cases: this should not happen
// Handling them as "None"
me_st_MemBotsLastAction_f$OpenPPL_None

##f$OpenPPL_BotsLastAction##
me_re_MemBotsLastAction

##f$OpenPPL_InitBotsLastPreflopAction##
// Don't use BotsLastAction on the first orbit,
// because that variable has to be the last one to be initialized
// and is therefore undefined.
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 
    me_st_MemBotsLastPreflopAction_f$OpenPPL_None :
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0)] ? 
    me_st_MemBotsLastPreflopAction_f$OpenPPL_BotsLastAction : 
[(betround == f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ?
    me_st_MemBotsLastPreflopAction_f$OpenPPL_BotsLastAction : 0  

##f$OpenPPL_BotsLastPreflopAction##
me_re_MemBotsLastPreflopAction

##f$OpenPPL_CalledOnFlop##
didcallround2

##f$OpenPPL_CalledOnTurn##
didcallround3

##f$OpenPPL_AddNopponentscalling##
f$OpenPPL_Calls + nopponentscalling

##f$OpenPPL_InitCalls##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ?
  me_st_MemCalls_nopponentscalling :
  me_st_MemCalls_f$OpenPPL_AddNopponentscalling

##f$OpenPPL_Calls##
me_re_MemCalls

##f$OpenPPL_LastRaiserCurrentBet##
raischair == 0 ? currentbet0 :
raischair == 1 ? currentbet1 :
raischair == 2 ? currentbet2 :
raischair == 3 ? currentbet3 :
raischair == 4 ? currentbet4 :
raischair == 5 ? currentbet5 :
raischair == 6 ? currentbet6 :
raischair == 7 ? currentbet7 :
raischair == 8 ? currentbet8 :
raischair == 9 ? currentbet9 :
f$OpenPPL_HINT_There_Is_No_Raiser_Therefore_No_CurrentBet

##f$OpenPPL_PlayersRaisingOrColdCallingTheLastRaise##
  (currentbet0 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet1 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet2 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet3 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet4 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet5 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet6 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet7 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet8 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)
+ (currentbet9 == f$OpenPPL_LastRaiserCurrentBet ? 1 : 0)

##f$OpenPPL_CallsSinceLastRaise##
(f$OpenPPL_PlayersRaisingOrColdCallingTheLastRaise - 1)

##f$OpenPPL_Folds##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? (nplayersdealt  - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundFlop)    ? (nplayersround2 - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundTurn)    ? (nplayersround3 - nopponentsplaying - 1) :
(betround == f$OpenPPL_ConstBetRoundRiver)   ? (nplayersround4 - nopponentsplaying - 1) :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_ChecksAfterHero##
// Valid second orbit only
// All active players with a zero bet
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? 0 :
nopponentschecking

##f$OpenPPL_ChecksInFrontOfHero##
// No checks preflop. Not even big blind can check (game over).
// We ignore additional blind-posters however.
(betround == f$OpenPPL_ConstBetRoundPreflop) ? 0 :
// I did already act, so no longer any posters in front of me
(currentbet > 0) ? 0 :
// A bet to call, subtract all players with a non-zero bet in front of us
(f$OpenPPL_AmountToCall > 0) ? (betposition - nopponentsbetting - 1):
// All players before us checked, not even open-folds can throw this logic off.
[betposition - 1]

##f$OpenPPL_CalculateChecks##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? f$OpenPPL_ChecksInFrontOfHero :
// Stored value of checks on previous orbit plus players behind
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 1) ? (f$OpenPPL_Checks + f$OpenPPL_ChecksAfterHero) :
// There can no longer be any checking players, so don't change anything
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitChecks##
(f$OpenPPL_BotsActionsOnThisRound <= 1) ? me_st_MemChecks_f$OpenPPL_CalculateChecks : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_Checks##
me_re_MemChecks

##f$OpenPPL_DealPosition1Chair##
ac_dealpos0 == 1 ? 0 :
ac_dealpos1 == 1 ? 1 :
ac_dealpos2 == 1 ? 2 :
ac_dealpos3 == 1 ? 3 :
ac_dealpos4 == 1 ? 4 :
ac_dealpos5 == 1 ? 5 :
ac_dealpos6 == 1 ? 6 :
ac_dealpos7 == 1 ? 7 :
ac_dealpos8 == 1 ? 8 :
ac_dealpos9 == 1 ? 9 :
f$OpenPPL_ERROR_DealPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CurrentbetOfDealPosition1Chair##
(f$OpenPPL_DealPosition1Chair == 0) ? currentbet0 :
(f$OpenPPL_DealPosition1Chair == 1) ? currentbet1 :
(f$OpenPPL_DealPosition1Chair == 2) ? currentbet2 :
(f$OpenPPL_DealPosition1Chair == 3) ? currentbet3 :
(f$OpenPPL_DealPosition1Chair == 4) ? currentbet4 :
(f$OpenPPL_DealPosition1Chair == 5) ? currentbet5 :
(f$OpenPPL_DealPosition1Chair == 6) ? currentbet6 :
(f$OpenPPL_DealPosition1Chair == 7) ? currentbet7 :
(f$OpenPPL_DealPosition1Chair == 8) ? currentbet8 :
(f$OpenPPL_DealPosition1Chair == 9) ? currentbet9 :
f$OpenPPL_ERROR_DealPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_PlayersBehindDealPosition2ChairDidAct##
// Needed for dectection of missing small blind.
// First checking for folded players,
// because lots ofnewbies won't scrape-players correctly and mix everything up.
// This affects calculation of small blind, big blind,
// all positions and finally lots of other things...
(nopponentsfolded > 0) ? f$OpenPPL_True :
// Then check for active players with a zero bet
[(playersplayingbits & 0b0000000001) && (currentbet0 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000000010) && (currentbet1 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000000100) && (currentbet2 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000001000) && (currentbet3 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000010000) && (currentbet4 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0000100000) && (currentbet5 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0001000000) && (currentbet6 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0010000000) && (currentbet7 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b0100000000) && (currentbet8 == 0)] ? f$OpenPPL_False :
[(playersplayingbits & 0b1000000000) && (currentbet9 == 0)] ? f$OpenPPL_False :
f$OpenPPL_True

##f$OpenPPL_CalculateMissingSmallBlind##
// True, if SB is missing, false otherwise
// Should be called at our first action preflop only.
(f$OpenPPL_CurrentbetOfDealPosition1Chair == sblind) ? f$OpenPPL_False :
// If we are NOT the 2nd player to be dealt and see a bet 
// of 1 big blind left to the dealer, then it is the big blind (SB missing)
[(dealposition != 2) && (f$OpenPPL_CurrentbetOfDealPosition1Chair == bblind)] ? f$OpenPPL_True :
// Problematic is only the case when I am in "big blind" (2nd player to be dealt)
// * if bet of DealPosition1Chair > 1 bblind then SB raised and is present
// * if bet = 1 big blind and players "behind me" did act, then SB is present and limped
// * if bet = 1 big blind and players behind me still to act, then SB is missing
[(dealposition == 2) && (f$OpenPPL_CurrentbetOfDealPosition1Chair > bblind)] ? f$OpenPPL_False :
// Case 2 and 3: precondition: bet = 1 big blind
[(dealposition == 2) && f$OpenPPL_PlayersBehindDealPosition2ChairDidAct] ? f$OpenPPL_False :
[(dealposition == 2) && !f$OpenPPL_PlayersBehindDealPosition2ChairDidAct] ? f$OpenPPL_True :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_InitMissingSmallBlind##
[(betround == f$OpenPPL_ConstBetRoundPreflop) &&  (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)] ? 
me_st_MemMissingSmallBlind_f$OpenPPL_CalculateMissingSmallBlind :
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_MissingSmallBlind##
me_re_MemMissingSmallBlind

##f$OpenPPL_NoBettingOnFlop##
(nbetsround2 == 0)

##f$OpenPPL_NoBettingOnTurn##
(nbetsround3 == 0)

##f$OpenPPL_NoVillainBetOrRaisedOnFlop##
((raisbits2 & ~(1<<userchair)) == 0)

##f$OpenPPL_NoVillainBetOrRaisedOnTurn##
((raisbits3 & ~(1<<userchair)) == 0)

##f$OpenPPL_OpponentCalledOnFlop##
   (betround > f$OpenPPL_ConstBetRoundFlop)
&& ((didraisround2 + didswaground2) == 1)
&& !didchecround2
&& !didcallround2
&& f$OpenPPL_NoVillainBetOrRaisedOnFlop

##f$OpenPPL_OpponentCalledOnTurn##
   (betround > f$OpenPPL_ConstBetRoundTurn)
&& ((didraisround3 + didswaground3) == 1)
&& !didchecround3
&& !didcallround3
&& f$OpenPPL_NoVillainBetOrRaisedOnTurn

##f$OpenPPL_InitRaisesBeforeFlop##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MemRaisesBeforeFlop_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitRaisesOnFlop##
(betround == f$OpenPPL_ConstBetRoundFlop) ? me_st_MemRaisesOnFlop_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitRaisesOnTurn##
(betround == f$OpenPPL_ConstBetRoundTurn) ? me_st_MemRaisesOnTurn_f$OpenPPL_Raises : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_NumberOfRaisesBeforeFlop##
(betround > f$OpenPPL_ConstBetRoundPreflop) ? me_re_MemRaisesBeforeFlop : 0

##f$OpenPPL_NumberOfRaisesOnFlop##
(betround > f$OpenPPL_ConstBetRoundFlop) ? me_re_MemRaisesOnFlop : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_NumberOfRaisesOnTurn##
(betround > f$OpenPPL_ConstBetRoundTurn) ? me_re_MemRaisesOnTurn : 0

##f$OpenPPL_Calculate_Raises##
(me_re_MemRaises + f$OpenPPL_RaisesSinceLastPlay)

##f$OpenPPL_InitRaises##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? me_st_MemRaises_f$OpenPPL_RaisesSinceLastPlay :
me_st_MemRaises_f$OpenPPL_Calculate_Raises

##f$OpenPPL_Raises##
// Raises may be -1 if there are additional blind-posters,
// because nopponentsraising is wrong in that case.
// But this has to be handled in OH 2.2.0.
// For the moment we add some sanity-checks.
[(me_re_MemRaises < 0) && (betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets == 1)] ? 
  (f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way + 0) :
[(me_re_MemRaises < 0) && (betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets > 1)]  ? 
  (f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way + 1) :
// Should not happen postflop, but a sanity-check can't harm.
[(me_re_MemRaises < 0) && (betround >= f$OpenPPL_ConstBetRoundFlop)] ? 
  (f$OpenPPL_ERROR_Raises_Is_Negative__Trying_To_Adapt_In_A_Reasonable_Way + 0) :
// Otherwise: probably everything ok
me_re_MemRaises

##f$OpenPPL_RaisesBeforeFlop##
(f$OpenPPL_NumberOfRaisesBeforeFlop > 0)

##f$OpenPPL_RaisesOnFlop##
(f$OpenPPL_NumberOfRaisesOnFlop > 0)

##f$OpenPPL_RaisesOnTurn##
(f$OpenPPL_NumberOfRaisesOnTurn > 0)

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPostflop##
(nopponentsraising > 0) ? (nopponentsraising - 1) : 0

##f$OpenPPL_AntesPresent##
// First orbit preflop only,
// as this function tries to guess the antes from the bets.
   [(currentbet0 > 0) && (currentbet0 < sblind) && (balance0 > 0)]
|| [(currentbet1 > 0) && (currentbet1 < sblind) && (balance1 > 0)]
|| [(currentbet2 > 0) && (currentbet2 < sblind) && (balance2 > 0)]
|| [(currentbet3 > 0) && (currentbet3 < sblind) && (balance3 > 0)]
|| [(currentbet4 > 0) && (currentbet4 < sblind) && (balance4 > 0)]
|| [(currentbet5 > 0) && (currentbet5 < sblind) && (balance5 > 0)]
|| [(currentbet6 > 0) && (currentbet6 < sblind) && (balance6 > 0)]
|| [(currentbet7 > 0) && (currentbet7 < sblind) && (balance7 > 0)]
|| [(currentbet8 > 0) && (currentbet8 < sblind) && (balance8 > 0)]
|| [(currentbet9 > 0) && (currentbet9 < sblind) && (balance9 > 0)]

##f$OpenPPL_NumberOfBlindRaisersInThisGame##
[f$OpenPPL_AntesPresent ? 1 : 0] + [f$OpenPPL_MissingSmallBlind ? 1 : 2]

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInSmallBlind##
// If we are in small-blind, there is 1 opponent "blind-raising",
// And we also have to care about potential antes
[(nopponentsraising - 1) - (f$OpenPPL_AntesPresent ? 1 : 0)]

##f$OpenPPL_NumberOfOpponentsLimpingPreflop##
// First orbit preflop only
// Does not count the user
// Does not count the big-blind, who can't limp
  [(currentbet0 == bblind) && (userchair != 0) && (f$OpenPPL_BigBlindChair != 0) ? 1 : 0]
+ [(currentbet1 == bblind) && (userchair != 1) && (f$OpenPPL_BigBlindChair != 1) ? 1 : 0]
+ [(currentbet2 == bblind) && (userchair != 2) && (f$OpenPPL_BigBlindChair != 2) ? 1 : 0]
+ [(currentbet3 == bblind) && (userchair != 3) && (f$OpenPPL_BigBlindChair != 3) ? 1 : 0]
+ [(currentbet4 == bblind) && (userchair != 4) && (f$OpenPPL_BigBlindChair != 4) ? 1 : 0]
+ [(currentbet5 == bblind) && (userchair != 5) && (f$OpenPPL_BigBlindChair != 5) ? 1 : 0]
+ [(currentbet6 == bblind) && (userchair != 6) && (f$OpenPPL_BigBlindChair != 6) ? 1 : 0]
+ [(currentbet7 == bblind) && (userchair != 7) && (f$OpenPPL_BigBlindChair != 7) ? 1 : 0]
+ [(currentbet8 == bblind) && (userchair != 8) && (f$OpenPPL_BigBlindChair != 8) ? 1 : 0]
+ [(currentbet9 == bblind) && (userchair != 9) && (f$OpenPPL_BigBlindChair != 9) ? 1 : 0]

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInBigBlind##
// If we are in big-blind, there *was* 1 opponent "blind-raising",
// but he does no longer get counted, as he either did fold,
// did call or did truely raise.
// In big blind nopponentsraising does somewhat unexpectedly
// call an open-limper as blind-raiser, so we have to adapt for that case.
// Besides of that have to care about potential antes.
(f$OpenPPL_NumberOfOpponentsLimpingPreflop >= 1) ? 
  [nopponentsraising - 1 - (f$OpenPPL_AntesPresent ? 1 : 0)] :
  [nopponentsraising - (f$OpenPPL_AntesPresent ? 1 : 0)]

##f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopNotInTheBlinds##
// There are (usually) 2 blindraisers which should not get countet
// And we also have to care about potential antes
[(nopponentsraising - 2) - (f$OpenPPL_AntesPresent ? 1 : 0)]

##f$OpenPPL_RaisesBeforeOurFirstAction##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0) ? 0 :
(betround > f$OpenPPL_ConstBetRoundPreflop) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPostflop :
(dealposition == 1) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInSmallBlind :
(dealposition == 2) ? f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopInBigBlind :
f$OpenPPL_RaisesBeforeOurFirstActionThisRoundPreflopNotInTheBlinds

##f$OpenPPL_RaisesSinceLastPlayOnOurSecondAction##
// If we checked the first time the bettor sits behind us.
[didchec && (nopponentsraising > 0) ] ? (nopponentsraising - 1) :
[didchec && (nopponentsraising == 0)] ? 0 :
// Otherwise: either we were the first bettor
// or there was a bet and maybe raises in front of us,
// so all technical "raises" behind us are true raises
nopponentsraising

##f$OpenPPL_RaisesSinceLastPlayAfterOurSecondAction##
// Now all technical raises are true raises, no bettors possible
nopponentsraising

##f$OpenPPL_RaisesSinceLastPlay##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0) ? f$OpenPPL_RaisesBeforeOurFirstAction :
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 1) ? f$OpenPPL_RaisesSinceLastPlayOnOurSecondAction :
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks >= 2) ? f$OpenPPL_RaisesSinceLastPlayAfterOurSecondAction :
f$OpenPPL_ERROR_BotsActionsOnThisRound_Out_Of_Range

//*****************************************************************************
//
// OpenPPL - Betsizes and StackSizes - supporting technical functions
//
//*****************************************************************************

##f$OpenPPL_Chair0StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance0 + currentbet0) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair1StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance1 + currentbet1) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair2StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance2 + currentbet2) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair3StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance3 + currentbet3) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair4StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance4 + currentbet4) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair5StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance5 + currentbet5) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair6StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance6 + currentbet6) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair7StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance7 + currentbet7) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair8StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance8 + currentbet8) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_Chair9StartingStackSize##
// Amount in bets (big blinds for preflop)
(bet > 0) ? ((balance9 + currentbet9) / bet) :
f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_ButtonStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_ButtonChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_ButtonChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_ButtonChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_ButtonChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_ButtonChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_ButtonChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_ButtonChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_ButtonChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_ButtonChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_ButtonChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CutOffStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_CutOffChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_CutOffChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_CutOffChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_CutOffChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_CutOffChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_CutOffChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_CutOffChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_CutOffChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_CutOffChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_CutOffChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_CutOffChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition3StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition3Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition3Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition3Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition2StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition2Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition2Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition2Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MiddlePosition1StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_MiddlePosition1Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_MiddlePosition1Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_MiddlePosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition3StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition3Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition3Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition3Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition2StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition2Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition2Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition2Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_EarlyPosition1StartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_EarlyPosition1Chair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_EarlyPosition1Chair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_EarlyPosition1Chair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_BigBlindStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_BigBlindChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_BigBlindChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_BigBlindChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_BigBlindChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_BigBlindChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_BigBlindChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_BigBlindChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_BigBlindChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_BigBlindChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_BigBlindChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_SmallBlindStartingStackSize##
// Amount in bets (big blinds for preflop)
f$OpenPPL_SmallBlindChair == 0 ? f$OpenPPL_Chair0StartingStackSize :
f$OpenPPL_SmallBlindChair == 1 ? f$OpenPPL_Chair1StartingStackSize :
f$OpenPPL_SmallBlindChair == 2 ? f$OpenPPL_Chair2StartingStackSize :
f$OpenPPL_SmallBlindChair == 3 ? f$OpenPPL_Chair3StartingStackSize :
f$OpenPPL_SmallBlindChair == 4 ? f$OpenPPL_Chair4StartingStackSize :
f$OpenPPL_SmallBlindChair == 5 ? f$OpenPPL_Chair5StartingStackSize :
f$OpenPPL_SmallBlindChair == 6 ? f$OpenPPL_Chair6StartingStackSize :
f$OpenPPL_SmallBlindChair == 7 ? f$OpenPPL_Chair7StartingStackSize :
f$OpenPPL_SmallBlindChair == 8 ? f$OpenPPL_Chair8StartingStackSize :
f$OpenPPL_SmallBlindChair == 9 ? f$OpenPPL_Chair9StartingStackSize :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_BigBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(f$OpenPPL_BigBlindChair == 0) ? (currentbet0 / bet) :
(f$OpenPPL_BigBlindChair == 1) ? (currentbet1 / bet) :
(f$OpenPPL_BigBlindChair == 2) ? (currentbet2 / bet) :
(f$OpenPPL_BigBlindChair == 3) ? (currentbet3 / bet) :
(f$OpenPPL_BigBlindChair == 4) ? (currentbet4 / bet) :
(f$OpenPPL_BigBlindChair == 5) ? (currentbet5 / bet) :
(f$OpenPPL_BigBlindChair == 6) ? (currentbet6 / bet) :
(f$OpenPPL_BigBlindChair == 7) ? (currentbet7 / bet) :
(f$OpenPPL_BigBlindChair == 8) ? (currentbet8 / bet) :
(f$OpenPPL_BigBlindChair == 9) ? (currentbet9 / bet) :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_SmallBlindCurrentBet##
// Amount in bets (big blinds for preflop)
(bet <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(f$OpenPPL_SmallBlindChair == 0) ? (currentbet0 / bet) :
(f$OpenPPL_SmallBlindChair == 1) ? (currentbet1 / bet) :
(f$OpenPPL_SmallBlindChair == 2) ? (currentbet2 / bet) :
(f$OpenPPL_SmallBlindChair == 3) ? (currentbet3 / bet) :
(f$OpenPPL_SmallBlindChair == 4) ? (currentbet4 / bet) :
(f$OpenPPL_SmallBlindChair == 5) ? (currentbet5 / bet) :
(f$OpenPPL_SmallBlindChair == 6) ? (currentbet6 / bet) :
(f$OpenPPL_SmallBlindChair == 7) ? (currentbet7 / bet) :
(f$OpenPPL_SmallBlindChair == 8) ? (currentbet8 / bet) :
(f$OpenPPL_SmallBlindChair == 9) ? (currentbet9 / bet) :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStackSize

##f$OpenPPL_MaxStillToActStackSizeAfterButton##
f$OpenPPL_SmallBlindStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind

##f$OpenPPL_MaxStillToActStackSizeAfterCutOff##
f$OpenPPL_ButtonStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterButton ?
  f$OpenPPL_ButtonStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterButton

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterCutOff?
  f$OpenPPL_CutOffStartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterCutOff

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3

##f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3

##f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStackSize > f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStackSize : f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2

##f$OpenPPL_MinStillToActStackSizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStackSize

##f$OpenPPL_MinStillToActStackSizeAfterButton##
f$OpenPPL_SmallBlindStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterSmallBlind

##f$OpenPPL_MinStillToActStackSizeAfterCutOff##
f$OpenPPL_ButtonStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterButton ?
  f$OpenPPL_ButtonStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterButton

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterCutOff ?
  f$OpenPPL_CutOffStartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterCutOff

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3

##f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3

##f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStackSize < f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStackSize : f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2

##f$OpenPPL_InitMaxOpponentStackSize##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MaxOpponentStackSize_f$OpenPPL_MaxOpponentStackSizeCalculation : 
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_InitMinOpponentStackSize##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? me_st_MinOpponentStackSize_f$OpenPPL_MinOpponentStackSizeCalculation :
f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_MaxOpponentStackSizeCalculation##
(bblind <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
(balance_rank0 == balance) ? (balance_rank1 / bblind) : (balance_rank0 / bblind)

##f$OpenPPL_MinOpponentStackSizeCalculation##
(bblind <= 0) ? f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap :
[ 1 / bblind *
[ nplayersdealt == 10 ?
    (balance_rank9 == balance ? balance_rank8 : balance_rank9) :
  nplayersdealt == 9 ?
    (balance_rank8 == balance ? balance_rank7 : balance_rank8) :
  nplayersdealt == 8 ?
    (balance_rank7 == balance ? balance_rank6 : balance_rank7) :
  nplayersdealt == 7 ?
    (balance_rank6 == balance ? balance_rank5 : balance_rank6) :
  nplayersdealt == 6 ?
    (balance_rank5 == balance ? balance_rank4 : balance_rank5) :
  nplayersdealt == 5 ?
    (balance_rank4 == balance ? balance_rank3 : balance_rank4) :
  nplayersdealt == 4 ?
    (balance_rank3 == balance ? balance_rank2 : balance_rank3) :
  nplayersdealt == 3 ?
    (balance_rank2 == balance ? balance_rank1 : balance_rank2) :
  nplayersdealt == 2 ?
    (balance_rank1 == balance ? balance_rank0 : balance_rank1) :
f$OpenPPL_ERROR_No_Opponents_Detected__Check_Your_TableMap]]

##f$OpenPPL_OpponentsWithHigherStack##
// No need to tinker with memory symbols here,
// this logic is valid for all betting rounds.
  (((balance0 + currentbet0) > (balance + currentbet)) ? 1: 0)
+ (((balance1 + currentbet1) > (balance + currentbet)) ? 1: 0)
+ (((balance2 + currentbet2) > (balance + currentbet)) ? 1: 0)
+ (((balance3 + currentbet3) > (balance + currentbet)) ? 1: 0)
+ (((balance4 + currentbet4) > (balance + currentbet)) ? 1: 0)
+ (((balance5 + currentbet5) > (balance + currentbet)) ? 1: 0)
+ (((balance6 + currentbet6) > (balance + currentbet)) ? 1: 0)
+ (((balance7 + currentbet7) > (balance + currentbet)) ? 1: 0)
+ (((balance8 + currentbet8) > (balance + currentbet)) ? 1: 0)
+ (((balance9 + currentbet9) > (balance + currentbet)) ? 1: 0)

##f$OpenPPL_CalculateStartingStackSize##
// Precondition: first hand, preflop
(bblind > 0) ? ((currentbet + balance) / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_InitStartingStackSize##
((handsplayed == 0 || f$OpenPPL_StartingStackSize == 0) && (betround == f$OpenPPL_ConstBetRoundPreflop)) ?
  me_st_MemStartingStackSize_f$OpenPPL_CalculateStartingStackSize : f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_StartingStackSize##
me_re_MemStartingStackSize

//*****************************************************************************
//
// OpenPPL - Betsizes and StackSizes
//
//*****************************************************************************

##f$OpenPPL_DollarsToCall##
(call <= balance) ? call : balance

##f$OpenPPL_AmountToCall##
(bblind > 0) ? (f$OpenPPL_DollarsToCall / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_BetSize##
ncallbets

##f$OpenPPL_BigBlindSize##
bet1

##f$OpenPPL_MaxOpponentStackSize##
me_re_MaxOpponentStackSize

##f$OpenPPL_MaxStillToActStackSize##
userchair == f$OpenPPL_BigBlindChair        ? -1 :
userchair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MaxStillToActStackSizeAfterSmallBlind      :
userchair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MaxStillToActStackSizeAfterButton          :
userchair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MaxStillToActStackSizeAfterCutOff          :
userchair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition3 :
userchair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition2 :
userchair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MaxStillToActStackSizeAfterMiddlePosition1 :
userchair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition3  :
userchair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition2  :
userchair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MaxStillToActStackSizeAfterEarlyPosition1  :
f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated

##f$OpenPPL_MinOpponentStackSize##
me_re_MinOpponentStackSize

##f$OpenPPL_MinStillToActStackSize##
userchair == f$OpenPPL_BigBlindChair        ? -1:
userchair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MinStillToActStackSizeAfterSmallBlind      :
userchair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MinStillToActStackSizeAfterButton          :
userchair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MinStillToActStackSizeAfterCutOff          :
userchair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition3 :
userchair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition2 :
userchair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MinStillToActStackSizeAfterMiddlePosition1 :
userchair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition3  :
userchair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition2  :
userchair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MinStillToActStackSizeAfterEarlyPosition1  :
f$OpenPPL_HINT_Something_Is_Wrong__It_Seems_You_Are_Not_Even_Seated

##f$OpenPPL_PotSize##
(bblind > 0) ? (pot / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_StackSize##
(bblind > 0) ? (balance / bblind) : f$OpenPPL_ERROR_Blinds_Not_Recognized_Correctly__Check_Your_TableMap

##f$OpenPPL_TotalInvested##
(betround == f$OpenPPL_ConstBetRoundPreflop && nbetsround  > 0) ? ncurrentbets :
(betround == f$OpenPPL_ConstBetRoundFlop    && nbetsround1 > 0) ? (nbetsround1 + ncurrentbets) :
(betround == f$OpenPPL_ConstBetRoundTurn    && nbetsround1 > 0) ? (nbetsround1 + nbetsround2 + ncurrentbets) :
(betround == f$OpenPPL_ConstBetRoundRiver   && nbetsround1 > 0) ? (nbetsround1 + nbetsround2 + nbetsround3 + ncurrentbets) :
f$OpenPPL_ERROR_Betround_Out_Of_Range

//*****************************************************************************
//
// OpenPPL - Board Symbols
//
//*****************************************************************************

##f$OpenPPL_2ndBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo   :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_AcePresentOnFlop##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardAce) || (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardAce) || (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardAce)

##f$OpenPPL_AcePresentOnTurn##
f$OpenPPL_AcePresentOnFlop || (f$OpenPPL_TurnCard == f$OpenPPL_ConstCardAce)

##f$OpenPPL_BestBoardCard##
rankhicommon

##f$OpenPPL_DoubleGutShotOnBoard##
((rankbitscommon >> 8) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 7) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 6) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 5) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 4) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 3) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 2) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 1) &0x7f) == 0x5d ? 1 : 0

##f$OpenPPL_ExactlyOneStraightPossibleOnFlop##
   [f$OpenPPL_StraightPossibleOnFlop && f$OpenPPL_AcePresentOnFlop && ((f$OpenPPL_LowestFlopCard >= 10) || (f$OpenPPL_TopFlopCard <= 5))]
|| [f$OpenPPL_StraightPossibleOnFlop && (f$OpenPPL_TopFlopCard - f$OpenPPL_LowestFlopCard == 4)]

##f$OpenPPL_FlopCardPairedonTurn##
   f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard
|| f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard
|| f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard

##f$OpenPPL_FlushPossible##
(nsuitedcommon >= 3)

##f$OpenPPL_FlushOnBoard##
($$cs0 == $$cs1 && $$cs0 == $$cs2 && $$cs0 == $$cs3 && $$cs0 == $$cs4)

##f$OpenPPL_FlushPossibleOnFlop##
($$cs0 == $$cs1 && $$cs0 == $$cs2)

##f$OpenPPL_FlushPossibleOnTurn##
[  ($$cs0 == $$cs1 && $$cs0 == $$cs2)
|| ($$cs0 == $$cs1 && $$cs0 == $$cs3)
|| ($$cs0 == $$cs2 && $$cs0 == $$cs3)
|| ($$cs1 == $$cs2 && $$cs1 == $$cs3) ]

##f$OpenPPL_FourCardsToWheelOnBoard##
`(rankbitscommon & 0b0000000000111110) >= 4

##f$OpenPPL_FourOf1SuiteOnTurn##
(($$cs0 == $$cs1) && ($$cs2 == $$cs3) && ($$cs0 == $$cs3))

##f$OpenPPL_FullHouseOnBoard##
(pokervalcommon & fullhouse)

##f$OpenPPL_HighestRankOnFlop##
[(f$OpenPPL_FirstFlopCard >= f$OpenPPL_SecondFlopCard) && (f$OpenPPL_FirstFlopCard >= f$OpenPPL_ThirdFlopCard)] ? f$OpenPPL_FirstFlopCard :
[(f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard) && (f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard)] ? f$OpenPPL_SecondFlopCard :
[(f$OpenPPL_ThirdFlopCard >= f$OpenPPL_FirstFlopCard) && (f$OpenPPL_ThirdFlopCard >= f$OpenPPL_SecondFlopCard)] ? f$OpenPPL_ThirdFlopCard :
-1

##f$OpenPPL_KingPresentOnFlop##
   (f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardKing)
|| (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardKing)
|| (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardKing)

##f$OpenPPL_LowCardsOnBoard##
`f$OpenPPL_RankBitsCommonLowCardsOnly

##f$OpenPPL_MoreThanOneStraightPossibleOnFlop##
f$OpenPPL_StraightPossibleOnFlop && !f$OpenPPL_ExactlyOneStraightPossibleOnFlop

##f$OpenPPL_MoreThanOneStraightPossibleOnRiver##
(betround == f$OpenPPL_ConstBetRoundRiver && (f$OpenPPL_NumberOfStraightsPossibleOnRiver == 1))

##f$OpenPPL_RankBitsCommonRiver##
// As this can only be called at the river it is identical to rankbiscommon
rankbitscommon

##f$OpenPPL_NumberOfStraightsPossibleOnTurn##
  (`((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_NumberOfStraightsPossibleOnRiver##
  (`((f$OpenPPL_RankBitsCommonRiver >> 10) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  9) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  8) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  7) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  6) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  5) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  4) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  3) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  2) & 0x1f) >= 3 ? 1 : 0)
+ (`((f$OpenPPL_RankBitsCommonRiver >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_MoreThanOneOneCardStraightPossible##
f$OpenPPL_DoubleGutShotOnBoard || f$OpenPPL_OpenEndedStraightDrawOnBoard

##f$OpenPPL_MoreThanOneStraightPossibleOnTurn##
(f$OpenPPL_NumberOfStraightsPossibleOnTurn > 1)

##f$OpenPPL_NumberOfOneCardStraightsPossibleOnTurn##
  (f$OpenPPL_OneCardStraightPossibleOnTurn_AceHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_KingHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_QueenHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_JackHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_TenHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_NineHigh  ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_EightHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_SevenHigh ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_SixHigh   ? 1 : 0)
+ (f$OpenPPL_OneCardStraightPossibleOnTurn_FiveHigh  ? 1 : 0)

##f$OpenPPL_OneCardFlushPossible##
(nsuitedcommon >= 4)

##f$OpenPPL_OneCardStraightFlushPossible##
(nstraightflushfillcommon <= 1)

##f$OpenPPL_StraightFlushOnBoard##
(nstraightflushfillcommon ==0)

##f$OpenPPL_OneCardStraightPossible##
(nstraightfillcommon <= 1)

##f$OpenPPL_OneCardStraightPossibleOnTurn_AceHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b111110000000000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_KingHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b011111000000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_QueenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b001111100000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_JackHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000111110000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_TenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000011111000000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_NineHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000001111100000) >= 4)  

##f$OpenPPL_OneCardStraightPossibleOnTurn_EightHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000111110000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_SevenHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000011111000) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_SixHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000001111100) >= 4)   

##f$OpenPPL_OneCardStraightPossibleOnTurn_FiveHigh##
(`(f$OpenPPL_RankBitsCommonTurn & 0b000000000111110) >= 4)

##f$OpenPPL_OneCardStraightPossibleOnTurn##
(f$OpenPPL_NumberOfOneCardStraightsPossibleOnTurn >= 1)

##f$OpenPPL_Only1OneCardStraightPossible##
f$OpenPPL_OneCardStraightPossible && !f$OpenPPL_MoreThanOneOneCardStraightPossible

##f$OpenPPL_OpenEndedStraightDrawOnBoard##
(nstraightcommon == 4 && (`((rankbitscommon >> 10) & 0x1f) < 4) && (`((rankbitscommon >> 1) & 0x1f) < 4)) ? 1 : 0

##f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop##
[(f$OpenPPL_TopFlopCard - f$OpenPPL_2ndTopFlopCard <= 3) && (f$OpenPPL_TopFlopCard != f$OpenPPL_ConstCardAce)]
|| [(f$OpenPPL_2ndTopFlopCard - f$OpenPPL_LowestFlopCard <= 3) && (f$OpenPPL_LowestFlopCard >= f$OpenPPL_ConstCardTwo)]

##f$OpenPPL_IndividualOverCardsOnBoard##
// Works like OvercardsOnBoard, except that it counts cards only once
`[rankbitscommon >> (rankhiplayer + 1)]

##f$OpenPPL_OvercardsOnBoard##
  ((f$OpenPPL_FirstFlopCard  > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_SecondFlopCard > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_ThirdFlopCard  > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_TurnCard       > rankhiplayer) ? 1 : 0)
+ ((f$OpenPPL_RiverCard      > rankhiplayer) ? 1 : 0)

##f$OpenPPL_PairOnBoard##
(nrankedcommon >= 2)

##f$OpenPPL_PairOnFlop##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard)

##f$OpenPPL_LowestFlopCard##
f$OpenPPL_FirstFlopCard  <= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  <=  f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_SecondFlopCard <= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard <=  f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_ThirdFlopCard  <= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  <=  f$OpenPPL_SecondFlopCard ? f$OpenPPL_ThirdFlopCard : 
-1

##f$OpenPPL_LowestFlopCardPairedOnTurn##
(f$OpenPPL_LowestFlopCard == f$OpenPPL_TurnCard) 

##f$OpenPPL_OnlyOneStraightPossible##
f$OpenPPL_StraightPossible
&& ![f$OpenPPL_MoreThanOneStraightPossibleOnFlop
  || f$OpenPPL_MoreThanOneStraightPossibleOnTurn
  || f$OpenPPL_MoreThanOneStraightPossibleOnRiver]

##f$OpenPPL_PairOnTurn##
   f$OpenPPL_PairOnFlop
|| f$OpenPPL_TopFlopCardPairedonTurn
|| f$OpenPPL_2ndTopFlopCardPairedOnTurn
|| f$OpenPPL_LowestFlopCardPairedOnTurn

##f$OpenPPL_QuadsOnBoard##
(nrankedcommon == 4)

##f$OpenPPL_QueenPresentOnFlop##
   (f$OpenPPL_FirstFlopCard==f$OpenPPL_ConstCardQueen)
|| (f$OpenPPL_SecondFlopCard==f$OpenPPL_ConstCardQueen)
|| (f$OpenPPL_ThirdFlopCard==f$OpenPPL_ConstCardQueen)

##f$OpenPPL_RankBitsCommonLowCardsOnly##
// Bits 8..ace(low), last bit is unused
(rankbitscommon & 0b111111110)

##f$OpenPPL_RiverCardisOvercardToBoard##
[  f$OpenPPL_RiverCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_ThirdFlopCard
&& f$OpenPPL_RiverCard > f$OpenPPL_TurnCard ]

##f$OpenPPL_2ndTopFlopCard##
f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_SecondFlopCard <= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_ThirdFlopCard  :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_FirstFlopCard  :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard  && f$OpenPPL_FirstFlopCard  <= f$OpenPPL_ThirdFlopCard  ? f$OpenPPL_ThirdFlopCard  :
f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  >= f$OpenPPL_SecondFlopCard ? f$OpenPPL_FirstFlopCard  :
f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_FirstFlopCard  && f$OpenPPL_ThirdFlopCard  >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard  <= f$OpenPPL_SecondFlopCard ? f$OpenPPL_SecondFlopCard :
// Otherwise: there is no 2ndTopFlopCard, because all ranks are even
-1

// Shanky is a bit inconsistent with the naming
// So we provide both 2ndTopFlopCardPairedOnRiver and SecondTopFlopCardPairedOnRiver,
// same for turn. "SecondTopFlopCardPairedOnRiver" is the "standard" here.

##f$OpenPPL_SecondTopFlopCardPairedOnRiver##
f$OpenPPL_2ndTopFlopCardPairedOnRiver

##f$OpenPPL_SecondTopFlopCardPairedOnTurn##
f$OpenPPL_2ndTopFlopCardPairedOnTurn

##f$OpenPPL_2ndTopFlopCardPairedOnRiver##
(f$OpenPPL_2ndTopFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_2ndTopFlopCardPairedOnTurn##
(f$OpenPPL_2ndTopFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_srankbitshero##
 (($$ps0==tsuit ? (f$OpenPPL_RankOfFirstHoleCard!=f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_RankOfFirstHoleCard : 0b100000000000010) : 0)
| ($$ps1==tsuit ? (f$OpenPPL_RankOfSecondHoleCard!=f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_RankOfSecondHoleCard : 0b100000000000010) : 0))

##f$OpenPPL_srankavailable##
// Available suited cards for other players,
// possibly contributing to a flush or straight flush
~(srankbitscommon | f$OpenPPL_srankbitshero)

##f$OpenPPL_StraightFlushPossibleByOthers##
(nstraightflushfillcommon <= 2)

##f$OpenPPL_SuitsOnBoard##
(betround == f$OpenPPL_ConstBetRoundFlop)  ? f$OpenPPL_SuitsOnFlop :
(betround == f$OpenPPL_ConstBetRoundTurn)  ? f$OpenPPL_SuitsOnTurn :
(betround == f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_SuitsOnRiver :
f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round

##f$OpenPPL_SuitsOnFlop##
(betround < f$OpenPPL_ConstBetRoundFlop) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ ($$cs0 == $$cs1 && $$cs1 == $$cs2) ? 1 :
 (($$cs0 == $$cs1 && $$cs1 != $$cs2) || ($$cs0 == $$cs2 && $$cs0 != $$cs1) || ($$cs0 != $$cs1 && $$cs1 == $$cs2)) ? 2 :
  ($$cs0 != $$cs1 && $$cs1 != $$cs2 && $$cs0 != $$cs2) ? 3 : f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY]

##f$OpenPPL_SuitsOnRiver##
(betround < f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ f$OpenPPL_SuitsOnTurn
  + ((($$cs4 != $$cs0) && ($$cs4 != $$cs1) && ($$cs4 != $$cs2) && ($$cs4 != $$cs3)) ? 1 : 0)]
  

##f$OpenPPL_SuitsOnTurn##
(betround < f$OpenPPL_ConstBetRoundTurn) ? f$OpenPPL_HINT_SuitsOnBoard_Undefined_For_This_Betting_Round : 
[ f$OpenPPL_SuitsOnFlop 
  + ((($$cs3 != $$cs0) && ($$cs3 != $$cs1) && ($$cs3 != $$cs2)) ? 1 : 0)]
  

##f$OpenPPL_StraightFlushPossible##
`((srankbitscommon >> 10) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 9) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 8) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 7) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 6) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 5) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 4) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 3) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 2) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 1) & 0x1f) >= 3 ? 1 : 0

##f$OpenPPL_StraightOnBoard##
(nstraightcommon >= 5)

##f$OpenPPL_StraightPossible##
(nstraightfillcommon <= 2)

##f$OpenPPL_RankBitsCommOnFlop##
  (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_FirstFlopCard : 0b100000000000010)
| (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_SecondFlopCard : 0b100000000000010)
| (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_ThirdFlopCard : 0b100000000000010)

##f$OpenPPL_RankBitsCommonTurn##
  (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_FirstFlopCard : 0b100000000000010)
| (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_SecondFlopCard : 0b100000000000010)
| (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_ThirdFlopCard : 0b100000000000010)
| (f$OpenPPL_TurnCard != f$OpenPPL_ConstCardAce ? 2**f$OpenPPL_TurnCard : 0b100000000000010)

##f$OpenPPL_StraightPossibleOnFlop##
`(((f$OpenPPL_RankBitsCommOnFlop >> 10) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  9) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  8) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  7) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  6) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  5) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  4) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  3) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  2) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_StraightPossibleOnTurn##
`(((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_ThreeCardStraightOnBoard##
nstraightcommon >= 3

##f$OpenPPL_TopFlopCard##
f$OpenPPL_FirstFlopCard >= f$OpenPPL_SecondFlopCard && f$OpenPPL_FirstFlopCard >= f$OpenPPL_ThirdFlopCard ? f$OpenPPL_FirstFlopCard :
f$OpenPPL_SecondFlopCard >= f$OpenPPL_FirstFlopCard && f$OpenPPL_SecondFlopCard >= f$OpenPPL_ThirdFlopCard ? f$OpenPPL_SecondFlopCard :
f$OpenPPL_ThirdFlopCard >= f$OpenPPL_FirstFlopCard && f$OpenPPL_ThirdFlopCard >= f$OpenPPL_SecondFlopCard ? f$OpenPPL_ThirdFlopCard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_TopFlopCardPairedonRiver##
(f$OpenPPL_TopFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_TopFlopCardPairedonTurn##
(f$OpenPPL_TopFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_TripsOnBoard##
(nrankedcommon >= 3)

##f$OpenPPL_TripsOnBoardOnTurn##
   (f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard && f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard)
|| (f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard && f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard)
|| (f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard && f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard)
|| (f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard && f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_TurnCardisOvercardToBoard##
[  f$OpenPPL_TurnCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_TurnCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_TurnCard > f$OpenPPL_ThirdFlopCard ]

##f$OpenPPL_TurnCardPaired##
(f$OpenPPL_TurnCard == f$OpenPPL_RiverCard)

##f$OpenPPL_TwoOfOneSuitPresentOnFlop##
(($$cs0 == $$cs1) || ($$cs0 == $$cs2) || ($$cs1 == $$cs2))

##f$OpenPPL_TwoPairOnBoard##
(pokervalcommon & twopair) || (pokervalcommon & fullhouse)

##f$OpenPPL_UncoordinatedFlop##
!f$OpenPPL_PairOnFlop
// No possible flush: guaranteed by the next condition...
// three different suits
&& (f$OpenPPL_SuitsOnFlop == 3)
&& !f$OpenPPL_StraightPossibleOnFlop
&& !f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop

##f$OpenPPL_WheelPossible##
(`(rankbitscommon & 0b111110) >= 3)

//*****************************************************************************
//
// OpenPPL - Hand(Strength) Symbols
//
//*****************************************************************************

##f$OpenPPL_HadOverPairOnFlop##
[  ispair
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_FirstFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_SecondFlopCard
&& f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_ThirdFlopCard ]

##f$OpenPPL_HadPairOnFlop##
   ispair 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard  == f$OpenPPL_ThirdFlopCard  
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard  
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_ThirdFlopCard

##f$OpenPPL_HadPairOnTurn##
   f$OpenPPL_HadPairOnFlop 
|| f$OpenPPL_FlopCardPairedonTurn 
|| f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_TurnCard

##f$OpenPPL_HadTopPairOnFlop##
[(f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_HighestRankOnFlop) || (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_HighestRankOnFlop)]

##f$OpenPPL_HighestRankOnTurn##
((f$OpenPPL_TurnCard > f$OpenPPL_HighestRankOnFlop) ? f$OpenPPL_TurnCard : f$OpenPPL_HighestRankOnFlop)

##f$OpenPPL_HadTopPairOnTurn##
[ f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_HighestRankOnTurn || f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_HighestRankOnTurn ]

##f$OpenPPL_HadTwoPairOnFlop##
   (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_ThirdFlopCard)
&& (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_ThirdFlopCard)
&& !ispair

##f$OpenPPL_Have2ndBestKicker##
(mh_kickerbetter == 1)

##f$OpenPPL_Have2ndBestKickerOrBetter##
f$OpenPPL_Have2ndBestKicker || f$OpenPPL_HaveBestKickerOrBetter

##f$OpenPPL_Have2ndBestOverPair##
   ($KK
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardKing
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardKing)

##f$OpenPPL_Have2ndBestOverPairOrBetter##
(f$OpenPPL_Have2ndBestOverPair || f$OpenPPL_HaveBestOverPairOrBetter)

##f$OpenPPL_Have2ndNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)]

##f$OpenPPL_Have2ndNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsAceHigh##
`(rankbitscommon & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing  :
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsKingHigh##
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsQueenHigh##
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsJackHigh##
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsTenHigh##
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsNineHigh##
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsEightHigh##
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSevenHigh##
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix  :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSixHigh##
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOfBestPossibleStraight##
`(rankbitscommon & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce   :
`(rankbitscommon & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing  :
`(rankbitscommon & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(rankbitscommon & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack  :
`(rankbitscommon & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen   :
`(rankbitscommon & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine  :
`(rankbitscommon & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(rankbitscommon & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(rankbitscommon & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix   :
`(rankbitscommon & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive  :
-1

##f$OpenPPL_HighCardOf2ndBestPossibleStraight##
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardAce)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsAceHigh   :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardKing)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsKingHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardQueen) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsQueenHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardJack)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsJackHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardTen)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsTenHigh   :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardNine)  ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsNineHigh  :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardEight) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsEightHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardSeven) ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSevenHigh :
(f$OpenPPL_HighCardOfBestPossibleStraight == f$OpenPPL_ConstCardSix)   ? f$OpenPPL_HighCardOf2ndBestPossibleStraightIfBestStraightIsSixHigh   :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_HighCardOfOurStraight##
// Precondition: we have a straight
`(rankbits & 0b111110000000000) == 5 ? f$OpenPPL_ConstCardAce   :
`(rankbits & 0b011111000000000) == 5 ? f$OpenPPL_ConstCardKing  :
`(rankbits & 0b001111100000000) == 5 ? f$OpenPPL_ConstCardQueen :
`(rankbits & 0b000111110000000) == 5 ? f$OpenPPL_ConstCardJack  :
`(rankbits & 0b000011111000000) == 5 ? f$OpenPPL_ConstCardTen   :
`(rankbits & 0b000001111100000) == 5 ? f$OpenPPL_ConstCardNine  :
`(rankbits & 0b000000111110000) == 5 ? f$OpenPPL_ConstCardEight :
`(rankbits & 0b000000011111000) == 5 ? f$OpenPPL_ConstCardSeven :
`(rankbits & 0b000000001111100) == 5 ? f$OpenPPL_ConstCardSix   :
`(rankbits & 0b000000000111110) == 5 ? f$OpenPPL_ConstCardFive  :
f$OpenPPL_ERROR_We_Dont_Have_Any_Straight__Do_Not_Call_This_Function

##f$OpenPPL_Have2ndNutStraight##
f$OpenPPL_HaveStraight
&& (f$OpenPPL_HighCardOf2ndBestPossibleStraight == f$OpenPPL_HighCardOfOurStraight)

##f$OpenPPL_Have2ndOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_BestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_Have2ndTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_Have2ndTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_TopBitOfRankBitsCommon##
(1 << rankhicommon)

##f$OpenPPL_2ndTopBitOfRankBitsCommon##
(1 << f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_3rdTopBitOfRankBitsCommon##
(1 << f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_4thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_5thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_RankBitsCommonWithoutTopBit##
rankbitscommon & ~f$OpenPPL_TopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopTwoBits##
f$OpenPPL_RankBitsCommonWithoutTopBit & ~f$OpenPPL_2ndTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopThreeBits##
f$OpenPPL_RankBitsCommonWithoutTopTwoBits & ~f$OpenPPL_3rdTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopFourBits##
f$OpenPPL_RankBitsCommonWithoutTopThreeBits & ~f$OpenPPL_4thTopBitOfRankBitsCommon

##f$OpenPPL_Have3rdBestKicker##
(mh_kickerbetter == 2)

##f$OpenPPL_Have3rdBestKickerOrBetter##
f$OpenPPL_Have3rdBestKicker || f$OpenPPL_Have2ndBestKickerOrBetter

##f$OpenPPL_Have3rdBestOverPair##
   $QQ
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardQueen
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardQueen

##f$OpenPPL_3rdBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have3rdBestOverPairOrBetter##
(f$OpenPPL_Have3rdBestOverPair ||  f$OpenPPL_Have2ndBestOverPairOrBetter)

##f$OpenPPL_Have3rdNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)]

##f$OpenPPL_Have3rdNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_Have3rdOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_2ndBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_Have3rdTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_3rdBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_Have3rdTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_Have4thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)]

##f$OpenPPL_Have4thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)

##f$OpenPPL_4thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have4thOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_3rdBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_Have4thTopPair##
f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_4thBestBoardCard || f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_Have4thTopSet##
ispair && f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_Have5thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)]

##f$OpenPPL_Have5thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)

##f$OpenPPL_5thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have5thOverPair##
ispair && (f$OpenPPL_RankOfFirstHoleCard < f$OpenPPL_4thBestBoardCard) && (f$OpenPPL_RankOfFirstHoleCard > f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_HaveAnyKindOfInsideStraightDraw##
// Note: This does also count straightdraws at the board,
// where we don't contribute any card. Special care should be taken
// in f$OpenPPL_HaveInsideStraightDraw
(nstraightfill <= 1)

##f$OpenPPL_HaveBackdoorFlushDrawContributingTwoCards##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& ($$ps0 == tsuit)
&& ($$ps1 == tsuit)

##f$OpenPPL_HaveBackdoorNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveBackDoor2ndNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HaveBackDoor3rdNutFlushDraw##
   (betround == f$OpenPPL_ConstBetRoundFlop)
&& (nsuited >= 3)
&& (nsuited > nsuitedcommon) 
&& (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_HaveBackdoorFlushDraw##
   f$OpenPPL_HaveBackdoorFlushDrawContributingTwoCards
|| f$OpenPPL_HaveBackdoorNutFlushDraw
|| f$OpenPPL_HaveBackDoor2ndNutFlushDraw

##f$OpenPPL_HaveBestKicker##
(mh_kickerbetter == 0)

##f$OpenPPL_HaveBestKickerOrBetter##
(f$OpenPPL_HaveBestKicker || f$OpenPPL_HavePair  || f$OpenPPL_HaveOverPairOrBetter)

##f$OpenPPL_HaveBestOverPair##
   ($AA
&& f$OpenPPL_FirstFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_SecondFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_ThirdFlopCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_TurnCard < f$OpenPPL_ConstCardAce
&& f$OpenPPL_RiverCard < f$OpenPPL_ConstCardAce)

##f$OpenPPL_HaveBestOverPairOrBetter##
  (f$OpenPPL_HaveBestOverPair
|| f$OpenPPL_HaveTwoPair
|| f$OpenPPL_HaveSet
|| f$OpenPPL_HaveTrips
|| f$OpenPPL_HaveStraight
|| f$OpenPPL_HaveFlush
|| f$OpenPPL_HaveFullHouse
|| f$OpenPPL_HaveQuads
|| f$OpenPPL_HaveStraightFlush)

##f$OpenPPL_LowestBitOfRankBitsCommon##
(1<<ranklocommon)

##f$OpenPPL_RankBitsCommonWithoutLowestBit##
// we negate lowest-bit and then do an and-operation
rankbitscommon & ~f$OpenPPL_LowestBitOfRankBitsCommon

##f$OpenPPL_LowestBoardCard##
ranklocommon

##f$OpenPPL_2ndLowestBoardCard##
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000000100) != 1 ? f$OpenPPL_ConstCardTwo   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000001000) != 1 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000010000) != 1 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000100000) != 1 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000001000000) != 1 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000010000000) != 1 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000100000000) != 1 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000001000000000) != 1 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000010000000000) != 1 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000100000000000) != 1 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b001000000000000) != 1 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b010000000000000) != 1 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b100000000000000) != 1 ? f$OpenPPL_ConstCardAce   :
-1

##f$OpenPPL_HaveBottomPair##
[ isonepair && (rankhiplayer == ranklocommon || rankloplayer == ranklocommon) ]

##f$OpenPPL_HaveBottomSet##
((nrankedcommon == 1) && ispair && isthreeofakind && (rankhiplayer == ranklocommon))

##f$OpenPPL_HaveBottomTrips##
($$pr0 == f$OpenPPL_RankOfBottomPairOnBoard || $$pr1 == f$OpenPPL_RankOfBottomPairOnBoard)

##f$OpenPPL_HaveBottomTwoPair##
   (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_LowestBoardCard && f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_2ndLowestBoardCard)
|| (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_2ndLowestBoardCard && f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_LowestBoardCard)

##f$OpenPPL_HaveDoubleGutshotDraw##
   `((rankbits >> 1) & 0b1011101) == 5  // A_345_7
|| `((rankbits >> 2) & 0b1011101) == 5  // 2_456_8
|| `((rankbits >> 3) & 0b1011101) == 5  // 3_567_9
|| `((rankbits >> 4) & 0b1011101) == 5  // 4_678_T
|| `((rankbits >> 5) & 0b1011101) == 5  // 5_789_J
|| `((rankbits >> 6) & 0b1011101) == 5  // 6_89T_Q
|| `((rankbits >> 7) & 0b1011101) == 5  // 8_9TJ_K
|| `((rankbits >> 8) & 0b1011101) == 5  // 9_TJQ_A
|| `((rankbits >> 1) & 0b11011011) == 6 // A2_45_78
|| `((rankbits >> 2) & 0b11011011) == 6 // 23_56_89
|| `((rankbits >> 3) & 0b11011011) == 6 // 34_67_9T
|| `((rankbits >> 4) & 0b11011011) == 6 // 45_78_TJ
|| `((rankbits >> 5) & 0b11011011) == 6 // 56_89_JQ
|| `((rankbits >> 6) & 0b11011011) == 6 // 67_9T_QK
|| `((rankbits >> 7) & 0b11011011) == 6 // 78_TJ_KA

##f$OpenPPL_HaveFlush##
(nsuited >= 5)

##f$OpenPPL_HaveFlushDraw##
(nsuited >= 4)

##f$OpenPPL_HaveFullHouse##
isfullhouse || f$OpenPPL_HaveQuads

##f$OpenPPL_HaveNothing##
!f$OpenPPL_HavePair && !(f$OpenPPL_Overcards == 2) && !f$OpenPPL_HaveBestOverPairOrBetter
&& !f$OpenPPL_HaveBackdoorFlushDraw
// && !f$OpenPPL_HaveBackdoorStraightDraw

##f$OpenPPL_HaveNutFlush##
    f$OpenPPL_HaveNutStraightFlush
|| [f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]

##f$OpenPPL_HaveNutFlushCard##
(f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveNutFlushDraw##
    f$OpenPPL_HaveNutStraightFlush
|| [f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]

##f$OpenPPL_HaveNutStraight##
[ishistraight || f$OpenPPL_HaveNutStraightFlush]

##f$OpenPPL_RankBitsCommonWithAdditionalAce##
rankbitscommon | 0b100000000000010

##f$OpenPPL_RankBitsCommonWithAdditionalKing##
rankbitscommon | 0b010000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalQueen##
rankbitscommon | 0b001000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalJack##
rankbitscommon | 0b000100000000000

##f$OpenPPL_RankBitsCommonWithAdditionalTen##
rankbitscommon | 0b000010000000000

##f$OpenPPL_RankBitsCommonWithAdditionalNine##
rankbitscommon | 0b000001000000000

##f$OpenPPL_RankBitsCommonWithAdditionalEight##
rankbitscommon | 0b000000100000000

##f$OpenPPL_RankBitsCommonWithAdditionalSeven##
rankbitscommon | 0b000000010000000

##f$OpenPPL_RankBitsCommonWithAdditionalSix##
rankbitscommon | 0b000000001000000

##f$OpenPPL_RankBitsCommonWithAdditionalFive##
rankbitscommon | 0b000000000100000

##f$OpenPPL_RankBitsCommonWithAdditionalFour##
rankbitscommon | 0b000000000010000

##f$OpenPPL_RankBitsCommonWithAdditionalThree##
rankbitscommon | 0b000000000001000

##f$OpenPPL_RankBitsCommonWithAdditionalTwo##
rankbitscommon | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
`(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard##
`(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_RankBitsWithAdditionalAce##
rankbits | 0b100000000000010

##f$OpenPPL_RankBitsWithAdditionalKing##
rankbits | 0b010000000000000

##f$OpenPPL_RankBitsWithAdditionalQueen##
rankbits | 0b001000000000000

##f$OpenPPL_RankBitsWithAdditionalJack##
rankbits | 0b000100000000000

##f$OpenPPL_RankBitsWithAdditionalTen##
rankbits | 0b000010000000000

##f$OpenPPL_RankBitsWithAdditionalNine##
rankbits | 0b000001000000000

##f$OpenPPL_RankBitsWithAdditionalEight##
rankbits | 0b000000100000000

##f$OpenPPL_RankBitsWithAdditionalSeven##
rankbits | 0b000000010000000

##f$OpenPPL_RankBitsWithAdditionalSix##
rankbits | 0b000000001000000

##f$OpenPPL_RankBitsWithAdditionalFive##
rankbits | 0b000000000100000

##f$OpenPPL_RankBitsWithAdditionalFour##
rankbits | 0b000000000010000

##f$OpenPPL_RankBitsWithAdditionalThree##
rankbits | 0b000000000001000

##f$OpenPPL_RankBitsWithAdditionalTwo##
rankbits | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalAce & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
`(f$OpenPPL_RankBitsWithAdditionalAce & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalKing & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalKing & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalQueen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalJack & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalTen & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalNine & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalEight & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard##
`(f$OpenPPL_RankBitsWithAdditionalTwo & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
`(f$OpenPPL_RankBitsWithAdditionalTwo & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
f$OpenPPL_HINT_Such_A_Straight_Does_Not_Exist

##f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard)

##f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight##
  f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard

##f$OpenPPL_HaveNutStraightDraw##
(nsuitedcommon < 2) && (f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight >= 2)

##f$OpenPPL_HaveInsideNutStraightDraw##
(f$OpenPPL_NumberOfCardranksThatGiveUsTheBestPossibleStraight >= 1)

##f$OpenPPL_HaveInsideStraightDraw##
f$OpenPPL_HaveAnyKindOfInsideStraightDraw

##f$OpenPPL_HaveNuts##
(nhandshi == 0)

##f$OpenPPL_HaveNutStraightFlush##
isstraightflush && (nhandshi == 0)

##f$OpenPPL_HaveOpenEndedStraightDraw##
f$OpenPPL_HaveStraight
|| ((rankbits >> 0) & 0b111100) == 0b111100 // 5432
|| ((rankbits >> 1) & 0b111100) == 0b111100 // 6543
|| ((rankbits >> 2) & 0b111100) == 0b111100 // 7654
|| ((rankbits >> 3) & 0b111100) == 0b111100 // 8765
|| ((rankbits >> 4) & 0b111100) == 0b111100 // 9876
|| ((rankbits >> 5) & 0b111100) == 0b111100 // T987
|| ((rankbits >> 6) & 0b111100) == 0b111100 // JT98
|| ((rankbits >> 7) & 0b111100) == 0b111100 // QJT9
|| ((rankbits >> 8) & 0b111100) == 0b111100 // KQJT

##f$OpenPPL_HaveQuads##
[ isfourofakind && (nrankedcommon < 4) ]

##f$OpenPPL_HaveOverPair##
ispair && (rankhiplayer > rankhicommon)

##f$OpenPPL_HaveOverPairOrBetter##
f$OpenPPL_HaveOverPair || f$OpenPPL_HaveBestOverPairOrBetter

##f$OpenPPL_HavePair##
[  f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_RankOfSecondHoleCard
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_ThirdFlopCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfFirstHoleCard==f$OpenPPL_RiverCard
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_FirstFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_SecondFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_ThirdFlopCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_TurnCard 
|| f$OpenPPL_RankOfSecondHoleCard==f$OpenPPL_RiverCard ]

##f$OpenPPL_HavePocketPair##
ispair

##f$OpenPPL_HaveSet##
[  ispair
&& (  (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_FirstFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_SecondFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_ThirdFlopCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_TurnCard) 
   || (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_RiverCard)) ]

##f$OpenPPL_HaveTopTrips##
(!ispair && ($$pr0 == f$OpenPPL_RankOfTopPairOnBoard || $$pr1 == f$OpenPPL_RankOfTopPairOnBoard))

##f$OpenPPL_HaveTrips##
!ispair
&&   [(pokerval & threeofakind) && !(pokervalcommon & threeofakind)
  || ((pokerval & fullhouse)    && `(pcbits & 0b11100) == 1)
  ||  (pokerval & fourofakind)  && !(pokervalcommon & fourofakind)]

##f$OpenPPL_HaveStraight##
(nstraightfill == 0)

##f$OpenPPL_HaveStraightDraw##
   f$OpenPPL_HaveOpenEndedStraightDraw 
|| f$OpenPPL_HaveDoubleGutshotDraw

##f$OpenPPL_HaveStraightFlush##
(isstraightflush || isroyalflush)

##f$OpenPPL_CommonCard0Paired##
(f$OpenPPL_FirstFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard1Paired##
(f$OpenPPL_SecondFlopCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_SecondFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard2Paired##
(f$OpenPPL_ThirdFlopCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_TurnCard || f$OpenPPL_ThirdFlopCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard3Paired##
(f$OpenPPL_TurnCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_TurnCard == f$OpenPPL_RiverCard)

##f$OpenPPL_CommonCard4Paired##
(f$OpenPPL_RiverCard == f$OpenPPL_FirstFlopCard || f$OpenPPL_RiverCard == f$OpenPPL_SecondFlopCard || f$OpenPPL_RiverCard == f$OpenPPL_ThirdFlopCard || f$OpenPPL_FirstFlopCard == f$OpenPPL_TurnCard)

##f$OpenPPL_RankBitsCommonWithoutCommonRank0Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_FirstFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_FirstFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank1Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_SecondFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_SecondFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank2Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_ThirdFlopCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_ThirdFlopCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank3Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_TurnCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_TurnCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutCommonRank4Pair##
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_RiverCard != f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~2**f$OpenPPL_FirstFlopCard) :
[f$OpenPPL_CommonCard0Paired && (f$OpenPPL_RiverCard == f$OpenPPL_ConstCardAce)] ? rankbitscommon & (~0b100000000000010) :
rankbitscommon

##f$OpenPPL_RankBitsCommonWithoutPairs##
  f$OpenPPL_RankBitsCommonWithoutCommonRank0Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank1Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank2Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank3Pair
& f$OpenPPL_RankBitsCommonWithoutCommonRank4Pair

##f$OpenPPL_HighestUnpairedBoardCard##
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardAce)   & 1 ? f$OpenPPL_ConstCardAce   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardKing)  & 1 ? f$OpenPPL_ConstCardKing  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardQueen) & 1 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardJack)  & 1 ? f$OpenPPL_ConstCardJack  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardTen)   & 1 ? f$OpenPPL_ConstCardTen   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardNine)  & 1 ? f$OpenPPL_ConstCardNine  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardEight) & 1 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardSeven) & 1 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardSix)   & 1 ? f$OpenPPL_ConstCardSix   :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardFive)  & 1 ? f$OpenPPL_ConstCardFive  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardFour)  & 1 ? f$OpenPPL_ConstCardFour  :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardThree) & 1 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutPairs >> f$OpenPPL_ConstCardTwo)   & 1 ? f$OpenPPL_ConstCardTwo   : 0

##f$OpenPPL_HaveTopNonBoardPairedPair##
   [(betround >= f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_RankOfFirstHoleCard == f$OpenPPL_HighestUnpairedBoardCard)]
|| [(betround >= f$OpenPPL_ConstBetRoundFlop) && (f$OpenPPL_RankOfSecondHoleCard == f$OpenPPL_HighestUnpairedBoardCard)]

##f$OpenPPL_HaveTopPair##
[ f$OpenPPL_RankOfFirstHoleCard==rankhicommon || f$OpenPPL_RankOfSecondHoleCard==rankhicommon ]

##f$OpenPPL_HaveTopSet##
(ispair && (rankhiplayer == rankhicommon))

##f$OpenPPL_HaveTopTwoPair##
(f$OpenPPL_HaveTopPair && f$OpenPPL_Have2ndTopPair)

##f$OpenPPL_RankbitsCommonWithoutAceLow##
// Don't count ace twice in HaveTwoPair
// bit0 is unused
// bit 2 is ace low
//                 AKQJT98765432-- 
rankbitscommon & 0b111111111111100

##f$OpenPPL_HaveTwoPair##
`(rankbitsplayer & f$OpenPPL_RankbitsCommonWithoutAceLow) == 2

##f$OpenPPL_HaveUnderPair##
[ ispair && rankhiplayer<ranklocommon ]

##f$OpenPPL_HaveUnderStraight##
f$OpenPPL_HaveStraight
&& (pcbits == 0b00011 || pcbits == 0b00001)

##f$OpenPPL_NumberOfUnknownSuitedOvercards##
// Suited unknown overcards to holecards,
// e.g. on Board Ah Th, in Hand Jh 9h => 2 suited overcards: Kh Qh.
`((~srankbits & 0x7fff) >> srankhiplayer)

##f$OpenPPL_BoardKicker_FourOfAKindOnBoard##
(betround == f$OpenPPL_ConstBetRoundRiver) ? f$OpenPPL_HighestUnpairedBoardCard : 2

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WeHaveOverPairToPair##
// 3 is the best strength possible, because two quads are always possible
3
// 1 OverPair for each overcard = 1 higher full house
+ (f$OpenPPL_ConstCardAce - rankhiplayer)
// Higher set possible with pair onboard?
+ [(f$OpenPPL_RankOfTopPairOnBoard > rankhiplayer) ? 1 : 0 ]
// If the cards on board are higher than our pair,
// we have to subtract them again, as otherwise we count them twice,
// as set/quads and OverPair.
+ [(f$OpenPPL_RankOfTopPairOnBoard > rankhiplayer) ? -1 : 0 ]
+ [(f$OpenPPL_RankOfSetOnBoard  > rankhiplayer) ? -1 : 0 ]

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePlayTheBoard##
// 3 is the best strength possible, because two quads are always possible
3
// 1 OverPair for each overcard = 1 higher full house
+ (f$OpenPPL_ConstCardAce - rankhiplayer)
// +1 if the pair is higher as the set (higher set possible)
// -1 if the pair is higher as the set (counted twice as OverPair / set)
// but these cases neutralize each other

##f$OpenPPL_RankOfPairOfFullHouse##
// The last 20 bits of pokerval look like XXXX XXXX XXXX YYYY YYYY (see docu)
// XXXX are the rank of the set
// YYYY are the rank of the pair
(pokerval & 0b1111)

##f$OpenPPL_RankOfSetOfFullHouse##
// The last 20 bits of pokerval look like XXXX XXXX XXXX YYYY YYYY (see docu)
// XXXX are the rank of the set
// YYYY are the rank of the pair
((pokerval >> 12) & 0b1111)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitThePairAndAnotherCard##
// 1 for each overcard on baord to RankOfTopPairOnBoard, which make better 3oaks possible = better FH
  [[(rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardAce  )] ? 1 : 0]
+ [[(rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardKing )] ? 1 : 0]
+ [[(rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardQueen)] ? 1 : 0]
+ [[(rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardJack )] ? 1 : 0]
+ [[(rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTen  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardNine )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardEight)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSeven)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSix  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFive )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFour )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardThree)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTwo  )] ? 1 : 0]
// 1 for each board-card that is not the pair on board and higher than the other pair (board-user),
// as there ar higher FHs possible (same set, higher pair)
+ [[(rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardAce  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardAce  )] ? 1 : 0]
+ [[(rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardKing ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardKing )] ? 1 : 0]
+ [[(rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardQueen) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardQueen)] ? 1 : 0]
+ [[(rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardJack ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardJack )] ? 1 : 0]
+ [[(rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardTen  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardTen  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardNine ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardNine )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardEight) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardEight)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardSeven) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardSeven)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardSix  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardSix  )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardFive ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardFive )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardFour ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardFour )] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardThree) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardThree)] ? 1 : 0]
+ [[(rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfPairOfFullHouse < f$OpenPPL_ConstCardTwo  ) && (f$OpenPPL_RankOfSetOfFullHouse != f$OpenPPL_ConstCardTwo  )] ? 1 : 0]
// + 1 for our hand
+ 1

##f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse##
  (rankbitscommon & 0x100000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardAce  )
+ (rankbitscommon & 0x010000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardKing )
+ (rankbitscommon & 0x001000000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardQueen)
+ (rankbitscommon & 0x000100000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardJack )
+ (rankbitscommon & 0x000010000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTen  )
+ (rankbitscommon & 0x000001000000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardNine )
+ (rankbitscommon & 0x000000100000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardEight)
+ (rankbitscommon & 0x000000010000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSeven)
+ (rankbitscommon & 0x000000001000000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardSix  )
+ (rankbitscommon & 0x000000000100000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFive )
+ (rankbitscommon & 0x000000000010000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardFour )
+ (rankbitscommon & 0x000000000001000) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardThree)
+ (rankbitscommon & 0x000000000000100) && (f$OpenPPL_RankOfSetOfFullHouse < f$OpenPPL_ConstCardTwo  )

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomSet##
// 3 is the lowest nut rank possible, becuase theres still a quad and a FH with the higher pair possible.
// Theres always a higher pair on board, so if there are two higher ranked cards in common cards,
// theres also a higher set possible with a pocket pair and the remaining single card on board.
3 + [(f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse >= 2) ? 1 : 0]

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopSet##
// 2 is the lowest nut rank possible, becuase theres still a quad possible.
// Theres might be a higher card on board, so if there is a higher ranked card in common cards then our set rank,
// theres also a higher set possible with a pocket pair and the remaining single card on board.
2 + [(f$OpenPPL_OvercardsOnBoardToRankOfSetOfFullHouse >= 1) ? 1 : 0]

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomQuads##
2

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopQuads##
1

##f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WePairBothPairs##
// Theres might be a higher card on board,
// so if there is a higher ranked card in common cards then our pair ranks,
// there are also a higher pair and a higher set possible.
1
+ [((pokervalcommon & 0b1111) > f$OpenPPL_RankOfPairOfFullHouse) ? 1 : 0]
+ [((pokervalcommon & 0b1111) > f$OpenPPL_RankOfSetOfFullHouse ) ? 1 : 0]

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairBothBoardCards##
1

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighSetOnBoard##
1

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowSetOnBoard##
2

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighPairOnBoard##
2

##f$OpenPPL_RankOfTopPairOnBoard##
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) ] ? f$OpenPPL_ConstCardAce :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) ] ? f$OpenPPL_ConstCardKing :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) ] ? f$OpenPPL_ConstCardQueen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) ] ? f$OpenPPL_ConstCardJack :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) ] ? f$OpenPPL_ConstCardTen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) ] ? f$OpenPPL_ConstCardNine :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) ] ? f$OpenPPL_ConstCardEight :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) ] ? f$OpenPPL_ConstCardSeven :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) ] ? f$OpenPPL_ConstCardSix :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) ] ? f$OpenPPL_ConstCardFive :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) ] ? f$OpenPPL_ConstCardFour :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) ] ? f$OpenPPL_ConstCardThree :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) ] ? f$OpenPPL_ConstCardTwo :
f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board

##f$OpenPPL_RankOfBottomPairOnBoard##
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_2 * f$PrimeCode_2) == 0)) ] ? f$OpenPPL_ConstCardTwo :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_3 * f$PrimeCode_3) == 0)) ] ? f$OpenPPL_ConstCardThree :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_4 * f$PrimeCode_4) == 0)) ] ? f$OpenPPL_ConstCardFour :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_5 * f$PrimeCode_5) == 0)) ] ? f$OpenPPL_ConstCardFive :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_6 * f$PrimeCode_6) == 0)) ] ? f$OpenPPL_ConstCardSix :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_7 * f$PrimeCode_7) == 0)) ] ? f$OpenPPL_ConstCardSeven :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_8 * f$PrimeCode_8) == 0)) ] ? f$OpenPPL_ConstCardEight :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_9 * f$PrimeCode_9) == 0)) ] ? f$OpenPPL_ConstCardNine :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_T * f$PrimeCode_T) == 0)) ] ? f$OpenPPL_ConstCardTen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_J * f$PrimeCode_J) == 0)) ] ? f$OpenPPL_ConstCardJack :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_Q * f$PrimeCode_Q) == 0)) ] ? f$OpenPPL_ConstCardQueen :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_K * f$PrimeCode_K) == 0)) ] ? f$OpenPPL_ConstCardKing :
[ ((f$prime_coded_board_ranks % (1 * f$PrimeCode_A * f$PrimeCode_A) == 0)) ] ? f$OpenPPL_ConstCardAce :
f$OpenPPL_HINT_There_Is_No_Pair_On_The_Board

##f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowPairOnBoard##
// One quads possible, so the bestcase is second nuts
2
// Bbecause the set does have a higher rank then our pair,
// with the rank of the set theres no OverPair possible,
// and therefore are only 11 OverPairs possible instead of 12 if we do have 22 pair,
// 10 if we have 33 pair, etc.
+ (13 - f$OpenPPL_RankOfBottomPairOnBoard)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitASetWithPocketPair##
// 2 is the lowest rank possible, because quads are still possible
2
// For each rank in the common cards above the rank in the pocket cards, theres a higher FH possible.
+  (rankbitscommon & 0b000000000001000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000000010000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000000100000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000001000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000010000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000000100000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000001000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000010000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b000100000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b001000000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b010000000000000 > rankbitsplayer ? 1 : 0)
+ (rankbitscommon & 0b100000000000000 > rankbitsplayer ? 1 : 0)
// If the Pair on board is higher than our pocket-pair it got already counted
- ((trankcommon > rankhiplayer) ? 1 : 0)

##f$OpenPPL_NFH4OAK_PairOnBoard_WeHitQuads##
// With a single pair on board and quads for us we have the current nuts
1

##f$OpenPPL_NutFullHouseOrFourOfAKind_FourOfAKindOnBoard##
// PreCondition: FourOfAKindOnBoard
//
// case 1: we play the board. e.g. 8888Q, we have J5
[rankhiplayer < f$OpenPPL_BoardKicker_FourOfAKindOnBoard] ?
[
	// case 1A: common kicker is higher then quads, e.g. 8888Q.
   (f$OpenPPL_BoardKicker_FourOfAKindOnBoard > trankcommon ) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
   // case 1B: common kicker is lower than quads
   (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
] :
// Otherwise: case 2: One of our cards is better then the nonpaired board card, e.g. 88885, we have J2
[
   // case 2A: Our kicker is better than quads, too (better than all board cards)
   (rankhiplayer > trankcommon) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
   // case 2B: Our kicker is worse than quads, e.g. 88885, we have 72
   (f$OpenPPL_ConstCardAce - rankhiplayer)
]

##f$OpenPPL_NutFullHouseOrFourOfAKind_FullHouseOnBoard##
// Precondition: FH on board
// There are 7 cases:
//
// 1) we pair both board-cards, so we have quads and nobody can have better quads
[(rankhiplayer == f$OpenPPL_BestBoardCard) && (rankloplayer == f$OpenPPL_2ndBestBoardCard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairBothBoardCards :
//
// 2) we pair the set on board, which is higher than the pair, so we get the best quads
[((rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer == f$OpenPPL_RankOfSetOnBoard)) && (f$OpenPPL_RankOfSetOnBoard > f$OpenPPL_2ndBestBoardCard)] ? 1: 1/*f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighSetOnBoard :
//
// 3) we pair the set on board, which is lower than the pair, so somebody could have better quads
[((rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer == f$OpenPPL_RankOfSetOnBoard)) && (f$OpenPPL_RankOfSetOnBoard < 2ndBestBoardCard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowSetOnBoard :
//
// 4) we pair the pair on board, which is higher than the set, so we get a better FH, but there are still quads possible
[(   (rankhiplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard) || (rankloplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)) && (f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard > f$OpenPPL_RankOfSetOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairHighPairOnBoard :
//
// 5) we pair the pair on board, which is lower than the set, so we play the board, but one kind of quads is no longer possible
[((rankhiplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard) || (rankloplayer == f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)) && (f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard < f$OpenPPL_RankOfSetOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePairLowPairOnBoard :
//
// 6) we don't pair anything, but have an OverPair to the pair on board (we probably have to distinguish, if it is higher than the set or lower)
[ispair && (rankhiplayer != f$OpenPPL_BestBoardCard) && (rankhiplayer != f$OpenPPL_2ndBestBoardCard) && (rankhiplayer > f$OpenPPL_RankOfPairOnBoardWithFullHouseOnBoard)] ? f$OpenPPL_NFH4OAK_FullHouseOnBoard_WeHaveOverPairToPair :
//
// 7) we don't have an OverPair to the pair and therefore play the board (probably again 2 cases)
f$OpenPPL_NFH4OAK_FullHouseOnBoard_WePlayTheBoard
*/

##f$OpenPPL_RankOfSetOnBoard##
// Precondition: set on board
trankcommon

##f$OpenPPL_RankOfSpareCardWhenTwoPairOnBoard##
f$OpenPPL_TwoPairOnBoard && !f$OpenPPL_FullHouseOnBoard ?
[    
			 ($$cr0!=f$OpenPPL_RankOfTopPairOnBoard && $$cr0!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr0:0)
			|($$cr1!=f$OpenPPL_RankOfTopPairOnBoard && $$cr1!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr1:0)
			|($$cr2!=f$OpenPPL_RankOfTopPairOnBoard && $$cr2!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr2:0)
			|($$cr3!=f$OpenPPL_RankOfTopPairOnBoard && $$cr3!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr3:0)
			|($$cr4!=f$OpenPPL_RankOfTopPairOnBoard && $$cr4!=f$OpenPPL_RankOfBottomPairOnBoard ? $$cr4:0)
]:
0

##f$OpenPPL_NutFullHouseOrFourOfAKind_ThreeOfAKindOnBoard##
// Case 1: we have the quads: the nuts
(rankhiplayer == f$OpenPPL_RankOfSetOnBoard) || (rankloplayer ==f$OpenPPL_RankOfSetOnBoard) ? 1 :
// Otherwise: we have a fullhouse with either a pocket-pair or pair a board-card.
// Case 2: Pocket-pair
ispair ?
[
    // Everybody who has a higher pocket pair or hits a higher board-card
    // or hits the set will get a better hand
    (f$OpenPPL_RankOfSetOnBoard > rankhiplayer) ? (f$OpenPPL_ConstCardAce - rankhiplayer + 1) :
    // Otherwise: set is lower, so there is 1 additional card, that loses for us
    (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
] :
// Case 3: We pair the board
[
    // Same logic applies as above:
    // Case 3A: Our higher card hits the board
    (rankhiplayer == f$OpenPPL_BestBoardCard) || (rankhiplayer == f$OpenPPL_2ndBestBoardCard) || (rankhiplayer == f$OpenPPL_3rdBestBoardCard) ?
    [
        (f$OpenPPL_RankOfSetOnBoard > rankhiplayer) ? (f$OpenPPL_ConstCardAce - rankhiplayer) :
        // Otherwise: set is lower, so there is 1 additional card, that loses for us
        (f$OpenPPL_ConstCardAce - rankhiplayer + 1)
    ] :
    [
        // Otherwise rankloplayer paired:
        (f$OpenPPL_RankOfSetOnBoard > rankloplayer) ? (f$OpenPPL_ConstCardAce - rankloplayer) :
        // Otherwise: set is lower, so there is 1 additional card, that loses for us
        (f$OpenPPL_ConstCardAce - rankloplayer + 1)
    ]
]

##f$OpenPPL_NutFullHouseOrFourOfAKind_TwoPairsOnBoard##
// 5 basic cases
//
// 1) we complete the higher pair to quads
[ispair && rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopQuads :
//
// 2) we complete the lower pair to quads
[ispair && rankhiplayer == f$OpenPPL_RankOfBottomPairOnBoard] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomQuads :
//
// 3) we pair both pairs: no quads possible, but:
//   * maybe 1 higher FH, if anybody pairs the higher pair and the last board-card, if it is higher than the low pair
//   * maybe 2 higher FHs, as above, if anybody pairs the completes the left board-card to higher trips
[(rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard) && (rankloplayer == f$OpenPPL_RankOfBottomPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WePairBothPairs :
//
// 4) we pair the higher board-card; probably several cases
[(rankhiplayer == f$OpenPPL_RankOfTopPairOnBoard) || (rankloplayer == f$OpenPPL_RankOfTopPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitTopSet :
//
// 5) we pair the lower board card; probably several cases
[(rankhiplayer == f$OpenPPL_RankOfBottomPairOnBoard) || (rankloplayer == f$OpenPPL_RankOfBottomPairOnBoard)] ? f$OpenPPL_NFH4OAK_TwoPairsOnBoard_WeHitBottomSet :
//
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_NutFullHouseOrFourOfAKind_PairOnBoard##
// Precondition: we have FH or quads, there is a pair on board.
[ispair && (rankhiplayer == trankcommon)] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitQuads :
[ispair && (pokerval & fullhouse)] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitASetWithPocketPair :
[pokerval & fullhouse] ? f$OpenPPL_NFH4OAK_PairOnBoard_WeHitThePairAndAnotherCard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_NutFullHouseOrFourOfAKind##
[(pokerval & (fullhouse | fourofakind)) == 0] ? f$OpenPPL_HINT_We_Dont_Have_A_FullHouse_At_All : 
f$OpenPPL_QuadsOnBoard     ? f$OpenPPL_NutFullHouseOrFourOfAKind_FourOfAKindOnBoard :
f$OpenPPL_FullHouseOnBoard ? f$OpenPPL_NutFullHouseOrFourOfAKind_FullHouseOnBoard :
f$OpenPPL_TripsOnBoard     ? f$OpenPPL_NutFullHouseOrFourOfAKind_ThreeOfAKindOnBoard :
f$OpenPPL_TwoPairOnBoard   ? f$OpenPPL_NutFullHouseOrFourOfAKind_TwoPairsOnBoard :
f$OpenPPL_PairOnBoard      ? f$OpenPPL_NutFullHouseOrFourOfAKind_PairOnBoard :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_Overcards##
((f$OpenPPL_RankOfFirstHoleCard > rankhicommon)  && (f$OpenPPL_RankOfSecondHoleCard > rankhicommon))  ? 2 :
((f$OpenPPL_RankOfFirstHoleCard > rankhicommon)  || (f$OpenPPL_RankOfSecondHoleCard > rankhicommon))  ? 1 :
((f$OpenPPL_RankOfFirstHoleCard <= rankhicommon) && (f$OpenPPL_RankOfSecondHoleCard <= rankhicommon)) ? 0 : 0

##f$OpenPPL_PairInHand##
ispair

##f$OpenPPL_SuitsInHand##
($$ps0 == $$ps1) ? 1 :
($$ps0 != $$ps1) ? 2 :
0

//*****************************************************************************
//
// OpenPPL - Other Symbols
//
//*****************************************************************************

##f$OpenPPL_IsFinalTable##
// To be implemented by OpenHoldem 2.2.0
// Currently returning always false (OH 2.1.9.3+)
//
isfinaltable

##f$OpenPPL_Others##
// Always true
1

##f$OpenPPL_FloatingPointRandom_0_100##
// OpenHoldem uses floating point numbers
// and random is in the range [0..1]
// But for OpenPPL we need a range of [0..100]
[ random * 100 ]

##f$OpenPPL_IntegerRandom_0_100##
// Cutting of the fractional part of the random number is tricky.
// We do a bitwise XOR with 0, which doesn't change anything,
// but to evaluate the expression OpenHoldem internally truncates the number 
// to integer (bit-vector).
(f$OpenPPL_FloatingPointRandom_0_100 ^ 0)

##f$OpenPPL_Random##
f$OpenPPL_IntegerRandom_0_100

//*****************************************************************************
//
// OpenPPL - Players and Opponents
//
//*****************************************************************************

##f$OpenPPL_PlayersAtStartOfThisRound##
(betround == f$OpenPPL_ConstBetRoundPreflop) ? nplayersround1 :
(betround == f$OpenPPL_ConstBetRoundFlop)    ? nplayersround2 :
(betround == f$OpenPPL_ConstBetRoundTurn)    ? nplayersround3 :
(betround == f$OpenPPL_ConstBetRoundRiver)   ? nplayersround4 :
f$OpenPPL_ERROR_Betround_Out_Of_Range

##f$OpenPPL_Opponents##
f$OpenPPL_OpponentsLeft

##f$OpenPPL_OpponentsAtTable##
nopponentsdealt

##f$OpenPPL_NumberOfOpponentsAllin##
`f$OpenPPL_Opponents_AllinBits

##f$OpenPPL_OpponentIsAllin##
f$OpenPPL_NumberOfOpponentsAllin > 0

##f$OpenPPL_Opponents_AllinBits##
(betround == f$OpenPPL_ConstBetRoundPreflop) ?
[0
|(((opponentsplayingbits & (1 << 0)) && (currentbet0 > 0) && (balance0 == 0)) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && (currentbet1 > 0) && (balance1 == 0)) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && (currentbet2 > 0) && (balance2 == 0)) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && (currentbet3 > 0) && (balance3 == 0)) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && (currentbet4 > 0) && (balance4 == 0)) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && (currentbet5 > 0) && (balance5 == 0)) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && (currentbet6 > 0) && (balance6 == 0)) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && (currentbet7 > 0) && (balance7 == 0)) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && (currentbet8 > 0) && (balance8 == 0)) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && (currentbet9 > 0) && (balance9 == 0)) ? 1 << 9 : 0)
]
:
[0
|(((opponentsplayingbits & (1 << 0)) && balance0 == 0) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && balance1 == 0) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && balance2 == 0) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && balance3 == 0) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && balance4 == 0) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && balance5 == 0) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && balance6 == 0) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && balance7 == 0) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && balance8 == 0) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && balance9 == 0) ? 1 << 9 : 0)
]

##f$OpenPPL_OpponentsLeft##
// Does also consider players who are allin 
// (contrary to Shankys, who consider players allin in this round, but not from previous rounds).
nopponentsplaying

##f$OpenPPL_OpponentsOnFlop##
(nplayersround2 - 1)

##f$OpenPPL_OpponentsWithLowerStack##
  (((balance0 + currentbet0) < (balance + currentbet)) && (playersseatedbits & 0x0001) ? 1:0)
+ (((balance1 + currentbet1) < (balance + currentbet)) && (playersseatedbits & 0x0002) ? 1:0)
+ (((balance2 + currentbet2) < (balance + currentbet)) && (playersseatedbits & 0x0004) ? 1:0)
+ (((balance3 + currentbet3) < (balance + currentbet)) && (playersseatedbits & 0x0008) ? 1:0)
+ (((balance4 + currentbet4) < (balance + currentbet)) && (playersseatedbits & 0x0010) ? 1:0)
+ (((balance5 + currentbet5) < (balance + currentbet)) && (playersseatedbits & 0x0020) ? 1:0)
+ (((balance6 + currentbet6) < (balance + currentbet)) && (playersseatedbits & 0x0040) ? 1:0)
+ (((balance7 + currentbet7) < (balance + currentbet)) && (playersseatedbits & 0x0080) ? 1:0)
+ (((balance8 + currentbet8) < (balance + currentbet)) && (playersseatedbits & 0x0100) ? 1:0)
+ (((balance9 + currentbet9) < (balance + currentbet)) && (playersseatedbits & 0x0200) ? 1:0)

##f$OpenPPL_StillToActPreflop##
// Precondition: first action, but this gets checked in StillToAct
f$OpenPPL_InBigBlind ? 0 :
f$OpenPPL_InSmallBlind ? 1 :
// Not in the blinds
(f$OpenPPL_MissingSmallBlind > 0) ? (nchairsdealtleft + 1) :
(nchairsdealtleft + 2)

##f$OpenPPL_StillToActPostflop##
// Precondition: first action, but this gets checked in StillToAct
((f$OpenPPL_OpponentsLeft + 1) - betposition)

##f$OpenPPL_StillToAct##
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0) ? f$OpenPPL_HINT_StillToAct_Is_Only_Valid_On_First_Orbit :
((betround == f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)) ? f$OpenPPL_StillToActPreflop:
((betround != f$OpenPPL_ConstBetRoundPreflop) && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)) ? f$OpenPPL_StillToActPostflop:
0

//*****************************************************************************
//
// OpenPPL - Position Symbols
//
//*****************************************************************************

// Standard PPL accepts two spellings for the position symbols
// "In BigBlind" and "InBigBlind", "In Button" and "InButton", ...
// Our parser is able to ignore the fillerword "In ",
// but to be more user-friendly and to simplify the converter (less error-handling)
// we decided to provide both forms of naming in the library.

##f$OpenPPL_SmallBlind##
(dealposition == 1)

##f$OpenPPL_BigBlind##
(dealposition == 2)

##f$OpenPPL_Button##
// If the game in not 10-handed, some positions would be both "normal" and in the blinds.
// E.g. for a 9-handed game big-blind would also be counted as EarlyPosition1.
// Therefore we check for "Not InTheBlinds", except for button,
// because "InButton" makes sense even if the game is headsup.
(dealposition == nplayersdealt)

##f$OpenPPL_CutOff##
[(dealposition == nplayersdealt - 1) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition3##
[(dealposition == nplayersdealt - 2) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition2##
[(dealposition == nplayersdealt - 3) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_MiddlePosition1##
[(dealposition == nplayersdealt - 4) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition3##
[(dealposition == nplayersdealt - 5) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition2##
[(dealposition == nplayersdealt - 6) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_EarlyPosition1##
[(dealposition == nplayersdealt - 7) && !f$OpenPPL_InTheBlinds]

##f$OpenPPL_UTG##
// Under the gun - first to act preflop, 
// independent of the players at the table (at least 3).
// This symbols is especially useful to sitout 
// after the last hand of a session (before the next blind).
f$OpenPPL_MissingSmallBlind ? (dealposition == 2) :
(dealposition == 3)

##f$OpenPPL_InSmallBlind##
f$OpenPPL_SmallBlind

##f$OpenPPL_InBigBlind##
f$OpenPPL_BigBlind

##f$OpenPPL_TheBlinds##
// To be used: In TheBlinds
f$OpenPPL_InTheBlinds

##f$OpenPPL_InTheBlinds##
(f$OpenPPL_InSmallBlind || f$OpenPPL_InBigBlind)

##f$OpenPPL_EarlyPosition##
f$OpenPPL_InEarlyPosition

##f$OpenPPL_InEarlyPosition##
(f$OpenPPL_InEarlyPosition1 || f$OpenPPL_InEarlyPosition2 || f$OpenPPL_InEarlyPosition3)

##f$OpenPPL_MiddlePosition##
f$OpenPPL_InMiddlePosition

##f$OpenPPL_InMiddlePosition##
(f$OpenPPL_InMiddlePosition1 || f$OpenPPL_InMiddlePosition2 || f$OpenPPL_InMiddlePosition3)

##f$OpenPPL_LatePosition##
f$OpenPPL_InLatePosition

##f$OpenPPL_InLatePosition##
(f$OpenPPL_InCutOff || f$OpenPPL_InButton)

##f$OpenPPL_InButton##
f$OpenPPL_Button

##f$OpenPPL_InCutOff##
f$OpenPPL_CutOff

##f$OpenPPL_InMiddlePosition3##
f$OpenPPL_MiddlePosition3

##f$OpenPPL_InMiddlePosition2##
f$OpenPPL_MiddlePosition2

##f$OpenPPL_InMiddlePosition1##
f$OpenPPL_MiddlePosition1

##f$OpenPPL_InEarlyPosition3##
f$OpenPPL_EarlyPosition3

##f$OpenPPL_InEarlyPosition2##
f$OpenPPL_EarlyPosition2

##f$OpenPPL_InEarlyPosition1##
f$OpenPPL_EarlyPosition1

##f$OpenPPL_InUTG##
f$OpenPPL_UTG

##f$OpenPPL_TrueDealPositionOfBigBlind##
f$OpenPPL_MissingSmallBlind ? 1 : 2

##f$OpenPPL_BigBlindChair##
ac_dealpos0 == f$OpenPPL_TrueDealPositionOfBigBlind ? 0 :
ac_dealpos1 == f$OpenPPL_TrueDealPositionOfBigBlind ? 1 :
ac_dealpos2 == f$OpenPPL_TrueDealPositionOfBigBlind ? 2 :
ac_dealpos3 == f$OpenPPL_TrueDealPositionOfBigBlind ? 3 :
ac_dealpos4 == f$OpenPPL_TrueDealPositionOfBigBlind ? 4 :
ac_dealpos5 == f$OpenPPL_TrueDealPositionOfBigBlind ? 5 :
ac_dealpos6 == f$OpenPPL_TrueDealPositionOfBigBlind ? 6 :
ac_dealpos7 == f$OpenPPL_TrueDealPositionOfBigBlind ? 7 :
ac_dealpos8 == f$OpenPPL_TrueDealPositionOfBigBlind ? 8 :
ac_dealpos9 == f$OpenPPL_TrueDealPositionOfBigBlind ? 9 :
f$OpenPPL_ERROR_BigBlindChair_Not_Recognized__Check_Your_TableMap
  

##f$OpenPPL_SmallBlindChair##
f$OpenPPL_MissingSmallBlind ? f$OpenPPL_HINT_There_Is_No_SmallNlind_In_This_Game :
ac_dealpos0 == 1 ? 0 :
ac_dealpos1 == 1 ? 1 :
ac_dealpos2 == 1 ? 2 :
ac_dealpos3 == 1 ? 3 :
ac_dealpos4 == 1 ? 4 :
ac_dealpos5 == 1 ? 5 :
ac_dealpos6 == 1 ? 6 :
ac_dealpos7 == 1 ? 7 :
ac_dealpos8 == 1 ? 8 :
ac_dealpos9 == 1 ? 9 :
f$OpenPPL_ERROR_SmallBlindChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_ButtonChair##
// We ignore the case of headsup,
// where button = small blind or button = big blind,
// as this seems to be different for each casino.
// For us: button = bigblind, if the game is headsup.
ac_dealpos0 == nplayersdealt ? 0 :
ac_dealpos1 == nplayersdealt ? 1 :
ac_dealpos2 == nplayersdealt ? 2 :
ac_dealpos3 == nplayersdealt ? 3 :
ac_dealpos4 == nplayersdealt ? 4 :
ac_dealpos5 == nplayersdealt ? 5 :
ac_dealpos6 == nplayersdealt ? 6 :
ac_dealpos7 == nplayersdealt ? 7 :
ac_dealpos8 == nplayersdealt ? 8 :
ac_dealpos9 == nplayersdealt ? 9 :
f$OpenPPL_ERROR_ButtonChair_Not_Recognized__Check_Your_TableMap

##f$OpenPPL_CutOffChair##
// We have to make sure, that the userchair in question is not a blind,
// which would be the case for CutOff, if the game was 3-handed.
// For 3-handed games "CutOff" = BigBlind, but blinds take priority.
// We could test for dealposition > 2, but counting players is more simple.
(nplayersdealt <= 3) ? f$OpenPPL_HINT_CutOff_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 1) ? 0 :
ac_dealpos1 == (nplayersdealt - 1) ? 1 :
ac_dealpos2 == (nplayersdealt - 1) ? 2 :
ac_dealpos3 == (nplayersdealt - 1) ? 3 :
ac_dealpos4 == (nplayersdealt - 1) ? 4 :
ac_dealpos5 == (nplayersdealt - 1) ? 5 :
ac_dealpos6 == (nplayersdealt - 1) ? 6 :
ac_dealpos7 == (nplayersdealt - 1) ? 7 :
ac_dealpos8 == (nplayersdealt - 1) ? 8 :
ac_dealpos9 == (nplayersdealt - 1) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition3Chair##
(nplayersdealt <= 4) ? f$OpenPPL_HINT_MiddlePosition3_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 2) ? 0 :
ac_dealpos1 == (nplayersdealt - 2) ? 1 :
ac_dealpos2 == (nplayersdealt - 2) ? 2 :
ac_dealpos3 == (nplayersdealt - 2) ? 3 :
ac_dealpos4 == (nplayersdealt - 2) ? 4 :
ac_dealpos5 == (nplayersdealt - 2) ? 5 :
ac_dealpos6 == (nplayersdealt - 2) ? 6 :
ac_dealpos7 == (nplayersdealt - 2) ? 7 :
ac_dealpos8 == (nplayersdealt - 2) ? 8 :
ac_dealpos9 == (nplayersdealt - 2) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition2Chair##
(nplayersdealt <= 5) ? f$OpenPPL_HINT_MiddlePosition2_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 3) ? 0 :
ac_dealpos1 == (nplayersdealt - 3) ? 1 :
ac_dealpos2 == (nplayersdealt - 3) ? 2 :
ac_dealpos3 == (nplayersdealt - 3) ? 3 :
ac_dealpos4 == (nplayersdealt - 3) ? 4 :
ac_dealpos5 == (nplayersdealt - 3) ? 5 :
ac_dealpos6 == (nplayersdealt - 3) ? 6 :
ac_dealpos7 == (nplayersdealt - 3) ? 7 :
ac_dealpos8 == (nplayersdealt - 3) ? 8 :
ac_dealpos9 == (nplayersdealt - 3) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_MiddlePosition1Chair##
(nplayersdealt <= 6) ? f$OpenPPL_HINT_MiddlePosition1_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 4) ? 0 :
ac_dealpos1 == (nplayersdealt - 4) ? 1 :
ac_dealpos2 == (nplayersdealt - 4) ? 2 :
ac_dealpos3 == (nplayersdealt - 4) ? 3 :
ac_dealpos4 == (nplayersdealt - 4) ? 4 :
ac_dealpos5 == (nplayersdealt - 4) ? 5 :
ac_dealpos6 == (nplayersdealt - 4) ? 6 :
ac_dealpos7 == (nplayersdealt - 4) ? 7 :
ac_dealpos8 == (nplayersdealt - 4) ? 8 :
ac_dealpos9 == (nplayersdealt - 4) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition3Chair##
(nplayersdealt <= 7) ? f$OpenPPL_HINT_EarlyPosition3_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 5) ? 0 :
ac_dealpos1 == (nplayersdealt - 5) ? 1 :
ac_dealpos2 == (nplayersdealt - 5) ? 2 :
ac_dealpos3 == (nplayersdealt - 5) ? 3 :
ac_dealpos4 == (nplayersdealt - 5) ? 4 :
ac_dealpos5 == (nplayersdealt - 5) ? 5 :
ac_dealpos6 == (nplayersdealt - 5) ? 6 :
ac_dealpos7 == (nplayersdealt - 5) ? 7 :
ac_dealpos8 == (nplayersdealt - 5) ? 8 :
ac_dealpos9 == (nplayersdealt - 5) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition2Chair##
(nplayersdealt <= 8) ? f$OpenPPL_HINT_EarlyPosition2_Does_Not_Exist :
(ac_dealpos0 == (nplayersdealt - 6)) ? 0 :
(ac_dealpos1 == (nplayersdealt - 6)) ? 1 :
(ac_dealpos2 == (nplayersdealt - 6)) ? 2 :
(ac_dealpos3 == (nplayersdealt - 6)) ? 3 :
(ac_dealpos4 == (nplayersdealt - 6)) ? 4 :
(ac_dealpos5 == (nplayersdealt - 6)) ? 5 :
(ac_dealpos6 == (nplayersdealt - 6)) ? 6 :
(ac_dealpos7 == (nplayersdealt - 6)) ? 7 :
(ac_dealpos8 == (nplayersdealt - 6)) ? 8 :
(ac_dealpos9 == (nplayersdealt - 6)) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_EarlyPosition1Chair##
(nplayersdealt <= 9) ? f$OpenPPL_HINT_EarlyPosition1_Does_Not_Exist :
ac_dealpos0 == (nplayersdealt - 7) ? 0 :
ac_dealpos1 == (nplayersdealt - 7) ? 1 :
ac_dealpos2 == (nplayersdealt - 7) ? 2 :
ac_dealpos3 == (nplayersdealt - 7) ? 3 :
ac_dealpos4 == (nplayersdealt - 7) ? 4 :
ac_dealpos5 == (nplayersdealt - 7) ? 5 :
ac_dealpos6 == (nplayersdealt - 7) ? 6 :
ac_dealpos7 == (nplayersdealt - 7) ? 7 :
ac_dealpos8 == (nplayersdealt - 7) ? 8 :
ac_dealpos9 == (nplayersdealt - 7) ? 9 :
f$OpenPPL_ERROR_THIS_SHOULD_NOT_HAPPEN__THERE_SEEMS_TO_BE_A_PROBLEM_IN_THE_LIBRARY

##f$OpenPPL_DealPositionLastRaiser##
// This function does also count blind-raisers.
(f$OpenPPL_AggressorChair == 0) ? ac_dealpos0 :
(f$OpenPPL_AggressorChair == 1) ? ac_dealpos1 :
(f$OpenPPL_AggressorChair == 2) ? ac_dealpos2 :
(f$OpenPPL_AggressorChair == 3) ? ac_dealpos3 :
(f$OpenPPL_AggressorChair == 4) ? ac_dealpos4 :
(f$OpenPPL_AggressorChair == 5) ? ac_dealpos5 :
(f$OpenPPL_AggressorChair == 6) ? ac_dealpos6 :
(f$OpenPPL_AggressorChair == 7) ? ac_dealpos7 :
(f$OpenPPL_AggressorChair == 8) ? ac_dealpos8 :
(f$OpenPPL_AggressorChair == 9) ? ac_dealpos9 :
f$OpenPPL_HINT_There_Are_No_True_Raisers

##f$OpenPPL_EarlyPosition1Calling##
(callbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1

##f$OpenPPL_EarlyPosition2Calling##
(callbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1

##f$OpenPPL_EarlyPosition3Calling##
(callbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1

##f$OpenPPL_MiddlePosition1Calling##
(callbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1

##f$OpenPPL_MiddlePosition2Calling##
(callbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1

##f$OpenPPL_MiddlePosition3Calling##
(callbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1

##f$OpenPPL_CutOffCalling##
(callbits1 >> f$OpenPPL_CutOffChair) & 1 == 1

##f$OpenPPL_ButtonCalling##
(callbits1 >> f$OpenPPL_ButtonChair) & 1 == 1

##f$OpenPPL_SmallBlindCalling##
(callbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1

##f$OpenPPL_BigBlindCalling##
(callbits1 >> f$OpenPPL_BigBlindChair) & 11 == 1

##f$OpenPPL_EarlyPosition1Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition2Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition3Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition1Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition2Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition3Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1]

##f$OpenPPL_CutOffRaising##
[(raisbits1 >> f$OpenPPL_CutOffChair) & 1 == 1]

##f$OpenPPL_ButtonRaising##
[(raisbits1 >> f$OpenPPL_ButtonChair) & 1 == 1]

##f$OpenPPL_SmallBlindRaising##
   [(raisbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1]
&& [f$OpenPPL_SmallBlindCurrentBet >= 0.51]

##f$OpenPPL_BigBlindRaising##
   [(raisbits1 >> f$OpenPPL_BigBlindChair) & 1 == 1]
&& [f$OpenPPL_BigBlindCurrentBet >= 1.01]

##f$OpenPPL_FirstCallerPosition##
// We have to search starting from early positions,
// as we want to detect the first one.
f$OpenPPL_EarlyPosition1Calling  ? 9 :
f$OpenPPL_EarlyPosition2Calling  ? 8 :
f$OpenPPL_EarlyPosition3Calling  ? 7 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_CutOffCalling          ? 3 :
f$OpenPPL_ButtonCalling          ? 2 :
f$OpenPPL_SmallBlindCalling      ? 1 :
// Can't be big blind (0), as it is for the first orbit preflop only
-1

##f$OpenPPL_FirstRaiserPosition##
// We have to search starting from early positions,
// as we want to detect the first one.
f$OpenPPL_EarlyPosition1Raising  ? 9 :
f$OpenPPL_EarlyPosition2Raising  ? 8 :
f$OpenPPL_EarlyPosition3Raising  ? 7 :
f$OpenPPL_MiddlePosition1Raising ? 6 :
f$OpenPPL_MiddlePosition2Raising ? 5 :
f$OpenPPL_MiddlePosition3Raising ? 4 :
f$OpenPPL_CutOffRaising          ? 3 :
f$OpenPPL_ButtonRaising          ? 2 :
f$OpenPPL_SmallBlindRaising ? 1 :
// Can't be big blind (0), as it is for the first orbit preflop only
-1

##f$OpenPPL_LastCallerPosition##
// Can't be big blind (0), as it is for the first orbit preflop only
f$OpenPPL_SmallBlindCalling      ? 1 :
f$OpenPPL_ButtonCalling          ? 2 :
f$OpenPPL_CutOffCalling          ? 3 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_EarlyPosition3Calling  ? 7 :
f$OpenPPL_EarlyPosition2Calling  ? 8 :
f$OpenPPL_EarlyPosition1Calling  ? 9 :
-1

##f$OpenPPL_LastRaiserPosition##
// Handling the case of blind-raisers only first
[(betround == f$OpenPPL_ConstBetRoundPreflop) && (ncallbets <= 1)] ? f$OpenPPL_HINT_There_Are_No_True_Raisers :
// Big blind = 0
f$OpenPPL_BigBlindRaising ? 0 :
// Small blind = 1
f$OpenPPL_SmallBlindRaising ? 1 :
// Normal players:
// Button = 2, CutOff = 3, ...
(nplayersdealt - f$OpenPPL_DealPositionLastRaiser + 2)

##f$OpenPPL_First##
0

##f$OpenPPL_Middle##
1

##f$OpenPPL_Last##
2

##f$OpenPPL_Position##
(betposition == 1) ? f$OpenPPL_First :
(betposition == nplayersplaying) ? f$OpenPPL_Last :
f$OpenPPL_Middle

//*****************************************************************************
//
// OpenPPL - Poker Tracker Symbols
//
//*****************************************************************************

##f$OpenPPL_PT_LastRaiser_PFR##
(raischair != -1) ? pt_rpfr : -1

##f$OpenPPL_PT_LastRaiser_VPIP##
(raischair != -1) ? pt_rvpip : -1

##f$OpenPPL_PT_LastRaiser_AttemptToStealBlinds##
(raischair != -1) ? pt_rpfats : -1

##f$OpenPPL_PT_BigBlind_FoldBBToSteal##
f$OpenPPL_BigBlindChair == 0 ? pt_fbbts0 :
f$OpenPPL_BigBlindChair == 1 ? pt_fbbts1 :
f$OpenPPL_BigBlindChair == 2 ? pt_fbbts2 :
f$OpenPPL_BigBlindChair == 3 ? pt_fbbts3 :
f$OpenPPL_BigBlindChair == 4 ? pt_fbbts4 :
f$OpenPPL_BigBlindChair == 5 ? pt_fbbts5 :
f$OpenPPL_BigBlindChair == 6 ? pt_fbbts6 :
f$OpenPPL_BigBlindChair == 7 ? pt_fbbts7 :
f$OpenPPL_BigBlindChair == 8 ? pt_fbbts8 :
f$OpenPPL_BigBlindChair == 9 ? pt_fbbts9 :
-1

##f$OpenPPL_PT_SmallBlind_VPIP##
f$OpenPPL_SmallBlindChair == 0 ? pt_vpip0 :
f$OpenPPL_SmallBlindChair == 1 ? pt_vpip1 :
f$OpenPPL_SmallBlindChair == 2 ? pt_vpip2 :
f$OpenPPL_SmallBlindChair == 3 ? pt_vpip3 :
f$OpenPPL_SmallBlindChair == 4 ? pt_vpip4 :
f$OpenPPL_SmallBlindChair == 5 ? pt_vpip5 :
f$OpenPPL_SmallBlindChair == 6 ? pt_vpip6 :
f$OpenPPL_SmallBlindChair == 7 ? pt_vpip7 :
f$OpenPPL_SmallBlindChair == 8 ? pt_vpip8 :
f$OpenPPL_SmallBlindChair == 9 ? pt_vpip9 :
-1


//*****************************************************************************
//
// OpenPPL - Initialization of memory symbols
//
// For history symbols and other information,
// that can't be retrieved from OH-symbols
// and from the current gamestate only.
//
//*****************************************************************************

##f$OpenPPL_TimeToInitMemorySymbols##
// Some advanced symbols depend on memory symbols.
// They are designed to update once per orbit on our turn.
// However: depending on user-settings OpenHoldem might evaluate
// the necessary function even when it is not our turn.
// And incorrect delay-settings might also lead to multiple actions
// on identical frames (OH acts faster as casino/bring can update)
// So we check for isfinalanswer and a changed gamestate.
[isfinalanswer && f$OpenPPL_GameStateChanged]

##f$OpenPPL_HandResetHappened##
[   (betround == f$OpenPPL_ConstBetRoundPreflop) 
 && (f$OpenPPL_BotsActionsOnThisRoundIncludingChecks == 0)]

##f$OpenPPL_ResetUserVariablesOnHandReset##
// f$OpenPPL_ResetUserVariables
// will be auto-generated by the translator.
f$OpenPPL_HandResetHappened ? f$OpenPPL_ResetUserVariables : f$OpenPPL_HINT_Nothing_To_Do_But_All_OK

##f$OpenPPL_GameStateChanged##
// Change in dealerchair => new hand
   (dealerchair != me_re_MemOldGameStateEealerChair)
// Change in currentbet => we did act 
// and the autoplayer executed sucessfully   
|| (currentbet  != me_re_MemOldGameStateCurrentBet)
// Change in potsize: somebody else behind us acted, 
// so we checked or folded sucessfully
|| (pot			!= me_re_MemOldGameStatePotSize)

##f$OpenPPL_RememberCurrentGameState##
   (me_st_MemOldGameStateEealerChair_dealerchair * 0)
|| (me_st_MemOldGameStateCurrentBet_currentbet   * 0)
|| (me_re_MemOldGameStatePotSize_pot             * 0)

##f$OpenPPL_InitMemorySymbols##
(f$OpenPPL_TimeToInitMemorySymbols == f$OpenPPL_False) ? 0 :
// We can't use addition here to call the functions in correct sequential order,
// because OH doesn't add the operands in order:
// http://www.maxinmontreal.com/forums/viewtopic.php?f=111&t=14525&start=0
   [f$OpenPPL_InitMissingSmallBlind * 0]
|| [f$OpenPPL_InitBets * 0]
|| [f$OpenPPL_InitChecks * 0]
|| [f$OpenPPL_InitCalls * 0]
|| [f$OpenPPL_InitRaises * 0]
|| [f$OpenPPL_InitBotsLastPreflopAction * 0]
|| [f$OpenPPL_InitRaisesBeforeFlop * 0]
|| [f$OpenPPL_InitRaisesOnFlop * 0]
|| [f$OpenPPL_InitRaisesOnTurn * 0]
|| [f$OpenPPL_InitMaxOpponentStackSize * 0]
|| [f$OpenPPL_InitMinOpponentStackSize * 0]
|| [f$OpenPPL_InitStartingStackSize * 0]
|| [f$OpenPPL_RememberCurrentGameState * 0]
|| [f$OpenPPL_ResetUserVariablesOnHandReset * 0]
//
// InitBotsLastAction has to be the last init-function to be called
// because it will call the final f$Decision routine.
//
|| [f$OpenPPL_InitBotsLastAction * 0]

//*****************************************************************************
//
// OpenPPL - Various functions of minor importance or to do
//
//*****************************************************************************

##f$OpenPPL_NOT_YET_IMPLEMENTED_YOUR_HELP_IS_REQUIRED##
-1

##f$OpenPPL_HaveBackdoorStraightDraw##
f$OpenPPL_NOT_YET_IMPLEMENTED_YOUR_HELP_IS_REQUIRED

//*****************************************************************************
//
// OpenPPL - the glory end
//
//*****************************************************************************
//*****************************************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://bonusbots.com/support/index.php
//
// Required OpenHoldem version: 2.2.0 or later
//   Symbols not working with 2.1.x:
//     * isfinaltable
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Fn101
//   Gecko
//   JConner
//   JokeDoke
//   KaeKruse
//   Kyo
//   Lavezzi
//   MerzkiyTipon
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Postenjak
//   Rambam
//   Satanikut
//   Stangelnator
//   SteveG1963
//   Strikles
//   SuperBlak
//   TheHighFish
//   ThemAndMe
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
//  OpenPPL - Swag Functions
//  ========================
//
//  Swag-functions for OpenHoldem 2.1.x only.
//  Please delete this file once you use OpenHoldem 2.2.0 and later.
//
//  Swagging (swag = stated wager, a Ray-E.-Bornesian abbreviation)
//  was the old way to handle NL-betsizing.
//  It got replaced by a single f$betsize function in OH 2.2.0
//  and OpenHoldem handles now all adjustments of the betsize to the casino
//  and all other technical things automatically.
//
//*****************************************************************************

##f$OpenPPL_MinimumRaiseAllowed##
// Final betsize if we raise by the minimum.
// Aamount in dollars.
(currentbet + call + sraimin)

##f$OpenPPL_BetSizeAdjustedToMinimumRaise##
// Aamount in dollars.
(f$betsize < f$OpenPPL_MinimumRaiseAllowed) ? f$OpenPPL_MinimumRaiseAllowed :
f$betsize

##f$OpenPPL_PotLimitPotSize##
// The pot for potsize calculations is the current pot plus the amount if we call
// Amount in dollars
(pot + call)

##f$OpenPPL_BetSizeAdjustedToGameType##
// In pot-limit we can only raise by pot-size ;-)
// Aamount in dollars.
[ispl && (f$OpenPPL_BetSizeAdjustedToMinimumRaise > 2 * f$OpenPPL_PotLimitPotSize)] ?
(2 * f$OpenPPL_PotLimitPotSize) : f$OpenPPL_BetSizeAdjustedToMinimumRaise

##f$OpenPPL_BetSizeAdjustedToUsersBalance##
// Aamount in dollars.
(f$OpenPPL_BetSizeAdjustedToGameType > (balance + currentbet)) ?
(balance + currentbet) : f$OpenPPL_BetSizeAdjustedToGameType

##f$OpenPPL_BetSizeAdjustedToCasinosInputRequirements##
// There are 3 different ways, how casinos treat swagged input.
//
// Swag means, the casino will interpret the amount as
// 1) f$srai
// 2) f$srai+call
// 3) f$srai+call+currentbet
// As our f$betsize function treats case X as normal and not case 1,
// we have to do some small calculations in the other direction.
(swagtextmethod == 1) ? f$OpenPPL_BetSizeAdjustedToUsersBalance :
(swagtextmethod == 2) ? [f$OpenPPL_BetSizeAdjustedToUsersBalance - call] :
(swagtextmethod == 3) ? [f$OpenPPL_BetSizeAdjustedToUsersBalance - call - currentbet] :
// This should not happen, but we default to 1)
f$OpenPPL_BetSizeAdjustedToUsersBalance

##f$OpenPPL_HINT_No_NL_BetSizing_In_A_FL_Game##
0

